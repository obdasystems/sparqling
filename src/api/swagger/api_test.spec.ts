/**
 * Swagger Sparqling WS
 * This server will expose an API to Sparqling front end to create new SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape) graph.  Sparqling will be released as a standalone appication but also the server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling will be integrated in [Monolith](https://www.monolith.obdasystems.com/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@obdasystems.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("OntologyGraphApi", () => {
  let instance: api.OntologyGraphApi
  beforeEach(function() {
    instance = new api.OntologyGraphApi(config)
  });

  test("highligths", () => {
    const clickedClassIRI: string = "clickedClassIRI_example"
    const params: Array<string> = undefined
    return expect(instance.highligths(clickedClassIRI, params, {})).resolves.toBe(null)
  })
  test("highligthsPaths", () => {
    const lastSelectedIRI: string = "lastSelectedIRI_example"
    const clickedIRI: string = "clickedIRI_example"
    return expect(instance.highligthsPaths(lastSelectedIRI, clickedIRI, {})).resolves.toBe(null)
  })
})

describe("QueryGraphApi", () => {
  let instance: api.QueryGraphApi
  beforeEach(function() {
    instance = new api.QueryGraphApi(config)
  });

  test("addHeadTerm", () => {
    const body: api.QueryGraph = undefined
    const graphElementId: string = "graphElementId_example"
    return expect(instance.addHeadTerm(body, graphElementId, {})).resolves.toBe(null)
  })
  test("addPathToQueryGraph", () => {
    const body: api.QueryGraph = undefined
    const path: string = "path_example"
    return expect(instance.addPathToQueryGraph(body, path, {})).resolves.toBe(null)
  })
  test("deleteGraphElementId", () => {
    const body: api.QueryGraph = undefined
    const graphElementId: string = "graphElementId_example"
    return expect(instance.deleteGraphElementId(body, graphElementId, {})).resolves.toBe(null)
  })
  test("deleteHeadTerm", () => {
    const body: api.QueryGraph = undefined
    const headTerm: string = "headTerm_example"
    return expect(instance.deleteHeadTerm(body, headTerm, {})).resolves.toBe(null)
  })
  test("getQueryGraph", () => {
    const clickedClassIRI: string = "clickedClassIRI_example"
    return expect(instance.getQueryGraph(clickedClassIRI, {})).resolves.toBe(null)
  })
  test("modifyFilters", () => {
    const body: api.QueryGraph = undefined
    return expect(instance.modifyFilters(body, {})).resolves.toBe(null)
  })
  test("putQueryGraphClass", () => {
    const body: api.QueryGraph = undefined
    const sourceClassIRI: string = "sourceClassIRI_example"
    const targetClassIRI: string = "targetClassIRI_example"
    const graphElementId: string = "graphElementId_example"
    return expect(instance.putQueryGraphClass(body, sourceClassIRI, targetClassIRI, graphElementId, {})).resolves.toBe(null)
  })
  test("putQueryGraphDataProperty", () => {
    const body: api.QueryGraph = undefined
    const sourceClassIRI: string = "sourceClassIRI_example"
    const predicateIRI: string = "predicateIRI_example"
    const graphElementId: string = "graphElementId_example"
    return expect(instance.putQueryGraphDataProperty(body, sourceClassIRI, predicateIRI, graphElementId, {})).resolves.toBe(null)
  })
  test("putQueryGraphJoin", () => {
    const body: api.QueryGraph = undefined
    const graphElementId1: string = "graphElementId1_example"
    const graphElementId2: string = "graphElementId2_example"
    return expect(instance.putQueryGraphJoin(body, graphElementId1, graphElementId2, {})).resolves.toBe(null)
  })
  test("putQueryGraphObjectProperty", () => {
    const body: api.QueryGraph = undefined
    const sourceClassIRI: string = "sourceClassIRI_example"
    const predicateIRI: string = "predicateIRI_example"
    const targetClassIRI: string = "targetClassIRI_example"
    const isPredicateDirect: boolean = true
    const graphElementId: string = "graphElementId_example"
    return expect(instance.putQueryGraphObjectProperty(body, graphElementId, sourceClassIRI, predicateIRI, targetClassIRI, isPredicateDirect, {})).resolves.toBe(null)
  })
})

describe("StandaloneApi", () => {
  let instance: api.StandaloneApi
  beforeEach(function() {
    instance = new api.StandaloneApi(config)
  });

  test("standaloneOntologyGrapholGet", () => {
    return expect(instance.standaloneOntologyGrapholGet({})).resolves.toBe(null)
  })
  test("standaloneOntologyUploadPost", () => {
    const file: Blob = new Blob(["file_example"], { type: 'text/plain' })
    return expect(instance.standaloneOntologyUploadPost(file, {})).resolves.toBe(null)
  })
})

