/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Sparqling WS
 * This server will expose an API to Sparqling front end to create new SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape) graph.  Sparqling will be released as a standalone appication but also the server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling will be integrated in [Monolith](https://www.monolith.obdasystems.com/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Highlights } from '../models';
import { Paths } from '../models';
/**
 * OntologyGraphApi - axios parameter creator
 * @export
 */
export const OntologyGraphApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This route is used to highlight the negihbours of the selected class. The neighbours can be classes (brother classes or child classes), object properties (the class or one of his father partecipate or are typed to domain/range) or data properties (the class or one of its fathers partecipates or is typed to its domain).
         * @summary Get the IRIs of the ontology entities \"related\" to the clicked and selected.
         * @param {string} clickedClassIRI The IRI of the class just clicked on the GRAPHOLscape ontology graph
         * @param {Array&lt;string&gt;} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        highligths: async (clickedClassIRI: string, params?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clickedClassIRI' is not null or undefined
            if (clickedClassIRI === null || clickedClassIRI === undefined) {
                throw new RequiredError('clickedClassIRI','Required parameter clickedClassIRI was null or undefined when calling highligths.');
            }
            const localVarPath = `/highlights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clickedClassIRI !== undefined) {
                localVarQueryParameter['clickedClassIRI'] = clickedClassIRI;
            }

            if (params) {
                localVarQueryParameter['params'] = params;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The results should be based on Dijkstra algorithm for shortest paths. ISA wieght is 0 while role weight is 1.
         * @summary Find paths between selected class and clicked class.
         * @param {string} lastSelectedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
         * @param {string} clickedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        highligthsPaths: async (lastSelectedIRI: string, clickedIRI: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lastSelectedIRI' is not null or undefined
            if (lastSelectedIRI === null || lastSelectedIRI === undefined) {
                throw new RequiredError('lastSelectedIRI','Required parameter lastSelectedIRI was null or undefined when calling highligthsPaths.');
            }
            // verify required parameter 'clickedIRI' is not null or undefined
            if (clickedIRI === null || clickedIRI === undefined) {
                throw new RequiredError('clickedIRI','Required parameter clickedIRI was null or undefined when calling highligthsPaths.');
            }
            const localVarPath = `/highlights/paths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lastSelectedIRI !== undefined) {
                localVarQueryParameter['lastSelectedIRI'] = lastSelectedIRI;
            }

            if (clickedIRI !== undefined) {
                localVarQueryParameter['clickedIRI'] = clickedIRI;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OntologyGraphApi - functional programming interface
 * @export
 */
export const OntologyGraphApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This route is used to highlight the negihbours of the selected class. The neighbours can be classes (brother classes or child classes), object properties (the class or one of his father partecipate or are typed to domain/range) or data properties (the class or one of its fathers partecipates or is typed to its domain).
         * @summary Get the IRIs of the ontology entities \"related\" to the clicked and selected.
         * @param {string} clickedClassIRI The IRI of the class just clicked on the GRAPHOLscape ontology graph
         * @param {Array&lt;string&gt;} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async highligths(clickedClassIRI: string, params?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Highlights>> {
            const localVarAxiosArgs = await OntologyGraphApiAxiosParamCreator(configuration).highligths(clickedClassIRI, params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The results should be based on Dijkstra algorithm for shortest paths. ISA wieght is 0 while role weight is 1.
         * @summary Find paths between selected class and clicked class.
         * @param {string} lastSelectedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
         * @param {string} clickedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async highligthsPaths(lastSelectedIRI: string, clickedIRI: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paths>> {
            const localVarAxiosArgs = await OntologyGraphApiAxiosParamCreator(configuration).highligthsPaths(lastSelectedIRI, clickedIRI, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OntologyGraphApi - factory interface
 * @export
 */
export const OntologyGraphApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This route is used to highlight the negihbours of the selected class. The neighbours can be classes (brother classes or child classes), object properties (the class or one of his father partecipate or are typed to domain/range) or data properties (the class or one of its fathers partecipates or is typed to its domain).
         * @summary Get the IRIs of the ontology entities \"related\" to the clicked and selected.
         * @param {string} clickedClassIRI The IRI of the class just clicked on the GRAPHOLscape ontology graph
         * @param {Array&lt;string&gt;} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        highligths(clickedClassIRI: string, params?: Array<string>, options?: any): AxiosPromise<Highlights> {
            return OntologyGraphApiFp(configuration).highligths(clickedClassIRI, params, options).then((request) => request(axios, basePath));
        },
        /**
         * The results should be based on Dijkstra algorithm for shortest paths. ISA wieght is 0 while role weight is 1.
         * @summary Find paths between selected class and clicked class.
         * @param {string} lastSelectedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
         * @param {string} clickedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        highligthsPaths(lastSelectedIRI: string, clickedIRI: string, options?: any): AxiosPromise<Paths> {
            return OntologyGraphApiFp(configuration).highligthsPaths(lastSelectedIRI, clickedIRI, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OntologyGraphApi - object-oriented interface
 * @export
 * @class OntologyGraphApi
 * @extends {BaseAPI}
 */
export class OntologyGraphApi extends BaseAPI {
    /**
     * This route is used to highlight the negihbours of the selected class. The neighbours can be classes (brother classes or child classes), object properties (the class or one of his father partecipate or are typed to domain/range) or data properties (the class or one of its fathers partecipates or is typed to its domain).
     * @summary Get the IRIs of the ontology entities \"related\" to the clicked and selected.
     * @param {string} clickedClassIRI The IRI of the class just clicked on the GRAPHOLscape ontology graph
     * @param {Array&lt;string&gt;} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OntologyGraphApi
     */
    public highligths(clickedClassIRI: string, params?: Array<string>, options?: any) {
        return OntologyGraphApiFp(this.configuration).highligths(clickedClassIRI, params, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The results should be based on Dijkstra algorithm for shortest paths. ISA wieght is 0 while role weight is 1.
     * @summary Find paths between selected class and clicked class.
     * @param {string} lastSelectedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
     * @param {string} clickedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OntologyGraphApi
     */
    public highligthsPaths(lastSelectedIRI: string, clickedIRI: string, options?: any) {
        return OntologyGraphApiFp(this.configuration).highligthsPaths(lastSelectedIRI, clickedIRI, options).then((request) => request(this.axios, this.basePath));
    }
}
