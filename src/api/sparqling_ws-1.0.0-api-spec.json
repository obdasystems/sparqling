{
  "openapi": "3.0.1",
  "info": {
    "title": "Swagger Sparqling WS",
    "description": "This server will expose an API to Sparqling front end to create new SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape) graph. \nSparqling will be released as a standalone appication but also the server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling will be integrated in [Monolith](https://www.monolith.obdasystems.com/).",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "info@obdasystems.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:7979/sparqling/1.0.0"
    }
  ],
  "tags": [
    {
      "name": "OntologyGraph",
      "description": "Depending on the selected node and the clicked node the ontology graph will change the highlightments. These results will be used essentially by GRAPHOLscape."
    },
    {
      "name": "QueryGraph",
      "description": "Depending on the selected node and the clicked node the server will compute the query graph which will be rendered by Sparqling front end. These result will be used to render the query graph and the query head and the SPARQL code."
    },
    {
      "name": "Standalone",
      "description": "These routes will be used only for the standalone application."
    }
  ],
  "paths": {
    "/highlights": {
      "get": {
        "tags": [
          "OntologyGraph"
        ],
        "summary": "Get the IRIs of the ontology entities \"related\" to the clicked and selected.",
        "description": "This route is used to highlight the negihbours of the selected class. The neighbours can be classes (brother classes or child classes), object properties (the class or one of his father partecipate or are typed to domain/range) or data properties (the class or one of its fathers partecipates or is typed to its domain).",
        "operationId": "highligths",
        "parameters": [
          {
            "name": "clickedClassIRI",
            "in": "query",
            "description": "The IRI of the class just clicked on the GRAPHOLscape ontology graph",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Highlights"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IRI supplied",
            "content": {}
          },
          "404": {
            "description": "Entity not found",
            "content": {}
          }
        }
      }
    },
    "/highlights/paths": {
      "get": {
        "tags": [
          "OntologyGraph"
        ],
        "summary": "Find paths between selected class and clicked class.",
        "description": "The results should be based on Dijkstra algorithm for shortest paths. ISA wieght is 0 while role weight is 1.",
        "operationId": "highligthsPaths",
        "parameters": [
          {
            "name": "lastSelectedIRI",
            "in": "query",
            "description": "The IRI of the entity clicked on the GRAPHOLscape ontology graph",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clickedIRI",
            "in": "query",
            "description": "The IRI of the entity clicked on the GRAPHOLscape ontology graph",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paths"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IRI supplied",
            "content": {}
          },
          "404": {
            "description": "Entity not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/node": {
      "get": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "This is the first route to call in order to build the query graph.",
        "description": "Starting from only the clicked class get the query graph that will be rendered by Sparqling, the query head, the sparql code. The sparql query returned will be somthing like `select ?x { ?x a <clickedClassIRI>` }. The variable `?x` should be called according to the entity remainder or label. The variable will be added to the head of the query in order to create a valid SPARQL query.",
        "operationId": "getQueryGraph",
        "parameters": [
          {
            "name": "clickedClassIRI",
            "in": "query",
            "description": "The IRI of the entity clicked on the GRAPHOLscape ontology graph",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IRI supplied",
            "content": {}
          },
          "404": {
            "description": "Entity not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/node/class/{graphElementId}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Starting from the current query graph continue to build the query graph through a class.",
        "description": "This call is used when the user click on a highlighted class and should add a triple pattern of the form like `?x rdf:type <targetClassIRI>`. The server should find `?x` in the SPARQL code as the variable associated to the `sourceClassIRI`.",
        "operationId": "putQueryGraphClass",
        "parameters": [
          {
            "name": "graphElementId",
            "in": "path",
            "description": "The id of the node of the selected class in the query graph.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceClassIRI",
            "in": "query",
            "description": "The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetClassIRI",
            "in": "query",
            "description": "The IRI of the entity clicked on the GRAPHOLscape ontology graph.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IRI supplied",
            "content": {}
          },
          "404": {
            "description": "Entity not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/node/objectProperty/{graphElementId}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Starting from the current query graph continue to build the query graph through a object property.",
        "description": "This route is used when the user click a highlighted object property with ornly one `relatedClasses` or, in the case of more than one `relatedClasses` immediatly after choosing one of them. In this case the triple pattern to add is something like `?x <predicateIRI> ?y` where `?x` and `?y` should be derived from the direction indicated by `isPredicateDirect` of the object property with respect to `sourceClassIRI` and `targetClassIRI`. If there is a cyclic object property the user also should specify the direction if order to correctly assign `?x` and `?y`. Either `?x` or `?y` should be a fresh new variable which should be linked to a new triple pattern `?y rdf:type <targetClassIRI>`. The variable `?y` should be called according to the entity remainder or label and should add a counter if there is an already defined variable for that class.",
        "operationId": "putQueryGraphObjectProperty",
        "parameters": [
          {
            "name": "graphElementId",
            "in": "path",
            "description": "The id of the node of the selected class in the query graph.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceClassIRI",
            "in": "query",
            "description": "The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "predicateIRI",
            "in": "query",
            "description": "The IRI of the predicate which links source class and target class",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetClassIRI",
            "in": "query",
            "description": "The IRI of the entity clicked on the GRAPHOLscape ontology graph.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPredicateDirect",
            "in": "query",
            "description": "If true sourceClassIRI is the domain of predicateIRI, if false sourceClassIRI is the range of predicateIRI.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IRI supplied",
            "content": {}
          },
          "404": {
            "description": "Entity not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/node/dataProperty/{graphElementId}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Starting from the current query graph continue to build the query graph through a data property.",
        "description": "This route is used when the user click a highlighted data property. The triple pattern to add is something like `?x <predicateIRI> ?y` where `?x` should be derived from `selectedClassIRI`. Note that `?y` is fresh new variable that should be added also to the head of the query (we assume data property values are interesting). The variable `?y` should be called according to the entity remainder or label and should add a counter if there is an already defined variable for that data property.",
        "operationId": "putQueryGraphDataProperty",
        "parameters": [
          {
            "name": "graphElementId",
            "in": "path",
            "description": "The id of the node of the selected class in the query graph.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceClassIRI",
            "in": "query",
            "description": "The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "predicateIRI",
            "in": "query",
            "description": "The IRI of the clicked data property.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IRI supplied",
            "content": {}
          },
          "404": {
            "description": "Entity not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/node/join/{graphElementId1}/{graphElementId2}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Join two GraphNodeElement in one.",
        "description": "Starting from a query graph which has two nodes representing the same class(es), it returns the query graph in which the two nodes have been joined into a single one. The children of the selected nodes will be grouped in `graphElementId1` and each time we add a children through the previous routes they will be added to this node.",
        "operationId": "putQueryGraphJoin",
        "parameters": [
          {
            "name": "graphElementId1",
            "in": "path",
            "description": "The id of the node of the selected class in the query graph.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "graphElementId2",
            "in": "path",
            "description": "The id of the node of the selected class in the query graph.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IRI supplied",
            "content": {}
          },
          "404": {
            "description": "Entity not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/node/delete/{graphElementId}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Delete the GraphElement (and all its children) from the query graph and head.",
        "description": "This route is used when the user wants to delete a node from the query graph. All the children of this node will be deleted as well as we do not want to create query with completly separated branches. All the variables that are going to be deleted should also be deleted from the head of the query. **WARNING**, if the node has multiple occurrences (due to join operations) every node should be deleted.",
        "operationId": "deleteGraphElementId",
        "parameters": [
          {
            "name": "graphElementId",
            "in": "path",
            "description": "The GraphElement that should be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "GraphElement not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/node/optional/{graphElementId}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Add the `graphElementId` to a new optional.",
        "description": "Create a new optional in the query and add the triple pattern(s) identified by the GraphElementId.\n- If it is a class the query parameter should be used and the triple pattern `?graphElementId rdf:type <classIRI>` will be moved from the bgp to the new optional.\n- If it is a data property the tp `?graphElementIdVar1 <graphElementIdDataPropertyIRI> ?graphElementIdVar2` will be added to the new optional.\n- If it is a object property the tps `?graphElementIdVar1 <graphElementIdDataPropertyIRI> ?graphElementIdVar2. ?graphElementIdVar2 rdf:type <classIRI>` will be moved to the new optional.",
        "operationId": "newOptionalGraphElementId",
        "parameters": [
          {
            "name": "graphElementId",
            "in": "path",
            "description": "The GraphElement that should be added to the optional",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classIRI",
            "in": "query",
            "description": "The IRI of the class that will be inserted in the optional.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "GraphElement not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/node/optional/{optionalId}/add/{graphElementId}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Add the graphElementId to the optionalId optional.",
        "description": "Add the triple pattern(s) identified by the `graphElementId` to the optional `optionalId`\n- If it is a class the query parameter should be used and the triple pattern `?graphElementId rdf:type <classIRI>` will be moved from the bgp to the optional.\n- If it is a data property the tp `?graphElementIdVar1 <graphElementIdDataPropertyIRI> ?graphElementIdVar2` will be added to the optional.\n- If it is a object property the tps `?graphElementIdVar1 <graphElementIdDataPropertyIRI> ?graphElementIdVar2. ?graphElementIdVar2 rdf:type <classIRI>` will be moved to the optional.\n\nFor translating this in SPARQL remove all optionals and translate them again.",
        "operationId": "addOptionalGraphElementId",
        "parameters": [
          {
            "name": "graphElementId",
            "in": "path",
            "description": "The GraphElement that should be added to the optional",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalId",
            "in": "path",
            "description": "The optional where to perform the adding",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classIRI",
            "in": "query",
            "description": "The IRI of the class that will be inserted in the optional.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "GraphElement not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/node/optional/{optionalId}/remove/{graphElementId}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Remove the graphElementId from the optionalId optional and move it back to the bgp.",
        "description": "Remove the triple pattern(s) identified by the `graphElementId` from the optional `optionalId`\n- If it is a class the query parameter should be used and the triple pattern `?graphElementId rdf:type <classIRI>` will be moved from the optional to the bgp.\n- If it is a data property the tp `?graphElementIdVar1 <graphElementIdDataPropertyIRI> ?graphElementIdVar2` will be moved from the optional to the bgp.\n- If it is a object property the tps `?graphElementIdVar1 <graphElementIdDataPropertyIRI> ?graphElementIdVar2. ?graphElementIdVar2 rdf:type <classIRI>` will be moved from the optional to the bgp.",
        "operationId": "removeOptionalGraphElementId",
        "parameters": [
          {
            "name": "graphElementId",
            "in": "path",
            "description": "The GraphElement that should be removed from the optional",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalId",
            "in": "path",
            "description": "The optional where to perform the removing",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classIRI",
            "in": "query",
            "description": "The IRI of the class that will be inserted in the optional.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "GraphElement not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/head/add/{graphElementId}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Add the head term to the query graph.",
        "description": "Explicitley add a term to the query head. All the data property variables are added automatically to the head during the query graph construction. This will add to the head only variables associated to classes (`rdf:type` triple pattern) or data properties.",
        "operationId": "addHeadTerm",
        "parameters": [
          {
            "name": "graphElementId",
            "in": "path",
            "description": "The id of the graph node that should be added to the head",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "Graph Node not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/head/delete/{headTerm}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Delete the head term from the query graph.",
        "description": "The path param should be the id of the HeadElement.",
        "operationId": "deleteHeadTerm",
        "parameters": [
          {
            "name": "headTerm",
            "in": "path",
            "description": "The head term that should be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "Head term not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/head/rename/{headTerm}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Rename the head term from the query graph using alias.",
        "description": "Put the alias in the HeadElement passed via request body.",
        "operationId": "renameHeadTerm",
        "parameters": [
          {
            "name": "headTerm",
            "in": "path",
            "description": "The head term that should be renamed",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "Head term not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/head/orderBy/{headTerm}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Order by the head from the query graph.",
        "description": "The OrderBy object is passed in the request body in the Query Graph.",
        "operationId": "orderByHeadTerm",
        "parameters": [
          {
            "name": "headTerm",
            "in": "path",
            "description": "The head term that should be ordered",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "Head term not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/head/function/{headTerm}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Set a function to the head term from the query graph.",
        "description": "The function is defined in the head term of the query graph in the request body. Remember to set the alias of the head based on function name and variable.",
        "operationId": "functionHeadTerm",
        "parameters": [
          {
            "name": "headTerm",
            "in": "path",
            "description": "The head term that should be involved inthe function",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "Head term not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/head/aggregation/{headTerm}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Set the aggregation function to the head term.",
        "description": "The aggregation function is defined in the group by field of the query graph in the request body. Remember to set the alias of the head based on function name and variable.",
        "operationId": "aggregationHeadTerm",
        "parameters": [
          {
            "name": "headTerm",
            "in": "path",
            "description": "The head term that should be involved in the aggregation function",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "Head term not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/head/aggregation/having/{headTerm}": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Set the having filter of the aggregation function to the head term.",
        "description": "The having aggregation function is defined in the groupBy field of the query graph in the request body.",
        "operationId": "aggregationHavingHeadTerm",
        "parameters": [
          {
            "name": "headTerm",
            "in": "path",
            "description": "The head term that should be involved in the having filter",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "Head term not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/distinct": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Set the distinct value.",
        "description": "The distinct value is defined in the query graph in the request body.",
        "operationId": "distinctQueryGraph",
        "parameters": [
          {
            "name": "distinct",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "Head term not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/limit": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Set the limit value.",
        "description": "The limit value is defined in the query graph in the request body.",
        "operationId": "limitQueryGraph",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "Head term not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/offset": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Set the offset value.",
        "description": "The offset value is defined in the query graph in the request body.",
        "operationId": "offsetQueryGraph",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "404": {
            "description": "Head term not found",
            "content": {}
          }
        }
      }
    },
    "/queryGraph/path": {
      "put": {
        "tags": [
          "QueryGraph"
        ],
        "summary": "Get the query graph that will be rendered by Sparqling, the query head, the sparql code based on the chosen path.",
        "description": "This path should be used to build the query graph using the path interaction. As a result there will be added to the query several triple pattern (depending on the length of the path) as a sequence of classes and object properties. Data properties never appear in paths, in order to add them use the simple PUT route.",
        "operationId": "addPathToQueryGraph",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Serialization of Path object.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGraph"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IRI supplied",
            "content": {}
          },
          "404": {
            "description": "Entity not found",
            "content": {}
          }
        }
      }
    },
    "/standalone/ontology/upload": {
      "post": {
        "tags": [
          "Standalone"
        ],
        "summary": "Uploads a .graphol or .owl file. This will be used only by standalone Sparqling.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ontology_upload_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/standalone/ontology/graphol": {
      "get": {
        "tags": [
          "Standalone"
        ],
        "summary": "Return the graphol file as a string to be parsed by Grapholscape.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Ontology not uploaded",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Highlights": {
        "type": "object",
        "properties": {
          "classes": {
            "type": "array",
            "description": "Subclasses or brother classes",
            "items": {
              "type": "string"
            }
          },
          "objectProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Branch"
            }
          },
          "dataProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Branch": {
        "type": "object",
        "properties": {
          "objectPropertyIRI": {
            "type": "string"
          },
          "cyclic": {
            "type": "boolean",
            "description": "It is true when domain and range are the same class."
          },
          "direct": {
            "type": "boolean"
          },
          "relatedClasses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Paths": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/OntologyPath"
        }
      },
      "OntologyPath": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "description": "Starts with lastSelectedIRI and ends with clickedIRI. In between the nodes and edges traversed in the path (ISA edge are marked as ISA)",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "QueryGraph": {
        "required": [
          "graph",
          "head",
          "sparql"
        ],
        "type": "object",
        "properties": {
          "distinct": {
            "type": "boolean"
          },
          "head": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeadElement"
            }
          },
          "graph": {
            "$ref": "#/components/schemas/GraphElement"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "optionals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Optional"
            }
          },
          "minus": {
            "$ref": "#/components/schemas/GraphElement"
          },
          "orderBy": {
            "$ref": "#/components/schemas/OrderByElement"
          },
          "groupBy": {
            "$ref": "#/components/schemas/GroupByElement"
          },
          "having": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "sparql": {
            "type": "string"
          }
        }
      },
      "GroupByElement": {
        "type": "object",
        "properties": {
          "headElementIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "aggregateFunction": {
            "type": "string",
            "enum": [
              "count",
              "sum",
              "min",
              "max",
              "avarage"
            ]
          }
        }
      },
      "Function": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "+",
              "-",
              "*",
              "/",
              "SUBSTR",
              "UCASE",
              "LCASE",
              "CONTAINS",
              "CONCAT",
              "REGEX",
              "ROUND",
              "CEIL",
              "FLOOR",
              "YEAR",
              "MONTH",
              "DAY",
              "HOURS",
              "MINUTES",
              "SECONDS"
            ]
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VarOrConstant"
            }
          }
        }
      },
      "VarOrConstant": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "var",
              "constant",
              "iri"
            ]
          },
          "value": {
            "type": "string"
          },
          "constantType": {
            "type": "string",
            "enum": [
              "xsd:string",
              "xsd:decimal",
              "xsd:dateTime"
            ]
          }
        }
      },
      "OrderByElement": {
        "type": "object",
        "properties": {
          "headElementId": {
            "type": "integer"
          },
          "ascending": {
            "type": "boolean"
          }
        }
      },
      "HeadElement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "graphElementId": {
            "type": "string"
          },
          "var": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "function": {
            "$ref": "#/components/schemas/Function"
          }
        }
      },
      "GraphElement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "This id corrensopond to the variable when entity type is a class."
          },
          "variables": {
            "type": "array",
            "description": "This element could refer to one variable (if it's a class) or to two variables (if it's a property)",
            "items": {
              "type": "string"
            }
          },
          "entities": {
            "type": "array",
            "description": "It could have more than one entity only when entity type is a class (could be derived after clicking on two borther classes)",
            "items": {
              "$ref": "#/components/schemas/Entity"
            }
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GraphElement"
            }
          }
        }
      },
      "Entity": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "class",
              "objectProperty",
              "dataProperty"
            ]
          },
          "iri": {
            "type": "string"
          },
          "prefixedIri": {
            "type": "string"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "expression": {
            "$ref": "#/components/schemas/FilterExpression"
          }
        }
      },
      "FilterExpression": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string",
            "enum": [
              "=",
              "!=",
              "<",
              ">",
              "<=",
              ">=",
              "IN",
              "NOT IN"
            ]
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VarOrConstant"
            }
          }
        }
      },
      "Optional": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "graphIds": {
            "type": "array",
            "description": "Path of ids that describe optional.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ontology_upload_body": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      }
    }
  }
}