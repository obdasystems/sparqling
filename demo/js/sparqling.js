var sparqling = (function (grapholscape) {
    'use strict';

    function centerOnElement (elem, zoom) {
        let cy = elem.cy();
        if (zoom)
            cy.zoom(zoom);
        let pos = elem.renderedPosition();
        let center = { x: cy.width() / 2, y: cy.height() / 2 };
        cy.panBy({ x: -(pos.x -= center.x), y: -(pos.y -= center.y) });
    }

    getGrapholscapeContainer();
    const bgpContainer = getBGPContainer();
    const leftColumnContainer = getLeftColumnContainer();
    function getGrapholscapeContainer() {
        let container = document.createElement('div');
        container.setAttribute('id', 'grapholscape');
        container.style.position = 'relative';
        container.style.height = '100%';
        return container;
    }
    function getBGPContainer() {
        let container = document.createElement('div');
        container.setAttribute('id', 'sparqling-query-graph');
        container.style.position = 'relative';
        container.style.height = '100%';
        container.style.width = '100%';
        return container;
    }
    function getLeftColumnContainer() {
        let container = document.createElement('div');
        container.setAttribute('id', 'sparqling-left-column');
        container.style.position = 'absolute';
        container.style.left = '10px';
        container.style.top = '100%';
        container.style.transform = 'translate(0, calc(-100% - 10px))';
        container.style.display = 'flex';
        container.style.flexDirection = 'column';
        container.style.justifyContent = 'space-between';
        container.style.gap = '30px';
        container.style.height = 'calc(-80px + 100%)';
        container.style.pointerEvents = 'none';
        return container;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var axios$2 = {exports: {}};

    var bind$2 = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    var bind$1 = bind$2;

    // utils is a library of generic helper functions non-specific to axios

    var toString$1 = Object.prototype.toString;

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray(val) {
      return toString$1.call(val) === '[object Array]';
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    function isArrayBuffer(val) {
      return toString$1.call(val) === '[object ArrayBuffer]';
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData(val) {
      return (typeof FormData !== 'undefined') && (val instanceof FormData);
    }

    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject$1(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject(val) {
      if (toString$1.call(val) !== '[object Object]') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    function isDate(val) {
      return toString$1.call(val) === '[object Date]';
    }

    /**
     * Determine if a value is a File
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    function isFile(val) {
      return toString$1.call(val) === '[object File]';
    }

    /**
     * Determine if a value is a Blob
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    function isBlob(val) {
      return toString$1.call(val) === '[object Blob]';
    }

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction(val) {
      return toString$1.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream(val) {
      return isObject$1(val) && isFunction(val.pipe);
    }

    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
    }

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend$1(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind$1(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    var utils$d = {
      isArray: isArray,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString,
      isNumber: isNumber,
      isObject: isObject$1,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend$1,
      trim: trim,
      stripBOM: stripBOM
    };

    var utils$c = utils$d;

    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL$2 = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils$c.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils$c.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils$c.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils$c.forEach(val, function parseValue(v) {
            if (utils$c.isDate(v)) {
              v = v.toISOString();
            } else if (utils$c.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + '=' + encode(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    var utils$b = utils$d;

    function InterceptorManager$1() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager$1.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager$1.prototype.forEach = function forEach(fn) {
      utils$b.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager$1;

    var utils$a = utils$d;

    var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
      utils$a.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Update an Error with the specified config, error code, and response.
     *
     * @param {Error} error The error to update.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The error.
     */
    var enhanceError$2 = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }

      error.request = request;
      error.response = response;
      error.isAxiosError = true;

      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code
        };
      };
      return error;
    };

    var enhanceError$1 = enhanceError$2;

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    var createError$2 = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError$1(error, config, code, request, response);
    };

    var createError$1 = createError$2;

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle$1 = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError$1(
          'Request failed with status code ' + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };

    var utils$9 = utils$d;

    var cookies$1 = (
      utils$9.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils$9.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils$9.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils$9.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL$1 = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    var isAbsoluteURL = isAbsoluteURL$1;
    var combineURLs = combineURLs$1;

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath$1 = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };

    var utils$8 = utils$d;

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders$1 = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils$8.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils$8.trim(line.substr(0, i)).toLowerCase();
        val = utils$8.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var utils$7 = utils$d;

    var isURLSameOrigin$1 = (
      utils$7.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils$7.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    var utils$6 = utils$d;
    var settle = settle$1;
    var cookies = cookies$1;
    var buildURL$1 = buildURL$2;
    var buildFullPath = buildFullPath$1;
    var parseHeaders = parseHeaders$1;
    var isURLSameOrigin = isURLSameOrigin$1;
    var createError = createError$2;

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;

        if (utils$6.isFormData(requestData)) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL$1(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
            request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle(resolve, reject, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(createError('Request aborted', config, 'ECONNABORTED', request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(createError('Network Error', config, null, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(
            timeoutErrorMessage,
            config,
            config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils$6.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
            cookies.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils$6.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils$6.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = config.responseType;
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken) {
          // Handle cancellation
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }

            request.abort();
            reject(cancel);
            // Clean up request
            request = null;
          });
        }

        if (!requestData) {
          requestData = null;
        }

        // Send the request
        request.send(requestData);
      });
    };

    var utils$5 = utils$d;
    var normalizeHeaderName = normalizeHeaderName$1;
    var enhanceError = enhanceError$2;

    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils$5.isUndefined(headers) && utils$5.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = xhr;
      }
      return adapter;
    }

    function stringifySafely(rawValue, parser, encoder) {
      if (utils$5.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$5.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    var defaults$k = {

      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },

      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');

        if (utils$5.isFormData(data) ||
          utils$5.isArrayBuffer(data) ||
          utils$5.isBuffer(data) ||
          utils$5.isStream(data) ||
          utils$5.isFile(data) ||
          utils$5.isBlob(data)
        ) {
          return data;
        }
        if (utils$5.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$5.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }
        if (utils$5.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
          setContentTypeIfUnset(headers, 'application/json');
          return stringifySafely(data);
        }
        return data;
      }],

      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

        if (strictJSONParsing || (forcedJSONParsing && utils$5.isString(data) && data.length)) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw enhanceError(e, this, 'E_JSON_PARSE');
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };

    defaults$k.headers = {
      common: {
        'Accept': 'application/json, text/plain, */*'
      }
    };

    utils$5.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults$k.headers[method] = {};
    });

    utils$5.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults$k.headers[method] = utils$5.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults_1 = defaults$k;

    var utils$4 = utils$d;
    var defaults$j = defaults_1;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData$1 = function transformData(data, headers, fns) {
      var context = this || defaults$j;
      /*eslint no-param-reassign:0*/
      utils$4.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });

      return data;
    };

    var isCancel$1 = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    var utils$3 = utils$d;
    var transformData = transformData$1;
    var isCancel = isCancel$1;
    var defaults$i = defaults_1;

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest$1 = function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils$3.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils$3.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults$i.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    var utils$2 = utils$d;

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig$2 = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      var valueFromConfig2Keys = ['url', 'method', 'data'];
      var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
      var defaultToConfig2Keys = [
        'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
        'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
        'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
        'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
        'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
      ];
      var directMergeKeys = ['validateStatus'];

      function getMergedValue(target, source) {
        if (utils$2.isPlainObject(target) && utils$2.isPlainObject(source)) {
          return utils$2.merge(target, source);
        } else if (utils$2.isPlainObject(source)) {
          return utils$2.merge({}, source);
        } else if (utils$2.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      function mergeDeepProperties(prop) {
        if (!utils$2.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (!utils$2.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      }

      utils$2.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils$2.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(undefined, config2[prop]);
        }
      });

      utils$2.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

      utils$2.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils$2.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(undefined, config2[prop]);
        } else if (!utils$2.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      });

      utils$2.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      });

      var axiosKeys = valueFromConfig2Keys
        .concat(mergeDeepPropertiesKeys)
        .concat(defaultToConfig2Keys)
        .concat(directMergeKeys);

      var otherKeys = Object
        .keys(config1)
        .concat(Object.keys(config2))
        .filter(function filterAxiosKeys(key) {
          return axiosKeys.indexOf(key) === -1;
        });

      utils$2.forEach(otherKeys, mergeDeepProperties);

      return config;
    };

    const _args=[["axios@0.21.4","/home/gianluca/obda-systems-dev/sparqling"]];const _from="axios@0.21.4";const _id="axios@0.21.4";const _inBundle=false;const _integrity="sha512-ut5vewkiu8jjGBdqpM44XxjuCjq9LAKeHVmoVfHVzy8eHgxxq8SbAVQNovDA8mVi05kP0Ea/n/UzcSHcTJQfNg==";const _location="/axios";const _phantomChildren={};const _requested={type:"version",registry:true,raw:"axios@0.21.4",name:"axios",escapedName:"axios",rawSpec:"0.21.4",saveSpec:null,fetchSpec:"0.21.4"};const _requiredBy=["/"];const _resolved="https://registry.npmjs.org/axios/-/axios-0.21.4.tgz";const _spec="0.21.4";const _where="/home/gianluca/obda-systems-dev/sparqling";const author={name:"Matt Zabriskie"};const browser={"./lib/adapters/http.js":"./lib/adapters/xhr.js"};const bugs={url:"https://github.com/axios/axios/issues"};const bundlesize=[{path:"./dist/axios.min.js",threshold:"5kB"}];const dependencies={"follow-redirects":"^1.14.0"};const description="Promise based HTTP client for the browser and node.js";const devDependencies={coveralls:"^3.0.0","es6-promise":"^4.2.4",grunt:"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1",karma:"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2",minimist:"^1.2.0",mocha:"^8.2.1",sinon:"^4.5.0","terser-webpack-plugin":"^4.2.3",typescript:"^4.0.5","url-search-params":"^0.10.0",webpack:"^4.44.2","webpack-dev-server":"^3.11.0"};const homepage="https://axios-http.com";const jsdelivr="dist/axios.min.js";const keywords=["xhr","http","ajax","promise","node"];const license="MIT";const main$1="index.js";const name="axios";const repository={type:"git",url:"git+https://github.com/axios/axios.git"};const scripts={build:"NODE_ENV=production grunt build",coveralls:"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",examples:"node ./examples/server.js",fix:"eslint --fix lib/**/*.js",postversion:"git push && git push --tags",preversion:"npm test",start:"node ./sandbox/server.js",test:"grunt test",version:"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json"};const typings="./index.d.ts";const unpkg="dist/axios.min.js";const version$1="0.21.4";var require$$0$1 = {_args:_args,_from:_from,_id:_id,_inBundle:_inBundle,_integrity:_integrity,_location:_location,_phantomChildren:_phantomChildren,_requested:_requested,_requiredBy:_requiredBy,_resolved:_resolved,_spec:_spec,_where:_where,author:author,browser:browser,bugs:bugs,bundlesize:bundlesize,dependencies:dependencies,description:description,devDependencies:devDependencies,homepage:homepage,jsdelivr:jsdelivr,keywords:keywords,license:license,main:main$1,name:name,repository:repository,scripts:scripts,typings:typings,unpkg:unpkg,version:version$1};

    var pkg = require$$0$1;

    var validators$1 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
      validators$1[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    var deprecatedWarnings = {};
    var currentVerArr = pkg.version.split('.');

    /**
     * Compare package versions
     * @param {string} version
     * @param {string?} thanVersion
     * @returns {boolean}
     */
    function isOlderVersion(version, thanVersion) {
      var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
      var destVer = version.split('.');
      for (var i = 0; i < 3; i++) {
        if (pkgVersionArr[i] > destVer[i]) {
          return true;
        } else if (pkgVersionArr[i] < destVer[i]) {
          return false;
        }
      }
      return false;
    }

    /**
     * Transitional option validator
     * @param {function|boolean?} validator
     * @param {string?} version
     * @param {string} message
     * @returns {function}
     */
    validators$1.transitional = function transitional(validator, version, message) {
      var isDeprecated = version && isOlderVersion(version);

      function formatMessage(opt, desc) {
        return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, ' has been removed in ' + version));
        }

        if (isDeprecated && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     */

    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new TypeError('options must be an object');
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError('option ' + opt + ' must be ' + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error('Unknown option ' + opt);
        }
      }
    }

    var validator$1 = {
      isOlderVersion: isOlderVersion,
      assertOptions: assertOptions,
      validators: validators$1
    };

    var utils$1 = utils$d;
    var buildURL = buildURL$2;
    var InterceptorManager = InterceptorManager_1;
    var dispatchRequest = dispatchRequest$1;
    var mergeConfig$1 = mergeConfig$2;
    var validator = validator$1;

    var validators = validator.validators;
    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios$1(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios$1.prototype.request = function request(config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof config === 'string') {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }

      config = mergeConfig$1(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      var transitional = config.transitional;

      if (transitional !== undefined) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
          forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
          clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
        }, false);
      }

      // filter out skipped interceptors
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      var promise;

      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, undefined];

        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);

        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }

        return promise;
      }


      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }

      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }

      return promise;
    };

    Axios$1.prototype.getUri = function getUri(config) {
      config = mergeConfig$1(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
    };

    // Provide aliases for supported request methods
    utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios$1.prototype[method] = function(url, config) {
        return this.request(mergeConfig$1(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/
      Axios$1.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig$1(config || {}, {
          method: method,
          url: url,
          data: data
        }));
      };
    });

    var Axios_1 = Axios$1;

    /**
     * A `Cancel` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function Cancel$1(message) {
      this.message = message;
    }

    Cancel$1.prototype.toString = function toString() {
      return 'Cancel' + (this.message ? ': ' + this.message : '');
    };

    Cancel$1.prototype.__CANCEL__ = true;

    var Cancel_1 = Cancel$1;

    var Cancel = Cancel_1;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    var isAxiosError = function isAxiosError(payload) {
      return (typeof payload === 'object') && (payload.isAxiosError === true);
    };

    var utils = utils$d;
    var bind = bind$2;
    var Axios = Axios_1;
    var mergeConfig = mergeConfig$2;
    var defaults$h = defaults_1;

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);

      // Copy axios.prototype to instance
      utils.extend(instance, Axios.prototype, context);

      // Copy context to instance
      utils.extend(instance, context);

      return instance;
    }

    // Create the default instance to be exported
    var axios$1 = createInstance(defaults$h);

    // Expose Axios class to allow class inheritance
    axios$1.Axios = Axios;

    // Factory for creating new instances
    axios$1.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios$1.defaults, instanceConfig));
    };

    // Expose Cancel & CancelToken
    axios$1.Cancel = Cancel_1;
    axios$1.CancelToken = CancelToken_1;
    axios$1.isCancel = isCancel$1;

    // Expose all/spread
    axios$1.all = function all(promises) {
      return Promise.all(promises);
    };
    axios$1.spread = spread;

    // Expose isAxiosError
    axios$1.isAxiosError = isAxiosError;

    axios$2.exports = axios$1;

    // Allow use of default import syntax in TypeScript
    axios$2.exports.default = axios$1;

    var axios = axios$2.exports;

    /* tslint:disable */
    const BASE_PATH = "http://localhost:7979/sparqling/1.0.0".replace(/\/+$/, "");
    /**
     *
     * @export
     * @class BaseAPI
     */
    class BaseAPI {
        constructor(configuration, basePath = BASE_PATH, axios$1 = axios) {
            this.basePath = basePath;
            this.axios = axios$1;
            if (configuration) {
                this.configuration = configuration;
                this.basePath = configuration.basePath || this.basePath;
            }
        }
    }
    /**
     *
     * @export
     * @class RequiredError
     * @extends {Error}
     */
    class RequiredError extends Error {
        constructor(field, msg) {
            super(msg);
            this.field = field;
            this.name = "RequiredError";
        }
    }

    /* tslint:disable */
    /**
     *
     * @export
     */
    const DUMMY_BASE_URL = 'https://example.com';
    /**
     *
     * @throws {RequiredError}
     * @export
     */
    const assertParamExists = function (functionName, paramName, paramValue) {
        if (paramValue === null || paramValue === undefined) {
            throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
        }
    };
    /**
     *
     * @export
     */
    const setSearchParams = function (url, ...objects) {
        const searchParams = new URLSearchParams(url.search);
        for (const object of objects) {
            for (const key in object) {
                if (Array.isArray(object[key])) {
                    searchParams.delete(key);
                    for (const item of object[key]) {
                        searchParams.append(key, item);
                    }
                }
                else {
                    searchParams.set(key, object[key]);
                }
            }
        }
        url.search = searchParams.toString();
    };
    /**
     *
     * @export
     */
    const serializeDataIfNeeded = function (value, requestOptions, configuration) {
        const nonString = typeof value !== 'string';
        const needsSerialization = nonString && configuration && configuration.isJsonMime
            ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
            : nonString;
        return needsSerialization
            ? JSON.stringify(value !== undefined ? value : {})
            : (value || "");
    };
    /**
     *
     * @export
     */
    const toPathString = function (url) {
        return url.pathname + url.search + url.hash;
    };
    /**
     *
     * @export
     */
    const createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {
        return (axios = globalAxios, basePath = BASE_PATH) => {
            const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + axiosArgs.url });
            return axios.request(axiosRequestArgs);
        };
    };

    /* tslint:disable */
    const EntityTypeEnum = {
        Class: 'class',
        ObjectProperty: 'objectProperty',
        InverseObjectProperty: 'inverseObjectProperty',
        DataProperty: 'dataProperty'
    };
    const FilterExpressionOperatorEnum = {
        Equal: '=',
        NotEqual: '!=',
        LessThan: '<',
        GreaterThan: '>',
        LessThanOrEqualTo: '<=',
        GreaterThanOrEqualTo: '>=',
        In: 'IN',
        NotIn: 'NOT IN',
        Regex: 'REGEX'
    };
    const FunctionNameEnum = {
        Plus: '+',
        Minus: '-',
        Star: '*',
        Slash: '/',
        Substr: 'SUBSTR',
        Ucase: 'UCASE',
        Lcase: 'LCASE',
        Contains: 'CONTAINS',
        Concat: 'CONCAT',
        Round: 'ROUND',
        Ceil: 'CEIL',
        Floor: 'FLOOR',
        Year: 'YEAR',
        Month: 'MONTH',
        Day: 'DAY',
        Hours: 'HOURS',
        Minutes: 'MINUTES',
        Seconds: 'SECONDS'
    };
    const VarOrConstantTypeEnum = {
        Var: 'var',
        Constant: 'constant',
        Iri: 'iri'
    };
    const VarOrConstantConstantTypeEnum = {
        String: 'xsd:string',
        Decimal: 'xsd:decimal',
        DateTime: 'xsd:dateTime'
    };
    /**
     * OntologyGraphApi - axios parameter creator
     * @export
     */
    const OntologyGraphApiAxiosParamCreator = function (configuration) {
        return {
            /**
             * This route is used to highlight the negihbours of the selected class. The neighbours can be classes (brother classes or child classes), object properties (the class or one of his father partecipate or are typed to domain/range) or data properties (the class or one of its fathers partecipates or is typed to its domain).
             * @summary Get the IRIs of the ontology entities \"related\" to the clicked and selected.
             * @param {string} clickedClassIRI The IRI of the class just clicked on the GRAPHOLscape ontology graph
             * @param {Array<string>} [params]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            highligths: (clickedClassIRI, params, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'clickedClassIRI' is not null or undefined
                assertParamExists('highligths', 'clickedClassIRI', clickedClassIRI);
                const localVarPath = `/highlights`;
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                if (clickedClassIRI !== undefined) {
                    localVarQueryParameter['clickedClassIRI'] = clickedClassIRI;
                }
                if (params) {
                    localVarQueryParameter['params'] = params;
                }
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * The results should be based on Dijkstra algorithm for shortest paths. ISA wieght is 0 while role weight is 1.
             * @summary Find paths between selected class and clicked class.
             * @param {string} lastSelectedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
             * @param {string} clickedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            highligthsPaths: (lastSelectedIRI, clickedIRI, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'lastSelectedIRI' is not null or undefined
                assertParamExists('highligthsPaths', 'lastSelectedIRI', lastSelectedIRI);
                // verify required parameter 'clickedIRI' is not null or undefined
                assertParamExists('highligthsPaths', 'clickedIRI', clickedIRI);
                const localVarPath = `/highlights/paths`;
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                if (lastSelectedIRI !== undefined) {
                    localVarQueryParameter['lastSelectedIRI'] = lastSelectedIRI;
                }
                if (clickedIRI !== undefined) {
                    localVarQueryParameter['clickedIRI'] = clickedIRI;
                }
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
        };
    };
    /**
     * OntologyGraphApi - functional programming interface
     * @export
     */
    const OntologyGraphApiFp = function (configuration) {
        const localVarAxiosParamCreator = OntologyGraphApiAxiosParamCreator(configuration);
        return {
            /**
             * This route is used to highlight the negihbours of the selected class. The neighbours can be classes (brother classes or child classes), object properties (the class or one of his father partecipate or are typed to domain/range) or data properties (the class or one of its fathers partecipates or is typed to its domain).
             * @summary Get the IRIs of the ontology entities \"related\" to the clicked and selected.
             * @param {string} clickedClassIRI The IRI of the class just clicked on the GRAPHOLscape ontology graph
             * @param {Array<string>} [params]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            highligths(clickedClassIRI, params, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.highligths(clickedClassIRI, params, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * The results should be based on Dijkstra algorithm for shortest paths. ISA wieght is 0 while role weight is 1.
             * @summary Find paths between selected class and clicked class.
             * @param {string} lastSelectedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
             * @param {string} clickedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            highligthsPaths(lastSelectedIRI, clickedIRI, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.highligthsPaths(lastSelectedIRI, clickedIRI, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
        };
    };
    /**
     * OntologyGraphApi - object-oriented interface
     * @export
     * @class OntologyGraphApi
     * @extends {BaseAPI}
     */
    class OntologyGraphApi extends BaseAPI {
        /**
         * This route is used to highlight the negihbours of the selected class. The neighbours can be classes (brother classes or child classes), object properties (the class or one of his father partecipate or are typed to domain/range) or data properties (the class or one of its fathers partecipates or is typed to its domain).
         * @summary Get the IRIs of the ontology entities \"related\" to the clicked and selected.
         * @param {string} clickedClassIRI The IRI of the class just clicked on the GRAPHOLscape ontology graph
         * @param {Array<string>} [params]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OntologyGraphApi
         */
        highligths(clickedClassIRI, params, options) {
            return OntologyGraphApiFp(this.configuration).highligths(clickedClassIRI, params, options).then((request) => request(this.axios, this.basePath));
        }
        /**
         * The results should be based on Dijkstra algorithm for shortest paths. ISA wieght is 0 while role weight is 1.
         * @summary Find paths between selected class and clicked class.
         * @param {string} lastSelectedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
         * @param {string} clickedIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OntologyGraphApi
         */
        highligthsPaths(lastSelectedIRI, clickedIRI, options) {
            return OntologyGraphApiFp(this.configuration).highligthsPaths(lastSelectedIRI, clickedIRI, options).then((request) => request(this.axios, this.basePath));
        }
    }
    /**
     * QueryGraphBGPApi - axios parameter creator
     * @export
     */
    const QueryGraphBGPApiAxiosParamCreator = function (configuration) {
        return {
            /**
             * This path should be used to build the query graph using the path interaction. As a result there will be added to the query several triple pattern (depending on the length of the path) as a sequence of classes and object properties. Data properties never appear in paths, in order to add them use the simple PUT route.
             * @summary Get the query graph that will be rendered by Sparqling, the query head, the sparql code based on the chosen path.
             * @param {string} path Serialization of Path object.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            addPathToQueryGraph: (path, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'path' is not null or undefined
                assertParamExists('addPathToQueryGraph', 'path', path);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('addPathToQueryGraph', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/path`;
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                if (path !== undefined) {
                    localVarQueryParameter['path'] = path;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * This route is used when the user wants to delete a node from the query graph. All the children of this node will be deleted as well as we do not want to create query with completly separated branches. All the variables that are going to be deleted should also be deleted from the head of the query. **WARNING**, if the node has multiple occurrences (due to join operations) every node should be deleted.
             * @summary Delete the GraphElement (and all its children) from the query graph and head.
             * @param {string} graphElementId The GraphElement that should be deleted
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteGraphElementId: (graphElementId, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'graphElementId' is not null or undefined
                assertParamExists('deleteGraphElementId', 'graphElementId', graphElementId);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('deleteGraphElementId', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/node/delete/{graphElementId}`
                    .replace(`{${"graphElementId"}}`, encodeURIComponent(String(graphElementId)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             *
             * @summary Delete from GraphElement only the class
             * @param {string} graphElementId
             * @param {string} classIRI The class that should be deleted
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteGraphElementIdClass: (graphElementId, classIRI, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'graphElementId' is not null or undefined
                assertParamExists('deleteGraphElementIdClass', 'graphElementId', graphElementId);
                // verify required parameter 'classIRI' is not null or undefined
                assertParamExists('deleteGraphElementIdClass', 'classIRI', classIRI);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('deleteGraphElementIdClass', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/node/delete/{graphElementId}/class`
                    .replace(`{${"graphElementId"}}`, encodeURIComponent(String(graphElementId)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                if (classIRI !== undefined) {
                    localVarQueryParameter['classIRI'] = classIRI;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * Starting from only the clicked class get the query graph that will be rendered by Sparqling, the query head, the sparql code. The sparql query returned will be somthing like `select ?x { ?x a <clickedClassIRI>` }. The variable `?x` should be called according to the entity remainder or label. The variable will be added to the head of the query in order to create a valid SPARQL query.
             * @summary This is the first route to call in order to build the query graph.
             * @param {string} clickedClassIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            getQueryGraph: (clickedClassIRI, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'clickedClassIRI' is not null or undefined
                assertParamExists('getQueryGraph', 'clickedClassIRI', clickedClassIRI);
                const localVarPath = `/queryGraph/node`;
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                if (clickedClassIRI !== undefined) {
                    localVarQueryParameter['clickedClassIRI'] = clickedClassIRI;
                }
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * This call is used when the user click on a highlighted class and should add a triple pattern of the form like `?x rdf:type <targetClassIRI>`. The server should find `?x` in the SPARQL code as the variable associated to the `sourceClassIRI`.
             * @summary Starting from the current query graph continue to build the query graph through a class.
             * @param {string} graphElementId The id of the node of the selected class in the query graph.
             * @param {string} sourceClassIRI The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.
             * @param {string} targetClassIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphClass: (graphElementId, sourceClassIRI, targetClassIRI, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'graphElementId' is not null or undefined
                assertParamExists('putQueryGraphClass', 'graphElementId', graphElementId);
                // verify required parameter 'sourceClassIRI' is not null or undefined
                assertParamExists('putQueryGraphClass', 'sourceClassIRI', sourceClassIRI);
                // verify required parameter 'targetClassIRI' is not null or undefined
                assertParamExists('putQueryGraphClass', 'targetClassIRI', targetClassIRI);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('putQueryGraphClass', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/node/class/{graphElementId}`
                    .replace(`{${"graphElementId"}}`, encodeURIComponent(String(graphElementId)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                if (sourceClassIRI !== undefined) {
                    localVarQueryParameter['sourceClassIRI'] = sourceClassIRI;
                }
                if (targetClassIRI !== undefined) {
                    localVarQueryParameter['targetClassIRI'] = targetClassIRI;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * This route is used when the user click a highlighted data property. The triple pattern to add is something like `?x <predicateIRI> ?y` where `?x` should be derived from `selectedClassIRI`. Note that `?y` is fresh new variable that should be added also to the head of the query (we assume data property values are interesting). The variable `?y` should be called according to the entity remainder or label and should add a counter if there is an already defined variable for that data property.
             * @summary Starting from the current query graph continue to build the query graph through a data property.
             * @param {string} graphElementId The id of the node of the selected class in the query graph.
             * @param {string} sourceClassIRI The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.
             * @param {string} predicateIRI The IRI of the clicked data property.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphDataProperty: (graphElementId, sourceClassIRI, predicateIRI, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'graphElementId' is not null or undefined
                assertParamExists('putQueryGraphDataProperty', 'graphElementId', graphElementId);
                // verify required parameter 'sourceClassIRI' is not null or undefined
                assertParamExists('putQueryGraphDataProperty', 'sourceClassIRI', sourceClassIRI);
                // verify required parameter 'predicateIRI' is not null or undefined
                assertParamExists('putQueryGraphDataProperty', 'predicateIRI', predicateIRI);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('putQueryGraphDataProperty', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/node/dataProperty/{graphElementId}`
                    .replace(`{${"graphElementId"}}`, encodeURIComponent(String(graphElementId)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                if (sourceClassIRI !== undefined) {
                    localVarQueryParameter['sourceClassIRI'] = sourceClassIRI;
                }
                if (predicateIRI !== undefined) {
                    localVarQueryParameter['predicateIRI'] = predicateIRI;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * Starting from a query graph which has two nodes representing the same class(es), it returns the query graph in which the two nodes have been joined into a single one. The children of the selected nodes will be grouped in `graphElementId1` and each time we add a children through the previous routes they will be added to this node.
             * @summary Join two GraphNodeElement in one.
             * @param {string} graphElementId1 The id of the node of the selected class in the query graph.
             * @param {string} graphElementId2 The id of the node of the selected class in the query graph.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphJoin: (graphElementId1, graphElementId2, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'graphElementId1' is not null or undefined
                assertParamExists('putQueryGraphJoin', 'graphElementId1', graphElementId1);
                // verify required parameter 'graphElementId2' is not null or undefined
                assertParamExists('putQueryGraphJoin', 'graphElementId2', graphElementId2);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('putQueryGraphJoin', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/node/join/{graphElementId1}/{graphElementId2}`
                    .replace(`{${"graphElementId1"}}`, encodeURIComponent(String(graphElementId1)))
                    .replace(`{${"graphElementId2"}}`, encodeURIComponent(String(graphElementId2)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * This route is used when the user click a highlighted object property with ornly one `relatedClasses` or, in the case of more than one `relatedClasses` immediatly after choosing one of them. In this case the triple pattern to add is something like `?x <predicateIRI> ?y` where `?x` and `?y` should be derived from the direction indicated by `isPredicateDirect` of the object property with respect to `sourceClassIRI` and `targetClassIRI`. If there is a cyclic object property the user also should specify the direction if order to correctly assign `?x` and `?y`. Either `?x` or `?y` should be a fresh new variable which should be linked to a new triple pattern `?y rdf:type <targetClassIRI>`. The variable `?y` should be called according to the entity remainder or label and should add a counter if there is an already defined variable for that class.
             * @summary Starting from the current query graph continue to build the query graph through a object property.
             * @param {string} graphElementId The id of the node of the selected class in the query graph.
             * @param {string} sourceClassIRI The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.
             * @param {string} predicateIRI The IRI of the predicate which links source class and target class
             * @param {string} targetClassIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph.
             * @param {boolean} isPredicateDirect If true sourceClassIRI is the domain of predicateIRI, if false sourceClassIRI is the range of predicateIRI.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphObjectProperty: (graphElementId, sourceClassIRI, predicateIRI, targetClassIRI, isPredicateDirect, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'graphElementId' is not null or undefined
                assertParamExists('putQueryGraphObjectProperty', 'graphElementId', graphElementId);
                // verify required parameter 'sourceClassIRI' is not null or undefined
                assertParamExists('putQueryGraphObjectProperty', 'sourceClassIRI', sourceClassIRI);
                // verify required parameter 'predicateIRI' is not null or undefined
                assertParamExists('putQueryGraphObjectProperty', 'predicateIRI', predicateIRI);
                // verify required parameter 'targetClassIRI' is not null or undefined
                assertParamExists('putQueryGraphObjectProperty', 'targetClassIRI', targetClassIRI);
                // verify required parameter 'isPredicateDirect' is not null or undefined
                assertParamExists('putQueryGraphObjectProperty', 'isPredicateDirect', isPredicateDirect);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('putQueryGraphObjectProperty', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/node/objectProperty/{graphElementId}`
                    .replace(`{${"graphElementId"}}`, encodeURIComponent(String(graphElementId)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                if (sourceClassIRI !== undefined) {
                    localVarQueryParameter['sourceClassIRI'] = sourceClassIRI;
                }
                if (predicateIRI !== undefined) {
                    localVarQueryParameter['predicateIRI'] = predicateIRI;
                }
                if (targetClassIRI !== undefined) {
                    localVarQueryParameter['targetClassIRI'] = targetClassIRI;
                }
                if (isPredicateDirect !== undefined) {
                    localVarQueryParameter['isPredicateDirect'] = isPredicateDirect;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
        };
    };
    /**
     * QueryGraphBGPApi - functional programming interface
     * @export
     */
    const QueryGraphBGPApiFp = function (configuration) {
        const localVarAxiosParamCreator = QueryGraphBGPApiAxiosParamCreator(configuration);
        return {
            /**
             * This path should be used to build the query graph using the path interaction. As a result there will be added to the query several triple pattern (depending on the length of the path) as a sequence of classes and object properties. Data properties never appear in paths, in order to add them use the simple PUT route.
             * @summary Get the query graph that will be rendered by Sparqling, the query head, the sparql code based on the chosen path.
             * @param {string} path Serialization of Path object.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            addPathToQueryGraph(path, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.addPathToQueryGraph(path, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * This route is used when the user wants to delete a node from the query graph. All the children of this node will be deleted as well as we do not want to create query with completly separated branches. All the variables that are going to be deleted should also be deleted from the head of the query. **WARNING**, if the node has multiple occurrences (due to join operations) every node should be deleted.
             * @summary Delete the GraphElement (and all its children) from the query graph and head.
             * @param {string} graphElementId The GraphElement that should be deleted
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteGraphElementId(graphElementId, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteGraphElementId(graphElementId, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             *
             * @summary Delete from GraphElement only the class
             * @param {string} graphElementId
             * @param {string} classIRI The class that should be deleted
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteGraphElementIdClass(graphElementId, classIRI, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteGraphElementIdClass(graphElementId, classIRI, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * Starting from only the clicked class get the query graph that will be rendered by Sparqling, the query head, the sparql code. The sparql query returned will be somthing like `select ?x { ?x a <clickedClassIRI>` }. The variable `?x` should be called according to the entity remainder or label. The variable will be added to the head of the query in order to create a valid SPARQL query.
             * @summary This is the first route to call in order to build the query graph.
             * @param {string} clickedClassIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            getQueryGraph(clickedClassIRI, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.getQueryGraph(clickedClassIRI, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * This call is used when the user click on a highlighted class and should add a triple pattern of the form like `?x rdf:type <targetClassIRI>`. The server should find `?x` in the SPARQL code as the variable associated to the `sourceClassIRI`.
             * @summary Starting from the current query graph continue to build the query graph through a class.
             * @param {string} graphElementId The id of the node of the selected class in the query graph.
             * @param {string} sourceClassIRI The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.
             * @param {string} targetClassIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphClass(graphElementId, sourceClassIRI, targetClassIRI, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.putQueryGraphClass(graphElementId, sourceClassIRI, targetClassIRI, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * This route is used when the user click a highlighted data property. The triple pattern to add is something like `?x <predicateIRI> ?y` where `?x` should be derived from `selectedClassIRI`. Note that `?y` is fresh new variable that should be added also to the head of the query (we assume data property values are interesting). The variable `?y` should be called according to the entity remainder or label and should add a counter if there is an already defined variable for that data property.
             * @summary Starting from the current query graph continue to build the query graph through a data property.
             * @param {string} graphElementId The id of the node of the selected class in the query graph.
             * @param {string} sourceClassIRI The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.
             * @param {string} predicateIRI The IRI of the clicked data property.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphDataProperty(graphElementId, sourceClassIRI, predicateIRI, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.putQueryGraphDataProperty(graphElementId, sourceClassIRI, predicateIRI, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * Starting from a query graph which has two nodes representing the same class(es), it returns the query graph in which the two nodes have been joined into a single one. The children of the selected nodes will be grouped in `graphElementId1` and each time we add a children through the previous routes they will be added to this node.
             * @summary Join two GraphNodeElement in one.
             * @param {string} graphElementId1 The id of the node of the selected class in the query graph.
             * @param {string} graphElementId2 The id of the node of the selected class in the query graph.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphJoin(graphElementId1, graphElementId2, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.putQueryGraphJoin(graphElementId1, graphElementId2, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * This route is used when the user click a highlighted object property with ornly one `relatedClasses` or, in the case of more than one `relatedClasses` immediatly after choosing one of them. In this case the triple pattern to add is something like `?x <predicateIRI> ?y` where `?x` and `?y` should be derived from the direction indicated by `isPredicateDirect` of the object property with respect to `sourceClassIRI` and `targetClassIRI`. If there is a cyclic object property the user also should specify the direction if order to correctly assign `?x` and `?y`. Either `?x` or `?y` should be a fresh new variable which should be linked to a new triple pattern `?y rdf:type <targetClassIRI>`. The variable `?y` should be called according to the entity remainder or label and should add a counter if there is an already defined variable for that class.
             * @summary Starting from the current query graph continue to build the query graph through a object property.
             * @param {string} graphElementId The id of the node of the selected class in the query graph.
             * @param {string} sourceClassIRI The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.
             * @param {string} predicateIRI The IRI of the predicate which links source class and target class
             * @param {string} targetClassIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph.
             * @param {boolean} isPredicateDirect If true sourceClassIRI is the domain of predicateIRI, if false sourceClassIRI is the range of predicateIRI.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphObjectProperty(graphElementId, sourceClassIRI, predicateIRI, targetClassIRI, isPredicateDirect, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.putQueryGraphObjectProperty(graphElementId, sourceClassIRI, predicateIRI, targetClassIRI, isPredicateDirect, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
        };
    };
    /**
     * QueryGraphBGPApi - factory interface
     * @export
     */
    const QueryGraphBGPApiFactory = function (configuration, basePath, axios) {
        const localVarFp = QueryGraphBGPApiFp(configuration);
        return {
            /**
             * This path should be used to build the query graph using the path interaction. As a result there will be added to the query several triple pattern (depending on the length of the path) as a sequence of classes and object properties. Data properties never appear in paths, in order to add them use the simple PUT route.
             * @summary Get the query graph that will be rendered by Sparqling, the query head, the sparql code based on the chosen path.
             * @param {string} path Serialization of Path object.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            addPathToQueryGraph(path, queryGraph, options) {
                return localVarFp.addPathToQueryGraph(path, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * This route is used when the user wants to delete a node from the query graph. All the children of this node will be deleted as well as we do not want to create query with completly separated branches. All the variables that are going to be deleted should also be deleted from the head of the query. **WARNING**, if the node has multiple occurrences (due to join operations) every node should be deleted.
             * @summary Delete the GraphElement (and all its children) from the query graph and head.
             * @param {string} graphElementId The GraphElement that should be deleted
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteGraphElementId(graphElementId, queryGraph, options) {
                return localVarFp.deleteGraphElementId(graphElementId, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             *
             * @summary Delete from GraphElement only the class
             * @param {string} graphElementId
             * @param {string} classIRI The class that should be deleted
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteGraphElementIdClass(graphElementId, classIRI, queryGraph, options) {
                return localVarFp.deleteGraphElementIdClass(graphElementId, classIRI, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * Starting from only the clicked class get the query graph that will be rendered by Sparqling, the query head, the sparql code. The sparql query returned will be somthing like `select ?x { ?x a <clickedClassIRI>` }. The variable `?x` should be called according to the entity remainder or label. The variable will be added to the head of the query in order to create a valid SPARQL query.
             * @summary This is the first route to call in order to build the query graph.
             * @param {string} clickedClassIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            getQueryGraph(clickedClassIRI, options) {
                return localVarFp.getQueryGraph(clickedClassIRI, options).then((request) => request(axios, basePath));
            },
            /**
             * This call is used when the user click on a highlighted class and should add a triple pattern of the form like `?x rdf:type <targetClassIRI>`. The server should find `?x` in the SPARQL code as the variable associated to the `sourceClassIRI`.
             * @summary Starting from the current query graph continue to build the query graph through a class.
             * @param {string} graphElementId The id of the node of the selected class in the query graph.
             * @param {string} sourceClassIRI The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.
             * @param {string} targetClassIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphClass(graphElementId, sourceClassIRI, targetClassIRI, queryGraph, options) {
                return localVarFp.putQueryGraphClass(graphElementId, sourceClassIRI, targetClassIRI, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * This route is used when the user click a highlighted data property. The triple pattern to add is something like `?x <predicateIRI> ?y` where `?x` should be derived from `selectedClassIRI`. Note that `?y` is fresh new variable that should be added also to the head of the query (we assume data property values are interesting). The variable `?y` should be called according to the entity remainder or label and should add a counter if there is an already defined variable for that data property.
             * @summary Starting from the current query graph continue to build the query graph through a data property.
             * @param {string} graphElementId The id of the node of the selected class in the query graph.
             * @param {string} sourceClassIRI The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.
             * @param {string} predicateIRI The IRI of the clicked data property.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphDataProperty(graphElementId, sourceClassIRI, predicateIRI, queryGraph, options) {
                return localVarFp.putQueryGraphDataProperty(graphElementId, sourceClassIRI, predicateIRI, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * Starting from a query graph which has two nodes representing the same class(es), it returns the query graph in which the two nodes have been joined into a single one. The children of the selected nodes will be grouped in `graphElementId1` and each time we add a children through the previous routes they will be added to this node.
             * @summary Join two GraphNodeElement in one.
             * @param {string} graphElementId1 The id of the node of the selected class in the query graph.
             * @param {string} graphElementId2 The id of the node of the selected class in the query graph.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphJoin(graphElementId1, graphElementId2, queryGraph, options) {
                return localVarFp.putQueryGraphJoin(graphElementId1, graphElementId2, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * This route is used when the user click a highlighted object property with ornly one `relatedClasses` or, in the case of more than one `relatedClasses` immediatly after choosing one of them. In this case the triple pattern to add is something like `?x <predicateIRI> ?y` where `?x` and `?y` should be derived from the direction indicated by `isPredicateDirect` of the object property with respect to `sourceClassIRI` and `targetClassIRI`. If there is a cyclic object property the user also should specify the direction if order to correctly assign `?x` and `?y`. Either `?x` or `?y` should be a fresh new variable which should be linked to a new triple pattern `?y rdf:type <targetClassIRI>`. The variable `?y` should be called according to the entity remainder or label and should add a counter if there is an already defined variable for that class.
             * @summary Starting from the current query graph continue to build the query graph through a object property.
             * @param {string} graphElementId The id of the node of the selected class in the query graph.
             * @param {string} sourceClassIRI The IRI of the last selected class. It could be selected from the ontology graph or from the query graph.
             * @param {string} predicateIRI The IRI of the predicate which links source class and target class
             * @param {string} targetClassIRI The IRI of the entity clicked on the GRAPHOLscape ontology graph.
             * @param {boolean} isPredicateDirect If true sourceClassIRI is the domain of predicateIRI, if false sourceClassIRI is the range of predicateIRI.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            putQueryGraphObjectProperty(graphElementId, sourceClassIRI, predicateIRI, targetClassIRI, isPredicateDirect, queryGraph, options) {
                return localVarFp.putQueryGraphObjectProperty(graphElementId, sourceClassIRI, predicateIRI, targetClassIRI, isPredicateDirect, queryGraph, options).then((request) => request(axios, basePath));
            },
        };
    };
    /**
     * QueryGraphFilterApi - axios parameter creator
     * @export
     */
    const QueryGraphFilterApiAxiosParamCreator = function (configuration) {
        return {
            /**
             * Translate the filter at index `filterId` to a filter in SPARQL.
             * @summary Modify a filter in the query.
             * @param {number} filterId
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            editFilter: (filterId, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'filterId' is not null or undefined
                assertParamExists('editFilter', 'filterId', filterId);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('editFilter', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/node/filter/edit/{filterId}`
                    .replace(`{${"filterId"}}`, encodeURIComponent(String(filterId)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * Translate the filter at index `filterId` to a new filter in SPARQL.
             * @summary Create a new filter in the query.
             * @param {number} filterId
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            newFilter: (filterId, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'filterId' is not null or undefined
                assertParamExists('newFilter', 'filterId', filterId);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('newFilter', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/node/filter/{filterId}`
                    .replace(`{${"filterId"}}`, encodeURIComponent(String(filterId)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             *
             * @summary Remove the filters.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            removeAllFilters: (queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('removeAllFilters', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/node/filter/remove/all`;
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             *
             * @summary Remove the filter at index `filterId` from the query.
             * @param {number} filterId
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            removeFilter: (filterId, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'filterId' is not null or undefined
                assertParamExists('removeFilter', 'filterId', filterId);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('removeFilter', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/node/filter/remove/{filterId}`
                    .replace(`{${"filterId"}}`, encodeURIComponent(String(filterId)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
        };
    };
    /**
     * QueryGraphFilterApi - functional programming interface
     * @export
     */
    const QueryGraphFilterApiFp = function (configuration) {
        const localVarAxiosParamCreator = QueryGraphFilterApiAxiosParamCreator(configuration);
        return {
            /**
             * Translate the filter at index `filterId` to a filter in SPARQL.
             * @summary Modify a filter in the query.
             * @param {number} filterId
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            editFilter(filterId, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.editFilter(filterId, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * Translate the filter at index `filterId` to a new filter in SPARQL.
             * @summary Create a new filter in the query.
             * @param {number} filterId
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            newFilter(filterId, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.newFilter(filterId, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             *
             * @summary Remove the filters.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            removeAllFilters(queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAllFilters(queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             *
             * @summary Remove the filter at index `filterId` from the query.
             * @param {number} filterId
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            removeFilter(filterId, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.removeFilter(filterId, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
        };
    };
    /**
     * QueryGraphFilterApi - factory interface
     * @export
     */
    const QueryGraphFilterApiFactory = function (configuration, basePath, axios) {
        const localVarFp = QueryGraphFilterApiFp(configuration);
        return {
            /**
             * Translate the filter at index `filterId` to a filter in SPARQL.
             * @summary Modify a filter in the query.
             * @param {number} filterId
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            editFilter(filterId, queryGraph, options) {
                return localVarFp.editFilter(filterId, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * Translate the filter at index `filterId` to a new filter in SPARQL.
             * @summary Create a new filter in the query.
             * @param {number} filterId
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            newFilter(filterId, queryGraph, options) {
                return localVarFp.newFilter(filterId, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             *
             * @summary Remove the filters.
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            removeAllFilters(queryGraph, options) {
                return localVarFp.removeAllFilters(queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             *
             * @summary Remove the filter at index `filterId` from the query.
             * @param {number} filterId
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            removeFilter(filterId, queryGraph, options) {
                return localVarFp.removeFilter(filterId, queryGraph, options).then((request) => request(axios, basePath));
            },
        };
    };
    /**
     * QueryGraphHeadApi - axios parameter creator
     * @export
     */
    const QueryGraphHeadApiAxiosParamCreator = function (configuration) {
        return {
            /**
             * Explicitley add a term to the query head. All the data property variables are added automatically to the head during the query graph construction. This will add to the head only variables associated to classes (`rdf:type` triple pattern) or data properties.
             * @summary Add the head term to the query graph.
             * @param {string} graphElementId The id of the graph node that should be added to the head
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            addHeadTerm: (graphElementId, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'graphElementId' is not null or undefined
                assertParamExists('addHeadTerm', 'graphElementId', graphElementId);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('addHeadTerm', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/head/add/{graphElementId}`
                    .replace(`{${"graphElementId"}}`, encodeURIComponent(String(graphElementId)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * The having aggregation function is defined in the groupBy field of the query graph in the request body.
             * @summary Set the having filter of the aggregation function to the head term.
             * @param {string} headTerm The head term that should be involved in the having filter
             * @param {string} direction
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            aggregationHavingHeadTerm: (headTerm, direction, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'headTerm' is not null or undefined
                assertParamExists('aggregationHavingHeadTerm', 'headTerm', headTerm);
                // verify required parameter 'direction' is not null or undefined
                assertParamExists('aggregationHavingHeadTerm', 'direction', direction);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('aggregationHavingHeadTerm', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/head/aggregation/having/{headTerm}`
                    .replace(`{${"headTerm"}}`, encodeURIComponent(String(headTerm)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                if (direction !== undefined) {
                    localVarQueryParameter['direction'] = direction;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * The aggregation function is defined in the group by field of the query graph in the request body. Remember to set the alias of the head based on function name and variable.
             * @summary Set the aggregation function to the head term.
             * @param {string} headTerm The head term that should be involved in the aggregation function
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            aggregationHeadTerm: (headTerm, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'headTerm' is not null or undefined
                assertParamExists('aggregationHeadTerm', 'headTerm', headTerm);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('aggregationHeadTerm', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/head/aggregation/{headTerm}`
                    .replace(`{${"headTerm"}}`, encodeURIComponent(String(headTerm)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * The path param should be the id of the HeadElement.
             * @summary Delete the head term from the query graph.
             * @param {string} headTerm The head term that should be deleted
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteHeadTerm: (headTerm, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'headTerm' is not null or undefined
                assertParamExists('deleteHeadTerm', 'headTerm', headTerm);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('deleteHeadTerm', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/head/delete/{headTerm}`
                    .replace(`{${"headTerm"}}`, encodeURIComponent(String(headTerm)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * The function is defined in the head term of the query graph in the request body. Remember to set the alias of the head based on function name and variable.
             * @summary Set a function to the head term from the query graph.
             * @param {string} headTerm The head term that should be involved inthe function
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            functionHeadTerm: (headTerm, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'headTerm' is not null or undefined
                assertParamExists('functionHeadTerm', 'headTerm', headTerm);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('functionHeadTerm', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/head/function/{headTerm}`
                    .replace(`{${"headTerm"}}`, encodeURIComponent(String(headTerm)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * The OrderBy object is passed in the request body in the Query Graph.
             * @summary Order by the head from the query graph.
             * @param {string} headTerm The head term that should be ordered
             * @param {'desc' | 'asc'} direction
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            orderByHeadTerm: (headTerm, direction, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'headTerm' is not null or undefined
                assertParamExists('orderByHeadTerm', 'headTerm', headTerm);
                // verify required parameter 'direction' is not null or undefined
                assertParamExists('orderByHeadTerm', 'direction', direction);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('orderByHeadTerm', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/head/orderBy/{headTerm}`
                    .replace(`{${"headTerm"}}`, encodeURIComponent(String(headTerm)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                if (direction !== undefined) {
                    localVarQueryParameter['direction'] = direction;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             * Put the alias in the HeadElement passed via request body.
             * @summary Rename the head term from the query graph using alias.
             * @param {string} headTerm The head term that should be renamed
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            renameHeadTerm: (headTerm, queryGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
                // verify required parameter 'headTerm' is not null or undefined
                assertParamExists('renameHeadTerm', 'headTerm', headTerm);
                // verify required parameter 'queryGraph' is not null or undefined
                assertParamExists('renameHeadTerm', 'queryGraph', queryGraph);
                const localVarPath = `/queryGraph/head/rename/{headTerm}`
                    .replace(`{${"headTerm"}}`, encodeURIComponent(String(headTerm)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                localVarHeaderParameter['Content-Type'] = 'application/json';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = serializeDataIfNeeded(queryGraph, localVarRequestOptions, configuration);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
        };
    };
    /**
     * QueryGraphHeadApi - functional programming interface
     * @export
     */
    const QueryGraphHeadApiFp = function (configuration) {
        const localVarAxiosParamCreator = QueryGraphHeadApiAxiosParamCreator(configuration);
        return {
            /**
             * Explicitley add a term to the query head. All the data property variables are added automatically to the head during the query graph construction. This will add to the head only variables associated to classes (`rdf:type` triple pattern) or data properties.
             * @summary Add the head term to the query graph.
             * @param {string} graphElementId The id of the graph node that should be added to the head
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            addHeadTerm(graphElementId, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.addHeadTerm(graphElementId, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * The having aggregation function is defined in the groupBy field of the query graph in the request body.
             * @summary Set the having filter of the aggregation function to the head term.
             * @param {string} headTerm The head term that should be involved in the having filter
             * @param {string} direction
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            aggregationHavingHeadTerm(headTerm, direction, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.aggregationHavingHeadTerm(headTerm, direction, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * The aggregation function is defined in the group by field of the query graph in the request body. Remember to set the alias of the head based on function name and variable.
             * @summary Set the aggregation function to the head term.
             * @param {string} headTerm The head term that should be involved in the aggregation function
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            aggregationHeadTerm(headTerm, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.aggregationHeadTerm(headTerm, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * The path param should be the id of the HeadElement.
             * @summary Delete the head term from the query graph.
             * @param {string} headTerm The head term that should be deleted
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteHeadTerm(headTerm, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteHeadTerm(headTerm, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * The function is defined in the head term of the query graph in the request body. Remember to set the alias of the head based on function name and variable.
             * @summary Set a function to the head term from the query graph.
             * @param {string} headTerm The head term that should be involved inthe function
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            functionHeadTerm(headTerm, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.functionHeadTerm(headTerm, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * The OrderBy object is passed in the request body in the Query Graph.
             * @summary Order by the head from the query graph.
             * @param {string} headTerm The head term that should be ordered
             * @param {'desc' | 'asc'} direction
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            orderByHeadTerm(headTerm, direction, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.orderByHeadTerm(headTerm, direction, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             * Put the alias in the HeadElement passed via request body.
             * @summary Rename the head term from the query graph using alias.
             * @param {string} headTerm The head term that should be renamed
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            renameHeadTerm(headTerm, queryGraph, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.renameHeadTerm(headTerm, queryGraph, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
        };
    };
    /**
     * QueryGraphHeadApi - factory interface
     * @export
     */
    const QueryGraphHeadApiFactory = function (configuration, basePath, axios) {
        const localVarFp = QueryGraphHeadApiFp(configuration);
        return {
            /**
             * Explicitley add a term to the query head. All the data property variables are added automatically to the head during the query graph construction. This will add to the head only variables associated to classes (`rdf:type` triple pattern) or data properties.
             * @summary Add the head term to the query graph.
             * @param {string} graphElementId The id of the graph node that should be added to the head
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            addHeadTerm(graphElementId, queryGraph, options) {
                return localVarFp.addHeadTerm(graphElementId, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * The having aggregation function is defined in the groupBy field of the query graph in the request body.
             * @summary Set the having filter of the aggregation function to the head term.
             * @param {string} headTerm The head term that should be involved in the having filter
             * @param {string} direction
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            aggregationHavingHeadTerm(headTerm, direction, queryGraph, options) {
                return localVarFp.aggregationHavingHeadTerm(headTerm, direction, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * The aggregation function is defined in the group by field of the query graph in the request body. Remember to set the alias of the head based on function name and variable.
             * @summary Set the aggregation function to the head term.
             * @param {string} headTerm The head term that should be involved in the aggregation function
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            aggregationHeadTerm(headTerm, queryGraph, options) {
                return localVarFp.aggregationHeadTerm(headTerm, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * The path param should be the id of the HeadElement.
             * @summary Delete the head term from the query graph.
             * @param {string} headTerm The head term that should be deleted
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteHeadTerm(headTerm, queryGraph, options) {
                return localVarFp.deleteHeadTerm(headTerm, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * The function is defined in the head term of the query graph in the request body. Remember to set the alias of the head based on function name and variable.
             * @summary Set a function to the head term from the query graph.
             * @param {string} headTerm The head term that should be involved inthe function
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            functionHeadTerm(headTerm, queryGraph, options) {
                return localVarFp.functionHeadTerm(headTerm, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * The OrderBy object is passed in the request body in the Query Graph.
             * @summary Order by the head from the query graph.
             * @param {string} headTerm The head term that should be ordered
             * @param {'desc' | 'asc'} direction
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            orderByHeadTerm(headTerm, direction, queryGraph, options) {
                return localVarFp.orderByHeadTerm(headTerm, direction, queryGraph, options).then((request) => request(axios, basePath));
            },
            /**
             * Put the alias in the HeadElement passed via request body.
             * @summary Rename the head term from the query graph using alias.
             * @param {string} headTerm The head term that should be renamed
             * @param {QueryGraph} queryGraph
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            renameHeadTerm(headTerm, queryGraph, options) {
                return localVarFp.renameHeadTerm(headTerm, queryGraph, options).then((request) => request(axios, basePath));
            },
        };
    };
    /**
     * StandaloneApi - axios parameter creator
     * @export
     */
    const StandaloneApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Return the graphol file as a string to be parsed by Grapholscape.
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            standaloneOntologyGrapholGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
                const localVarPath = `/standalone/ontology/graphol`;
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
            /**
             *
             * @summary Uploads a .graphol or .owl file. This will be used only by standalone Sparqling.
             * @param {any} [file]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            standaloneOntologyUploadPost: (file, options = {}) => __awaiter(this, void 0, void 0, function* () {
                const localVarPath = `/standalone/ontology/upload`;
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                if (file !== undefined) {
                    localVarFormParams.append('file', file);
                }
                localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = localVarFormParams;
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            }),
        };
    };
    /**
     * StandaloneApi - functional programming interface
     * @export
     */
    const StandaloneApiFp = function (configuration) {
        const localVarAxiosParamCreator = StandaloneApiAxiosParamCreator(configuration);
        return {
            /**
             *
             * @summary Return the graphol file as a string to be parsed by Grapholscape.
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            standaloneOntologyGrapholGet(options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.standaloneOntologyGrapholGet(options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
            /**
             *
             * @summary Uploads a .graphol or .owl file. This will be used only by standalone Sparqling.
             * @param {any} [file]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            standaloneOntologyUploadPost(file, options) {
                return __awaiter(this, void 0, void 0, function* () {
                    const localVarAxiosArgs = yield localVarAxiosParamCreator.standaloneOntologyUploadPost(file, options);
                    return createRequestFunction(localVarAxiosArgs, axios, BASE_PATH, configuration);
                });
            },
        };
    };
    /**
     * StandaloneApi - object-oriented interface
     * @export
     * @class StandaloneApi
     * @extends {BaseAPI}
     */
    class StandaloneApi extends BaseAPI {
        /**
         *
         * @summary Return the graphol file as a string to be parsed by Grapholscape.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof StandaloneApi
         */
        standaloneOntologyGrapholGet(options) {
            return StandaloneApiFp(this.configuration).standaloneOntologyGrapholGet(options).then((request) => request(this.axios, this.basePath));
        }
        /**
         *
         * @summary Uploads a .graphol or .owl file. This will be used only by standalone Sparqling.
         * @param {any} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof StandaloneApi
         */
        standaloneOntologyUploadPost(file, options) {
            return StandaloneApiFp(this.configuration).standaloneOntologyUploadPost(file, options).then((request) => request(this.axios, this.basePath));
        }
    }

    let body;
    let selectedGraphElement;
    let standalone;
    // map GraphElementId+IRI -> OriginGrapholNodeID
    // Use iri to distinguish children of a GraphElement
    const originGrapholNodes = new Map();
    function setQueryBody(newBody) {
        body = newBody;
        return body;
    }
    function setSelectedGraphElement(newGraphElement) {
        selectedGraphElement = newGraphElement;
    }
    function getQueryBody() { return body; }
    function getSelectedGraphElement$1() { return selectedGraphElement; }
    function getOriginGrapholNodes() {
        return originGrapholNodes;
    }
    function isStandalone() {
        return standalone;
    }
    function setStandalone(value) {
        standalone = value;
    }

    /**
     * Add a filter to the model and return its ID
     * @param filter filter to add
     * @returns the ID of the new filter
     */
    function addFilter$2(filter) {
        const body = getQueryBody();
        if (!body.filters)
            body.filters = [];
        return body.filters.push(filter) - 1;
    }
    function removeFilter(filterId) {
        var _a;
        const body = getQueryBody();
        (_a = body === null || body === void 0 ? void 0 : body.filters) === null || _a === void 0 ? void 0 : _a.splice(filterId, 1);
    }
    function getFilterById(filterId) {
        const body = getQueryBody();
        return body.filters[filterId];
    }
    function updateFilter(filterId, filter) {
        const body = getQueryBody();
        body.filters[filterId] = filter;
    }
    function getFiltersOnVariable(variable) {
        var _a;
        const body = getQueryBody();
        let filters = (_a = body === null || body === void 0 ? void 0 : body.filters) === null || _a === void 0 ? void 0 : _a.map((filter, index) => {
            return { id: index, value: filter };
        });
        return filters === null || filters === void 0 ? void 0 : filters.filter(f => {
            return f.value.expression.parameters[0].type === VarOrConstantTypeEnum.Var &&
                f.value.expression.parameters[0].value === variable;
        });
    }

    let file;
    function getOntologyFile() {
        return file;
    }
    function setOntologyFile(value) {
        file = value;
    }

    function getGraphElementByID(id) {
        var _a;
        const graph = (_a = getQueryBody()) === null || _a === void 0 ? void 0 : _a.graph;
        return findGraphElement(graph, (elem) => elem.id === id);
    }
    function getGraphElementByIRI(iri) {
        var _a;
        const graph = (_a = getQueryBody()) === null || _a === void 0 ? void 0 : _a.graph;
        return findGraphElement(graph, (elem) => graphElementHasIri(elem, iri));
    }
    /**
     * Find an element in the query-graph satisfying the test condition
     * @param graph the element to test
     * @param test boolean test function
     * @returns the first element satisfying the condition
     */
    function findGraphElement(graph, test) {
        if (!graph)
            return null;
        if (test(graph))
            return graph;
        if (graph.children) {
            for (let child of graph.children) {
                let res = findGraphElement(child, test);
                if (res)
                    return res;
            }
        }
    }
    /**
     * Get the iri of an entity contained in a GraphElement
     * @param elem the GraphElement to extract IRI from
     * @param i the entity index in the array, default first one
     * @returns
     */
    function getIri(elem, i = 0) {
        var _a;
        return (_a = elem === null || elem === void 0 ? void 0 : elem.entities[i]) === null || _a === void 0 ? void 0 : _a.iri;
    }
    /**
     * Get the prefixed iri of an entity contained in a GraphElement
     * @param elem the GraphElement to extract IRI from
     * @param i the entity index in the array, default first one
     * @returns
     */
    function getPrefixedIri(elem, i = 0) {
        var _a;
        return (_a = elem === null || elem === void 0 ? void 0 : elem.entities[i]) === null || _a === void 0 ? void 0 : _a.prefixedIri;
    }
    function getEntityType(elem) {
        var _a;
        return (_a = elem === null || elem === void 0 ? void 0 : elem.entities[0]) === null || _a === void 0 ? void 0 : _a.type;
    }
    function graphElementHasIri(elem, iri) {
        var _a;
        return (_a = elem === null || elem === void 0 ? void 0 : elem.entities) === null || _a === void 0 ? void 0 : _a.some((entity) => {
            return entity.iri === iri || entity.prefixedIri === iri;
        });
    }
    function canStartJoin(elem) {
        var _a;
        if (!elem)
            return false;
        return ((_a = elem.entities) === null || _a === void 0 ? void 0 : _a.length) === 1 && isClass(elem);
    }
    function isJoinAllowed(targetElem, startElem) {
        if (!targetElem || !startElem)
            return false;
        const areBothClasses = isClass(startElem) && isClass(targetElem);
        const doesTargetHasSameIri = graphElementHasIri(targetElem, getIri(startElem));
        return areBothClasses && doesTargetHasSameIri;
    }
    function isClass(graphElement) {
        return getEntityType(graphElement) === EntityTypeEnum.Class;
    }
    function isObjectProperty(graphElement) {
        return getEntityType(graphElement) === EntityTypeEnum.ObjectProperty || isInverseObjectProperty(graphElement);
    }
    function isInverseObjectProperty(graphElement) {
        return getEntityType(graphElement) === EntityTypeEnum.InverseObjectProperty;
    }
    /**
     * Return a set of GraphElements which are present in newGraph and not in oldGraph
     */
    function getdiffNew(oldGraph, newGraph) {
        if (!oldGraph)
            return [newGraph];
        let result = [];
        let res = findGraphElement(oldGraph, e => areGraphElementsEqual(e, newGraph));
        if (!res)
            result.push(newGraph);
        if (newGraph === null || newGraph === void 0 ? void 0 : newGraph.children) {
            for (let graphElement of newGraph.children) {
                let res2 = getdiffNew(oldGraph, graphElement);
                if (res2)
                    result.push(...res2);
            }
        }
        return result;
    }
    function areGraphElementsEqual(ge1, ge2) {
        const hasSameId = ge1.id === ge2.id;
        const hasSameFilters = getFiltersOnVariable(ge1.id) === getFiltersOnVariable(ge2.id);
        const hasSameEntities = JSON.stringify(ge1.entities) === JSON.stringify(ge2.entities);
        return hasSameId && hasSameFilters && hasSameEntities;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */
    const t$1=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,e$2=Symbol(),n$3=new Map;class s$3{constructor(t,n){if(this._$cssResult$=!0,n!==e$2)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t;}get styleSheet(){let e=n$3.get(this.cssText);return t$1&&void 0===e&&(n$3.set(this.cssText,e=new CSSStyleSheet),e.replaceSync(this.cssText)),e}toString(){return this.cssText}}const o$4=t=>new s$3("string"==typeof t?t:t+"",e$2),r$2=(t,...n)=>{const o=1===t.length?t[0]:n.reduce(((e,n,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+t[s+1]),t[0]);return new s$3(o,e$2)},i$2=(e,n)=>{t$1?e.adoptedStyleSheets=n.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):n.forEach((t=>{const n=document.createElement("style"),s=window.litNonce;void 0!==s&&n.setAttribute("nonce",s),n.textContent=t.cssText,e.appendChild(n);}));},S$1=t$1?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const n of t.cssRules)e+=n.cssText;return o$4(e)})(t):t;

    /**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */var s$2;const e$1=window.trustedTypes,r$1=e$1?e$1.emptyScript:"",h$1=window.reactiveElementPolyfillSupport,o$3={toAttribute(t,i){switch(i){case Boolean:t=t?r$1:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t);}return t},fromAttribute(t,i){let s=t;switch(i){case Boolean:s=null!==t;break;case Number:s=null===t?null:Number(t);break;case Object:case Array:try{s=JSON.parse(t);}catch(t){s=null;}}return s}},n$2=(t,i)=>i!==t&&(i==i||t==t),l$2={attribute:!0,type:String,converter:o$3,reflect:!1,hasChanged:n$2};class a$1 extends HTMLElement{constructor(){super(),this._$Et=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Ei=null,this.o();}static addInitializer(t){var i;null!==(i=this.l)&&void 0!==i||(this.l=[]),this.l.push(t);}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((i,s)=>{const e=this._$Eh(s,i);void 0!==e&&(this._$Eu.set(e,s),t.push(e));})),t}static createProperty(t,i=l$2){if(i.state&&(i.attribute=!1),this.finalize(),this.elementProperties.set(t,i),!i.noAccessor&&!this.prototype.hasOwnProperty(t)){const s="symbol"==typeof t?Symbol():"__"+t,e=this.getPropertyDescriptor(t,s,i);void 0!==e&&Object.defineProperty(this.prototype,t,e);}}static getPropertyDescriptor(t,i,s){return {get(){return this[i]},set(e){const r=this[t];this[i]=e,this.requestUpdate(t,r,s);},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||l$2}static finalize(){if(this.hasOwnProperty("finalized"))return !1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Eu=new Map,this.hasOwnProperty("properties")){const t=this.properties,i=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const s of i)this.createProperty(s,t[s]);}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(i){const s=[];if(Array.isArray(i)){const e=new Set(i.flat(1/0).reverse());for(const i of e)s.unshift(S$1(i));}else void 0!==i&&s.push(S$1(i));return s}static _$Eh(t,i){const s=i.attribute;return !1===s?void 0:"string"==typeof s?s:"string"==typeof t?t.toLowerCase():void 0}o(){var t;this._$Ep=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Em(),this.requestUpdate(),null===(t=this.constructor.l)||void 0===t||t.forEach((t=>t(this)));}addController(t){var i,s;(null!==(i=this._$Eg)&&void 0!==i?i:this._$Eg=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(s=t.hostConnected)||void 0===s||s.call(t));}removeController(t){var i;null===(i=this._$Eg)||void 0===i||i.splice(this._$Eg.indexOf(t)>>>0,1);}_$Em(){this.constructor.elementProperties.forEach(((t,i)=>{this.hasOwnProperty(i)&&(this._$Et.set(i,this[i]),delete this[i]);}));}createRenderRoot(){var t;const s=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return i$2(s,this.constructor.elementStyles),s}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostConnected)||void 0===i?void 0:i.call(t)}));}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostDisconnected)||void 0===i?void 0:i.call(t)}));}attributeChangedCallback(t,i,s){this._$AK(t,s);}_$ES(t,i,s=l$2){var e,r;const h=this.constructor._$Eh(t,s);if(void 0!==h&&!0===s.reflect){const n=(null!==(r=null===(e=s.converter)||void 0===e?void 0:e.toAttribute)&&void 0!==r?r:o$3.toAttribute)(i,s.type);this._$Ei=t,null==n?this.removeAttribute(h):this.setAttribute(h,n),this._$Ei=null;}}_$AK(t,i){var s,e,r;const h=this.constructor,n=h._$Eu.get(t);if(void 0!==n&&this._$Ei!==n){const t=h.getPropertyOptions(n),l=t.converter,a=null!==(r=null!==(e=null===(s=l)||void 0===s?void 0:s.fromAttribute)&&void 0!==e?e:"function"==typeof l?l:null)&&void 0!==r?r:o$3.fromAttribute;this._$Ei=n,this[n]=a(i,t.type),this._$Ei=null;}}requestUpdate(t,i,s){let e=!0;void 0!==t&&(((s=s||this.constructor.getPropertyOptions(t)).hasChanged||n$2)(this[t],i)?(this._$AL.has(t)||this._$AL.set(t,i),!0===s.reflect&&this._$Ei!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,s))):e=!1),!this.isUpdatePending&&e&&(this._$Ep=this._$E_());}async _$E_(){this.isUpdatePending=!0;try{await this._$Ep;}catch(t){Promise.reject(t);}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Et&&(this._$Et.forEach(((t,i)=>this[i]=t)),this._$Et=void 0);let i=!1;const s=this._$AL;try{i=this.shouldUpdate(s),i?(this.willUpdate(s),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostUpdate)||void 0===i?void 0:i.call(t)})),this.update(s)):this._$EU();}catch(t){throw i=!1,this._$EU(),t}i&&this._$AE(s);}willUpdate(t){}_$AE(t){var i;null===(i=this._$Eg)||void 0===i||i.forEach((t=>{var i;return null===(i=t.hostUpdated)||void 0===i?void 0:i.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t);}_$EU(){this._$AL=new Map,this.isUpdatePending=!1;}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$Ep}shouldUpdate(t){return !0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,i)=>this._$ES(i,this[i],t))),this._$EC=void 0),this._$EU();}updated(t){}firstUpdated(t){}}a$1.finalized=!0,a$1.elementProperties=new Map,a$1.elementStyles=[],a$1.shadowRootOptions={mode:"open"},null==h$1||h$1({ReactiveElement:a$1}),(null!==(s$2=globalThis.reactiveElementVersions)&&void 0!==s$2?s$2:globalThis.reactiveElementVersions=[]).push("1.3.1");

    /**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */
    var t;const i$1=globalThis.trustedTypes,s$1=i$1?i$1.createPolicy("lit-html",{createHTML:t=>t}):void 0,e=`lit$${(Math.random()+"").slice(9)}$`,o$2="?"+e,n$1=`<${o$2}>`,l$1=document,h=(t="")=>l$1.createComment(t),r=t=>null===t||"object"!=typeof t&&"function"!=typeof t,d=Array.isArray,u=t=>{var i;return d(t)||"function"==typeof(null===(i=t)||void 0===i?void 0:i[Symbol.iterator])},c=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,v=/-->/g,a=/>/g,f=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,_=/'/g,m=/"/g,g=/^(?:script|style|textarea|title)$/i,p$1=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),$=p$1(1),y=p$1(2),b=Symbol.for("lit-noChange"),w=Symbol.for("lit-nothing"),T=new WeakMap,x=(t,i,s)=>{var e,o;const n=null!==(e=null==s?void 0:s.renderBefore)&&void 0!==e?e:i;let l=n._$litPart$;if(void 0===l){const t=null!==(o=null==s?void 0:s.renderBefore)&&void 0!==o?o:null;n._$litPart$=l=new N(i.insertBefore(h(),t),t,void 0,null!=s?s:{});}return l._$AI(t),l},A=l$1.createTreeWalker(l$1,129,null,!1),C=(t,i)=>{const o=t.length-1,l=[];let h,r=2===i?"<svg>":"",d=c;for(let i=0;i<o;i++){const s=t[i];let o,u,p=-1,$=0;for(;$<s.length&&(d.lastIndex=$,u=d.exec(s),null!==u);)$=d.lastIndex,d===c?"!--"===u[1]?d=v:void 0!==u[1]?d=a:void 0!==u[2]?(g.test(u[2])&&(h=RegExp("</"+u[2],"g")),d=f):void 0!==u[3]&&(d=f):d===f?">"===u[0]?(d=null!=h?h:c,p=-1):void 0===u[1]?p=-2:(p=d.lastIndex-u[2].length,o=u[1],d=void 0===u[3]?f:'"'===u[3]?m:_):d===m||d===_?d=f:d===v||d===a?d=c:(d=f,h=void 0);const y=d===f&&t[i+1].startsWith("/>")?" ":"";r+=d===c?s+n$1:p>=0?(l.push(o),s.slice(0,p)+"$lit$"+s.slice(p)+e+y):s+e+(-2===p?(l.push(void 0),i):y);}const u=r+(t[o]||"<?>")+(2===i?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return [void 0!==s$1?s$1.createHTML(u):u,l]};class E{constructor({strings:t,_$litType$:s},n){let l;this.parts=[];let r=0,d=0;const u=t.length-1,c=this.parts,[v,a]=C(t,s);if(this.el=E.createElement(v,n),A.currentNode=this.el.content,2===s){const t=this.el.content,i=t.firstChild;i.remove(),t.append(...i.childNodes);}for(;null!==(l=A.nextNode())&&c.length<u;){if(1===l.nodeType){if(l.hasAttributes()){const t=[];for(const i of l.getAttributeNames())if(i.endsWith("$lit$")||i.startsWith(e)){const s=a[d++];if(t.push(i),void 0!==s){const t=l.getAttribute(s.toLowerCase()+"$lit$").split(e),i=/([.?@])?(.*)/.exec(s);c.push({type:1,index:r,name:i[2],strings:t,ctor:"."===i[1]?M:"?"===i[1]?H:"@"===i[1]?I:S});}else c.push({type:6,index:r});}for(const i of t)l.removeAttribute(i);}if(g.test(l.tagName)){const t=l.textContent.split(e),s=t.length-1;if(s>0){l.textContent=i$1?i$1.emptyScript:"";for(let i=0;i<s;i++)l.append(t[i],h()),A.nextNode(),c.push({type:2,index:++r});l.append(t[s],h());}}}else if(8===l.nodeType)if(l.data===o$2)c.push({type:2,index:r});else {let t=-1;for(;-1!==(t=l.data.indexOf(e,t+1));)c.push({type:7,index:r}),t+=e.length-1;}r++;}}static createElement(t,i){const s=l$1.createElement("template");return s.innerHTML=t,s}}function P(t,i,s=t,e){var o,n,l,h;if(i===b)return i;let d=void 0!==e?null===(o=s._$Cl)||void 0===o?void 0:o[e]:s._$Cu;const u=r(i)?void 0:i._$litDirective$;return (null==d?void 0:d.constructor)!==u&&(null===(n=null==d?void 0:d._$AO)||void 0===n||n.call(d,!1),void 0===u?d=void 0:(d=new u(t),d._$AT(t,s,e)),void 0!==e?(null!==(l=(h=s)._$Cl)&&void 0!==l?l:h._$Cl=[])[e]=d:s._$Cu=d),void 0!==d&&(i=P(t,d._$AS(t,i.values),d,e)),i}class V{constructor(t,i){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=i;}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var i;const{el:{content:s},parts:e}=this._$AD,o=(null!==(i=null==t?void 0:t.creationScope)&&void 0!==i?i:l$1).importNode(s,!0);A.currentNode=o;let n=A.nextNode(),h=0,r=0,d=e[0];for(;void 0!==d;){if(h===d.index){let i;2===d.type?i=new N(n,n.nextSibling,this,t):1===d.type?i=new d.ctor(n,d.name,d.strings,this,t):6===d.type&&(i=new L(n,this,t)),this.v.push(i),d=e[++r];}h!==(null==d?void 0:d.index)&&(n=A.nextNode(),h++);}return o}m(t){let i=0;for(const s of this.v)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++;}}class N{constructor(t,i,s,e){var o;this.type=2,this._$AH=w,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cg=null===(o=null==e?void 0:e.isConnected)||void 0===o||o;}get _$AU(){var t,i;return null!==(i=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==i?i:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=P(this,t,i),r(t)?t===w||null==t||""===t?(this._$AH!==w&&this._$AR(),this._$AH=w):t!==this._$AH&&t!==b&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.k(t):u(t)?this.S(t):this.$(t);}A(t,i=this._$AB){return this._$AA.parentNode.insertBefore(t,i)}k(t){this._$AH!==t&&(this._$AR(),this._$AH=this.A(t));}$(t){this._$AH!==w&&r(this._$AH)?this._$AA.nextSibling.data=t:this.k(l$1.createTextNode(t)),this._$AH=t;}T(t){var i;const{values:s,_$litType$:e}=t,o="number"==typeof e?this._$AC(t):(void 0===e.el&&(e.el=E.createElement(e.h,this.options)),e);if((null===(i=this._$AH)||void 0===i?void 0:i._$AD)===o)this._$AH.m(s);else {const t=new V(o,this),i=t.p(this.options);t.m(s),this.k(i),this._$AH=t;}}_$AC(t){let i=T.get(t.strings);return void 0===i&&T.set(t.strings,i=new E(t)),i}S(t){d(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const o of t)e===i.length?i.push(s=new N(this.A(h()),this.A(h()),this,this.options)):s=i[e],s._$AI(o),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e);}_$AR(t=this._$AA.nextSibling,i){var s;for(null===(s=this._$AP)||void 0===s||s.call(this,!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i;}}setConnected(t){var i;void 0===this._$AM&&(this._$Cg=t,null===(i=this._$AP)||void 0===i||i.call(this,t));}}class S{constructor(t,i,s,e,o){this.type=1,this._$AH=w,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=o,s.length>2||""!==s[0]||""!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=w;}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,i=this,s,e){const o=this.strings;let n=!1;if(void 0===o)t=P(this,t,i,0),n=!r(t)||t!==this._$AH&&t!==b,n&&(this._$AH=t);else {const e=t;let l,h;for(t=o[0],l=0;l<o.length-1;l++)h=P(this,e[s+l],i,l),h===b&&(h=this._$AH[l]),n||(n=!r(h)||h!==this._$AH[l]),h===w?t=w:t!==w&&(t+=(null!=h?h:"")+o[l+1]),this._$AH[l]=h;}n&&!e&&this.C(t);}C(t){t===w?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"");}}class M extends S{constructor(){super(...arguments),this.type=3;}C(t){this.element[this.name]=t===w?void 0:t;}}const k=i$1?i$1.emptyScript:"";class H extends S{constructor(){super(...arguments),this.type=4;}C(t){t&&t!==w?this.element.setAttribute(this.name,k):this.element.removeAttribute(this.name);}}class I extends S{constructor(t,i,s,e,o){super(t,i,s,e,o),this.type=5;}_$AI(t,i=this){var s;if((t=null!==(s=P(this,t,i,0))&&void 0!==s?s:w)===b)return;const e=this._$AH,o=t===w&&e!==w||t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive,n=t!==w&&(e===w||o);o&&this.element.removeEventListener(this.name,this,e),n&&this.element.addEventListener(this.name,this,t),this._$AH=t;}handleEvent(t){var i,s;"function"==typeof this._$AH?this._$AH.call(null!==(s=null===(i=this.options)||void 0===i?void 0:i.host)&&void 0!==s?s:this.element,t):this._$AH.handleEvent(t);}}class L{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s;}get _$AU(){return this._$AM._$AU}_$AI(t){P(this,t);}}const z=window.litHtmlPolyfillSupport;null==z||z(E,N),(null!==(t=globalThis.litHtmlVersions)&&void 0!==t?t:globalThis.litHtmlVersions=[]).push("2.2.1");

    /**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */var l,o$1;class s extends a$1{constructor(){super(...arguments),this.renderOptions={host:this},this._$Dt=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Dt=x(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!1);}render(){return b}}s.finalized=!0,s._$litElement$=!0,null===(l=globalThis.litElementHydrateSupport)||void 0===l||l.call(globalThis,{LitElement:s});const n=globalThis.litElementPolyfillSupport;null==n||n({LitElement:s});(null!==(o$1=globalThis.litElementVersions)&&void 0!==o$1?o$1:globalThis.litElementVersions=[]).push("3.2.0");

    const rubbishBin = y `<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" ><path d="M0 0h24v24H0z" fill="none"/><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/></svg>`;
    const code = y `<svg fill="currentColor"  viewBox="0 0 24 24" ><path fill="currentColor" d="M14.6,16.6L19.2,12L14.6,7.4L16,6L22,12L16,18L14.6,16.6M9.4,16.6L4.8,12L9.4,7.4L8,6L2,12L8,18L9.4,16.6Z" /></svg>`;
    // https://github.com/Templarian/MaterialDesign/blob/master/svg/table-eye.svg
    const tableEye = y `<svg fill="currentColor"  viewBox="0 0 24 24" ><path d="M17 16.88C17.56 16.88 18 17.32 18 17.88S17.56 18.88 17 18.88 16 18.43 16 17.88 16.44 16.88 17 16.88M17 13.88C19.73 13.88 22.06 15.54 23 17.88C22.06 20.22 19.73 21.88 17 21.88S11.94 20.22 11 17.88C11.94 15.54 14.27 13.88 17 13.88M17 15.38C15.62 15.38 14.5 16.5 14.5 17.88S15.62 20.38 17 20.38 19.5 19.26 19.5 17.88 18.38 15.38 17 15.38M18 3H4C2.9 3 2 3.9 2 5V17C2 18.1 2.9 19 4 19H9.42C9.26 18.68 9.12 18.34 9 18C9.12 17.66 9.26 17.32 9.42 17H4V13H10V15.97C10.55 15.11 11.23 14.37 12 13.76V13H13.15C14.31 12.36 15.62 12 17 12C18.06 12 19.07 12.21 20 12.59V5C20 3.9 19.1 3 18 3M10 11H4V7H10V11M18 11H12V7H18V11Z" /></svg>`;
    // https://github.com/Templarian/MaterialDesign/blob/master/svg/asterisk.svg
    const asterisk = y `<svg fill="currentColor"  viewBox="0 0 24 24" ><path d="M21 13H14.4L19.1 17.7L17.7 19.1L13 14.4V21H11V14.3L6.3 19L4.9 17.6L9.4 13H3V11H9.6L4.9 6.3L6.3 4.9L11 9.6V3H13V9.4L17.6 4.8L19 6.3L14.3 11H21V13Z" /></svg>`;
    // https://cygri.github.io/rdf-logos/
    const rdfLogo = y `<svg viewBox="0 0 943 1019" style="fill: currentColor; display: inline-block; height: 20px; width: 20px; padding:2px"><path fill-rule="evenodd" d="M845,668c-6-3-13-6-19-9l5-0c0,0-42-18-45-152 c-4-133,40-156,40-156l-0,0c33-17,61-43,79-78c48-91,14-203-77-252 C729-26,617,8,569,99c-20,37-25,78-19,117l-2-3c0,0,11,48-103,119 c-113,71-165,35-165,35l3,5c-3-2-6-4-10-6C183,317,70,352,22,443 c-48,91-14,203,77,252c68,36,147,26,204-19l-1,2c0,0,41-34,160,30 c94,50,108,100,110,118c-2,69,33,137,98,171c91,48,203,14,252-77 C970,829,935,717,845,668z M635,693c-15,5-58,11-148-37 c-98-53-113-97-115-110c1-16,1-32-2-48l1,1c0,0-8-43,104-112 c100-62,146-50,154-47c5,4,11,7,17,10c11,6,23,11,35,14 c14,13,39,50,42,149c3,99-26,137-42,150C664,671,648,681,635,693z   M622,81c-54,59-55,146-3,196c-26-25-25-77,1-126 c3-4,13-15,27-10c1,0,2,1,3,1c3,1,7,1,10,1 c22-1,38-19,37-41c-0-10-4-18-11-25c50-33,107-37,131-15l1,0 C765,12,677,21,622,81z   M78,431c-54,59-55,146-03,196c-26-25-25-77,1-126 c3-4,13-15,27-10c1,0,2,1,3,1c3,1,7,1,10,1 c22-1,38-19,37-41c-0-10-4-18-11-25c50-33,107-37,131-15l1,0 C221,363,133,371,78,431z   M654,728c-54,59-55,146-3,196c-26-25-25-77,1-126 c3-4,13-15,27-10c1,0,2,1,3,1c3,1,7,1,10,1 c22-1,38-19,37-41c-0-10-4-18-11-25c50-33,107-37,131-15l1,0 C797,659,709,668,654,728z"></path></svg>`;
    // https://materialdesignicons.com/icon/crosshairs-gps
    const crosshair = y `<svg fill="currentColor" viewBox="0 0 24 24"><path  d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M3.05,13H1V11H3.05C3.5,6.83 6.83,3.5 11,3.05V1H13V3.05C17.17,3.5 20.5,6.83 20.95,11H23V13H20.95C20.5,17.17 17.17,20.5 13,20.95V23H11V20.95C6.83,20.5 3.5,17.17 3.05,13M12,5A7,7 0 0,0 5,12A7,7 0 0,0 12,19A7,7 0 0,0 19,12A7,7 0 0,0 12,5Z" /></svg>`;
    // https://materialdesignicons.com/icon/lightbulb-question
    const lightbulbQuestion = y `<svg fill="currentColor" viewBox="0 0 26 26"><path d="M8 2C4.1 2 1 5.1 1 9C1 11.4 2.2 13.5 4 14.7V17C4 17.6 4.4 18 5 18H11C11.6 18 12 17.6 12 17V14.7C13.8 13.4 15 11.3 15 9C15 5.1 11.9 2 8 2M5 21C5 21.6 5.4 22 6 22H10C10.6 22 11 21.6 11 21V20H5V21M20.5 14.5V16H19V14.5H20.5M18.5 9.5H17V9C17 7.3 18.3 6 20 6S23 7.3 23 9C23 10 22.5 10.9 21.7 11.4L21.4 11.6C20.8 12 20.5 12.6 20.5 13.3V13.5H19V13.3C19 12.1 19.6 11 20.6 10.4L20.9 10.2C21.3 9.9 21.5 9.5 21.5 9C21.5 8.2 20.8 7.5 20 7.5S18.5 8.2 18.5 9V9.5Z" /></svg>`;
    // https://materialdesignicons.com/icon/check
    const checkmark = y `<svg fill="currentColor" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" /></svg>`;
    // https://materialdesignicons.com/icon/filter-plus
    const addFilter$1 = y `<svg  fill="currentColor" viewBox="0 0 24 24"><path d="M12 12V19.88C12.04 20.18 11.94 20.5 11.71 20.71C11.32 21.1 10.69 21.1 10.3 20.71L8.29 18.7C8.06 18.47 7.96 18.16 8 17.87V12H7.97L2.21 4.62C1.87 4.19 1.95 3.56 2.38 3.22C2.57 3.08 2.78 3 3 3H17C17.22 3 17.43 3.08 17.62 3.22C18.05 3.56 18.13 4.19 17.79 4.62L12.03 12H12M15 17H18V14H20V17H23V19H20V22H18V19H15V17Z" /></svg>`;
    // https://materialdesignicons.com/icon/pencil
    const edit = y `<svg fill="currentColor" viewBox="0 0 24 24"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>`;
    // https://materialdesignicons.com/icon/playlist-edit
    const editList = y `<svg fill="currentColor" viewBox="0 0 24 24"><path d="M2,6V8H14V6H2M2,10V12H14V10H2M20.04,10.13C19.9,10.13 19.76,10.19 19.65,10.3L18.65,11.3L20.7,13.35L21.7,12.35C21.92,12.14 21.92,11.79 21.7,11.58L20.42,10.3C20.31,10.19 20.18,10.13 20.04,10.13M18.07,11.88L12,17.94V20H14.06L20.12,13.93L18.07,11.88M2,14V16H10V14H2Z" /></svg>`;
    // https://materialdesignicons.com/icon/filter
    const filter$1 = y `<svg fill="currentColor" viewBox="0 0 24 24"><path d="M14,12V19.88C14.04,20.18 13.94,20.5 13.71,20.71C13.32,21.1 12.69,21.1 12.3,20.71L10.29,18.7C10.06,18.47 9.96,18.16 10,17.87V12H9.97L4.21,4.62C3.87,4.19 3.95,3.56 4.38,3.22C4.57,3.08 4.78,3 5,3V3H19V3C19.22,3 19.43,3.08 19.62,3.22C20.05,3.56 20.13,4.19 19.79,4.62L14.03,12H14Z" /></svg>`;
    // https://materialdesignicons.com/icon/table-column-plus-after
    const tableColumnPlus = y `<svg fill="currentColor" viewBox="0 0 24 24"><path d="M11,2A2,2 0 0,1 13,4V20A2,2 0 0,1 11,22H2V2H11M4,10V14H11V10H4M4,16V20H11V16H4M4,4V8H11V4H4M15,11H18V8H20V11H23V13H20V16H18V13H15V11Z" /></svg>`;
    const questionMarkDashed = y `<svg fill="currentColor" viewBox="0 0 24 24"><path d="M13 2.03V4.05C17.39 4.59 20.5 8.58 19.96 12.97C19.5 16.61 16.64 19.5 13 19.93V21.93C18.5 21.38 22.5 16.5 21.95 11C21.5 6.25 17.73 2.5 13 2.03M11 2.06C9.05 2.25 7.19 3 5.67 4.26L7.1 5.74C8.22 4.84 9.57 4.26 11 4.06V2.06M4.26 5.67C3 7.19 2.25 9.04 2.05 11H4.05C4.24 9.58 4.8 8.23 5.69 7.1L4.26 5.67M2.06 13C2.26 14.96 3.03 16.81 4.27 18.33L5.69 16.9C4.81 15.77 4.24 14.42 4.06 13H2.06M7.1 18.37L5.67 19.74C7.18 21 9.04 21.79 11 22V20C9.58 19.82 8.23 19.25 7.1 18.37M20 4H44M13 18H11V16H13V18M13 15H11C11 11.75 14 12 14 10C14 8.9 13.1 8 12 8S10 8.9 10 10H8C8 7.79 9.79 6 12 6S16 7.79 16 10C16 12.5 13 12.75 13 15Z" /></svg>`;
    // https://materialdesignicons.com/icon/content-copy
    const copyContent = y `<svg fill="currentColor" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>`;
    // https://materialdesignicons.com/icon/alpha-s-circle
    const sparqlingIcon = y `<svg fill="currentColor" viewBox="0 0 24 24"><path d="M11,7A2,2 0 0,0 9,9V11A2,2 0 0,0 11,13H13V15H9V17H13A2,2 0 0,0 15,15V13A2,2 0 0,0 13,11H11V9H15V7H11M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2Z" /></svg>`;
    // https://materialdesignicons.com/icon/play-circle-outline
    const playOutlined = y `<svg fill="currentColor" viewBox="0 0 24 24"><path d="M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M10,16.5L16,12L10,7.5V16.5Z" /></svg>`;

    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /** `Object#toString` result references. */
    var symbolTag = '[object Symbol]';

    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max,
        nativeMin = Math.min;

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = function() {
      return root.Date.now();
    };

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce$2(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    var lodash_debounce = debounce$2;

    var heap$1 = {exports: {}};

    (function (module, exports) {
    // Generated by CoffeeScript 1.8.0
    (function() {
      var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

      floor = Math.floor, min = Math.min;


      /*
      Default comparison function to be used
       */

      defaultCmp = function(x, y) {
        if (x < y) {
          return -1;
        }
        if (x > y) {
          return 1;
        }
        return 0;
      };


      /*
      Insert item x in list a, and keep it sorted assuming a is sorted.
      
      If x is already in a, insert it to the right of the rightmost x.
      
      Optional args lo (default 0) and hi (default a.length) bound the slice
      of a to be searched.
       */

      insort = function(a, x, lo, hi, cmp) {
        var mid;
        if (lo == null) {
          lo = 0;
        }
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (lo < 0) {
          throw new Error('lo must be non-negative');
        }
        if (hi == null) {
          hi = a.length;
        }
        while (lo < hi) {
          mid = floor((lo + hi) / 2);
          if (cmp(x, a[mid]) < 0) {
            hi = mid;
          } else {
            lo = mid + 1;
          }
        }
        return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
      };


      /*
      Push item onto heap, maintaining the heap invariant.
       */

      heappush = function(array, item, cmp) {
        if (cmp == null) {
          cmp = defaultCmp;
        }
        array.push(item);
        return _siftdown(array, 0, array.length - 1, cmp);
      };


      /*
      Pop the smallest item off the heap, maintaining the heap invariant.
       */

      heappop = function(array, cmp) {
        var lastelt, returnitem;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        lastelt = array.pop();
        if (array.length) {
          returnitem = array[0];
          array[0] = lastelt;
          _siftup(array, 0, cmp);
        } else {
          returnitem = lastelt;
        }
        return returnitem;
      };


      /*
      Pop and return the current smallest value, and add the new item.
      
      This is more efficient than heappop() followed by heappush(), and can be
      more appropriate when using a fixed size heap. Note that the value
      returned may be larger than item! That constrains reasonable use of
      this routine unless written as part of a conditional replacement:
          if item > array[0]
            item = heapreplace(array, item)
       */

      heapreplace = function(array, item, cmp) {
        var returnitem;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        returnitem = array[0];
        array[0] = item;
        _siftup(array, 0, cmp);
        return returnitem;
      };


      /*
      Fast version of a heappush followed by a heappop.
       */

      heappushpop = function(array, item, cmp) {
        var _ref;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (array.length && cmp(array[0], item) < 0) {
          _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
          _siftup(array, 0, cmp);
        }
        return item;
      };


      /*
      Transform list into a heap, in-place, in O(array.length) time.
       */

      heapify = function(array, cmp) {
        var i, _i, _len, _ref1, _results, _results1;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        _ref1 = (function() {
          _results1 = [];
          for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
          return _results1;
        }).apply(this).reverse();
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          i = _ref1[_i];
          _results.push(_siftup(array, i, cmp));
        }
        return _results;
      };


      /*
      Update the position of the given item in the heap.
      This function should be called every time the item is being modified.
       */

      updateItem = function(array, item, cmp) {
        var pos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        pos = array.indexOf(item);
        if (pos === -1) {
          return;
        }
        _siftdown(array, 0, pos, cmp);
        return _siftup(array, pos, cmp);
      };


      /*
      Find the n largest elements in a dataset.
       */

      nlargest = function(array, n, cmp) {
        var elem, result, _i, _len, _ref;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        result = array.slice(0, n);
        if (!result.length) {
          return result;
        }
        heapify(result, cmp);
        _ref = array.slice(n);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          heappushpop(result, elem, cmp);
        }
        return result.sort(cmp).reverse();
      };


      /*
      Find the n smallest elements in a dataset.
       */

      nsmallest = function(array, n, cmp) {
        var elem, los, result, _i, _j, _len, _ref, _ref1, _results;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (n * 10 <= array.length) {
          result = array.slice(0, n).sort(cmp);
          if (!result.length) {
            return result;
          }
          los = result[result.length - 1];
          _ref = array.slice(n);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            elem = _ref[_i];
            if (cmp(elem, los) < 0) {
              insort(result, elem, 0, null, cmp);
              result.pop();
              los = result[result.length - 1];
            }
          }
          return result;
        }
        heapify(array, cmp);
        _results = [];
        for (_j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? ++_j : --_j) {
          _results.push(heappop(array, cmp));
        }
        return _results;
      };

      _siftdown = function(array, startpos, pos, cmp) {
        var newitem, parent, parentpos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        newitem = array[pos];
        while (pos > startpos) {
          parentpos = (pos - 1) >> 1;
          parent = array[parentpos];
          if (cmp(newitem, parent) < 0) {
            array[pos] = parent;
            pos = parentpos;
            continue;
          }
          break;
        }
        return array[pos] = newitem;
      };

      _siftup = function(array, pos, cmp) {
        var childpos, endpos, newitem, rightpos, startpos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        endpos = array.length;
        startpos = pos;
        newitem = array[pos];
        childpos = 2 * pos + 1;
        while (childpos < endpos) {
          rightpos = childpos + 1;
          if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
            childpos = rightpos;
          }
          array[pos] = array[childpos];
          pos = childpos;
          childpos = 2 * pos + 1;
        }
        array[pos] = newitem;
        return _siftdown(array, startpos, pos, cmp);
      };

      Heap = (function() {
        Heap.push = heappush;

        Heap.pop = heappop;

        Heap.replace = heapreplace;

        Heap.pushpop = heappushpop;

        Heap.heapify = heapify;

        Heap.updateItem = updateItem;

        Heap.nlargest = nlargest;

        Heap.nsmallest = nsmallest;

        function Heap(cmp) {
          this.cmp = cmp != null ? cmp : defaultCmp;
          this.nodes = [];
        }

        Heap.prototype.push = function(x) {
          return heappush(this.nodes, x, this.cmp);
        };

        Heap.prototype.pop = function() {
          return heappop(this.nodes, this.cmp);
        };

        Heap.prototype.peek = function() {
          return this.nodes[0];
        };

        Heap.prototype.contains = function(x) {
          return this.nodes.indexOf(x) !== -1;
        };

        Heap.prototype.replace = function(x) {
          return heapreplace(this.nodes, x, this.cmp);
        };

        Heap.prototype.pushpop = function(x) {
          return heappushpop(this.nodes, x, this.cmp);
        };

        Heap.prototype.heapify = function() {
          return heapify(this.nodes, this.cmp);
        };

        Heap.prototype.updateItem = function(x) {
          return updateItem(this.nodes, x, this.cmp);
        };

        Heap.prototype.clear = function() {
          return this.nodes = [];
        };

        Heap.prototype.empty = function() {
          return this.nodes.length === 0;
        };

        Heap.prototype.size = function() {
          return this.nodes.length;
        };

        Heap.prototype.clone = function() {
          var heap;
          heap = new Heap();
          heap.nodes = this.nodes.slice(0);
          return heap;
        };

        Heap.prototype.toArray = function() {
          return this.nodes.slice(0);
        };

        Heap.prototype.insert = Heap.prototype.push;

        Heap.prototype.top = Heap.prototype.peek;

        Heap.prototype.front = Heap.prototype.peek;

        Heap.prototype.has = Heap.prototype.contains;

        Heap.prototype.copy = Heap.prototype.clone;

        return Heap;

      })();

      (function(root, factory) {
        {
          return module.exports = factory();
        }
      })(this, function() {
        return Heap;
      });

    }).call(commonjsGlobal);
    }(heap$1));

    var heap = heap$1.exports;

    /**
     * Copyright (c) 2016-2021, The Cytoscape Consortium.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy of
     * this software and associated documentation files (the “Software”), to deal in
     * the Software without restriction, including without limitation the rights to
     * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
     * of the Software, and to permit persons to whom the Software is furnished to do
     * so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */

    function _interopDefault$1 (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var util = _interopDefault$1(lodash_debounce);
    var Heap = _interopDefault$1(heap);

    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function (obj) {
          return typeof obj;
        };
      } else {
        _typeof = function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }

    var window$1 = typeof window === 'undefined' ? null : window; // eslint-disable-line no-undef

    var navigator$1 = window$1 ? window$1.navigator : null;
    window$1 ? window$1.document : null;

    var typeofstr = _typeof('');

    var typeofobj = _typeof({});

    var typeoffn = _typeof(function () {});

    var typeofhtmlele = typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement);

    var instanceStr = function instanceStr(obj) {
      return obj && obj.instanceString && fn(obj.instanceString) ? obj.instanceString() : null;
    };

    var string = function string(obj) {
      return obj != null && _typeof(obj) == typeofstr;
    };
    var fn = function fn(obj) {
      return obj != null && _typeof(obj) === typeoffn;
    };
    var array = function array(obj) {
      return !elementOrCollection(obj) && (Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array);
    };
    var plainObject = function plainObject(obj) {
      return obj != null && _typeof(obj) === typeofobj && !array(obj) && obj.constructor === Object;
    };
    var object = function object(obj) {
      return obj != null && _typeof(obj) === typeofobj;
    };
    var number = function number(obj) {
      return obj != null && _typeof(obj) === _typeof(1) && !isNaN(obj);
    };
    var integer = function integer(obj) {
      return number(obj) && Math.floor(obj) === obj;
    };
    var htmlElement = function htmlElement(obj) {
      if ('undefined' === typeofhtmlele) {
        return undefined;
      } else {
        return null != obj && obj instanceof HTMLElement;
      }
    };
    var elementOrCollection = function elementOrCollection(obj) {
      return element(obj) || collection(obj);
    };
    var element = function element(obj) {
      return instanceStr(obj) === 'collection' && obj._private.single;
    };
    var collection = function collection(obj) {
      return instanceStr(obj) === 'collection' && !obj._private.single;
    };
    var core$1 = function core(obj) {
      return instanceStr(obj) === 'core';
    };
    var stylesheet = function stylesheet(obj) {
      return instanceStr(obj) === 'stylesheet';
    };
    var event = function event(obj) {
      return instanceStr(obj) === 'event';
    };
    var emptyString = function emptyString(obj) {
      if (obj === undefined || obj === null) {
        // null is empty
        return true;
      } else if (obj === '' || obj.match(/^\s+$/)) {
        return true; // empty string is empty
      }

      return false; // otherwise, we don't know what we've got
    };
    var domElement = function domElement(obj) {
      if (typeof HTMLElement === 'undefined') {
        return false; // we're not in a browser so it doesn't matter
      } else {
        return obj instanceof HTMLElement;
      }
    };
    var boundingBox = function boundingBox(obj) {
      return plainObject(obj) && number(obj.x1) && number(obj.x2) && number(obj.y1) && number(obj.y2);
    };
    var promise = function promise(obj) {
      return object(obj) && fn(obj.then);
    };
    var ms = function ms() {
      return navigator$1 && navigator$1.userAgent.match(/msie|trident|edge/i);
    }; // probably a better way to detect this...

    var memoize = function memoize(fn, keyFn) {
      if (!keyFn) {
        keyFn = function keyFn() {
          if (arguments.length === 1) {
            return arguments[0];
          } else if (arguments.length === 0) {
            return 'undefined';
          }

          var args = [];

          for (var i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }

          return args.join('$');
        };
      }

      var memoizedFn = function memoizedFn() {
        var self = this;
        var args = arguments;
        var ret;
        var k = keyFn.apply(self, args);
        var cache = memoizedFn.cache;

        if (!(ret = cache[k])) {
          ret = cache[k] = fn.apply(self, args);
        }

        return ret;
      };

      memoizedFn.cache = {};
      return memoizedFn;
    };

    var camel2dash = memoize(function (str) {
      return str.replace(/([A-Z])/g, function (v) {
        return '-' + v.toLowerCase();
      });
    });
    var dash2camel = memoize(function (str) {
      return str.replace(/(-\w)/g, function (v) {
        return v[1].toUpperCase();
      });
    });
    var prependCamel = memoize(function (prefix, str) {
      return prefix + str[0].toUpperCase() + str.substring(1);
    }, function (prefix, str) {
      return prefix + '$' + str;
    });
    var capitalize = function capitalize(str) {
      if (emptyString(str)) {
        return str;
      }

      return str.charAt(0).toUpperCase() + str.substring(1);
    };

    var number$1 = '(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))';
    var rgba = 'rgb[a]?\\((' + number$1 + '[%]?)\\s*,\\s*(' + number$1 + '[%]?)\\s*,\\s*(' + number$1 + '[%]?)(?:\\s*,\\s*(' + number$1 + '))?\\)';
    var rgbaNoBackRefs = 'rgb[a]?\\((?:' + number$1 + '[%]?)\\s*,\\s*(?:' + number$1 + '[%]?)\\s*,\\s*(?:' + number$1 + '[%]?)(?:\\s*,\\s*(?:' + number$1 + '))?\\)';
    var hsla = 'hsl[a]?\\((' + number$1 + ')\\s*,\\s*(' + number$1 + '[%])\\s*,\\s*(' + number$1 + '[%])(?:\\s*,\\s*(' + number$1 + '))?\\)';
    var hslaNoBackRefs = 'hsl[a]?\\((?:' + number$1 + ')\\s*,\\s*(?:' + number$1 + '[%])\\s*,\\s*(?:' + number$1 + '[%])(?:\\s*,\\s*(?:' + number$1 + '))?\\)';
    var hex3 = '\\#[0-9a-fA-F]{3}';
    var hex6 = '\\#[0-9a-fA-F]{6}';

    var ascending = function ascending(a, b) {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    };
    var descending = function descending(a, b) {
      return -1 * ascending(a, b);
    };

    var extend = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
      var args = arguments;

      for (var i = 1; i < args.length; i++) {
        var obj = args[i];

        if (obj == null) {
          continue;
        }

        var keys = Object.keys(obj);

        for (var j = 0; j < keys.length; j++) {
          var k = keys[j];
          tgt[k] = obj[k];
        }
      }

      return tgt;
    };

    var hex2tuple = function hex2tuple(hex) {
      if (!(hex.length === 4 || hex.length === 7) || hex[0] !== '#') {
        return;
      }

      var shortHex = hex.length === 4;
      var r, g, b;
      var base = 16;

      if (shortHex) {
        r = parseInt(hex[1] + hex[1], base);
        g = parseInt(hex[2] + hex[2], base);
        b = parseInt(hex[3] + hex[3], base);
      } else {
        r = parseInt(hex[1] + hex[2], base);
        g = parseInt(hex[3] + hex[4], base);
        b = parseInt(hex[5] + hex[6], base);
      }

      return [r, g, b];
    }; // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)

    var hsl2tuple = function hsl2tuple(hsl) {
      var ret;
      var h, s, l, a, r, g, b;

      function hue2rgb(p, q, t) {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1 / 6) return p + (q - p) * 6 * t;
        if (t < 1 / 2) return q;
        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
        return p;
      }

      var m = new RegExp('^' + hsla + '$').exec(hsl);

      if (m) {
        // get hue
        h = parseInt(m[1]);

        if (h < 0) {
          h = (360 - -1 * h % 360) % 360;
        } else if (h > 360) {
          h = h % 360;
        }

        h /= 360; // normalise on [0, 1]

        s = parseFloat(m[2]);

        if (s < 0 || s > 100) {
          return;
        } // saturation is [0, 100]


        s = s / 100; // normalise on [0, 1]

        l = parseFloat(m[3]);

        if (l < 0 || l > 100) {
          return;
        } // lightness is [0, 100]


        l = l / 100; // normalise on [0, 1]

        a = m[4];

        if (a !== undefined) {
          a = parseFloat(a);

          if (a < 0 || a > 1) {
            return;
          } // alpha is [0, 1]

        } // now, convert to rgb
        // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript


        if (s === 0) {
          r = g = b = Math.round(l * 255); // achromatic
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = Math.round(255 * hue2rgb(p, q, h + 1 / 3));
          g = Math.round(255 * hue2rgb(p, q, h));
          b = Math.round(255 * hue2rgb(p, q, h - 1 / 3));
        }

        ret = [r, g, b, a];
      }

      return ret;
    }; // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)

    var rgb2tuple = function rgb2tuple(rgb) {
      var ret;
      var m = new RegExp('^' + rgba + '$').exec(rgb);

      if (m) {
        ret = [];
        var isPct = [];

        for (var i = 1; i <= 3; i++) {
          var channel = m[i];

          if (channel[channel.length - 1] === '%') {
            isPct[i] = true;
          }

          channel = parseFloat(channel);

          if (isPct[i]) {
            channel = channel / 100 * 255; // normalise to [0, 255]
          }

          if (channel < 0 || channel > 255) {
            return;
          } // invalid channel value


          ret.push(Math.floor(channel));
        }

        var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
        var allArePct = isPct[1] && isPct[2] && isPct[3];

        if (atLeastOneIsPct && !allArePct) {
          return;
        } // must all be percent values if one is


        var alpha = m[4];

        if (alpha !== undefined) {
          alpha = parseFloat(alpha);

          if (alpha < 0 || alpha > 1) {
            return;
          } // invalid alpha value


          ret.push(alpha);
        }
      }

      return ret;
    };
    var colorname2tuple = function colorname2tuple(color) {
      return colors[color.toLowerCase()];
    };
    var color2tuple = function color2tuple(color) {
      return (array(color) ? color : null) || colorname2tuple(color) || hex2tuple(color) || rgb2tuple(color) || hsl2tuple(color);
    };
    var colors = {
      // special colour names
      transparent: [0, 0, 0, 0],
      // NB alpha === 0
      // regular colours
      aliceblue: [240, 248, 255],
      antiquewhite: [250, 235, 215],
      aqua: [0, 255, 255],
      aquamarine: [127, 255, 212],
      azure: [240, 255, 255],
      beige: [245, 245, 220],
      bisque: [255, 228, 196],
      black: [0, 0, 0],
      blanchedalmond: [255, 235, 205],
      blue: [0, 0, 255],
      blueviolet: [138, 43, 226],
      brown: [165, 42, 42],
      burlywood: [222, 184, 135],
      cadetblue: [95, 158, 160],
      chartreuse: [127, 255, 0],
      chocolate: [210, 105, 30],
      coral: [255, 127, 80],
      cornflowerblue: [100, 149, 237],
      cornsilk: [255, 248, 220],
      crimson: [220, 20, 60],
      cyan: [0, 255, 255],
      darkblue: [0, 0, 139],
      darkcyan: [0, 139, 139],
      darkgoldenrod: [184, 134, 11],
      darkgray: [169, 169, 169],
      darkgreen: [0, 100, 0],
      darkgrey: [169, 169, 169],
      darkkhaki: [189, 183, 107],
      darkmagenta: [139, 0, 139],
      darkolivegreen: [85, 107, 47],
      darkorange: [255, 140, 0],
      darkorchid: [153, 50, 204],
      darkred: [139, 0, 0],
      darksalmon: [233, 150, 122],
      darkseagreen: [143, 188, 143],
      darkslateblue: [72, 61, 139],
      darkslategray: [47, 79, 79],
      darkslategrey: [47, 79, 79],
      darkturquoise: [0, 206, 209],
      darkviolet: [148, 0, 211],
      deeppink: [255, 20, 147],
      deepskyblue: [0, 191, 255],
      dimgray: [105, 105, 105],
      dimgrey: [105, 105, 105],
      dodgerblue: [30, 144, 255],
      firebrick: [178, 34, 34],
      floralwhite: [255, 250, 240],
      forestgreen: [34, 139, 34],
      fuchsia: [255, 0, 255],
      gainsboro: [220, 220, 220],
      ghostwhite: [248, 248, 255],
      gold: [255, 215, 0],
      goldenrod: [218, 165, 32],
      gray: [128, 128, 128],
      grey: [128, 128, 128],
      green: [0, 128, 0],
      greenyellow: [173, 255, 47],
      honeydew: [240, 255, 240],
      hotpink: [255, 105, 180],
      indianred: [205, 92, 92],
      indigo: [75, 0, 130],
      ivory: [255, 255, 240],
      khaki: [240, 230, 140],
      lavender: [230, 230, 250],
      lavenderblush: [255, 240, 245],
      lawngreen: [124, 252, 0],
      lemonchiffon: [255, 250, 205],
      lightblue: [173, 216, 230],
      lightcoral: [240, 128, 128],
      lightcyan: [224, 255, 255],
      lightgoldenrodyellow: [250, 250, 210],
      lightgray: [211, 211, 211],
      lightgreen: [144, 238, 144],
      lightgrey: [211, 211, 211],
      lightpink: [255, 182, 193],
      lightsalmon: [255, 160, 122],
      lightseagreen: [32, 178, 170],
      lightskyblue: [135, 206, 250],
      lightslategray: [119, 136, 153],
      lightslategrey: [119, 136, 153],
      lightsteelblue: [176, 196, 222],
      lightyellow: [255, 255, 224],
      lime: [0, 255, 0],
      limegreen: [50, 205, 50],
      linen: [250, 240, 230],
      magenta: [255, 0, 255],
      maroon: [128, 0, 0],
      mediumaquamarine: [102, 205, 170],
      mediumblue: [0, 0, 205],
      mediumorchid: [186, 85, 211],
      mediumpurple: [147, 112, 219],
      mediumseagreen: [60, 179, 113],
      mediumslateblue: [123, 104, 238],
      mediumspringgreen: [0, 250, 154],
      mediumturquoise: [72, 209, 204],
      mediumvioletred: [199, 21, 133],
      midnightblue: [25, 25, 112],
      mintcream: [245, 255, 250],
      mistyrose: [255, 228, 225],
      moccasin: [255, 228, 181],
      navajowhite: [255, 222, 173],
      navy: [0, 0, 128],
      oldlace: [253, 245, 230],
      olive: [128, 128, 0],
      olivedrab: [107, 142, 35],
      orange: [255, 165, 0],
      orangered: [255, 69, 0],
      orchid: [218, 112, 214],
      palegoldenrod: [238, 232, 170],
      palegreen: [152, 251, 152],
      paleturquoise: [175, 238, 238],
      palevioletred: [219, 112, 147],
      papayawhip: [255, 239, 213],
      peachpuff: [255, 218, 185],
      peru: [205, 133, 63],
      pink: [255, 192, 203],
      plum: [221, 160, 221],
      powderblue: [176, 224, 230],
      purple: [128, 0, 128],
      red: [255, 0, 0],
      rosybrown: [188, 143, 143],
      royalblue: [65, 105, 225],
      saddlebrown: [139, 69, 19],
      salmon: [250, 128, 114],
      sandybrown: [244, 164, 96],
      seagreen: [46, 139, 87],
      seashell: [255, 245, 238],
      sienna: [160, 82, 45],
      silver: [192, 192, 192],
      skyblue: [135, 206, 235],
      slateblue: [106, 90, 205],
      slategray: [112, 128, 144],
      slategrey: [112, 128, 144],
      snow: [255, 250, 250],
      springgreen: [0, 255, 127],
      steelblue: [70, 130, 180],
      tan: [210, 180, 140],
      teal: [0, 128, 128],
      thistle: [216, 191, 216],
      tomato: [255, 99, 71],
      turquoise: [64, 224, 208],
      violet: [238, 130, 238],
      wheat: [245, 222, 179],
      white: [255, 255, 255],
      whitesmoke: [245, 245, 245],
      yellow: [255, 255, 0],
      yellowgreen: [154, 205, 50]
    };

    var setMap = function setMap(options) {
      var obj = options.map;
      var keys = options.keys;
      var l = keys.length;

      for (var i = 0; i < l; i++) {
        var key = keys[i];

        if (plainObject(key)) {
          throw Error('Tried to set map with object key');
        }

        if (i < keys.length - 1) {
          // extend the map if necessary
          if (obj[key] == null) {
            obj[key] = {};
          }

          obj = obj[key];
        } else {
          // set the value
          obj[key] = options.value;
        }
      }
    }; // gets the value in a map even if it's not built in places

    var getMap = function getMap(options) {
      var obj = options.map;
      var keys = options.keys;
      var l = keys.length;

      for (var i = 0; i < l; i++) {
        var key = keys[i];

        if (plainObject(key)) {
          throw Error('Tried to get map with object key');
        }

        obj = obj[key];

        if (obj == null) {
          return obj;
        }
      }

      return obj;
    }; // deletes the entry in the map

    var performance$1 = window$1 ? window$1.performance : null;
    var pnow = performance$1 && performance$1.now ? function () {
      return performance$1.now();
    } : function () {
      return Date.now();
    };

    var raf = function () {
      if (window$1) {
        if (window$1.requestAnimationFrame) {
          return function (fn) {
            window$1.requestAnimationFrame(fn);
          };
        } else if (window$1.mozRequestAnimationFrame) {
          return function (fn) {
            window$1.mozRequestAnimationFrame(fn);
          };
        } else if (window$1.webkitRequestAnimationFrame) {
          return function (fn) {
            window$1.webkitRequestAnimationFrame(fn);
          };
        } else if (window$1.msRequestAnimationFrame) {
          return function (fn) {
            window$1.msRequestAnimationFrame(fn);
          };
        }
      }

      return function (fn) {
        if (fn) {
          setTimeout(function () {
            fn(pnow());
          }, 1000 / 60);
        }
      };
    }();

    var requestAnimationFrame$1 = function requestAnimationFrame(fn) {
      return raf(fn);
    };
    var performanceNow = pnow;

    var DEFAULT_HASH_SEED = 9261;
    var K = 65599; // 37 also works pretty well

    var DEFAULT_HASH_SEED_ALT = 5381;
    var hashIterableInts = function hashIterableInts(iterator) {
      var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED;
      // sdbm/string-hash
      var hash = seed;
      var entry;

      for (;;) {
        entry = iterator.next();

        if (entry.done) {
          break;
        }

        hash = hash * K + entry.value | 0;
      }

      return hash;
    };
    var hashInt = function hashInt(num) {
      var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED;
      // sdbm/string-hash
      return seed * K + num | 0;
    };
    var hashIntAlt = function hashIntAlt(num) {
      var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED_ALT;
      // djb2/string-hash
      return (seed << 5) + seed + num | 0;
    };
    var combineHashes = function combineHashes(hash1, hash2) {
      return hash1 * 0x200000 + hash2;
    };
    var combineHashesArray = function combineHashesArray(hashes) {
      return hashes[0] * 0x200000 + hashes[1];
    };
    var hashArrays = function hashArrays(hashes1, hashes2) {
      return [hashInt(hashes1[0], hashes2[0]), hashIntAlt(hashes1[1], hashes2[1])];
    };
    var hashIntsArray = function hashIntsArray(ints, seed) {
      var entry = {
        value: 0,
        done: false
      };
      var i = 0;
      var length = ints.length;
      var iterator = {
        next: function next() {
          if (i < length) {
            entry.value = ints[i++];
          } else {
            entry.done = true;
          }

          return entry;
        }
      };
      return hashIterableInts(iterator, seed);
    };
    var hashString = function hashString(str, seed) {
      var entry = {
        value: 0,
        done: false
      };
      var i = 0;
      var length = str.length;
      var iterator = {
        next: function next() {
          if (i < length) {
            entry.value = str.charCodeAt(i++);
          } else {
            entry.done = true;
          }

          return entry;
        }
      };
      return hashIterableInts(iterator, seed);
    };
    var hashStrings = function hashStrings() {
      return hashStringsArray(arguments);
    };
    var hashStringsArray = function hashStringsArray(strs) {
      var hash;

      for (var i = 0; i < strs.length; i++) {
        var str = strs[i];

        if (i === 0) {
          hash = hashString(str);
        } else {
          hash = hashString(str, hash);
        }
      }

      return hash;
    };

    /*global console */
    var warningsEnabled = true;
    var warnSupported = console.warn != null; // eslint-disable-line no-console

    var traceSupported = console.trace != null; // eslint-disable-line no-console

    var MAX_INT = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var trueify = function trueify() {
      return true;
    };
    var falsify = function falsify() {
      return false;
    };
    var zeroify = function zeroify() {
      return 0;
    };
    var noop = function noop() {};
    var error = function error(msg) {
      throw new Error(msg);
    };
    var warnings = function warnings(enabled) {
      if (enabled !== undefined) {
        warningsEnabled = !!enabled;
      } else {
        return warningsEnabled;
      }
    };
    var warn = function warn(msg) {
      /* eslint-disable no-console */
      if (!warnings()) {
        return;
      }

      if (warnSupported) {
        console.warn(msg);
      } else {
        console.log(msg);

        if (traceSupported) {
          console.trace();
        }
      }
    };
    /* eslint-enable */

    var clone = function clone(obj) {
      return extend({}, obj);
    }; // gets a shallow copy of the argument

    var copy = function copy(obj) {
      if (obj == null) {
        return obj;
      }

      if (array(obj)) {
        return obj.slice();
      } else if (plainObject(obj)) {
        return clone(obj);
      } else {
        return obj;
      }
    };
    var copyArray = function copyArray(arr) {
      return arr.slice();
    };
    var uuid = function uuid(a, b
    /* placeholders */
    ) {
      for ( // loop :)
      b = a = ''; // b - result , a - numeric letiable
      a++ < 36; //
      b += a * 51 & 52 // if "a" is not 9 or 14 or 19 or 24
      ? //  return a random number or 4
      (a ^ 15 // if "a" is not 15
      ? // genetate a random number from 0 to 15
      8 ^ Math.random() * (a ^ 20 ? 16 : 4) // unless "a" is 20, in which case a random number from 8 to 11
      : 4 //  otherwise 4
      ).toString(16) : '-' //  in other cases (if "a" is 9,14,19,24) insert "-"
      ) {
      }

      return b;
    };
    var _staticEmptyObject = {};
    var staticEmptyObject = function staticEmptyObject() {
      return _staticEmptyObject;
    };
    var defaults = function defaults(_defaults) {
      var keys = Object.keys(_defaults);
      return function (opts) {
        var filledOpts = {};

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var optVal = opts == null ? undefined : opts[key];
          filledOpts[key] = optVal === undefined ? _defaults[key] : optVal;
        }

        return filledOpts;
      };
    };
    var removeFromArray = function removeFromArray(arr, ele, oneCopy) {
      for (var i = arr.length - 1; i >= 0; i--) {
        if (arr[i] === ele) {
          arr.splice(i, 1);

          if (oneCopy) {
            break;
          }
        }
      }
    };
    var clearArray = function clearArray(arr) {
      arr.splice(0, arr.length);
    };
    var push = function push(arr, otherArr) {
      for (var i = 0; i < otherArr.length; i++) {
        var el = otherArr[i];
        arr.push(el);
      }
    };
    var getPrefixedProperty = function getPrefixedProperty(obj, propName, prefix) {
      if (prefix) {
        propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
      }

      return obj[propName];
    };
    var setPrefixedProperty = function setPrefixedProperty(obj, propName, prefix, value) {
      if (prefix) {
        propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
      }

      obj[propName] = value;
    };

    /* global Map */
    var ObjectMap =
    /*#__PURE__*/
    function () {
      function ObjectMap() {
        _classCallCheck(this, ObjectMap);

        this._obj = {};
      }

      _createClass(ObjectMap, [{
        key: "set",
        value: function set(key, val) {
          this._obj[key] = val;
          return this;
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          this._obj[key] = undefined;
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          this._obj = {};
        }
      }, {
        key: "has",
        value: function has(key) {
          return this._obj[key] !== undefined;
        }
      }, {
        key: "get",
        value: function get(key) {
          return this._obj[key];
        }
      }]);

      return ObjectMap;
    }();

    var Map$1 = typeof Map !== 'undefined' ? Map : ObjectMap;

    /* global Set */
    var undef =  "undefined" ;

    var ObjectSet =
    /*#__PURE__*/
    function () {
      function ObjectSet(arrayOrObjectSet) {
        _classCallCheck(this, ObjectSet);

        this._obj = Object.create(null);
        this.size = 0;

        if (arrayOrObjectSet != null) {
          var arr;

          if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {
            arr = arrayOrObjectSet.toArray();
          } else {
            arr = arrayOrObjectSet;
          }

          for (var i = 0; i < arr.length; i++) {
            this.add(arr[i]);
          }
        }
      }

      _createClass(ObjectSet, [{
        key: "instanceString",
        value: function instanceString() {
          return 'set';
        }
      }, {
        key: "add",
        value: function add(val) {
          var o = this._obj;

          if (o[val] !== 1) {
            o[val] = 1;
            this.size++;
          }
        }
      }, {
        key: "delete",
        value: function _delete(val) {
          var o = this._obj;

          if (o[val] === 1) {
            o[val] = 0;
            this.size--;
          }
        }
      }, {
        key: "clear",
        value: function clear() {
          this._obj = Object.create(null);
        }
      }, {
        key: "has",
        value: function has(val) {
          return this._obj[val] === 1;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var _this = this;

          return Object.keys(this._obj).filter(function (key) {
            return _this.has(key);
          });
        }
      }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
          return this.toArray().forEach(callback, thisArg);
        }
      }]);

      return ObjectSet;
    }();

    var Set$1 = (typeof Set === "undefined" ? "undefined" : _typeof(Set)) !== undef ? Set : ObjectSet;

    var Element$1 = function Element(cy, params) {
      var restore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (cy === undefined || params === undefined || !core$1(cy)) {
        error('An element must have a core reference and parameters set');
        return;
      }

      var group = params.group; // try to automatically infer the group if unspecified

      if (group == null) {
        if (params.data && params.data.source != null && params.data.target != null) {
          group = 'edges';
        } else {
          group = 'nodes';
        }
      } // validate group


      if (group !== 'nodes' && group !== 'edges') {
        error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');
        return;
      } // make the element array-like, just like a collection


      this.length = 1;
      this[0] = this; // NOTE: when something is added here, add also to ele.json()

      var _p = this._private = {
        cy: cy,
        single: true,
        // indicates this is an element
        data: params.data || {},
        // data object
        position: params.position || {
          x: 0,
          y: 0
        },
        // (x, y) position pair
        autoWidth: undefined,
        // width and height of nodes calculated by the renderer when set to special 'auto' value
        autoHeight: undefined,
        autoPadding: undefined,
        compoundBoundsClean: false,
        // whether the compound dimensions need to be recalculated the next time dimensions are read
        listeners: [],
        // array of bound listeners
        group: group,
        // string; 'nodes' or 'edges'
        style: {},
        // properties as set by the style
        rstyle: {},
        // properties for style sent from the renderer to the core
        styleCxts: [],
        // applied style contexts from the styler
        styleKeys: {},
        // per-group keys of style property values
        removed: true,
        // whether it's inside the vis; true if removed (set true here since we call restore)
        selected: params.selected ? true : false,
        // whether it's selected
        selectable: params.selectable === undefined ? true : params.selectable ? true : false,
        // whether it's selectable
        locked: params.locked ? true : false,
        // whether the element is locked (cannot be moved)
        grabbed: false,
        // whether the element is grabbed by the mouse; renderer sets this privately
        grabbable: params.grabbable === undefined ? true : params.grabbable ? true : false,
        // whether the element can be grabbed
        pannable: params.pannable === undefined ? group === 'edges' ? true : false : params.pannable ? true : false,
        // whether the element has passthrough panning enabled
        active: false,
        // whether the element is active from user interaction
        classes: new Set$1(),
        // map ( className => true )
        animation: {
          // object for currently-running animations
          current: [],
          queue: []
        },
        rscratch: {},
        // object in which the renderer can store information
        scratch: params.scratch || {},
        // scratch objects
        edges: [],
        // array of connected edges
        children: [],
        // array of children
        parent: null,
        // parent ref
        traversalCache: {},
        // cache of output of traversal functions
        backgrounding: false,
        // whether background images are loading
        bbCache: null,
        // cache of the current bounding box
        bbCacheShift: {
          x: 0,
          y: 0
        },
        // shift applied to cached bb to be applied on next get
        bodyBounds: null,
        // bounds cache of element body, w/o overlay
        overlayBounds: null,
        // bounds cache of element body, including overlay
        labelBounds: {
          // bounds cache of labels
          all: null,
          source: null,
          target: null,
          main: null
        },
        arrowBounds: {
          // bounds cache of edge arrows
          source: null,
          target: null,
          'mid-source': null,
          'mid-target': null
        }
      };

      if (_p.position.x == null) {
        _p.position.x = 0;
      }

      if (_p.position.y == null) {
        _p.position.y = 0;
      } // renderedPosition overrides if specified


      if (params.renderedPosition) {
        var rpos = params.renderedPosition;
        var pan = cy.pan();
        var zoom = cy.zoom();
        _p.position = {
          x: (rpos.x - pan.x) / zoom,
          y: (rpos.y - pan.y) / zoom
        };
      }

      var classes = [];

      if (array(params.classes)) {
        classes = params.classes;
      } else if (string(params.classes)) {
        classes = params.classes.split(/\s+/);
      }

      for (var i = 0, l = classes.length; i < l; i++) {
        var cls = classes[i];

        if (!cls || cls === '') {
          continue;
        }

        _p.classes.add(cls);
      }

      this.createEmitter();
      var bypass = params.style || params.css;

      if (bypass) {
        warn('Setting a `style` bypass at element creation should be done only when absolutely necessary.  Try to use the stylesheet instead.');
        this.style(bypass);
      }

      if (restore === undefined || restore) {
        this.restore();
      }
    };

    var defineSearch = function defineSearch(params) {
      params = {
        bfs: params.bfs || !params.dfs,
        dfs: params.dfs || !params.bfs
      }; // from pseudocode on wikipedia

      return function searchFn(roots, fn$1, directed) {
        var options;

        if (plainObject(roots) && !elementOrCollection(roots)) {
          options = roots;
          roots = options.roots || options.root;
          fn$1 = options.visit;
          directed = options.directed;
        }

        directed = arguments.length === 2 && !fn(fn$1) ? fn$1 : directed;
        fn$1 = fn(fn$1) ? fn$1 : function () {};
        var cy = this._private.cy;
        var v = roots = string(roots) ? this.filter(roots) : roots;
        var Q = [];
        var connectedNodes = [];
        var connectedBy = {};
        var id2depth = {};
        var V = {};
        var j = 0;
        var found;

        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges; // enqueue v


        for (var i = 0; i < v.length; i++) {
          var vi = v[i];
          var viId = vi.id();

          if (vi.isNode()) {
            Q.unshift(vi);

            if (params.bfs) {
              V[viId] = true;
              connectedNodes.push(vi);
            }

            id2depth[viId] = 0;
          }
        }

        var _loop2 = function _loop2() {
          var v = params.bfs ? Q.shift() : Q.pop();
          var vId = v.id();

          if (params.dfs) {
            if (V[vId]) {
              return "continue";
            }

            V[vId] = true;
            connectedNodes.push(v);
          }

          var depth = id2depth[vId];
          var prevEdge = connectedBy[vId];
          var src = prevEdge != null ? prevEdge.source() : null;
          var tgt = prevEdge != null ? prevEdge.target() : null;
          var prevNode = prevEdge == null ? undefined : v.same(src) ? tgt[0] : src[0];
          var ret = void 0;
          ret = fn$1(v, prevEdge, prevNode, j++, depth);

          if (ret === true) {
            found = v;
            return "break";
          }

          if (ret === false) {
            return "break";
          }

          var vwEdges = v.connectedEdges().filter(function (e) {
            return (!directed || e.source().same(v)) && edges.has(e);
          });

          for (var _i2 = 0; _i2 < vwEdges.length; _i2++) {
            var e = vwEdges[_i2];
            var w = e.connectedNodes().filter(function (n) {
              return !n.same(v) && nodes.has(n);
            });
            var wId = w.id();

            if (w.length !== 0 && !V[wId]) {
              w = w[0];
              Q.push(w);

              if (params.bfs) {
                V[wId] = true;
                connectedNodes.push(w);
              }

              connectedBy[wId] = e;
              id2depth[wId] = id2depth[vId] + 1;
            }
          }
        };

        _loop: while (Q.length !== 0) {
          var _ret = _loop2();

          switch (_ret) {
            case "continue":
              continue;

            case "break":
              break _loop;
          }
        }

        var connectedEles = cy.collection();

        for (var _i = 0; _i < connectedNodes.length; _i++) {
          var node = connectedNodes[_i];
          var edge = connectedBy[node.id()];

          if (edge != null) {
            connectedEles.push(edge);
          }

          connectedEles.push(node);
        }

        return {
          path: cy.collection(connectedEles),
          found: cy.collection(found)
        };
      };
    }; // search, spanning trees, etc


    var elesfn = {
      breadthFirstSearch: defineSearch({
        bfs: true
      }),
      depthFirstSearch: defineSearch({
        dfs: true
      })
    }; // nice, short mathemathical alias

    elesfn.bfs = elesfn.breadthFirstSearch;
    elesfn.dfs = elesfn.depthFirstSearch;

    var dijkstraDefaults = defaults({
      root: null,
      weight: function weight(edge) {
        return 1;
      },
      directed: false
    });
    var elesfn$1 = {
      dijkstra: function dijkstra(options) {
        if (!plainObject(options)) {
          var args = arguments;
          options = {
            root: args[0],
            weight: args[1],
            directed: args[2]
          };
        }

        var _dijkstraDefaults = dijkstraDefaults(options),
            root = _dijkstraDefaults.root,
            weight = _dijkstraDefaults.weight,
            directed = _dijkstraDefaults.directed;

        var eles = this;
        var weightFn = weight;
        var source = string(root) ? this.filter(root)[0] : root[0];
        var dist = {};
        var prev = {};
        var knownDist = {};

        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges;

        edges.unmergeBy(function (ele) {
          return ele.isLoop();
        });

        var getDist = function getDist(node) {
          return dist[node.id()];
        };

        var setDist = function setDist(node, d) {
          dist[node.id()] = d;
          Q.updateItem(node);
        };

        var Q = new Heap(function (a, b) {
          return getDist(a) - getDist(b);
        });

        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          dist[node.id()] = node.same(source) ? 0 : Infinity;
          Q.push(node);
        }

        var distBetween = function distBetween(u, v) {
          var uvs = (directed ? u.edgesTo(v) : u.edgesWith(v)).intersect(edges);
          var smallestDistance = Infinity;
          var smallestEdge;

          for (var _i = 0; _i < uvs.length; _i++) {
            var edge = uvs[_i];

            var _weight = weightFn(edge);

            if (_weight < smallestDistance || !smallestEdge) {
              smallestDistance = _weight;
              smallestEdge = edge;
            }
          }

          return {
            edge: smallestEdge,
            dist: smallestDistance
          };
        };

        while (Q.size() > 0) {
          var u = Q.pop();
          var smalletsDist = getDist(u);
          var uid = u.id();
          knownDist[uid] = smalletsDist;

          if (smalletsDist === Infinity) {
            continue;
          }

          var neighbors = u.neighborhood().intersect(nodes);

          for (var _i2 = 0; _i2 < neighbors.length; _i2++) {
            var v = neighbors[_i2];
            var vid = v.id();
            var vDist = distBetween(u, v);
            var alt = smalletsDist + vDist.dist;

            if (alt < getDist(v)) {
              setDist(v, alt);
              prev[vid] = {
                node: u,
                edge: vDist.edge
              };
            }
          } // for

        } // while


        return {
          distanceTo: function distanceTo(node) {
            var target = string(node) ? nodes.filter(node)[0] : node[0];
            return knownDist[target.id()];
          },
          pathTo: function pathTo(node) {
            var target = string(node) ? nodes.filter(node)[0] : node[0];
            var S = [];
            var u = target;
            var uid = u.id();

            if (target.length > 0) {
              S.unshift(target);

              while (prev[uid]) {
                var p = prev[uid];
                S.unshift(p.edge);
                S.unshift(p.node);
                u = p.node;
                uid = u.id();
              }
            }

            return eles.spawn(S);
          }
        };
      }
    };

    var elesfn$2 = {
      // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
      // implemented from pseudocode from wikipedia
      kruskal: function kruskal(weightFn) {
        weightFn = weightFn || function (edge) {
          return 1;
        };

        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges;

        var numNodes = nodes.length;
        var forest = new Array(numNodes);
        var A = nodes; // assumes byGroup() creates new collections that can be safely mutated

        var findSetIndex = function findSetIndex(ele) {
          for (var i = 0; i < forest.length; i++) {
            var eles = forest[i];

            if (eles.has(ele)) {
              return i;
            }
          }
        }; // start with one forest per node


        for (var i = 0; i < numNodes; i++) {
          forest[i] = this.spawn(nodes[i]);
        }

        var S = edges.sort(function (a, b) {
          return weightFn(a) - weightFn(b);
        });

        for (var _i = 0; _i < S.length; _i++) {
          var edge = S[_i];
          var u = edge.source()[0];
          var v = edge.target()[0];
          var setUIndex = findSetIndex(u);
          var setVIndex = findSetIndex(v);
          var setU = forest[setUIndex];
          var setV = forest[setVIndex];

          if (setUIndex !== setVIndex) {
            A.merge(edge); // combine forests for u and v

            setU.merge(setV);
            forest.splice(setVIndex, 1);
          }
        }

        return A;
      }
    };

    var aStarDefaults = defaults({
      root: null,
      goal: null,
      weight: function weight(edge) {
        return 1;
      },
      heuristic: function heuristic(edge) {
        return 0;
      },
      directed: false
    });
    var elesfn$3 = {
      // Implemented from pseudocode from wikipedia
      aStar: function aStar(options) {
        var cy = this.cy();

        var _aStarDefaults = aStarDefaults(options),
            root = _aStarDefaults.root,
            goal = _aStarDefaults.goal,
            heuristic = _aStarDefaults.heuristic,
            directed = _aStarDefaults.directed,
            weight = _aStarDefaults.weight;

        root = cy.collection(root)[0];
        goal = cy.collection(goal)[0];
        var sid = root.id();
        var tid = goal.id();
        var gScore = {};
        var fScore = {};
        var closedSetIds = {};
        var openSet = new Heap(function (a, b) {
          return fScore[a.id()] - fScore[b.id()];
        });
        var openSetIds = new Set$1();
        var cameFrom = {};
        var cameFromEdge = {};

        var addToOpenSet = function addToOpenSet(ele, id) {
          openSet.push(ele);
          openSetIds.add(id);
        };

        var cMin, cMinId;

        var popFromOpenSet = function popFromOpenSet() {
          cMin = openSet.pop();
          cMinId = cMin.id();
          openSetIds["delete"](cMinId);
        };

        var isInOpenSet = function isInOpenSet(id) {
          return openSetIds.has(id);
        };

        addToOpenSet(root, sid);
        gScore[sid] = 0;
        fScore[sid] = heuristic(root); // Counter

        var steps = 0; // Main loop

        while (openSet.size() > 0) {
          popFromOpenSet();
          steps++; // If we've found our goal, then we are done

          if (cMinId === tid) {
            var path = [];
            var pathNode = goal;
            var pathNodeId = tid;
            var pathEdge = cameFromEdge[pathNodeId];

            for (;;) {
              path.unshift(pathNode);

              if (pathEdge != null) {
                path.unshift(pathEdge);
              }

              pathNode = cameFrom[pathNodeId];

              if (pathNode == null) {
                break;
              }

              pathNodeId = pathNode.id();
              pathEdge = cameFromEdge[pathNodeId];
            }

            return {
              found: true,
              distance: gScore[cMinId],
              path: this.spawn(path),
              steps: steps
            };
          } // Add cMin to processed nodes


          closedSetIds[cMinId] = true; // Update scores for neighbors of cMin
          // Take into account if graph is directed or not

          var vwEdges = cMin._private.edges;

          for (var i = 0; i < vwEdges.length; i++) {
            var e = vwEdges[i]; // edge must be in set of calling eles

            if (!this.hasElementWithId(e.id())) {
              continue;
            } // cMin must be the source of edge if directed


            if (directed && e.data('source') !== cMinId) {
              continue;
            }

            var wSrc = e.source();
            var wTgt = e.target();
            var w = wSrc.id() !== cMinId ? wSrc : wTgt;
            var wid = w.id(); // node must be in set of calling eles

            if (!this.hasElementWithId(wid)) {
              continue;
            } // if node is in closedSet, ignore it


            if (closedSetIds[wid]) {
              continue;
            } // New tentative score for node w


            var tempScore = gScore[cMinId] + weight(e); // Update gScore for node w if:
            //   w not present in openSet
            // OR
            //   tentative gScore is less than previous value
            // w not in openSet

            if (!isInOpenSet(wid)) {
              gScore[wid] = tempScore;
              fScore[wid] = tempScore + heuristic(w);
              addToOpenSet(w, wid);
              cameFrom[wid] = cMin;
              cameFromEdge[wid] = e;
              continue;
            } // w already in openSet, but with greater gScore


            if (tempScore < gScore[wid]) {
              gScore[wid] = tempScore;
              fScore[wid] = tempScore + heuristic(w);
              cameFrom[wid] = cMin;
              cameFromEdge[wid] = e;
            }
          } // End of neighbors update

        } // End of main loop
        // If we've reached here, then we've not reached our goal


        return {
          found: false,
          distance: undefined,
          path: undefined,
          steps: steps
        };
      }
    }; // elesfn

    var floydWarshallDefaults = defaults({
      weight: function weight(edge) {
        return 1;
      },
      directed: false
    });
    var elesfn$4 = {
      // Implemented from pseudocode from wikipedia
      floydWarshall: function floydWarshall(options) {
        var cy = this.cy();

        var _floydWarshallDefault = floydWarshallDefaults(options),
            weight = _floydWarshallDefault.weight,
            directed = _floydWarshallDefault.directed;

        var weightFn = weight;

        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges;

        var N = nodes.length;
        var Nsq = N * N;

        var indexOf = function indexOf(node) {
          return nodes.indexOf(node);
        };

        var atIndex = function atIndex(i) {
          return nodes[i];
        }; // Initialize distance matrix


        var dist = new Array(Nsq);

        for (var n = 0; n < Nsq; n++) {
          var j = n % N;
          var i = (n - j) / N;

          if (i === j) {
            dist[n] = 0;
          } else {
            dist[n] = Infinity;
          }
        } // Initialize matrix used for path reconstruction
        // Initialize distance matrix


        var next = new Array(Nsq);
        var edgeNext = new Array(Nsq); // Process edges

        for (var _i = 0; _i < edges.length; _i++) {
          var edge = edges[_i];
          var src = edge.source()[0];
          var tgt = edge.target()[0];

          if (src === tgt) {
            continue;
          } // exclude loops


          var s = indexOf(src);
          var t = indexOf(tgt);
          var st = s * N + t; // source to target index

          var _weight = weightFn(edge); // Check if already process another edge between same 2 nodes


          if (dist[st] > _weight) {
            dist[st] = _weight;
            next[st] = t;
            edgeNext[st] = edge;
          } // If undirected graph, process 'reversed' edge


          if (!directed) {
            var ts = t * N + s; // target to source index

            if (!directed && dist[ts] > _weight) {
              dist[ts] = _weight;
              next[ts] = s;
              edgeNext[ts] = edge;
            }
          }
        } // Main loop


        for (var k = 0; k < N; k++) {
          for (var _i2 = 0; _i2 < N; _i2++) {
            var ik = _i2 * N + k;

            for (var _j = 0; _j < N; _j++) {
              var ij = _i2 * N + _j;
              var kj = k * N + _j;

              if (dist[ik] + dist[kj] < dist[ij]) {
                dist[ij] = dist[ik] + dist[kj];
                next[ij] = next[ik];
              }
            }
          }
        }

        var getArgEle = function getArgEle(ele) {
          return (string(ele) ? cy.filter(ele) : ele)[0];
        };

        var indexOfArgEle = function indexOfArgEle(ele) {
          return indexOf(getArgEle(ele));
        };

        var res = {
          distance: function distance(from, to) {
            var i = indexOfArgEle(from);
            var j = indexOfArgEle(to);
            return dist[i * N + j];
          },
          path: function path(from, to) {
            var i = indexOfArgEle(from);
            var j = indexOfArgEle(to);
            var fromNode = atIndex(i);

            if (i === j) {
              return fromNode.collection();
            }

            if (next[i * N + j] == null) {
              return cy.collection();
            }

            var path = cy.collection();
            var prev = i;
            var edge;
            path.merge(fromNode);

            while (i !== j) {
              prev = i;
              i = next[i * N + j];
              edge = edgeNext[prev * N + i];
              path.merge(edge);
              path.merge(atIndex(i));
            }

            return path;
          }
        };
        return res;
      } // floydWarshall

    }; // elesfn

    var bellmanFordDefaults = defaults({
      weight: function weight(edge) {
        return 1;
      },
      directed: false,
      root: null
    });
    var elesfn$5 = {
      // Implemented from pseudocode from wikipedia
      bellmanFord: function bellmanFord(options) {
        var _this = this;

        var _bellmanFordDefaults = bellmanFordDefaults(options),
            weight = _bellmanFordDefaults.weight,
            directed = _bellmanFordDefaults.directed,
            root = _bellmanFordDefaults.root;

        var weightFn = weight;
        var eles = this;
        var cy = this.cy();

        var _this$byGroup = this.byGroup(),
            edges = _this$byGroup.edges,
            nodes = _this$byGroup.nodes;

        var numNodes = nodes.length;
        var infoMap = new Map$1();
        var hasNegativeWeightCycle = false;
        var negativeWeightCycles = [];
        root = cy.collection(root)[0]; // in case selector passed

        edges.unmergeBy(function (edge) {
          return edge.isLoop();
        });
        var numEdges = edges.length;

        var getInfo = function getInfo(node) {
          var obj = infoMap.get(node.id());

          if (!obj) {
            obj = {};
            infoMap.set(node.id(), obj);
          }

          return obj;
        };

        var getNodeFromTo = function getNodeFromTo(to) {
          return (string(to) ? cy.$(to) : to)[0];
        };

        var distanceTo = function distanceTo(to) {
          return getInfo(getNodeFromTo(to)).dist;
        };

        var pathTo = function pathTo(to) {
          var thisStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : root;
          var end = getNodeFromTo(to);
          var path = [];
          var node = end;

          for (;;) {
            if (node == null) {
              return _this.spawn();
            }

            var _getInfo = getInfo(node),
                edge = _getInfo.edge,
                pred = _getInfo.pred;

            path.unshift(node[0]);

            if (node.same(thisStart) && path.length > 0) {
              break;
            }

            if (edge != null) {
              path.unshift(edge);
            }

            node = pred;
          }

          return eles.spawn(path);
        }; // Initializations { dist, pred, edge }


        for (var i = 0; i < numNodes; i++) {
          var node = nodes[i];
          var info = getInfo(node);

          if (node.same(root)) {
            info.dist = 0;
          } else {
            info.dist = Infinity;
          }

          info.pred = null;
          info.edge = null;
        } // Edges relaxation


        var replacedEdge = false;

        var checkForEdgeReplacement = function checkForEdgeReplacement(node1, node2, edge, info1, info2, weight) {
          var dist = info1.dist + weight;

          if (dist < info2.dist && !edge.same(info1.edge)) {
            info2.dist = dist;
            info2.pred = node1;
            info2.edge = edge;
            replacedEdge = true;
          }
        };

        for (var _i = 1; _i < numNodes; _i++) {
          replacedEdge = false;

          for (var e = 0; e < numEdges; e++) {
            var edge = edges[e];
            var src = edge.source();
            var tgt = edge.target();

            var _weight = weightFn(edge);

            var srcInfo = getInfo(src);
            var tgtInfo = getInfo(tgt);
            checkForEdgeReplacement(src, tgt, edge, srcInfo, tgtInfo, _weight); // If undirected graph, we need to take into account the 'reverse' edge

            if (!directed) {
              checkForEdgeReplacement(tgt, src, edge, tgtInfo, srcInfo, _weight);
            }
          }

          if (!replacedEdge) {
            break;
          }
        }

        if (replacedEdge) {
          // Check for negative weight cycles
          for (var _e = 0; _e < numEdges; _e++) {
            var _edge = edges[_e];

            var _src = _edge.source();

            var _tgt = _edge.target();

            var _weight2 = weightFn(_edge);

            var srcDist = getInfo(_src).dist;
            var tgtDist = getInfo(_tgt).dist;

            if (srcDist + _weight2 < tgtDist || !directed && tgtDist + _weight2 < srcDist) {
              warn('Graph contains a negative weight cycle for Bellman-Ford');
              hasNegativeWeightCycle = true;
              break;
            }
          }
        }

        return {
          distanceTo: distanceTo,
          pathTo: pathTo,
          hasNegativeWeightCycle: hasNegativeWeightCycle,
          negativeWeightCycles: negativeWeightCycles
        };
      } // bellmanFord

    }; // elesfn

    var sqrt2 = Math.sqrt(2); // Function which colapses 2 (meta) nodes into one
    // Updates the remaining edge lists
    // Receives as a paramater the edge which causes the collapse

    var collapse = function collapse(edgeIndex, nodeMap, remainingEdges) {
      if (remainingEdges.length === 0) {
        error("Karger-Stein must be run on a connected (sub)graph");
      }

      var edgeInfo = remainingEdges[edgeIndex];
      var sourceIn = edgeInfo[1];
      var targetIn = edgeInfo[2];
      var partition1 = nodeMap[sourceIn];
      var partition2 = nodeMap[targetIn];
      var newEdges = remainingEdges; // re-use array
      // Delete all edges between partition1 and partition2

      for (var i = newEdges.length - 1; i >= 0; i--) {
        var edge = newEdges[i];
        var src = edge[1];
        var tgt = edge[2];

        if (nodeMap[src] === partition1 && nodeMap[tgt] === partition2 || nodeMap[src] === partition2 && nodeMap[tgt] === partition1) {
          newEdges.splice(i, 1);
        }
      } // All edges pointing to partition2 should now point to partition1


      for (var _i = 0; _i < newEdges.length; _i++) {
        var _edge = newEdges[_i];

        if (_edge[1] === partition2) {
          // Check source
          newEdges[_i] = _edge.slice(); // copy

          newEdges[_i][1] = partition1;
        } else if (_edge[2] === partition2) {
          // Check target
          newEdges[_i] = _edge.slice(); // copy

          newEdges[_i][2] = partition1;
        }
      } // Move all nodes from partition2 to partition1


      for (var _i2 = 0; _i2 < nodeMap.length; _i2++) {
        if (nodeMap[_i2] === partition2) {
          nodeMap[_i2] = partition1;
        }
      }

      return newEdges;
    }; // Contracts a graph until we reach a certain number of meta nodes


    var contractUntil = function contractUntil(metaNodeMap, remainingEdges, size, sizeLimit) {
      while (size > sizeLimit) {
        // Choose an edge randomly
        var edgeIndex = Math.floor(Math.random() * remainingEdges.length); // Collapse graph based on edge

        remainingEdges = collapse(edgeIndex, metaNodeMap, remainingEdges);
        size--;
      }

      return remainingEdges;
    };

    var elesfn$6 = {
      // Computes the minimum cut of an undirected graph
      // Returns the correct answer with high probability
      kargerStein: function kargerStein() {
        var _this = this;

        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges;

        edges.unmergeBy(function (edge) {
          return edge.isLoop();
        });
        var numNodes = nodes.length;
        var numEdges = edges.length;
        var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
        var stopSize = Math.floor(numNodes / sqrt2);

        if (numNodes < 2) {
          error('At least 2 nodes are required for Karger-Stein algorithm');
          return undefined;
        } // Now store edge destination as indexes
        // Format for each edge (edge index, source node index, target node index)


        var edgeIndexes = [];

        for (var i = 0; i < numEdges; i++) {
          var e = edges[i];
          edgeIndexes.push([i, nodes.indexOf(e.source()), nodes.indexOf(e.target())]);
        } // We will store the best cut found here


        var minCutSize = Infinity;
        var minCutEdgeIndexes = [];
        var minCutNodeMap = new Array(numNodes); // Initial meta node partition

        var metaNodeMap = new Array(numNodes);
        var metaNodeMap2 = new Array(numNodes);

        var copyNodesMap = function copyNodesMap(from, to) {
          for (var _i3 = 0; _i3 < numNodes; _i3++) {
            to[_i3] = from[_i3];
          }
        }; // Main loop


        for (var iter = 0; iter <= numIter; iter++) {
          // Reset meta node partition
          for (var _i4 = 0; _i4 < numNodes; _i4++) {
            metaNodeMap[_i4] = _i4;
          } // Contract until stop point (stopSize nodes)


          var edgesState = contractUntil(metaNodeMap, edgeIndexes.slice(), numNodes, stopSize);
          var edgesState2 = edgesState.slice(); // copy
          // Create a copy of the colapsed nodes state

          copyNodesMap(metaNodeMap, metaNodeMap2); // Run 2 iterations starting in the stop state

          var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
          var res2 = contractUntil(metaNodeMap2, edgesState2, stopSize, 2); // Is any of the 2 results the best cut so far?

          if (res1.length <= res2.length && res1.length < minCutSize) {
            minCutSize = res1.length;
            minCutEdgeIndexes = res1;
            copyNodesMap(metaNodeMap, minCutNodeMap);
          } else if (res2.length <= res1.length && res2.length < minCutSize) {
            minCutSize = res2.length;
            minCutEdgeIndexes = res2;
            copyNodesMap(metaNodeMap2, minCutNodeMap);
          }
        } // end of main loop
        // Construct result


        var cut = this.spawn(minCutEdgeIndexes.map(function (e) {
          return edges[e[0]];
        }));
        var partition1 = this.spawn();
        var partition2 = this.spawn(); // traverse metaNodeMap for best cut

        var witnessNodePartition = minCutNodeMap[0];

        for (var _i5 = 0; _i5 < minCutNodeMap.length; _i5++) {
          var partitionId = minCutNodeMap[_i5];
          var node = nodes[_i5];

          if (partitionId === witnessNodePartition) {
            partition1.merge(node);
          } else {
            partition2.merge(node);
          }
        } // construct components corresponding to each disjoint subset of nodes


        var constructComponent = function constructComponent(subset) {
          var component = _this.spawn();

          subset.forEach(function (node) {
            component.merge(node);
            node.connectedEdges().forEach(function (edge) {
              // ensure edge is within calling collection and edge is not in cut
              if (_this.contains(edge) && !cut.contains(edge)) {
                component.merge(edge);
              }
            });
          });
          return component;
        };

        var components = [constructComponent(partition1), constructComponent(partition2)];
        var ret = {
          cut: cut,
          components: components,
          // n.b. partitions are included to be compatible with the old api spec
          // (could be removed in a future major version)
          partition1: partition1,
          partition2: partition2
        };
        return ret;
      }
    }; // elesfn

    var copyPosition = function copyPosition(p) {
      return {
        x: p.x,
        y: p.y
      };
    };
    var modelToRenderedPosition = function modelToRenderedPosition(p, zoom, pan) {
      return {
        x: p.x * zoom + pan.x,
        y: p.y * zoom + pan.y
      };
    };
    var renderedToModelPosition = function renderedToModelPosition(p, zoom, pan) {
      return {
        x: (p.x - pan.x) / zoom,
        y: (p.y - pan.y) / zoom
      };
    };
    var array2point = function array2point(arr) {
      return {
        x: arr[0],
        y: arr[1]
      };
    };
    var min$1 = function min(arr) {
      var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
      var min = Infinity;

      for (var i = begin; i < end; i++) {
        var val = arr[i];

        if (isFinite(val)) {
          min = Math.min(val, min);
        }
      }

      return min;
    };
    var max$1 = function max(arr) {
      var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
      var max = -Infinity;

      for (var i = begin; i < end; i++) {
        var val = arr[i];

        if (isFinite(val)) {
          max = Math.max(val, max);
        }
      }

      return max;
    };
    var mean = function mean(arr) {
      var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
      var total = 0;
      var n = 0;

      for (var i = begin; i < end; i++) {
        var val = arr[i];

        if (isFinite(val)) {
          total += val;
          n++;
        }
      }

      return total / n;
    };
    var median = function median(arr) {
      var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
      var copy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var sort = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      var includeHoles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

      if (copy) {
        arr = arr.slice(begin, end);
      } else {
        if (end < arr.length) {
          arr.splice(end, arr.length - end);
        }

        if (begin > 0) {
          arr.splice(0, begin);
        }
      } // all non finite (e.g. Infinity, NaN) elements must be -Infinity so they go to the start


      var off = 0; // offset from non-finite values

      for (var i = arr.length - 1; i >= 0; i--) {
        var v = arr[i];

        if (includeHoles) {
          if (!isFinite(v)) {
            arr[i] = -Infinity;
            off++;
          }
        } else {
          // just remove it if we don't want to consider holes
          arr.splice(i, 1);
        }
      }

      if (sort) {
        arr.sort(function (a, b) {
          return a - b;
        }); // requires copy = true if you don't want to change the orig
      }

      var len = arr.length;
      var mid = Math.floor(len / 2);

      if (len % 2 !== 0) {
        return arr[mid + 1 + off];
      } else {
        return (arr[mid - 1 + off] + arr[mid + off]) / 2;
      }
    };
    var deg2rad = function deg2rad(deg) {
      return Math.PI * deg / 180;
    };
    var getAngleFromDisp = function getAngleFromDisp(dispX, dispY) {
      return Math.atan2(dispY, dispX) - Math.PI / 2;
    };
    var log2 = Math.log2 || function (n) {
      return Math.log(n) / Math.log(2);
    };
    var signum = function signum(x) {
      if (x > 0) {
        return 1;
      } else if (x < 0) {
        return -1;
      } else {
        return 0;
      }
    };
    var dist = function dist(p1, p2) {
      return Math.sqrt(sqdist(p1, p2));
    };
    var sqdist = function sqdist(p1, p2) {
      var dx = p2.x - p1.x;
      var dy = p2.y - p1.y;
      return dx * dx + dy * dy;
    };
    var inPlaceSumNormalize = function inPlaceSumNormalize(v) {
      var length = v.length; // First, get sum of all elements

      var total = 0;

      for (var i = 0; i < length; i++) {
        total += v[i];
      } // Now, divide each by the sum of all elements


      for (var _i = 0; _i < length; _i++) {
        v[_i] = v[_i] / total;
      }

      return v;
    };

    var qbezierAt = function qbezierAt(p0, p1, p2, t) {
      return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
    };
    var qbezierPtAt = function qbezierPtAt(p0, p1, p2, t) {
      return {
        x: qbezierAt(p0.x, p1.x, p2.x, t),
        y: qbezierAt(p0.y, p1.y, p2.y, t)
      };
    };
    var lineAt = function lineAt(p0, p1, t, d) {
      var vec = {
        x: p1.x - p0.x,
        y: p1.y - p0.y
      };
      var vecDist = dist(p0, p1);
      var normVec = {
        x: vec.x / vecDist,
        y: vec.y / vecDist
      };
      t = t == null ? 0 : t;
      d = d != null ? d : t * vecDist;
      return {
        x: p0.x + normVec.x * d,
        y: p0.y + normVec.y * d
      };
    };
    var bound = function bound(min, val, max) {
      return Math.max(min, Math.min(max, val));
    }; // makes a full bb (x1, y1, x2, y2, w, h) from implicit params

    var makeBoundingBox = function makeBoundingBox(bb) {
      if (bb == null) {
        return {
          x1: Infinity,
          y1: Infinity,
          x2: -Infinity,
          y2: -Infinity,
          w: 0,
          h: 0
        };
      } else if (bb.x1 != null && bb.y1 != null) {
        if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {
          return {
            x1: bb.x1,
            y1: bb.y1,
            x2: bb.x2,
            y2: bb.y2,
            w: bb.x2 - bb.x1,
            h: bb.y2 - bb.y1
          };
        } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {
          return {
            x1: bb.x1,
            y1: bb.y1,
            x2: bb.x1 + bb.w,
            y2: bb.y1 + bb.h,
            w: bb.w,
            h: bb.h
          };
        }
      }
    };
    var copyBoundingBox = function copyBoundingBox(bb) {
      return {
        x1: bb.x1,
        x2: bb.x2,
        w: bb.w,
        y1: bb.y1,
        y2: bb.y2,
        h: bb.h
      };
    };
    var clearBoundingBox = function clearBoundingBox(bb) {
      bb.x1 = Infinity;
      bb.y1 = Infinity;
      bb.x2 = -Infinity;
      bb.y2 = -Infinity;
      bb.w = 0;
      bb.h = 0;
    };
    var updateBoundingBox = function updateBoundingBox(bb1, bb2) {
      // update bb1 with bb2 bounds
      bb1.x1 = Math.min(bb1.x1, bb2.x1);
      bb1.x2 = Math.max(bb1.x2, bb2.x2);
      bb1.w = bb1.x2 - bb1.x1;
      bb1.y1 = Math.min(bb1.y1, bb2.y1);
      bb1.y2 = Math.max(bb1.y2, bb2.y2);
      bb1.h = bb1.y2 - bb1.y1;
    };
    var expandBoundingBoxByPoint = function expandBoundingBoxByPoint(bb, x, y) {
      bb.x1 = Math.min(bb.x1, x);
      bb.x2 = Math.max(bb.x2, x);
      bb.w = bb.x2 - bb.x1;
      bb.y1 = Math.min(bb.y1, y);
      bb.y2 = Math.max(bb.y2, y);
      bb.h = bb.y2 - bb.y1;
    };
    var expandBoundingBox = function expandBoundingBox(bb) {
      var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      bb.x1 -= padding;
      bb.x2 += padding;
      bb.y1 -= padding;
      bb.y2 += padding;
      bb.w = bb.x2 - bb.x1;
      bb.h = bb.y2 - bb.y1;
      return bb;
    };
    var expandBoundingBoxSides = function expandBoundingBoxSides(bb) {
      var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0];
      var top, right, bottom, left;

      if (padding.length === 1) {
        top = right = bottom = left = padding[0];
      } else if (padding.length === 2) {
        top = bottom = padding[0];
        left = right = padding[1];
      } else if (padding.length === 4) {
        var _padding = _slicedToArray(padding, 4);

        top = _padding[0];
        right = _padding[1];
        bottom = _padding[2];
        left = _padding[3];
      }

      bb.x1 -= left;
      bb.x2 += right;
      bb.y1 -= top;
      bb.y2 += bottom;
      bb.w = bb.x2 - bb.x1;
      bb.h = bb.y2 - bb.y1;
      return bb;
    };

    var assignBoundingBox = function assignBoundingBox(bb1, bb2) {
      bb1.x1 = bb2.x1;
      bb1.y1 = bb2.y1;
      bb1.x2 = bb2.x2;
      bb1.y2 = bb2.y2;
      bb1.w = bb1.x2 - bb1.x1;
      bb1.h = bb1.y2 - bb1.y1;
    };
    var boundingBoxesIntersect = function boundingBoxesIntersect(bb1, bb2) {
      // case: one bb to right of other
      if (bb1.x1 > bb2.x2) {
        return false;
      }

      if (bb2.x1 > bb1.x2) {
        return false;
      } // case: one bb to left of other


      if (bb1.x2 < bb2.x1) {
        return false;
      }

      if (bb2.x2 < bb1.x1) {
        return false;
      } // case: one bb above other


      if (bb1.y2 < bb2.y1) {
        return false;
      }

      if (bb2.y2 < bb1.y1) {
        return false;
      } // case: one bb below other


      if (bb1.y1 > bb2.y2) {
        return false;
      }

      if (bb2.y1 > bb1.y2) {
        return false;
      } // otherwise, must have some overlap


      return true;
    };
    var inBoundingBox = function inBoundingBox(bb, x, y) {
      return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
    };
    var pointInBoundingBox = function pointInBoundingBox(bb, pt) {
      return inBoundingBox(bb, pt.x, pt.y);
    };
    var boundingBoxInBoundingBox = function boundingBoxInBoundingBox(bb1, bb2) {
      return inBoundingBox(bb1, bb2.x1, bb2.y1) && inBoundingBox(bb1, bb2.x2, bb2.y2);
    };
    var roundRectangleIntersectLine = function roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding) {
      var cornerRadius = getRoundRectangleRadius(width, height);
      var halfWidth = width / 2;
      var halfHeight = height / 2; // Check intersections with straight line segments

      var straightLineIntersections; // Top segment, left to right

      {
        var topStartX = nodeX - halfWidth + cornerRadius - padding;
        var topStartY = nodeY - halfHeight - padding;
        var topEndX = nodeX + halfWidth - cornerRadius + padding;
        var topEndY = topStartY;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      } // Right segment, top to bottom

      {
        var rightStartX = nodeX + halfWidth + padding;
        var rightStartY = nodeY - halfHeight + cornerRadius - padding;
        var rightEndX = rightStartX;
        var rightEndY = nodeY + halfHeight - cornerRadius + padding;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      } // Bottom segment, left to right

      {
        var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
        var bottomStartY = nodeY + halfHeight + padding;
        var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
        var bottomEndY = bottomStartY;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      } // Left segment, top to bottom

      {
        var leftStartX = nodeX - halfWidth - padding;
        var leftStartY = nodeY - halfHeight + cornerRadius - padding;
        var leftEndX = leftStartX;
        var leftEndY = nodeY + halfHeight - cornerRadius + padding;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      } // Check intersections with arc segments

      var arcIntersections; // Top Left

      {
        var topLeftCenterX = nodeX - halfWidth + cornerRadius;
        var topLeftCenterY = nodeY - halfHeight + cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

        if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      } // Top Right

      {
        var topRightCenterX = nodeX + halfWidth - cornerRadius;
        var topRightCenterY = nodeY - halfHeight + cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

        if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      } // Bottom Right

      {
        var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
        var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

        if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      } // Bottom Left

      {
        var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
        var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

        if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      }
      return []; // if nothing
    };
    var inLineVicinity = function inLineVicinity(x, y, lx1, ly1, lx2, ly2, tolerance) {
      var t = tolerance;
      var x1 = Math.min(lx1, lx2);
      var x2 = Math.max(lx1, lx2);
      var y1 = Math.min(ly1, ly2);
      var y2 = Math.max(ly1, ly2);
      return x1 - t <= x && x <= x2 + t && y1 - t <= y && y <= y2 + t;
    };
    var inBezierVicinity = function inBezierVicinity(x, y, x1, y1, x2, y2, x3, y3, tolerance) {
      var bb = {
        x1: Math.min(x1, x3, x2) - tolerance,
        x2: Math.max(x1, x3, x2) + tolerance,
        y1: Math.min(y1, y3, y2) - tolerance,
        y2: Math.max(y1, y3, y2) + tolerance
      }; // if outside the rough bounding box for the bezier, then it can't be a hit

      if (x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2) {
        // console.log('bezier out of rough bb')
        return false;
      } else {
        // console.log('do more expensive check');
        return true;
      }
    };
    var solveQuadratic = function solveQuadratic(a, b, c, val) {
      c -= val;
      var r = b * b - 4 * a * c;

      if (r < 0) {
        return [];
      }

      var sqrtR = Math.sqrt(r);
      var denom = 2 * a;
      var root1 = (-b + sqrtR) / denom;
      var root2 = (-b - sqrtR) / denom;
      return [root1, root2];
    };
    var solveCubic = function solveCubic(a, b, c, d, result) {
      // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
      // r is the real component, i is the imaginary component
      // An implementation of the Cardano method from the year 1545
      // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots
      var epsilon = 0.00001; // avoid division by zero while keeping the overall expression close in value

      if (a === 0) {
        a = epsilon;
      }

      b /= a;
      c /= a;
      d /= a;
      var discriminant, q, r, dum1, s, t, term1, r13;
      q = (3.0 * c - b * b) / 9.0;
      r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
      r /= 54.0;
      discriminant = q * q * q + r * r;
      result[1] = 0;
      term1 = b / 3.0;

      if (discriminant > 0) {
        s = r + Math.sqrt(discriminant);
        s = s < 0 ? -Math.pow(-s, 1.0 / 3.0) : Math.pow(s, 1.0 / 3.0);
        t = r - Math.sqrt(discriminant);
        t = t < 0 ? -Math.pow(-t, 1.0 / 3.0) : Math.pow(t, 1.0 / 3.0);
        result[0] = -term1 + s + t;
        term1 += (s + t) / 2.0;
        result[4] = result[2] = -term1;
        term1 = Math.sqrt(3.0) * (-t + s) / 2;
        result[3] = term1;
        result[5] = -term1;
        return;
      }

      result[5] = result[3] = 0;

      if (discriminant === 0) {
        r13 = r < 0 ? -Math.pow(-r, 1.0 / 3.0) : Math.pow(r, 1.0 / 3.0);
        result[0] = -term1 + 2.0 * r13;
        result[4] = result[2] = -(r13 + term1);
        return;
      }

      q = -q;
      dum1 = q * q * q;
      dum1 = Math.acos(r / Math.sqrt(dum1));
      r13 = 2.0 * Math.sqrt(q);
      result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);
      result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);
      result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);
      return;
    };
    var sqdistToQuadraticBezier = function sqdistToQuadraticBezier(x, y, x1, y1, x2, y2, x3, y3) {
      // Find minimum distance by using the minimum of the distance
      // function between the given point and the curve
      // This gives the coefficients of the resulting cubic equation
      // whose roots tell us where a possible minimum is
      // (Coefficients are divided by 4)
      var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;
      var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3 + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;
      var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;
      var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x + y1 * y2 - y1 * y1 + y1 * y - y2 * y; // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

      var roots = []; // Use the cubic solving algorithm

      solveCubic(a, b, c, d, roots);
      var zeroThreshold = 0.0000001;
      var params = [];

      for (var index = 0; index < 6; index += 2) {
        if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1.0) {
          params.push(roots[index]);
        }
      }

      params.push(1.0);
      params.push(0.0);
      var minDistanceSquared = -1;
      var curX, curY, distSquared;

      for (var i = 0; i < params.length; i++) {
        curX = Math.pow(1.0 - params[i], 2.0) * x1 + 2.0 * (1 - params[i]) * params[i] * x2 + params[i] * params[i] * x3;
        curY = Math.pow(1 - params[i], 2.0) * y1 + 2 * (1.0 - params[i]) * params[i] * y2 + params[i] * params[i] * y3;
        distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2); // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));

        if (minDistanceSquared >= 0) {
          if (distSquared < minDistanceSquared) {
            minDistanceSquared = distSquared;
          }
        } else {
          minDistanceSquared = distSquared;
        }
      }

      return minDistanceSquared;
    };
    var sqdistToFiniteLine = function sqdistToFiniteLine(x, y, x1, y1, x2, y2) {
      var offset = [x - x1, y - y1];
      var line = [x2 - x1, y2 - y1];
      var lineSq = line[0] * line[0] + line[1] * line[1];
      var hypSq = offset[0] * offset[0] + offset[1] * offset[1];
      var dotProduct = offset[0] * line[0] + offset[1] * line[1];
      var adjSq = dotProduct * dotProduct / lineSq;

      if (dotProduct < 0) {
        return hypSq;
      }

      if (adjSq > lineSq) {
        return (x - x2) * (x - x2) + (y - y2) * (y - y2);
      }

      return hypSq - adjSq;
    };
    var pointInsidePolygonPoints = function pointInsidePolygonPoints(x, y, points) {
      var x1, y1, x2, y2;
      var y3; // Intersect with vertical line through (x, y)

      var up = 0; // let down = 0;

      for (var i = 0; i < points.length / 2; i++) {
        x1 = points[i * 2];
        y1 = points[i * 2 + 1];

        if (i + 1 < points.length / 2) {
          x2 = points[(i + 1) * 2];
          y2 = points[(i + 1) * 2 + 1];
        } else {
          x2 = points[(i + 1 - points.length / 2) * 2];
          y2 = points[(i + 1 - points.length / 2) * 2 + 1];
        }

        if (x1 == x && x2 == x) ; else if (x1 >= x && x >= x2 || x1 <= x && x <= x2) {
          y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;

          if (y3 > y) {
            up++;
          } // if( y3 < y ){
          // down++;
          // }

        } else {
          continue;
        }
      }

      if (up % 2 === 0) {
        return false;
      } else {
        return true;
      }
    };
    var pointInsidePolygon = function pointInsidePolygon(x, y, basePoints, centerX, centerY, width, height, direction, padding) {
      var transformedPoints = new Array(basePoints.length); // Gives negative angle

      var angle;

      if (direction[0] != null) {
        angle = Math.atan(direction[1] / direction[0]);

        if (direction[0] < 0) {
          angle = angle + Math.PI / 2;
        } else {
          angle = -angle - Math.PI / 2;
        }
      } else {
        angle = direction;
      }

      var cos = Math.cos(-angle);
      var sin = Math.sin(-angle); //    console.log("base: " + basePoints);

      for (var i = 0; i < transformedPoints.length / 2; i++) {
        transformedPoints[i * 2] = width / 2 * (basePoints[i * 2] * cos - basePoints[i * 2 + 1] * sin);
        transformedPoints[i * 2 + 1] = height / 2 * (basePoints[i * 2 + 1] * cos + basePoints[i * 2] * sin);
        transformedPoints[i * 2] += centerX;
        transformedPoints[i * 2 + 1] += centerY;
      }

      var points;

      if (padding > 0) {
        var expandedLineSet = expandPolygon(transformedPoints, -padding);
        points = joinLines(expandedLineSet);
      } else {
        points = transformedPoints;
      }

      return pointInsidePolygonPoints(x, y, points);
    };
    var pointInsideRoundPolygon = function pointInsideRoundPolygon(x, y, basePoints, centerX, centerY, width, height) {
      var cutPolygonPoints = new Array(basePoints.length);
      var halfW = width / 2;
      var halfH = height / 2;
      var cornerRadius = getRoundPolygonRadius(width, height);
      var squaredCornerRadius = cornerRadius * cornerRadius;

      for (var i = 0; i < basePoints.length / 4; i++) {
        var sourceUv = void 0,
            destUv = void 0;

        if (i === 0) {
          sourceUv = basePoints.length - 2;
        } else {
          sourceUv = i * 4 - 2;
        }

        destUv = i * 4 + 2;
        var px = centerX + halfW * basePoints[i * 4];
        var py = centerY + halfH * basePoints[i * 4 + 1];
        var cosTheta = -basePoints[sourceUv] * basePoints[destUv] - basePoints[sourceUv + 1] * basePoints[destUv + 1];
        var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
        var cp0x = px - offset * basePoints[sourceUv];
        var cp0y = py - offset * basePoints[sourceUv + 1];
        var cp1x = px + offset * basePoints[destUv];
        var cp1y = py + offset * basePoints[destUv + 1];
        cutPolygonPoints[i * 4] = cp0x;
        cutPolygonPoints[i * 4 + 1] = cp0y;
        cutPolygonPoints[i * 4 + 2] = cp1x;
        cutPolygonPoints[i * 4 + 3] = cp1y;
        var orthx = basePoints[sourceUv + 1];
        var orthy = -basePoints[sourceUv];
        var cosAlpha = orthx * basePoints[destUv] + orthy * basePoints[destUv + 1];

        if (cosAlpha < 0) {
          orthx *= -1;
          orthy *= -1;
        }

        var cx = cp0x + orthx * cornerRadius;
        var cy = cp0y + orthy * cornerRadius;
        var squaredDistance = Math.pow(cx - x, 2) + Math.pow(cy - y, 2);

        if (squaredDistance <= squaredCornerRadius) {
          return true;
        }
      }

      return pointInsidePolygonPoints(x, y, cutPolygonPoints);
    };
    var joinLines = function joinLines(lineSet) {
      var vertices = new Array(lineSet.length / 2);
      var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
      var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;

      for (var i = 0; i < lineSet.length / 4; i++) {
        currentLineStartX = lineSet[i * 4];
        currentLineStartY = lineSet[i * 4 + 1];
        currentLineEndX = lineSet[i * 4 + 2];
        currentLineEndY = lineSet[i * 4 + 3];

        if (i < lineSet.length / 4 - 1) {
          nextLineStartX = lineSet[(i + 1) * 4];
          nextLineStartY = lineSet[(i + 1) * 4 + 1];
          nextLineEndX = lineSet[(i + 1) * 4 + 2];
          nextLineEndY = lineSet[(i + 1) * 4 + 3];
        } else {
          nextLineStartX = lineSet[0];
          nextLineStartY = lineSet[1];
          nextLineEndX = lineSet[2];
          nextLineEndY = lineSet[3];
        }

        var intersection = finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);
        vertices[i * 2] = intersection[0];
        vertices[i * 2 + 1] = intersection[1];
      }

      return vertices;
    };
    var expandPolygon = function expandPolygon(points, pad) {
      var expandedLineSet = new Array(points.length * 2);
      var currentPointX, currentPointY, nextPointX, nextPointY;

      for (var i = 0; i < points.length / 2; i++) {
        currentPointX = points[i * 2];
        currentPointY = points[i * 2 + 1];

        if (i < points.length / 2 - 1) {
          nextPointX = points[(i + 1) * 2];
          nextPointY = points[(i + 1) * 2 + 1];
        } else {
          nextPointX = points[0];
          nextPointY = points[1];
        } // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]
        // Assume CCW polygon winding


        var offsetX = nextPointY - currentPointY;
        var offsetY = -(nextPointX - currentPointX); // Normalize

        var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
        var normalizedOffsetX = offsetX / offsetLength;
        var normalizedOffsetY = offsetY / offsetLength;
        expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;
        expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
        expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
        expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
      }

      return expandedLineSet;
    };
    var intersectLineEllipse = function intersectLineEllipse(x, y, centerX, centerY, ellipseWradius, ellipseHradius) {
      var dispX = centerX - x;
      var dispY = centerY - y;
      dispX /= ellipseWradius;
      dispY /= ellipseHradius;
      var len = Math.sqrt(dispX * dispX + dispY * dispY);
      var newLength = len - 1;

      if (newLength < 0) {
        return [];
      }

      var lenProportion = newLength / len;
      return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];
    };
    var checkInEllipse = function checkInEllipse(x, y, width, height, centerX, centerY, padding) {
      x -= centerX;
      y -= centerY;
      x /= width / 2 + padding;
      y /= height / 2 + padding;
      return x * x + y * y <= 1;
    }; // Returns intersections of increasing distance from line's start point

    var intersectLineCircle = function intersectLineCircle(x1, y1, x2, y2, centerX, centerY, radius) {
      // Calculate d, direction vector of line
      var d = [x2 - x1, y2 - y1]; // Direction vector of line

      var f = [x1 - centerX, y1 - centerY];
      var a = d[0] * d[0] + d[1] * d[1];
      var b = 2 * (f[0] * d[0] + f[1] * d[1]);
      var c = f[0] * f[0] + f[1] * f[1] - radius * radius;
      var discriminant = b * b - 4 * a * c;

      if (discriminant < 0) {
        return [];
      }

      var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
      var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);
      var tMin = Math.min(t1, t2);
      var tMax = Math.max(t1, t2);
      var inRangeParams = [];

      if (tMin >= 0 && tMin <= 1) {
        inRangeParams.push(tMin);
      }

      if (tMax >= 0 && tMax <= 1) {
        inRangeParams.push(tMax);
      }

      if (inRangeParams.length === 0) {
        return [];
      }

      var nearIntersectionX = inRangeParams[0] * d[0] + x1;
      var nearIntersectionY = inRangeParams[0] * d[1] + y1;

      if (inRangeParams.length > 1) {
        if (inRangeParams[0] == inRangeParams[1]) {
          return [nearIntersectionX, nearIntersectionY];
        } else {
          var farIntersectionX = inRangeParams[1] * d[0] + x1;
          var farIntersectionY = inRangeParams[1] * d[1] + y1;
          return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
        }
      } else {
        return [nearIntersectionX, nearIntersectionY];
      }
    };
    var midOfThree = function midOfThree(a, b, c) {
      if (b <= a && a <= c || c <= a && a <= b) {
        return a;
      } else if (a <= b && b <= c || c <= b && b <= a) {
        return b;
      } else {
        return c;
      }
    }; // (x1,y1)=>(x2,y2) intersect with (x3,y3)=>(x4,y4)

    var finiteLinesIntersect = function finiteLinesIntersect(x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {
      var dx13 = x1 - x3;
      var dx21 = x2 - x1;
      var dx43 = x4 - x3;
      var dy13 = y1 - y3;
      var dy21 = y2 - y1;
      var dy43 = y4 - y3;
      var ua_t = dx43 * dy13 - dy43 * dx13;
      var ub_t = dx21 * dy13 - dy21 * dx13;
      var u_b = dy43 * dx21 - dx43 * dy21;

      if (u_b !== 0) {
        var ua = ua_t / u_b;
        var ub = ub_t / u_b;
        var flptThreshold = 0.001;

        var _min = 0 - flptThreshold;

        var _max = 1 + flptThreshold;

        if (_min <= ua && ua <= _max && _min <= ub && ub <= _max) {
          return [x1 + ua * dx21, y1 + ua * dy21];
        } else {
          if (!infiniteLines) {
            return [];
          } else {
            return [x1 + ua * dx21, y1 + ua * dy21];
          }
        }
      } else {
        if (ua_t === 0 || ub_t === 0) {
          // Parallel, coincident lines. Check if overlap
          // Check endpoint of second line
          if (midOfThree(x1, x2, x4) === x4) {
            return [x4, y4];
          } // Check start point of second line


          if (midOfThree(x1, x2, x3) === x3) {
            return [x3, y3];
          } // Endpoint of first line


          if (midOfThree(x3, x4, x2) === x2) {
            return [x2, y2];
          }

          return [];
        } else {
          // Parallel, non-coincident
          return [];
        }
      }
    }; // math.polygonIntersectLine( x, y, basePoints, centerX, centerY, width, height, padding )
    // intersect a node polygon (pts transformed)
    //
    // math.polygonIntersectLine( x, y, basePoints, centerX, centerY )
    // intersect the points (no transform)

    var polygonIntersectLine = function polygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding) {
      var intersections = [];
      var intersection;
      var transformedPoints = new Array(basePoints.length);
      var doTransform = true;

      if (width == null) {
        doTransform = false;
      }

      var points;

      if (doTransform) {
        for (var i = 0; i < transformedPoints.length / 2; i++) {
          transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;
          transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;
        }

        if (padding > 0) {
          var expandedLineSet = expandPolygon(transformedPoints, -padding);
          points = joinLines(expandedLineSet);
        } else {
          points = transformedPoints;
        }
      } else {
        points = basePoints;
      }

      var currentX, currentY, nextX, nextY;

      for (var _i2 = 0; _i2 < points.length / 2; _i2++) {
        currentX = points[_i2 * 2];
        currentY = points[_i2 * 2 + 1];

        if (_i2 < points.length / 2 - 1) {
          nextX = points[(_i2 + 1) * 2];
          nextY = points[(_i2 + 1) * 2 + 1];
        } else {
          nextX = points[0];
          nextY = points[1];
        }

        intersection = finiteLinesIntersect(x, y, centerX, centerY, currentX, currentY, nextX, nextY);

        if (intersection.length !== 0) {
          intersections.push(intersection[0], intersection[1]);
        }
      }

      return intersections;
    };
    var roundPolygonIntersectLine = function roundPolygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding) {
      var intersections = [];
      var intersection;
      var lines = new Array(basePoints.length);
      var halfW = width / 2;
      var halfH = height / 2;
      var cornerRadius = getRoundPolygonRadius(width, height);

      for (var i = 0; i < basePoints.length / 4; i++) {
        var sourceUv = void 0,
            destUv = void 0;

        if (i === 0) {
          sourceUv = basePoints.length - 2;
        } else {
          sourceUv = i * 4 - 2;
        }

        destUv = i * 4 + 2;
        var px = centerX + halfW * basePoints[i * 4];
        var py = centerY + halfH * basePoints[i * 4 + 1];
        var cosTheta = -basePoints[sourceUv] * basePoints[destUv] - basePoints[sourceUv + 1] * basePoints[destUv + 1];
        var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
        var cp0x = px - offset * basePoints[sourceUv];
        var cp0y = py - offset * basePoints[sourceUv + 1];
        var cp1x = px + offset * basePoints[destUv];
        var cp1y = py + offset * basePoints[destUv + 1];

        if (i === 0) {
          lines[basePoints.length - 2] = cp0x;
          lines[basePoints.length - 1] = cp0y;
        } else {
          lines[i * 4 - 2] = cp0x;
          lines[i * 4 - 1] = cp0y;
        }

        lines[i * 4] = cp1x;
        lines[i * 4 + 1] = cp1y;
        var orthx = basePoints[sourceUv + 1];
        var orthy = -basePoints[sourceUv];
        var cosAlpha = orthx * basePoints[destUv] + orthy * basePoints[destUv + 1];

        if (cosAlpha < 0) {
          orthx *= -1;
          orthy *= -1;
        }

        var cx = cp0x + orthx * cornerRadius;
        var cy = cp0y + orthy * cornerRadius;
        intersection = intersectLineCircle(x, y, centerX, centerY, cx, cy, cornerRadius);

        if (intersection.length !== 0) {
          intersections.push(intersection[0], intersection[1]);
        }
      }

      for (var _i3 = 0; _i3 < lines.length / 4; _i3++) {
        intersection = finiteLinesIntersect(x, y, centerX, centerY, lines[_i3 * 4], lines[_i3 * 4 + 1], lines[_i3 * 4 + 2], lines[_i3 * 4 + 3], false);

        if (intersection.length !== 0) {
          intersections.push(intersection[0], intersection[1]);
        }
      }

      if (intersections.length > 2) {
        var lowestIntersection = [intersections[0], intersections[1]];
        var lowestSquaredDistance = Math.pow(lowestIntersection[0] - x, 2) + Math.pow(lowestIntersection[1] - y, 2);

        for (var _i4 = 1; _i4 < intersections.length / 2; _i4++) {
          var squaredDistance = Math.pow(intersections[_i4 * 2] - x, 2) + Math.pow(intersections[_i4 * 2 + 1] - y, 2);

          if (squaredDistance <= lowestSquaredDistance) {
            lowestIntersection[0] = intersections[_i4 * 2];
            lowestIntersection[1] = intersections[_i4 * 2 + 1];
            lowestSquaredDistance = squaredDistance;
          }
        }

        return lowestIntersection;
      }

      return intersections;
    };
    var shortenIntersection = function shortenIntersection(intersection, offset, amount) {
      var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];
      var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);
      var lenRatio = (length - amount) / length;

      if (lenRatio < 0) {
        lenRatio = 0.00001;
      }

      return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
    };
    var generateUnitNgonPointsFitToSquare = function generateUnitNgonPointsFitToSquare(sides, rotationRadians) {
      var points = generateUnitNgonPoints(sides, rotationRadians);
      points = fitPolygonToSquare(points);
      return points;
    };
    var fitPolygonToSquare = function fitPolygonToSquare(points) {
      var x, y;
      var sides = points.length / 2;
      var minX = Infinity,
          minY = Infinity,
          maxX = -Infinity,
          maxY = -Infinity;

      for (var i = 0; i < sides; i++) {
        x = points[2 * i];
        y = points[2 * i + 1];
        minX = Math.min(minX, x);
        maxX = Math.max(maxX, x);
        minY = Math.min(minY, y);
        maxY = Math.max(maxY, y);
      } // stretch factors


      var sx = 2 / (maxX - minX);
      var sy = 2 / (maxY - minY);

      for (var _i5 = 0; _i5 < sides; _i5++) {
        x = points[2 * _i5] = points[2 * _i5] * sx;
        y = points[2 * _i5 + 1] = points[2 * _i5 + 1] * sy;
        minX = Math.min(minX, x);
        maxX = Math.max(maxX, x);
        minY = Math.min(minY, y);
        maxY = Math.max(maxY, y);
      }

      if (minY < -1) {
        for (var _i6 = 0; _i6 < sides; _i6++) {
          y = points[2 * _i6 + 1] = points[2 * _i6 + 1] + (-1 - minY);
        }
      }

      return points;
    };
    var generateUnitNgonPoints = function generateUnitNgonPoints(sides, rotationRadians) {
      var increment = 1.0 / sides * 2 * Math.PI;
      var startAngle = sides % 2 === 0 ? Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;
      startAngle += rotationRadians;
      var points = new Array(sides * 2);
      var currentAngle;

      for (var i = 0; i < sides; i++) {
        currentAngle = i * increment + startAngle;
        points[2 * i] = Math.cos(currentAngle); // x

        points[2 * i + 1] = Math.sin(-currentAngle); // y
      }

      return points;
    }; // Set the default radius, unless half of width or height is smaller than default

    var getRoundRectangleRadius = function getRoundRectangleRadius(width, height) {
      return Math.min(width / 4, height / 4, 8);
    }; // Set the default radius

    var getRoundPolygonRadius = function getRoundPolygonRadius(width, height) {
      return Math.min(width / 10, height / 10, 8);
    };
    var getCutRectangleCornerLength = function getCutRectangleCornerLength() {
      return 8;
    };
    var bezierPtsToQuadCoeff = function bezierPtsToQuadCoeff(p0, p1, p2) {
      return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];
    }; // get curve width, height, and control point position offsets as a percentage of node height / width

    var getBarrelCurveConstants = function getBarrelCurveConstants(width, height) {
      return {
        heightOffset: Math.min(15, 0.05 * height),
        widthOffset: Math.min(100, 0.25 * width),
        ctrlPtOffsetPct: 0.05
      };
    };

    var pageRankDefaults = defaults({
      dampingFactor: 0.8,
      precision: 0.000001,
      iterations: 200,
      weight: function weight(edge) {
        return 1;
      }
    });
    var elesfn$7 = {
      pageRank: function pageRank(options) {
        var _pageRankDefaults = pageRankDefaults(options),
            dampingFactor = _pageRankDefaults.dampingFactor,
            precision = _pageRankDefaults.precision,
            iterations = _pageRankDefaults.iterations,
            weight = _pageRankDefaults.weight;

        var cy = this._private.cy;

        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges;

        var numNodes = nodes.length;
        var numNodesSqd = numNodes * numNodes;
        var numEdges = edges.length; // Construct transposed adjacency matrix
        // First lets have a zeroed matrix of the right size
        // We'll also keep track of the sum of each column

        var matrix = new Array(numNodesSqd);
        var columnSum = new Array(numNodes);
        var additionalProb = (1 - dampingFactor) / numNodes; // Create null matrix

        for (var i = 0; i < numNodes; i++) {
          for (var j = 0; j < numNodes; j++) {
            var n = i * numNodes + j;
            matrix[n] = 0;
          }

          columnSum[i] = 0;
        } // Now, process edges


        for (var _i = 0; _i < numEdges; _i++) {
          var edge = edges[_i];
          var srcId = edge.data('source');
          var tgtId = edge.data('target'); // Don't include loops in the matrix

          if (srcId === tgtId) {
            continue;
          }

          var s = nodes.indexOfId(srcId);
          var t = nodes.indexOfId(tgtId);
          var w = weight(edge);

          var _n = t * numNodes + s; // Update matrix


          matrix[_n] += w; // Update column sum

          columnSum[s] += w;
        } // Add additional probability based on damping factor
        // Also, take into account columns that have sum = 0


        var p = 1.0 / numNodes + additionalProb; // Shorthand
        // Traverse matrix, column by column

        for (var _j = 0; _j < numNodes; _j++) {
          if (columnSum[_j] === 0) {
            // No 'links' out from node jth, assume equal probability for each possible node
            for (var _i2 = 0; _i2 < numNodes; _i2++) {
              var _n2 = _i2 * numNodes + _j;

              matrix[_n2] = p;
            }
          } else {
            // Node jth has outgoing link, compute normalized probabilities
            for (var _i3 = 0; _i3 < numNodes; _i3++) {
              var _n3 = _i3 * numNodes + _j;

              matrix[_n3] = matrix[_n3] / columnSum[_j] + additionalProb;
            }
          }
        } // Compute dominant eigenvector using power method


        var eigenvector = new Array(numNodes);
        var temp = new Array(numNodes);
        var previous; // Start with a vector of all 1's
        // Also, initialize a null vector which will be used as shorthand

        for (var _i4 = 0; _i4 < numNodes; _i4++) {
          eigenvector[_i4] = 1;
        }

        for (var iter = 0; iter < iterations; iter++) {
          // Temp array with all 0's
          for (var _i5 = 0; _i5 < numNodes; _i5++) {
            temp[_i5] = 0;
          } // Multiply matrix with previous result


          for (var _i6 = 0; _i6 < numNodes; _i6++) {
            for (var _j2 = 0; _j2 < numNodes; _j2++) {
              var _n4 = _i6 * numNodes + _j2;

              temp[_i6] += matrix[_n4] * eigenvector[_j2];
            }
          }

          inPlaceSumNormalize(temp);
          previous = eigenvector;
          eigenvector = temp;
          temp = previous;
          var diff = 0; // Compute difference (squared module) of both vectors

          for (var _i7 = 0; _i7 < numNodes; _i7++) {
            var delta = previous[_i7] - eigenvector[_i7];
            diff += delta * delta;
          } // If difference is less than the desired threshold, stop iterating


          if (diff < precision) {
            break;
          }
        } // Construct result


        var res = {
          rank: function rank(node) {
            node = cy.collection(node)[0];
            return eigenvector[nodes.indexOf(node)];
          }
        };
        return res;
      } // pageRank

    }; // elesfn

    var defaults$1 = defaults({
      root: null,
      weight: function weight(edge) {
        return 1;
      },
      directed: false,
      alpha: 0
    });
    var elesfn$8 = {
      degreeCentralityNormalized: function degreeCentralityNormalized(options) {
        options = defaults$1(options);
        var cy = this.cy();
        var nodes = this.nodes();
        var numNodes = nodes.length;

        if (!options.directed) {
          var degrees = {};
          var maxDegree = 0;

          for (var i = 0; i < numNodes; i++) {
            var node = nodes[i]; // add current node to the current options object and call degreeCentrality

            options.root = node;
            var currDegree = this.degreeCentrality(options);

            if (maxDegree < currDegree.degree) {
              maxDegree = currDegree.degree;
            }

            degrees[node.id()] = currDegree.degree;
          }

          return {
            degree: function degree(node) {
              if (maxDegree === 0) {
                return 0;
              }

              if (string(node)) {
                // from is a selector string
                node = cy.filter(node);
              }

              return degrees[node.id()] / maxDegree;
            }
          };
        } else {
          var indegrees = {};
          var outdegrees = {};
          var maxIndegree = 0;
          var maxOutdegree = 0;

          for (var _i = 0; _i < numNodes; _i++) {
            var _node = nodes[_i];

            var id = _node.id(); // add current node to the current options object and call degreeCentrality


            options.root = _node;

            var _currDegree = this.degreeCentrality(options);

            if (maxIndegree < _currDegree.indegree) maxIndegree = _currDegree.indegree;
            if (maxOutdegree < _currDegree.outdegree) maxOutdegree = _currDegree.outdegree;
            indegrees[id] = _currDegree.indegree;
            outdegrees[id] = _currDegree.outdegree;
          }

          return {
            indegree: function indegree(node) {
              if (maxIndegree == 0) {
                return 0;
              }

              if (string(node)) {
                // from is a selector string
                node = cy.filter(node);
              }

              return indegrees[node.id()] / maxIndegree;
            },
            outdegree: function outdegree(node) {
              if (maxOutdegree === 0) {
                return 0;
              }

              if (string(node)) {
                // from is a selector string
                node = cy.filter(node);
              }

              return outdegrees[node.id()] / maxOutdegree;
            }
          };
        }
      },
      // degreeCentralityNormalized
      // Implemented from the algorithm in Opsahl's paper
      // "Node centrality in weighted networks: Generalizing degree and shortest paths"
      // check the heading 2 "Degree"
      degreeCentrality: function degreeCentrality(options) {
        options = defaults$1(options);
        var cy = this.cy();
        var callingEles = this;
        var _options = options,
            root = _options.root,
            weight = _options.weight,
            directed = _options.directed,
            alpha = _options.alpha;
        root = cy.collection(root)[0];

        if (!directed) {
          var connEdges = root.connectedEdges().intersection(callingEles);
          var k = connEdges.length;
          var s = 0; // Now, sum edge weights

          for (var i = 0; i < connEdges.length; i++) {
            s += weight(connEdges[i]);
          }

          return {
            degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)
          };
        } else {
          var edges = root.connectedEdges();
          var incoming = edges.filter(function (edge) {
            return edge.target().same(root) && callingEles.has(edge);
          });
          var outgoing = edges.filter(function (edge) {
            return edge.source().same(root) && callingEles.has(edge);
          });
          var k_in = incoming.length;
          var k_out = outgoing.length;
          var s_in = 0;
          var s_out = 0; // Now, sum incoming edge weights

          for (var _i2 = 0; _i2 < incoming.length; _i2++) {
            s_in += weight(incoming[_i2]);
          } // Now, sum outgoing edge weights


          for (var _i3 = 0; _i3 < outgoing.length; _i3++) {
            s_out += weight(outgoing[_i3]);
          }

          return {
            indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
            outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
          };
        }
      } // degreeCentrality

    }; // elesfn
    // nice, short mathemathical alias

    elesfn$8.dc = elesfn$8.degreeCentrality;
    elesfn$8.dcn = elesfn$8.degreeCentralityNormalised = elesfn$8.degreeCentralityNormalized;

    var defaults$2 = defaults({
      harmonic: true,
      weight: function weight() {
        return 1;
      },
      directed: false,
      root: null
    });
    var elesfn$9 = {
      closenessCentralityNormalized: function closenessCentralityNormalized(options) {
        var _defaults = defaults$2(options),
            harmonic = _defaults.harmonic,
            weight = _defaults.weight,
            directed = _defaults.directed;

        var cy = this.cy();
        var closenesses = {};
        var maxCloseness = 0;
        var nodes = this.nodes();
        var fw = this.floydWarshall({
          weight: weight,
          directed: directed
        }); // Compute closeness for every node and find the maximum closeness

        for (var i = 0; i < nodes.length; i++) {
          var currCloseness = 0;
          var node_i = nodes[i];

          for (var j = 0; j < nodes.length; j++) {
            if (i !== j) {
              var d = fw.distance(node_i, nodes[j]);

              if (harmonic) {
                currCloseness += 1 / d;
              } else {
                currCloseness += d;
              }
            }
          }

          if (!harmonic) {
            currCloseness = 1 / currCloseness;
          }

          if (maxCloseness < currCloseness) {
            maxCloseness = currCloseness;
          }

          closenesses[node_i.id()] = currCloseness;
        }

        return {
          closeness: function closeness(node) {
            if (maxCloseness == 0) {
              return 0;
            }

            if (string(node)) {
              // from is a selector string
              node = cy.filter(node)[0].id();
            } else {
              // from is a node
              node = node.id();
            }

            return closenesses[node] / maxCloseness;
          }
        };
      },
      // Implemented from pseudocode from wikipedia
      closenessCentrality: function closenessCentrality(options) {
        var _defaults2 = defaults$2(options),
            root = _defaults2.root,
            weight = _defaults2.weight,
            directed = _defaults2.directed,
            harmonic = _defaults2.harmonic;

        root = this.filter(root)[0]; // we need distance from this node to every other node

        var dijkstra = this.dijkstra({
          root: root,
          weight: weight,
          directed: directed
        });
        var totalDistance = 0;
        var nodes = this.nodes();

        for (var i = 0; i < nodes.length; i++) {
          var n = nodes[i];

          if (!n.same(root)) {
            var d = dijkstra.distanceTo(n);

            if (harmonic) {
              totalDistance += 1 / d;
            } else {
              totalDistance += d;
            }
          }
        }

        return harmonic ? totalDistance : 1 / totalDistance;
      } // closenessCentrality

    }; // elesfn
    // nice, short mathemathical alias

    elesfn$9.cc = elesfn$9.closenessCentrality;
    elesfn$9.ccn = elesfn$9.closenessCentralityNormalised = elesfn$9.closenessCentralityNormalized;

    var defaults$3 = defaults({
      weight: null,
      directed: false
    });
    var elesfn$a = {
      // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
      betweennessCentrality: function betweennessCentrality(options) {
        var _defaults = defaults$3(options),
            directed = _defaults.directed,
            weight = _defaults.weight;

        var weighted = weight != null;
        var cy = this.cy(); // starting

        var V = this.nodes();
        var A = {};
        var _C = {};
        var max = 0;
        var C = {
          set: function set(key, val) {
            _C[key] = val;

            if (val > max) {
              max = val;
            }
          },
          get: function get(key) {
            return _C[key];
          }
        }; // A contains the neighborhoods of every node

        for (var i = 0; i < V.length; i++) {
          var v = V[i];
          var vid = v.id();

          if (directed) {
            A[vid] = v.outgoers().nodes(); // get outgoers of every node
          } else {
            A[vid] = v.openNeighborhood().nodes(); // get neighbors of every node
          }

          C.set(vid, 0);
        }

        var _loop = function _loop(s) {
          var sid = V[s].id();
          var S = []; // stack

          var P = {};
          var g = {};
          var d = {};
          var Q = new Heap(function (a, b) {
            return d[a] - d[b];
          }); // queue
          // init dictionaries

          for (var _i = 0; _i < V.length; _i++) {
            var _vid = V[_i].id();

            P[_vid] = [];
            g[_vid] = 0;
            d[_vid] = Infinity;
          }

          g[sid] = 1; // sigma

          d[sid] = 0; // distance to s

          Q.push(sid);

          while (!Q.empty()) {
            var _v = Q.pop();

            S.push(_v);

            if (weighted) {
              for (var j = 0; j < A[_v].length; j++) {
                var w = A[_v][j];
                var vEle = cy.getElementById(_v);
                var edge = void 0;

                if (vEle.edgesTo(w).length > 0) {
                  edge = vEle.edgesTo(w)[0];
                } else {
                  edge = w.edgesTo(vEle)[0];
                }

                var edgeWeight = weight(edge);
                w = w.id();

                if (d[w] > d[_v] + edgeWeight) {
                  d[w] = d[_v] + edgeWeight;

                  if (Q.nodes.indexOf(w) < 0) {
                    //if w is not in Q
                    Q.push(w);
                  } else {
                    // update position if w is in Q
                    Q.updateItem(w);
                  }

                  g[w] = 0;
                  P[w] = [];
                }

                if (d[w] == d[_v] + edgeWeight) {
                  g[w] = g[w] + g[_v];
                  P[w].push(_v);
                }
              }
            } else {
              for (var _j = 0; _j < A[_v].length; _j++) {
                var _w = A[_v][_j].id();

                if (d[_w] == Infinity) {
                  Q.push(_w);
                  d[_w] = d[_v] + 1;
                }

                if (d[_w] == d[_v] + 1) {
                  g[_w] = g[_w] + g[_v];

                  P[_w].push(_v);
                }
              }
            }
          }

          var e = {};

          for (var _i2 = 0; _i2 < V.length; _i2++) {
            e[V[_i2].id()] = 0;
          }

          while (S.length > 0) {
            var _w2 = S.pop();

            for (var _j2 = 0; _j2 < P[_w2].length; _j2++) {
              var _v2 = P[_w2][_j2];
              e[_v2] = e[_v2] + g[_v2] / g[_w2] * (1 + e[_w2]);
            }

            if (_w2 != V[s].id()) {
              C.set(_w2, C.get(_w2) + e[_w2]);
            }
          }
        };

        for (var s = 0; s < V.length; s++) {
          _loop(s);
        }

        var ret = {
          betweenness: function betweenness(node) {
            var id = cy.collection(node).id();
            return C.get(id);
          },
          betweennessNormalized: function betweennessNormalized(node) {
            if (max == 0) {
              return 0;
            }

            var id = cy.collection(node).id();
            return C.get(id) / max;
          }
        }; // alias

        ret.betweennessNormalised = ret.betweennessNormalized;
        return ret;
      } // betweennessCentrality

    }; // elesfn
    // nice, short mathemathical alias

    elesfn$a.bc = elesfn$a.betweennessCentrality;

    // Implemented by Zoe Xi @zoexi for GSOC 2016
    /* eslint-disable no-unused-vars */

    var defaults$4 = defaults({
      expandFactor: 2,
      // affects time of computation and cluster granularity to some extent: M * M
      inflateFactor: 2,
      // affects cluster granularity (the greater the value, the more clusters): M(i,j) / E(j)
      multFactor: 1,
      // optional self loops for each node. Use a neutral value to improve cluster computations.
      maxIterations: 20,
      // maximum number of iterations of the MCL algorithm in a single run
      attributes: [// attributes/features used to group nodes, ie. similarity values between nodes
      function (edge) {
        return 1;
      }]
    });
    /* eslint-enable */

    var setOptions = function setOptions(options) {
      return defaults$4(options);
    };
    /* eslint-enable */


    var getSimilarity = function getSimilarity(edge, attributes) {
      var total = 0;

      for (var i = 0; i < attributes.length; i++) {
        total += attributes[i](edge);
      }

      return total;
    };

    var addLoops = function addLoops(M, n, val) {
      for (var i = 0; i < n; i++) {
        M[i * n + i] = val;
      }
    };

    var normalize = function normalize(M, n) {
      var sum;

      for (var col = 0; col < n; col++) {
        sum = 0;

        for (var row = 0; row < n; row++) {
          sum += M[row * n + col];
        }

        for (var _row = 0; _row < n; _row++) {
          M[_row * n + col] = M[_row * n + col] / sum;
        }
      }
    }; // TODO: blocked matrix multiplication?


    var mmult = function mmult(A, B, n) {
      var C = new Array(n * n);

      for (var i = 0; i < n; i++) {
        for (var j = 0; j < n; j++) {
          C[i * n + j] = 0;
        }

        for (var k = 0; k < n; k++) {
          for (var _j = 0; _j < n; _j++) {
            C[i * n + _j] += A[i * n + k] * B[k * n + _j];
          }
        }
      }

      return C;
    };

    var expand = function expand(M, n, expandFactor
    /** power **/
    ) {
      var _M = M.slice(0);

      for (var p = 1; p < expandFactor; p++) {
        M = mmult(M, _M, n);
      }

      return M;
    };

    var inflate = function inflate(M, n, inflateFactor
    /** r **/
    ) {
      var _M = new Array(n * n); // M(i,j) ^ inflatePower


      for (var i = 0; i < n * n; i++) {
        _M[i] = Math.pow(M[i], inflateFactor);
      }

      normalize(_M, n);
      return _M;
    };

    var hasConverged = function hasConverged(M, _M, n2, roundFactor) {
      // Check that both matrices have the same elements (i,j)
      for (var i = 0; i < n2; i++) {
        var v1 = Math.round(M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor); // truncate to 'roundFactor' decimal places

        var v2 = Math.round(_M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);

        if (v1 !== v2) {
          return false;
        }
      }

      return true;
    };

    var assign = function assign(M, n, nodes, cy) {
      var clusters = [];

      for (var i = 0; i < n; i++) {
        var cluster = [];

        for (var j = 0; j < n; j++) {
          // Row-wise attractors and elements that they attract belong in same cluster
          if (Math.round(M[i * n + j] * 1000) / 1000 > 0) {
            cluster.push(nodes[j]);
          }
        }

        if (cluster.length !== 0) {
          clusters.push(cy.collection(cluster));
        }
      }

      return clusters;
    };

    var isDuplicate = function isDuplicate(c1, c2) {
      for (var i = 0; i < c1.length; i++) {
        if (!c2[i] || c1[i].id() !== c2[i].id()) {
          return false;
        }
      }

      return true;
    };

    var removeDuplicates = function removeDuplicates(clusters) {
      for (var i = 0; i < clusters.length; i++) {
        for (var j = 0; j < clusters.length; j++) {
          if (i != j && isDuplicate(clusters[i], clusters[j])) {
            clusters.splice(j, 1);
          }
        }
      }

      return clusters;
    };

    var markovClustering = function markovClustering(options) {
      var nodes = this.nodes();
      var edges = this.edges();
      var cy = this.cy(); // Set parameters of algorithm:

      var opts = setOptions(options); // Map each node to its position in node array

      var id2position = {};

      for (var i = 0; i < nodes.length; i++) {
        id2position[nodes[i].id()] = i;
      } // Generate stochastic matrix M from input graph G (should be symmetric/undirected)


      var n = nodes.length,
          n2 = n * n;

      var M = new Array(n2),
          _M;

      for (var _i = 0; _i < n2; _i++) {
        M[_i] = 0;
      }

      for (var e = 0; e < edges.length; e++) {
        var edge = edges[e];
        var _i2 = id2position[edge.source().id()];
        var j = id2position[edge.target().id()];
        var sim = getSimilarity(edge, opts.attributes);
        M[_i2 * n + j] += sim; // G should be symmetric and undirected

        M[j * n + _i2] += sim;
      } // Begin Markov cluster algorithm
      // Step 1: Add self loops to each node, ie. add multFactor to matrix diagonal


      addLoops(M, n, opts.multFactor); // Step 2: M = normalize( M );

      normalize(M, n);
      var isStillMoving = true;
      var iterations = 0;

      while (isStillMoving && iterations < opts.maxIterations) {
        isStillMoving = false; // Step 3:

        _M = expand(M, n, opts.expandFactor); // Step 4:

        M = inflate(_M, n, opts.inflateFactor); // Step 5: check to see if ~steady state has been reached

        if (!hasConverged(M, _M, n2, 4)) {
          isStillMoving = true;
        }

        iterations++;
      } // Build clusters from matrix


      var clusters = assign(M, n, nodes, cy); // Remove duplicate clusters due to symmetry of graph and M matrix

      clusters = removeDuplicates(clusters);
      return clusters;
    };

    var markovClustering$1 = {
      markovClustering: markovClustering,
      mcl: markovClustering
    };

    // Common distance metrics for clustering algorithms

    var identity = function identity(x) {
      return x;
    };

    var absDiff = function absDiff(p, q) {
      return Math.abs(q - p);
    };

    var addAbsDiff = function addAbsDiff(total, p, q) {
      return total + absDiff(p, q);
    };

    var addSquaredDiff = function addSquaredDiff(total, p, q) {
      return total + Math.pow(q - p, 2);
    };

    var sqrt = function sqrt(x) {
      return Math.sqrt(x);
    };

    var maxAbsDiff = function maxAbsDiff(currentMax, p, q) {
      return Math.max(currentMax, absDiff(p, q));
    };

    var getDistance = function getDistance(length, getP, getQ, init, visit) {
      var post = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : identity;
      var ret = init;
      var p, q;

      for (var dim = 0; dim < length; dim++) {
        p = getP(dim);
        q = getQ(dim);
        ret = visit(ret, p, q);
      }

      return post(ret);
    };

    var distances = {
      euclidean: function euclidean(length, getP, getQ) {
        if (length >= 2) {
          return getDistance(length, getP, getQ, 0, addSquaredDiff, sqrt);
        } else {
          // for single attr case, more efficient to avoid sqrt
          return getDistance(length, getP, getQ, 0, addAbsDiff);
        }
      },
      squaredEuclidean: function squaredEuclidean(length, getP, getQ) {
        return getDistance(length, getP, getQ, 0, addSquaredDiff);
      },
      manhattan: function manhattan(length, getP, getQ) {
        return getDistance(length, getP, getQ, 0, addAbsDiff);
      },
      max: function max(length, getP, getQ) {
        return getDistance(length, getP, getQ, -Infinity, maxAbsDiff);
      }
    }; // in case the user accidentally doesn't use camel case

    distances['squared-euclidean'] = distances['squaredEuclidean'];
    distances['squaredeuclidean'] = distances['squaredEuclidean'];
    function clusteringDistance (method, length, getP, getQ, nodeP, nodeQ) {
      var impl;

      if (fn(method)) {
        impl = method;
      } else {
        impl = distances[method] || distances.euclidean;
      }

      if (length === 0 && fn(method)) {
        return impl(nodeP, nodeQ);
      } else {
        return impl(length, getP, getQ, nodeP, nodeQ);
      }
    }

    var defaults$5 = defaults({
      k: 2,
      m: 2,
      sensitivityThreshold: 0.0001,
      distance: 'euclidean',
      maxIterations: 10,
      attributes: [],
      testMode: false,
      testCentroids: null
    });

    var setOptions$1 = function setOptions(options) {
      return defaults$5(options);
    };
    /* eslint-enable */


    var getDist = function getDist(type, node, centroid, attributes, mode) {
      var noNodeP = mode !== 'kMedoids';
      var getP = noNodeP ? function (i) {
        return centroid[i];
      } : function (i) {
        return attributes[i](centroid);
      };

      var getQ = function getQ(i) {
        return attributes[i](node);
      };

      var nodeP = centroid;
      var nodeQ = node;
      return clusteringDistance(type, attributes.length, getP, getQ, nodeP, nodeQ);
    };

    var randomCentroids = function randomCentroids(nodes, k, attributes) {
      var ndim = attributes.length;
      var min = new Array(ndim);
      var max = new Array(ndim);
      var centroids = new Array(k);
      var centroid = null; // Find min, max values for each attribute dimension

      for (var i = 0; i < ndim; i++) {
        min[i] = nodes.min(attributes[i]).value;
        max[i] = nodes.max(attributes[i]).value;
      } // Build k centroids, each represented as an n-dim feature vector


      for (var c = 0; c < k; c++) {
        centroid = [];

        for (var _i = 0; _i < ndim; _i++) {
          centroid[_i] = Math.random() * (max[_i] - min[_i]) + min[_i]; // random initial value
        }

        centroids[c] = centroid;
      }

      return centroids;
    };

    var classify = function classify(node, centroids, distance, attributes, type) {
      var min = Infinity;
      var index = 0;

      for (var i = 0; i < centroids.length; i++) {
        var dist = getDist(distance, node, centroids[i], attributes, type);

        if (dist < min) {
          min = dist;
          index = i;
        }
      }

      return index;
    };

    var buildCluster = function buildCluster(centroid, nodes, assignment) {
      var cluster = [];
      var node = null;

      for (var n = 0; n < nodes.length; n++) {
        node = nodes[n];

        if (assignment[node.id()] === centroid) {
          //console.log("Node " + node.id() + " is associated with medoid #: " + m);
          cluster.push(node);
        }
      }

      return cluster;
    };

    var haveValuesConverged = function haveValuesConverged(v1, v2, sensitivityThreshold) {
      return Math.abs(v2 - v1) <= sensitivityThreshold;
    };

    var haveMatricesConverged = function haveMatricesConverged(v1, v2, sensitivityThreshold) {
      for (var i = 0; i < v1.length; i++) {
        for (var j = 0; j < v1[i].length; j++) {
          var diff = Math.abs(v1[i][j] - v2[i][j]);

          if (diff > sensitivityThreshold) {
            return false;
          }
        }
      }

      return true;
    };

    var seenBefore = function seenBefore(node, medoids, n) {
      for (var i = 0; i < n; i++) {
        if (node === medoids[i]) return true;
      }

      return false;
    };

    var randomMedoids = function randomMedoids(nodes, k) {
      var medoids = new Array(k); // For small data sets, the probability of medoid conflict is greater,
      // so we need to check to see if we've already seen or chose this node before.

      if (nodes.length < 50) {
        // Randomly select k medoids from the n nodes
        for (var i = 0; i < k; i++) {
          var node = nodes[Math.floor(Math.random() * nodes.length)]; // If we've already chosen this node to be a medoid, don't choose it again (for small data sets).
          // Instead choose a different random node.

          while (seenBefore(node, medoids, i)) {
            node = nodes[Math.floor(Math.random() * nodes.length)];
          }

          medoids[i] = node;
        }
      } else {
        // Relatively large data set, so pretty safe to not check and just select random nodes
        for (var _i2 = 0; _i2 < k; _i2++) {
          medoids[_i2] = nodes[Math.floor(Math.random() * nodes.length)];
        }
      }

      return medoids;
    };

    var findCost = function findCost(potentialNewMedoid, cluster, attributes) {
      var cost = 0;

      for (var n = 0; n < cluster.length; n++) {
        cost += getDist('manhattan', cluster[n], potentialNewMedoid, attributes, 'kMedoids');
      }

      return cost;
    };

    var kMeans = function kMeans(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var node = null; // Set parameters of algorithm: # of clusters, distance metric, etc.

      var opts = setOptions$1(options); // Begin k-means algorithm

      var clusters = new Array(opts.k);
      var assignment = {};
      var centroids; // Step 1: Initialize centroid positions

      if (opts.testMode) {
        if (typeof opts.testCentroids === 'number') {
          centroids = randomCentroids(nodes, opts.k, opts.attributes);
        } else if (_typeof(opts.testCentroids) === 'object') {
          centroids = opts.testCentroids;
        } else {
          centroids = randomCentroids(nodes, opts.k, opts.attributes);
        }
      } else {
        centroids = randomCentroids(nodes, opts.k, opts.attributes);
      }

      var isStillMoving = true;
      var iterations = 0;

      while (isStillMoving && iterations < opts.maxIterations) {
        // Step 2: Assign nodes to the nearest centroid
        for (var n = 0; n < nodes.length; n++) {
          node = nodes[n]; // Determine which cluster this node belongs to: node id => cluster #

          assignment[node.id()] = classify(node, centroids, opts.distance, opts.attributes, 'kMeans');
        } // Step 3: For each of the k clusters, update its centroid


        isStillMoving = false;

        for (var c = 0; c < opts.k; c++) {
          // Get all nodes that belong to this cluster
          var cluster = buildCluster(c, nodes, assignment);

          if (cluster.length === 0) {
            // If cluster is empty, break out early & move to next cluster
            continue;
          } // Update centroids by calculating avg of all nodes within the cluster.


          var ndim = opts.attributes.length;
          var centroid = centroids[c]; // [ dim_1, dim_2, dim_3, ... , dim_n ]

          var newCentroid = new Array(ndim);
          var sum = new Array(ndim);

          for (var d = 0; d < ndim; d++) {
            sum[d] = 0.0;

            for (var i = 0; i < cluster.length; i++) {
              node = cluster[i];
              sum[d] += opts.attributes[d](node);
            }

            newCentroid[d] = sum[d] / cluster.length; // Check to see if algorithm has converged, i.e. when centroids no longer change

            if (!haveValuesConverged(newCentroid[d], centroid[d], opts.sensitivityThreshold)) {
              isStillMoving = true;
            }
          }

          centroids[c] = newCentroid;
          clusters[c] = cy.collection(cluster);
        }

        iterations++;
      }

      return clusters;
    };

    var kMedoids = function kMedoids(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var node = null;
      var opts = setOptions$1(options); // Begin k-medoids algorithm

      var clusters = new Array(opts.k);
      var medoids;
      var assignment = {};
      var curCost;
      var minCosts = new Array(opts.k); // minimum cost configuration for each cluster
      // Step 1: Initialize k medoids

      if (opts.testMode) {
        if (typeof opts.testCentroids === 'number') ; else if (_typeof(opts.testCentroids) === 'object') {
          medoids = opts.testCentroids;
        } else {
          medoids = randomMedoids(nodes, opts.k);
        }
      } else {
        medoids = randomMedoids(nodes, opts.k);
      }

      var isStillMoving = true;
      var iterations = 0;

      while (isStillMoving && iterations < opts.maxIterations) {
        // Step 2: Assign nodes to the nearest medoid
        for (var n = 0; n < nodes.length; n++) {
          node = nodes[n]; // Determine which cluster this node belongs to: node id => cluster #

          assignment[node.id()] = classify(node, medoids, opts.distance, opts.attributes, 'kMedoids');
        }

        isStillMoving = false; // Step 3: For each medoid m, and for each node assciated with mediod m,
        // select the node with the lowest configuration cost as new medoid.

        for (var m = 0; m < medoids.length; m++) {
          // Get all nodes that belong to this medoid
          var cluster = buildCluster(m, nodes, assignment);

          if (cluster.length === 0) {
            // If cluster is empty, break out early & move to next cluster
            continue;
          }

          minCosts[m] = findCost(medoids[m], cluster, opts.attributes); // original cost
          // Select different medoid if its configuration has the lowest cost

          for (var _n = 0; _n < cluster.length; _n++) {
            curCost = findCost(cluster[_n], cluster, opts.attributes);

            if (curCost < minCosts[m]) {
              minCosts[m] = curCost;
              medoids[m] = cluster[_n];
              isStillMoving = true;
            }
          }

          clusters[m] = cy.collection(cluster);
        }

        iterations++;
      }

      return clusters;
    };

    var updateCentroids = function updateCentroids(centroids, nodes, U, weight, opts) {
      var numerator, denominator;

      for (var n = 0; n < nodes.length; n++) {
        for (var c = 0; c < centroids.length; c++) {
          weight[n][c] = Math.pow(U[n][c], opts.m);
        }
      }

      for (var _c = 0; _c < centroids.length; _c++) {
        for (var dim = 0; dim < opts.attributes.length; dim++) {
          numerator = 0;
          denominator = 0;

          for (var _n2 = 0; _n2 < nodes.length; _n2++) {
            numerator += weight[_n2][_c] * opts.attributes[dim](nodes[_n2]);
            denominator += weight[_n2][_c];
          }

          centroids[_c][dim] = numerator / denominator;
        }
      }
    };

    var updateMembership = function updateMembership(U, _U, centroids, nodes, opts) {
      // Save previous step
      for (var i = 0; i < U.length; i++) {
        _U[i] = U[i].slice();
      }

      var sum, numerator, denominator;
      var pow = 2 / (opts.m - 1);

      for (var c = 0; c < centroids.length; c++) {
        for (var n = 0; n < nodes.length; n++) {
          sum = 0;

          for (var k = 0; k < centroids.length; k++) {
            // against all other centroids
            numerator = getDist(opts.distance, nodes[n], centroids[c], opts.attributes, 'cmeans');
            denominator = getDist(opts.distance, nodes[n], centroids[k], opts.attributes, 'cmeans');
            sum += Math.pow(numerator / denominator, pow);
          }

          U[n][c] = 1 / sum;
        }
      }
    };

    var assign$1 = function assign(nodes, U, opts, cy) {
      var clusters = new Array(opts.k);

      for (var c = 0; c < clusters.length; c++) {
        clusters[c] = [];
      }

      var max;
      var index;

      for (var n = 0; n < U.length; n++) {
        // for each node (U is N x C matrix)
        max = -Infinity;
        index = -1; // Determine which cluster the node is most likely to belong in

        for (var _c2 = 0; _c2 < U[0].length; _c2++) {
          if (U[n][_c2] > max) {
            max = U[n][_c2];
            index = _c2;
          }
        }

        clusters[index].push(nodes[n]);
      } // Turn every array into a collection of nodes


      for (var _c3 = 0; _c3 < clusters.length; _c3++) {
        clusters[_c3] = cy.collection(clusters[_c3]);
      }

      return clusters;
    };

    var fuzzyCMeans = function fuzzyCMeans(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var opts = setOptions$1(options); // Begin fuzzy c-means algorithm

      var clusters;
      var centroids;
      var U;

      var _U;

      var weight; // Step 1: Initialize letiables.

      _U = new Array(nodes.length);

      for (var i = 0; i < nodes.length; i++) {
        // N x C matrix
        _U[i] = new Array(opts.k);
      }

      U = new Array(nodes.length);

      for (var _i3 = 0; _i3 < nodes.length; _i3++) {
        // N x C matrix
        U[_i3] = new Array(opts.k);
      }

      for (var _i4 = 0; _i4 < nodes.length; _i4++) {
        var total = 0;

        for (var j = 0; j < opts.k; j++) {
          U[_i4][j] = Math.random();
          total += U[_i4][j];
        }

        for (var _j = 0; _j < opts.k; _j++) {
          U[_i4][_j] = U[_i4][_j] / total;
        }
      }

      centroids = new Array(opts.k);

      for (var _i5 = 0; _i5 < opts.k; _i5++) {
        centroids[_i5] = new Array(opts.attributes.length);
      }

      weight = new Array(nodes.length);

      for (var _i6 = 0; _i6 < nodes.length; _i6++) {
        // N x C matrix
        weight[_i6] = new Array(opts.k);
      } // end init FCM


      var isStillMoving = true;
      var iterations = 0;

      while (isStillMoving && iterations < opts.maxIterations) {
        isStillMoving = false; // Step 2: Calculate the centroids for each step.

        updateCentroids(centroids, nodes, U, weight, opts); // Step 3: Update the partition matrix U.

        updateMembership(U, _U, centroids, nodes, opts); // Step 4: Check for convergence.

        if (!haveMatricesConverged(U, _U, opts.sensitivityThreshold)) {
          isStillMoving = true;
        }

        iterations++;
      } // Assign nodes to clusters with highest probability.


      clusters = assign$1(nodes, U, opts, cy);
      return {
        clusters: clusters,
        degreeOfMembership: U
      };
    };

    var kClustering = {
      kMeans: kMeans,
      kMedoids: kMedoids,
      fuzzyCMeans: fuzzyCMeans,
      fcm: fuzzyCMeans
    };

    // Implemented by Zoe Xi @zoexi for GSOC 2016
    var defaults$6 = defaults({
      distance: 'euclidean',
      // distance metric to compare nodes
      linkage: 'min',
      // linkage criterion : how to determine the distance between clusters of nodes
      mode: 'threshold',
      // mode:'threshold' => clusters must be threshold distance apart
      threshold: Infinity,
      // the distance threshold
      // mode:'dendrogram' => the nodes are organised as leaves in a tree (siblings are close), merging makes clusters
      addDendrogram: false,
      // whether to add the dendrogram to the graph for viz
      dendrogramDepth: 0,
      // depth at which dendrogram branches are merged into the returned clusters
      attributes: [] // array of attr functions

    });
    var linkageAliases = {
      'single': 'min',
      'complete': 'max'
    };

    var setOptions$2 = function setOptions(options) {
      var opts = defaults$6(options);
      var preferredAlias = linkageAliases[opts.linkage];

      if (preferredAlias != null) {
        opts.linkage = preferredAlias;
      }

      return opts;
    };

    var mergeClosest = function mergeClosest(clusters, index, dists, mins, opts) {
      // Find two closest clusters from cached mins
      var minKey = 0;
      var min = Infinity;
      var dist;
      var attrs = opts.attributes;

      var getDist = function getDist(n1, n2) {
        return clusteringDistance(opts.distance, attrs.length, function (i) {
          return attrs[i](n1);
        }, function (i) {
          return attrs[i](n2);
        }, n1, n2);
      };

      for (var i = 0; i < clusters.length; i++) {
        var key = clusters[i].key;
        var _dist = dists[key][mins[key]];

        if (_dist < min) {
          minKey = key;
          min = _dist;
        }
      }

      if (opts.mode === 'threshold' && min >= opts.threshold || opts.mode === 'dendrogram' && clusters.length === 1) {
        return false;
      }

      var c1 = index[minKey];
      var c2 = index[mins[minKey]];
      var merged; // Merge two closest clusters

      if (opts.mode === 'dendrogram') {
        merged = {
          left: c1,
          right: c2,
          key: c1.key
        };
      } else {
        merged = {
          value: c1.value.concat(c2.value),
          key: c1.key
        };
      }

      clusters[c1.index] = merged;
      clusters.splice(c2.index, 1);
      index[c1.key] = merged; // Update distances with new merged cluster

      for (var _i = 0; _i < clusters.length; _i++) {
        var cur = clusters[_i];

        if (c1.key === cur.key) {
          dist = Infinity;
        } else if (opts.linkage === 'min') {
          dist = dists[c1.key][cur.key];

          if (dists[c1.key][cur.key] > dists[c2.key][cur.key]) {
            dist = dists[c2.key][cur.key];
          }
        } else if (opts.linkage === 'max') {
          dist = dists[c1.key][cur.key];

          if (dists[c1.key][cur.key] < dists[c2.key][cur.key]) {
            dist = dists[c2.key][cur.key];
          }
        } else if (opts.linkage === 'mean') {
          dist = (dists[c1.key][cur.key] * c1.size + dists[c2.key][cur.key] * c2.size) / (c1.size + c2.size);
        } else {
          if (opts.mode === 'dendrogram') dist = getDist(cur.value, c1.value);else dist = getDist(cur.value[0], c1.value[0]);
        }

        dists[c1.key][cur.key] = dists[cur.key][c1.key] = dist; // distance matrix is symmetric
      } // Update cached mins


      for (var _i2 = 0; _i2 < clusters.length; _i2++) {
        var key1 = clusters[_i2].key;

        if (mins[key1] === c1.key || mins[key1] === c2.key) {
          var _min = key1;

          for (var j = 0; j < clusters.length; j++) {
            var key2 = clusters[j].key;

            if (dists[key1][key2] < dists[key1][_min]) {
              _min = key2;
            }
          }

          mins[key1] = _min;
        }

        clusters[_i2].index = _i2;
      } // Clean up meta data used for clustering


      c1.key = c2.key = c1.index = c2.index = null;
      return true;
    };

    var getAllChildren = function getAllChildren(root, arr, cy) {
      if (!root) return;

      if (root.value) {
        arr.push(root.value);
      } else {
        if (root.left) getAllChildren(root.left, arr);
        if (root.right) getAllChildren(root.right, arr);
      }
    };

    var buildDendrogram = function buildDendrogram(root, cy) {
      if (!root) return '';

      if (root.left && root.right) {
        var leftStr = buildDendrogram(root.left, cy);
        var rightStr = buildDendrogram(root.right, cy);
        var node = cy.add({
          group: 'nodes',
          data: {
            id: leftStr + ',' + rightStr
          }
        });
        cy.add({
          group: 'edges',
          data: {
            source: leftStr,
            target: node.id()
          }
        });
        cy.add({
          group: 'edges',
          data: {
            source: rightStr,
            target: node.id()
          }
        });
        return node.id();
      } else if (root.value) {
        return root.value.id();
      }
    };

    var buildClustersFromTree = function buildClustersFromTree(root, k, cy) {
      if (!root) return [];
      var left = [],
          right = [],
          leaves = [];

      if (k === 0) {
        // don't cut tree, simply return all nodes as 1 single cluster
        if (root.left) getAllChildren(root.left, left);
        if (root.right) getAllChildren(root.right, right);
        leaves = left.concat(right);
        return [cy.collection(leaves)];
      } else if (k === 1) {
        // cut at root
        if (root.value) {
          // leaf node
          return [cy.collection(root.value)];
        } else {
          if (root.left) getAllChildren(root.left, left);
          if (root.right) getAllChildren(root.right, right);
          return [cy.collection(left), cy.collection(right)];
        }
      } else {
        if (root.value) {
          return [cy.collection(root.value)];
        } else {
          if (root.left) left = buildClustersFromTree(root.left, k - 1, cy);
          if (root.right) right = buildClustersFromTree(root.right, k - 1, cy);
          return left.concat(right);
        }
      }
    };
    /* eslint-enable */


    var hierarchicalClustering = function hierarchicalClustering(options) {
      var cy = this.cy();
      var nodes = this.nodes(); // Set parameters of algorithm: linkage type, distance metric, etc.

      var opts = setOptions$2(options);
      var attrs = opts.attributes;

      var getDist = function getDist(n1, n2) {
        return clusteringDistance(opts.distance, attrs.length, function (i) {
          return attrs[i](n1);
        }, function (i) {
          return attrs[i](n2);
        }, n1, n2);
      }; // Begin hierarchical algorithm


      var clusters = [];
      var dists = []; // distances between each pair of clusters

      var mins = []; // closest cluster for each cluster

      var index = []; // hash of all clusters by key
      // In agglomerative (bottom-up) clustering, each node starts as its own cluster

      for (var n = 0; n < nodes.length; n++) {
        var cluster = {
          value: opts.mode === 'dendrogram' ? nodes[n] : [nodes[n]],
          key: n,
          index: n
        };
        clusters[n] = cluster;
        index[n] = cluster;
        dists[n] = [];
        mins[n] = 0;
      } // Calculate the distance between each pair of clusters


      for (var i = 0; i < clusters.length; i++) {
        for (var j = 0; j <= i; j++) {
          var dist = void 0;

          if (opts.mode === 'dendrogram') {
            // modes store cluster values differently
            dist = i === j ? Infinity : getDist(clusters[i].value, clusters[j].value);
          } else {
            dist = i === j ? Infinity : getDist(clusters[i].value[0], clusters[j].value[0]);
          }

          dists[i][j] = dist;
          dists[j][i] = dist;

          if (dist < dists[i][mins[i]]) {
            mins[i] = j; // Cache mins: closest cluster to cluster i is cluster j
          }
        }
      } // Find the closest pair of clusters and merge them into a single cluster.
      // Update distances between new cluster and each of the old clusters, and loop until threshold reached.


      var merged = mergeClosest(clusters, index, dists, mins, opts);

      while (merged) {
        merged = mergeClosest(clusters, index, dists, mins, opts);
      }

      var retClusters; // Dendrogram mode builds the hierarchy and adds intermediary nodes + edges
      // in addition to returning the clusters.

      if (opts.mode === 'dendrogram') {
        retClusters = buildClustersFromTree(clusters[0], opts.dendrogramDepth, cy);
        if (opts.addDendrogram) buildDendrogram(clusters[0], cy);
      } else {
        // Regular mode simply returns the clusters
        retClusters = new Array(clusters.length);
        clusters.forEach(function (cluster, i) {
          // Clean up meta data used for clustering
          cluster.key = cluster.index = null;
          retClusters[i] = cy.collection(cluster.value);
        });
      }

      return retClusters;
    };

    var hierarchicalClustering$1 = {
      hierarchicalClustering: hierarchicalClustering,
      hca: hierarchicalClustering
    };

    // Implemented by Zoe Xi @zoexi for GSOC 2016
    var defaults$7 = defaults({
      distance: 'euclidean',
      // distance metric to compare attributes between two nodes
      preference: 'median',
      // suitability of a data point to serve as an exemplar
      damping: 0.8,
      // damping factor between [0.5, 1)
      maxIterations: 1000,
      // max number of iterations to run
      minIterations: 100,
      // min number of iterations to run in order for clustering to stop
      attributes: [// functions to quantify the similarity between any two points
        // e.g. node => node.data('weight')
      ]
    });

    var setOptions$3 = function setOptions(options) {
      var dmp = options.damping;
      var pref = options.preference;

      if (!(0.5 <= dmp && dmp < 1)) {
        error("Damping must range on [0.5, 1).  Got: ".concat(dmp));
      }

      var validPrefs = ['median', 'mean', 'min', 'max'];

      if (!(validPrefs.some(function (v) {
        return v === pref;
      }) || number(pref))) {
        error("Preference must be one of [".concat(validPrefs.map(function (p) {
          return "'".concat(p, "'");
        }).join(', '), "] or a number.  Got: ").concat(pref));
      }

      return defaults$7(options);
    };
    /* eslint-enable */


    var getSimilarity$1 = function getSimilarity(type, n1, n2, attributes) {
      var attr = function attr(n, i) {
        return attributes[i](n);
      }; // nb negative because similarity should have an inverse relationship to distance


      return -clusteringDistance(type, attributes.length, function (i) {
        return attr(n1, i);
      }, function (i) {
        return attr(n2, i);
      }, n1, n2);
    };

    var getPreference = function getPreference(S, preference) {
      // larger preference = greater # of clusters
      var p = null;

      if (preference === 'median') {
        p = median(S);
      } else if (preference === 'mean') {
        p = mean(S);
      } else if (preference === 'min') {
        p = min$1(S);
      } else if (preference === 'max') {
        p = max$1(S);
      } else {
        // Custom preference number, as set by user
        p = preference;
      }

      return p;
    };

    var findExemplars = function findExemplars(n, R, A) {
      var indices = [];

      for (var i = 0; i < n; i++) {
        if (R[i * n + i] + A[i * n + i] > 0) {
          indices.push(i);
        }
      }

      return indices;
    };

    var assignClusters = function assignClusters(n, S, exemplars) {
      var clusters = [];

      for (var i = 0; i < n; i++) {
        var index = -1;
        var max = -Infinity;

        for (var ei = 0; ei < exemplars.length; ei++) {
          var e = exemplars[ei];

          if (S[i * n + e] > max) {
            index = e;
            max = S[i * n + e];
          }
        }

        if (index > 0) {
          clusters.push(index);
        }
      }

      for (var _ei = 0; _ei < exemplars.length; _ei++) {
        clusters[exemplars[_ei]] = exemplars[_ei];
      }

      return clusters;
    };

    var assign$2 = function assign(n, S, exemplars) {
      var clusters = assignClusters(n, S, exemplars);

      for (var ei = 0; ei < exemplars.length; ei++) {
        var ii = [];

        for (var c = 0; c < clusters.length; c++) {
          if (clusters[c] === exemplars[ei]) {
            ii.push(c);
          }
        }

        var maxI = -1;
        var maxSum = -Infinity;

        for (var i = 0; i < ii.length; i++) {
          var sum = 0;

          for (var j = 0; j < ii.length; j++) {
            sum += S[ii[j] * n + ii[i]];
          }

          if (sum > maxSum) {
            maxI = i;
            maxSum = sum;
          }
        }

        exemplars[ei] = ii[maxI];
      }

      clusters = assignClusters(n, S, exemplars);
      return clusters;
    };

    var affinityPropagation = function affinityPropagation(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var opts = setOptions$3(options); // Map each node to its position in node array

      var id2position = {};

      for (var i = 0; i < nodes.length; i++) {
        id2position[nodes[i].id()] = i;
      } // Begin affinity propagation algorithm


      var n; // number of data points

      var n2; // size of matrices

      var S; // similarity matrix (1D array)

      var p; // preference/suitability of a data point to serve as an exemplar

      var R; // responsibility matrix (1D array)

      var A; // availability matrix (1D array)

      n = nodes.length;
      n2 = n * n; // Initialize and build S similarity matrix

      S = new Array(n2);

      for (var _i = 0; _i < n2; _i++) {
        S[_i] = -Infinity; // for cases where two data points shouldn't be linked together
      }

      for (var _i2 = 0; _i2 < n; _i2++) {
        for (var j = 0; j < n; j++) {
          if (_i2 !== j) {
            S[_i2 * n + j] = getSimilarity$1(opts.distance, nodes[_i2], nodes[j], opts.attributes);
          }
        }
      } // Place preferences on the diagonal of S


      p = getPreference(S, opts.preference);

      for (var _i3 = 0; _i3 < n; _i3++) {
        S[_i3 * n + _i3] = p;
      } // Initialize R responsibility matrix


      R = new Array(n2);

      for (var _i4 = 0; _i4 < n2; _i4++) {
        R[_i4] = 0.0;
      } // Initialize A availability matrix


      A = new Array(n2);

      for (var _i5 = 0; _i5 < n2; _i5++) {
        A[_i5] = 0.0;
      }

      var old = new Array(n);
      var Rp = new Array(n);
      var se = new Array(n);

      for (var _i6 = 0; _i6 < n; _i6++) {
        old[_i6] = 0.0;
        Rp[_i6] = 0.0;
        se[_i6] = 0;
      }

      var e = new Array(n * opts.minIterations);

      for (var _i7 = 0; _i7 < e.length; _i7++) {
        e[_i7] = 0;
      }

      var iter;

      for (iter = 0; iter < opts.maxIterations; iter++) {
        // main algorithmic loop
        // Update R responsibility matrix
        for (var _i8 = 0; _i8 < n; _i8++) {
          var max = -Infinity,
              max2 = -Infinity,
              maxI = -1,
              AS = 0.0;

          for (var _j = 0; _j < n; _j++) {
            old[_j] = R[_i8 * n + _j];
            AS = A[_i8 * n + _j] + S[_i8 * n + _j];

            if (AS >= max) {
              max2 = max;
              max = AS;
              maxI = _j;
            } else if (AS > max2) {
              max2 = AS;
            }
          }

          for (var _j2 = 0; _j2 < n; _j2++) {
            R[_i8 * n + _j2] = (1 - opts.damping) * (S[_i8 * n + _j2] - max) + opts.damping * old[_j2];
          }

          R[_i8 * n + maxI] = (1 - opts.damping) * (S[_i8 * n + maxI] - max2) + opts.damping * old[maxI];
        } // Update A availability matrix


        for (var _i9 = 0; _i9 < n; _i9++) {
          var sum = 0;

          for (var _j3 = 0; _j3 < n; _j3++) {
            old[_j3] = A[_j3 * n + _i9];
            Rp[_j3] = Math.max(0, R[_j3 * n + _i9]);
            sum += Rp[_j3];
          }

          sum -= Rp[_i9];
          Rp[_i9] = R[_i9 * n + _i9];
          sum += Rp[_i9];

          for (var _j4 = 0; _j4 < n; _j4++) {
            A[_j4 * n + _i9] = (1 - opts.damping) * Math.min(0, sum - Rp[_j4]) + opts.damping * old[_j4];
          }

          A[_i9 * n + _i9] = (1 - opts.damping) * (sum - Rp[_i9]) + opts.damping * old[_i9];
        } // Check for convergence


        var K = 0;

        for (var _i10 = 0; _i10 < n; _i10++) {
          var E = A[_i10 * n + _i10] + R[_i10 * n + _i10] > 0 ? 1 : 0;
          e[iter % opts.minIterations * n + _i10] = E;
          K += E;
        }

        if (K > 0 && (iter >= opts.minIterations - 1 || iter == opts.maxIterations - 1)) {
          var _sum = 0;

          for (var _i11 = 0; _i11 < n; _i11++) {
            se[_i11] = 0;

            for (var _j5 = 0; _j5 < opts.minIterations; _j5++) {
              se[_i11] += e[_j5 * n + _i11];
            }

            if (se[_i11] === 0 || se[_i11] === opts.minIterations) {
              _sum++;
            }
          }

          if (_sum === n) {
            // then we have convergence
            break;
          }
        }
      } // Identify exemplars (cluster centers)


      var exemplarsIndices = findExemplars(n, R, A); // Assign nodes to clusters

      var clusterIndices = assign$2(n, S, exemplarsIndices);
      var clusters = {};

      for (var c = 0; c < exemplarsIndices.length; c++) {
        clusters[exemplarsIndices[c]] = [];
      }

      for (var _i12 = 0; _i12 < nodes.length; _i12++) {
        var pos = id2position[nodes[_i12].id()];

        var clusterIndex = clusterIndices[pos];

        if (clusterIndex != null) {
          // the node may have not been assigned a cluster if no valid attributes were specified
          clusters[clusterIndex].push(nodes[_i12]);
        }
      }

      var retClusters = new Array(exemplarsIndices.length);

      for (var _c = 0; _c < exemplarsIndices.length; _c++) {
        retClusters[_c] = cy.collection(clusters[exemplarsIndices[_c]]);
      }

      return retClusters;
    };

    var affinityPropagation$1 = {
      affinityPropagation: affinityPropagation,
      ap: affinityPropagation
    };

    var hierholzerDefaults = defaults({
      root: undefined,
      directed: false
    });
    var elesfn$b = {
      hierholzer: function hierholzer(options) {
        if (!plainObject(options)) {
          var args = arguments;
          options = {
            root: args[0],
            directed: args[1]
          };
        }

        var _hierholzerDefaults = hierholzerDefaults(options),
            root = _hierholzerDefaults.root,
            directed = _hierholzerDefaults.directed;

        var eles = this;
        var dflag = false;
        var oddIn;
        var oddOut;
        var startVertex;
        if (root) startVertex = string(root) ? this.filter(root)[0].id() : root[0].id();
        var nodes = {};
        var edges = {};

        if (directed) {
          eles.forEach(function (ele) {
            var id = ele.id();

            if (ele.isNode()) {
              var ind = ele.indegree(true);
              var outd = ele.outdegree(true);
              var d1 = ind - outd;
              var d2 = outd - ind;

              if (d1 == 1) {
                if (oddIn) dflag = true;else oddIn = id;
              } else if (d2 == 1) {
                if (oddOut) dflag = true;else oddOut = id;
              } else if (d2 > 1 || d1 > 1) {
                dflag = true;
              }

              nodes[id] = [];
              ele.outgoers().forEach(function (e) {
                if (e.isEdge()) nodes[id].push(e.id());
              });
            } else {
              edges[id] = [undefined, ele.target().id()];
            }
          });
        } else {
          eles.forEach(function (ele) {
            var id = ele.id();

            if (ele.isNode()) {
              var d = ele.degree(true);

              if (d % 2) {
                if (!oddIn) oddIn = id;else if (!oddOut) oddOut = id;else dflag = true;
              }

              nodes[id] = [];
              ele.connectedEdges().forEach(function (e) {
                return nodes[id].push(e.id());
              });
            } else {
              edges[id] = [ele.source().id(), ele.target().id()];
            }
          });
        }

        var result = {
          found: false,
          trail: undefined
        };
        if (dflag) return result;else if (oddOut && oddIn) {
          if (directed) {
            if (startVertex && oddOut != startVertex) {
              return result;
            }

            startVertex = oddOut;
          } else {
            if (startVertex && oddOut != startVertex && oddIn != startVertex) {
              return result;
            } else if (!startVertex) {
              startVertex = oddOut;
            }
          }
        } else {
          if (!startVertex) startVertex = eles[0].id();
        }

        var walk = function walk(v) {
          var currentNode = v;
          var subtour = [v];
          var adj, adjTail, adjHead;

          while (nodes[currentNode].length) {
            adj = nodes[currentNode].shift();
            adjTail = edges[adj][0];
            adjHead = edges[adj][1];

            if (currentNode != adjHead) {
              nodes[adjHead] = nodes[adjHead].filter(function (e) {
                return e != adj;
              });
              currentNode = adjHead;
            } else if (!directed && currentNode != adjTail) {
              nodes[adjTail] = nodes[adjTail].filter(function (e) {
                return e != adj;
              });
              currentNode = adjTail;
            }

            subtour.unshift(adj);
            subtour.unshift(currentNode);
          }

          return subtour;
        };

        var trail = [];
        var subtour = [];
        subtour = walk(startVertex);

        while (subtour.length != 1) {
          if (nodes[subtour[0]].length == 0) {
            trail.unshift(eles.getElementById(subtour.shift()));
            trail.unshift(eles.getElementById(subtour.shift()));
          } else {
            subtour = walk(subtour.shift()).concat(subtour);
          }
        }

        trail.unshift(eles.getElementById(subtour.shift())); // final node

        for (var d in nodes) {
          if (nodes[d].length) {
            return result;
          }
        }

        result.found = true;
        result.trail = this.spawn(trail, true);
        return result;
      }
    };

    var hopcroftTarjanBiconnected = function hopcroftTarjanBiconnected() {
      var eles = this;
      var nodes = {};
      var id = 0;
      var edgeCount = 0;
      var components = [];
      var stack = [];
      var visitedEdges = {};

      var buildComponent = function buildComponent(x, y) {
        var i = stack.length - 1;
        var cutset = [];
        var component = eles.spawn();

        while (stack[i].x != x || stack[i].y != y) {
          cutset.push(stack.pop().edge);
          i--;
        }

        cutset.push(stack.pop().edge);
        cutset.forEach(function (edge) {
          var connectedNodes = edge.connectedNodes().intersection(eles);
          component.merge(edge);
          connectedNodes.forEach(function (node) {
            var nodeId = node.id();
            var connectedEdges = node.connectedEdges().intersection(eles);
            component.merge(node);

            if (!nodes[nodeId].cutVertex) {
              component.merge(connectedEdges);
            } else {
              component.merge(connectedEdges.filter(function (edge) {
                return edge.isLoop();
              }));
            }
          });
        });
        components.push(component);
      };

      var biconnectedSearch = function biconnectedSearch(root, currentNode, parent) {
        if (root === parent) edgeCount += 1;
        nodes[currentNode] = {
          id: id,
          low: id++,
          cutVertex: false
        };
        var edges = eles.getElementById(currentNode).connectedEdges().intersection(eles);

        if (edges.size() === 0) {
          components.push(eles.spawn(eles.getElementById(currentNode)));
        } else {
          var sourceId, targetId, otherNodeId, edgeId;
          edges.forEach(function (edge) {
            sourceId = edge.source().id();
            targetId = edge.target().id();
            otherNodeId = sourceId === currentNode ? targetId : sourceId;

            if (otherNodeId !== parent) {
              edgeId = edge.id();

              if (!visitedEdges[edgeId]) {
                visitedEdges[edgeId] = true;
                stack.push({
                  x: currentNode,
                  y: otherNodeId,
                  edge: edge
                });
              }

              if (!(otherNodeId in nodes)) {
                biconnectedSearch(root, otherNodeId, currentNode);
                nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].low);

                if (nodes[currentNode].id <= nodes[otherNodeId].low) {
                  nodes[currentNode].cutVertex = true;
                  buildComponent(currentNode, otherNodeId);
                }
              } else {
                nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].id);
              }
            }
          });
        }
      };

      eles.forEach(function (ele) {
        if (ele.isNode()) {
          var nodeId = ele.id();

          if (!(nodeId in nodes)) {
            edgeCount = 0;
            biconnectedSearch(nodeId, nodeId);
            nodes[nodeId].cutVertex = edgeCount > 1;
          }
        }
      });
      var cutVertices = Object.keys(nodes).filter(function (id) {
        return nodes[id].cutVertex;
      }).map(function (id) {
        return eles.getElementById(id);
      });
      return {
        cut: eles.spawn(cutVertices),
        components: components
      };
    };

    var hopcroftTarjanBiconnected$1 = {
      hopcroftTarjanBiconnected: hopcroftTarjanBiconnected,
      htbc: hopcroftTarjanBiconnected,
      htb: hopcroftTarjanBiconnected,
      hopcroftTarjanBiconnectedComponents: hopcroftTarjanBiconnected
    };

    var tarjanStronglyConnected = function tarjanStronglyConnected() {
      var eles = this;
      var nodes = {};
      var index = 0;
      var components = [];
      var stack = [];
      var cut = eles.spawn(eles);

      var stronglyConnectedSearch = function stronglyConnectedSearch(sourceNodeId) {
        stack.push(sourceNodeId);
        nodes[sourceNodeId] = {
          index: index,
          low: index++,
          explored: false
        };
        var connectedEdges = eles.getElementById(sourceNodeId).connectedEdges().intersection(eles);
        connectedEdges.forEach(function (edge) {
          var targetNodeId = edge.target().id();

          if (targetNodeId !== sourceNodeId) {
            if (!(targetNodeId in nodes)) {
              stronglyConnectedSearch(targetNodeId);
            }

            if (!nodes[targetNodeId].explored) {
              nodes[sourceNodeId].low = Math.min(nodes[sourceNodeId].low, nodes[targetNodeId].low);
            }
          }
        });

        if (nodes[sourceNodeId].index === nodes[sourceNodeId].low) {
          var componentNodes = eles.spawn();

          for (;;) {
            var nodeId = stack.pop();
            componentNodes.merge(eles.getElementById(nodeId));
            nodes[nodeId].low = nodes[sourceNodeId].index;
            nodes[nodeId].explored = true;

            if (nodeId === sourceNodeId) {
              break;
            }
          }

          var componentEdges = componentNodes.edgesWith(componentNodes);
          var component = componentNodes.merge(componentEdges);
          components.push(component);
          cut = cut.difference(component);
        }
      };

      eles.forEach(function (ele) {
        if (ele.isNode()) {
          var nodeId = ele.id();

          if (!(nodeId in nodes)) {
            stronglyConnectedSearch(nodeId);
          }
        }
      });
      return {
        cut: cut,
        components: components
      };
    };

    var tarjanStronglyConnected$1 = {
      tarjanStronglyConnected: tarjanStronglyConnected,
      tsc: tarjanStronglyConnected,
      tscc: tarjanStronglyConnected,
      tarjanStronglyConnectedComponents: tarjanStronglyConnected
    };

    var elesfn$c = {};
    [elesfn, elesfn$1, elesfn$2, elesfn$3, elesfn$4, elesfn$5, elesfn$6, elesfn$7, elesfn$8, elesfn$9, elesfn$a, markovClustering$1, kClustering, hierarchicalClustering$1, affinityPropagation$1, elesfn$b, hopcroftTarjanBiconnected$1, tarjanStronglyConnected$1].forEach(function (props) {
      extend(elesfn$c, props);
    });

    /*!
    Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
    Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
    Licensed under The MIT License (http://opensource.org/licenses/MIT)
    */

    /*  promise states [Promises/A+ 2.1]  */
    var STATE_PENDING = 0;
    /*  [Promises/A+ 2.1.1]  */

    var STATE_FULFILLED = 1;
    /*  [Promises/A+ 2.1.2]  */

    var STATE_REJECTED = 2;
    /*  [Promises/A+ 2.1.3]  */

    /*  promise object constructor  */

    var api = function api(executor) {
      /*  optionally support non-constructor/plain-function call  */
      if (!(this instanceof api)) return new api(executor);
      /*  initialize object  */

      this.id = 'Thenable/1.0.7';
      this.state = STATE_PENDING;
      /*  initial state  */

      this.fulfillValue = undefined;
      /*  initial value  */

      /*  [Promises/A+ 1.3, 2.1.2.2]  */

      this.rejectReason = undefined;
      /*  initial reason */

      /*  [Promises/A+ 1.5, 2.1.3.2]  */

      this.onFulfilled = [];
      /*  initial handlers  */

      this.onRejected = [];
      /*  initial handlers  */

      /*  provide optional information-hiding proxy  */

      this.proxy = {
        then: this.then.bind(this)
      };
      /*  support optional executor function  */

      if (typeof executor === 'function') executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
    };
    /*  promise API methods  */


    api.prototype = {
      /*  promise resolving methods  */
      fulfill: function fulfill(value) {
        return deliver(this, STATE_FULFILLED, 'fulfillValue', value);
      },
      reject: function reject(value) {
        return deliver(this, STATE_REJECTED, 'rejectReason', value);
      },

      /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
      then: function then(onFulfilled, onRejected) {
        var curr = this;
        var next = new api();
        /*  [Promises/A+ 2.2.7]  */

        curr.onFulfilled.push(resolver(onFulfilled, next, 'fulfill'));
        /*  [Promises/A+ 2.2.2/2.2.6]  */

        curr.onRejected.push(resolver(onRejected, next, 'reject'));
        /*  [Promises/A+ 2.2.3/2.2.6]  */

        execute(curr);
        return next.proxy;
        /*  [Promises/A+ 2.2.7, 3.3]  */
      }
    };
    /*  deliver an action  */

    var deliver = function deliver(curr, state, name, value) {
      if (curr.state === STATE_PENDING) {
        curr.state = state;
        /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */

        curr[name] = value;
        /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */

        execute(curr);
      }

      return curr;
    };
    /*  execute all handlers  */


    var execute = function execute(curr) {
      if (curr.state === STATE_FULFILLED) execute_handlers(curr, 'onFulfilled', curr.fulfillValue);else if (curr.state === STATE_REJECTED) execute_handlers(curr, 'onRejected', curr.rejectReason);
    };
    /*  execute particular set of handlers  */


    var execute_handlers = function execute_handlers(curr, name, value) {
      /* global setImmediate: true */

      /* global setTimeout: true */

      /*  short-circuit processing  */
      if (curr[name].length === 0) return;
      /*  iterate over all handlers, exactly once  */

      var handlers = curr[name];
      curr[name] = [];
      /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */

      var func = function func() {
        for (var i = 0; i < handlers.length; i++) {
          handlers[i](value);
        }
        /*  [Promises/A+ 2.2.5]  */

      };
      /*  execute procedure asynchronously  */

      /*  [Promises/A+ 2.2.4, 3.1]  */


      if (typeof setImmediate === 'function') setImmediate(func);else setTimeout(func, 0);
    };
    /*  generate a resolver function  */


    var resolver = function resolver(cb, next, method) {
      return function (value) {
        if (typeof cb !== 'function')
          /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
          next[method].call(next, value);
          /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
        else {
            var result;

            try {
              result = cb(value);
            }
            /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
            catch (e) {
              next.reject(e);
              /*  [Promises/A+ 2.2.7.2]  */

              return;
            }

            resolve(next, result);
            /*  [Promises/A+ 2.2.7.1]  */
          }
      };
    };
    /*  "Promise Resolution Procedure"  */

    /*  [Promises/A+ 2.3]  */


    var resolve = function resolve(promise, x) {
      /*  sanity check arguments  */

      /*  [Promises/A+ 2.3.1]  */
      if (promise === x || promise.proxy === x) {
        promise.reject(new TypeError('cannot resolve promise with itself'));
        return;
      }
      /*  surgically check for a "then" method
        (mainly to just call the "getter" of "then" only once)  */


      var then;

      if (_typeof(x) === 'object' && x !== null || typeof x === 'function') {
        try {
          then = x.then;
        }
        /*  [Promises/A+ 2.3.3.1, 3.5]  */
        catch (e) {
          promise.reject(e);
          /*  [Promises/A+ 2.3.3.2]  */

          return;
        }
      }
      /*  handle own Thenables    [Promises/A+ 2.3.2]
        and similar "thenables" [Promises/A+ 2.3.3]  */


      if (typeof then === 'function') {
        var resolved = false;

        try {
          /*  call retrieved "then" method */

          /*  [Promises/A+ 2.3.3.3]  */
          then.call(x,
          /*  resolvePromise  */

          /*  [Promises/A+ 2.3.3.3.1]  */
          function (y) {
            if (resolved) return;
            resolved = true;
            /*  [Promises/A+ 2.3.3.3.3]  */

            if (y === x)
              /*  [Promises/A+ 3.6]  */
              promise.reject(new TypeError('circular thenable chain'));else resolve(promise, y);
          },
          /*  rejectPromise  */

          /*  [Promises/A+ 2.3.3.3.2]  */
          function (r) {
            if (resolved) return;
            resolved = true;
            /*  [Promises/A+ 2.3.3.3.3]  */

            promise.reject(r);
          });
        } catch (e) {
          if (!resolved)
            /*  [Promises/A+ 2.3.3.3.3]  */
            promise.reject(e);
          /*  [Promises/A+ 2.3.3.3.4]  */
        }

        return;
      }
      /*  handle other values  */


      promise.fulfill(x);
      /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
    }; // so we always have Promise.all()


    api.all = function (ps) {
      return new api(function (resolveAll, rejectAll) {
        var vals = new Array(ps.length);
        var doneCount = 0;

        var fulfill = function fulfill(i, val) {
          vals[i] = val;
          doneCount++;

          if (doneCount === ps.length) {
            resolveAll(vals);
          }
        };

        for (var i = 0; i < ps.length; i++) {
          (function (i) {
            var p = ps[i];
            var isPromise = p != null && p.then != null;

            if (isPromise) {
              p.then(function (val) {
                fulfill(i, val);
              }, function (err) {
                rejectAll(err);
              });
            } else {
              var val = p;
              fulfill(i, val);
            }
          })(i);
        }
      });
    };

    api.resolve = function (val) {
      return new api(function (resolve, reject) {
        resolve(val);
      });
    };

    api.reject = function (val) {
      return new api(function (resolve, reject) {
        reject(val);
      });
    };

    var Promise$1 = typeof Promise !== 'undefined' ? Promise : api; // eslint-disable-line no-undef

    var Animation = function Animation(target, opts, opts2) {
      var isCore = core$1(target);
      var isEle = !isCore;

      var _p = this._private = extend({
        duration: 1000
      }, opts, opts2);

      _p.target = target;
      _p.style = _p.style || _p.css;
      _p.started = false;
      _p.playing = false;
      _p.hooked = false;
      _p.applying = false;
      _p.progress = 0;
      _p.completes = [];
      _p.frames = [];

      if (_p.complete && fn(_p.complete)) {
        _p.completes.push(_p.complete);
      }

      if (isEle) {
        var pos = target.position();
        _p.startPosition = _p.startPosition || {
          x: pos.x,
          y: pos.y
        };
        _p.startStyle = _p.startStyle || target.cy().style().getAnimationStartStyle(target, _p.style);
      }

      if (isCore) {
        var pan = target.pan();
        _p.startPan = {
          x: pan.x,
          y: pan.y
        };
        _p.startZoom = target.zoom();
      } // for future timeline/animations impl


      this.length = 1;
      this[0] = this;
    };

    var anifn = Animation.prototype;
    extend(anifn, {
      instanceString: function instanceString() {
        return 'animation';
      },
      hook: function hook() {
        var _p = this._private;

        if (!_p.hooked) {
          // add to target's animation queue
          var q;
          var tAni = _p.target._private.animation;

          if (_p.queue) {
            q = tAni.queue;
          } else {
            q = tAni.current;
          }

          q.push(this); // add to the animation loop pool

          if (elementOrCollection(_p.target)) {
            _p.target.cy().addToAnimationPool(_p.target);
          }

          _p.hooked = true;
        }

        return this;
      },
      play: function play() {
        var _p = this._private; // autorewind

        if (_p.progress === 1) {
          _p.progress = 0;
        }

        _p.playing = true;
        _p.started = false; // needs to be started by animation loop

        _p.stopped = false;
        this.hook(); // the animation loop will start the animation...

        return this;
      },
      playing: function playing() {
        return this._private.playing;
      },
      apply: function apply() {
        var _p = this._private;
        _p.applying = true;
        _p.started = false; // needs to be started by animation loop

        _p.stopped = false;
        this.hook(); // the animation loop will apply the animation at this progress

        return this;
      },
      applying: function applying() {
        return this._private.applying;
      },
      pause: function pause() {
        var _p = this._private;
        _p.playing = false;
        _p.started = false;
        return this;
      },
      stop: function stop() {
        var _p = this._private;
        _p.playing = false;
        _p.started = false;
        _p.stopped = true; // to be removed from animation queues

        return this;
      },
      rewind: function rewind() {
        return this.progress(0);
      },
      fastforward: function fastforward() {
        return this.progress(1);
      },
      time: function time(t) {
        var _p = this._private;

        if (t === undefined) {
          return _p.progress * _p.duration;
        } else {
          return this.progress(t / _p.duration);
        }
      },
      progress: function progress(p) {
        var _p = this._private;
        var wasPlaying = _p.playing;

        if (p === undefined) {
          return _p.progress;
        } else {
          if (wasPlaying) {
            this.pause();
          }

          _p.progress = p;
          _p.started = false;

          if (wasPlaying) {
            this.play();
          }
        }

        return this;
      },
      completed: function completed() {
        return this._private.progress === 1;
      },
      reverse: function reverse() {
        var _p = this._private;
        var wasPlaying = _p.playing;

        if (wasPlaying) {
          this.pause();
        }

        _p.progress = 1 - _p.progress;
        _p.started = false;

        var swap = function swap(a, b) {
          var _pa = _p[a];

          if (_pa == null) {
            return;
          }

          _p[a] = _p[b];
          _p[b] = _pa;
        };

        swap('zoom', 'startZoom');
        swap('pan', 'startPan');
        swap('position', 'startPosition'); // swap styles

        if (_p.style) {
          for (var i = 0; i < _p.style.length; i++) {
            var prop = _p.style[i];
            var name = prop.name;
            var startStyleProp = _p.startStyle[name];
            _p.startStyle[name] = prop;
            _p.style[i] = startStyleProp;
          }
        }

        if (wasPlaying) {
          this.play();
        }

        return this;
      },
      promise: function promise(type) {
        var _p = this._private;
        var arr;

        switch (type) {
          case 'frame':
            arr = _p.frames;
            break;

          default:
          case 'complete':
          case 'completed':
            arr = _p.completes;
        }

        return new Promise$1(function (resolve, reject) {
          arr.push(function () {
            resolve();
          });
        });
      }
    });
    anifn.complete = anifn.completed;
    anifn.run = anifn.play;
    anifn.running = anifn.playing;

    var define = {
      animated: function animated() {
        return function animatedImpl() {
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return false;
          }

          var ele = all[0];

          if (ele) {
            return ele._private.animation.current.length > 0;
          }
        };
      },
      // animated
      clearQueue: function clearQueue() {
        return function clearQueueImpl() {
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return this;
          }

          for (var i = 0; i < all.length; i++) {
            var ele = all[i];
            ele._private.animation.queue = [];
          }

          return this;
        };
      },
      // clearQueue
      delay: function delay() {
        return function delayImpl(time, complete) {
          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return this;
          }

          return this.animate({
            delay: time,
            duration: time,
            complete: complete
          });
        };
      },
      // delay
      delayAnimation: function delayAnimation() {
        return function delayAnimationImpl(time, complete) {
          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return this;
          }

          return this.animation({
            delay: time,
            duration: time,
            complete: complete
          });
        };
      },
      // delay
      animation: function animation() {
        return function animationImpl(properties, params) {
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var cy = this._private.cy || this;
          var isCore = !selfIsArrayLike;
          var isEles = !isCore;

          if (!cy.styleEnabled()) {
            return this;
          }

          var style = cy.style();
          properties = extend({}, properties, params);
          var propertiesEmpty = Object.keys(properties).length === 0;

          if (propertiesEmpty) {
            return new Animation(all[0], properties); // nothing to animate
          }

          if (properties.duration === undefined) {
            properties.duration = 400;
          }

          switch (properties.duration) {
            case 'slow':
              properties.duration = 600;
              break;

            case 'fast':
              properties.duration = 200;
              break;
          }

          if (isEles) {
            properties.style = style.getPropsList(properties.style || properties.css);
            properties.css = undefined;
          }

          if (isEles && properties.renderedPosition != null) {
            var rpos = properties.renderedPosition;
            var pan = cy.pan();
            var zoom = cy.zoom();
            properties.position = renderedToModelPosition(rpos, zoom, pan);
          } // override pan w/ panBy if set


          if (isCore && properties.panBy != null) {
            var panBy = properties.panBy;
            var cyPan = cy.pan();
            properties.pan = {
              x: cyPan.x + panBy.x,
              y: cyPan.y + panBy.y
            };
          } // override pan w/ center if set


          var center = properties.center || properties.centre;

          if (isCore && center != null) {
            var centerPan = cy.getCenterPan(center.eles, properties.zoom);

            if (centerPan != null) {
              properties.pan = centerPan;
            }
          } // override pan & zoom w/ fit if set


          if (isCore && properties.fit != null) {
            var fit = properties.fit;
            var fitVp = cy.getFitViewport(fit.eles || fit.boundingBox, fit.padding);

            if (fitVp != null) {
              properties.pan = fitVp.pan;
              properties.zoom = fitVp.zoom;
            }
          } // override zoom (& potentially pan) w/ zoom obj if set


          if (isCore && plainObject(properties.zoom)) {
            var vp = cy.getZoomedViewport(properties.zoom);

            if (vp != null) {
              if (vp.zoomed) {
                properties.zoom = vp.zoom;
              }

              if (vp.panned) {
                properties.pan = vp.pan;
              }
            } else {
              properties.zoom = null; // an inavalid zoom (e.g. no delta) gets automatically destroyed
            }
          }

          return new Animation(all[0], properties);
        };
      },
      // animate
      animate: function animate() {
        return function animateImpl(properties, params) {
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return this;
          }

          if (params) {
            properties = extend({}, properties, params);
          } // manually hook and run the animation


          for (var i = 0; i < all.length; i++) {
            var ele = all[i];
            var queue = ele.animated() && (properties.queue === undefined || properties.queue);
            var ani = ele.animation(properties, queue ? {
              queue: true
            } : undefined);
            ani.play();
          }

          return this; // chaining
        };
      },
      // animate
      stop: function stop() {
        return function stopImpl(clearQueue, jumpToEnd) {
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return this;
          }

          for (var i = 0; i < all.length; i++) {
            var ele = all[i];
            var _p = ele._private;
            var anis = _p.animation.current;

            for (var j = 0; j < anis.length; j++) {
              var ani = anis[j];
              var ani_p = ani._private;

              if (jumpToEnd) {
                // next iteration of the animation loop, the animation
                // will go straight to the end and be removed
                ani_p.duration = 0;
              }
            } // clear the queue of future animations


            if (clearQueue) {
              _p.animation.queue = [];
            }

            if (!jumpToEnd) {
              _p.animation.current = [];
            }
          } // we have to notify (the animation loop doesn't do it for us on `stop`)


          cy.notify('draw');
          return this;
        };
      } // stop

    }; // define

    var define$1 = {
      // access data field
      data: function data(params) {
        var defaults = {
          field: 'data',
          bindingEvent: 'data',
          allowBinding: false,
          allowSetting: false,
          allowGetting: false,
          settingEvent: 'data',
          settingTriggersEvent: false,
          triggerFnName: 'trigger',
          immutableKeys: {},
          // key => true if immutable
          updateStyle: false,
          beforeGet: function beforeGet(self) {},
          beforeSet: function beforeSet(self, obj) {},
          onSet: function onSet(self) {},
          canSet: function canSet(self) {
            return true;
          }
        };
        params = extend({}, defaults, params);
        return function dataImpl(name, value) {
          var p = params;
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var single = selfIsArrayLike ? self[0] : self; // .data('foo', ...)

          if (string(name)) {
            // set or get property
            // .data('foo')
            if (p.allowGetting && value === undefined) {
              // get
              var ret;

              if (single) {
                p.beforeGet(single);
                ret = single._private[p.field][name];
              }

              return ret; // .data('foo', 'bar')
            } else if (p.allowSetting && value !== undefined) {
              // set
              var valid = !p.immutableKeys[name];

              if (valid) {
                var change = _defineProperty({}, name, value);

                p.beforeSet(self, change);

                for (var i = 0, l = all.length; i < l; i++) {
                  var ele = all[i];

                  if (p.canSet(ele)) {
                    ele._private[p.field][name] = value;
                  }
                } // update mappers if asked


                if (p.updateStyle) {
                  self.updateStyle();
                } // call onSet callback


                p.onSet(self);

                if (p.settingTriggersEvent) {
                  self[p.triggerFnName](p.settingEvent);
                }
              }
            } // .data({ 'foo': 'bar' })

          } else if (p.allowSetting && plainObject(name)) {
            // extend
            var obj = name;
            var k, v;
            var keys = Object.keys(obj);
            p.beforeSet(self, obj);

            for (var _i = 0; _i < keys.length; _i++) {
              k = keys[_i];
              v = obj[k];

              var _valid = !p.immutableKeys[k];

              if (_valid) {
                for (var j = 0; j < all.length; j++) {
                  var _ele = all[j];

                  if (p.canSet(_ele)) {
                    _ele._private[p.field][k] = v;
                  }
                }
              }
            } // update mappers if asked


            if (p.updateStyle) {
              self.updateStyle();
            } // call onSet callback


            p.onSet(self);

            if (p.settingTriggersEvent) {
              self[p.triggerFnName](p.settingEvent);
            } // .data(function(){ ... })

          } else if (p.allowBinding && fn(name)) {
            // bind to event
            var fn$1 = name;
            self.on(p.bindingEvent, fn$1); // .data()
          } else if (p.allowGetting && name === undefined) {
            // get whole object
            var _ret;

            if (single) {
              p.beforeGet(single);
              _ret = single._private[p.field];
            }

            return _ret;
          }

          return self; // maintain chainability
        }; // function
      },
      // data
      // remove data field
      removeData: function removeData(params) {
        var defaults = {
          field: 'data',
          event: 'data',
          triggerFnName: 'trigger',
          triggerEvent: false,
          immutableKeys: {} // key => true if immutable

        };
        params = extend({}, defaults, params);
        return function removeDataImpl(names) {
          var p = params;
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
          // .removeData('foo bar')

          if (string(names)) {
            // then get the list of keys, and delete them
            var keys = names.split(/\s+/);
            var l = keys.length;

            for (var i = 0; i < l; i++) {
              // delete each non-empty key
              var key = keys[i];

              if (emptyString(key)) {
                continue;
              }

              var valid = !p.immutableKeys[key]; // not valid if immutable

              if (valid) {
                for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {
                  all[i_a]._private[p.field][key] = undefined;
                }
              }
            }

            if (p.triggerEvent) {
              self[p.triggerFnName](p.event);
            } // .removeData()

          } else if (names === undefined) {
            // then delete all keys
            for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {
              var _privateFields = all[_i_a]._private[p.field];

              var _keys = Object.keys(_privateFields);

              for (var _i2 = 0; _i2 < _keys.length; _i2++) {
                var _key = _keys[_i2];
                var validKeyToDelete = !p.immutableKeys[_key];

                if (validKeyToDelete) {
                  _privateFields[_key] = undefined;
                }
              }
            }

            if (p.triggerEvent) {
              self[p.triggerFnName](p.event);
            }
          }

          return self; // maintain chaining
        }; // function
      } // removeData

    }; // define

    var define$2 = {
      eventAliasesOn: function eventAliasesOn(proto) {
        var p = proto;
        p.addListener = p.listen = p.bind = p.on;
        p.unlisten = p.unbind = p.off = p.removeListener;
        p.trigger = p.emit; // this is just a wrapper alias of .on()

        p.pon = p.promiseOn = function (events, selector) {
          var self = this;
          var args = Array.prototype.slice.call(arguments, 0);
          return new Promise$1(function (resolve, reject) {
            var callback = function callback(e) {
              self.off.apply(self, offArgs);
              resolve(e);
            };

            var onArgs = args.concat([callback]);
            var offArgs = onArgs.concat([]);
            self.on.apply(self, onArgs);
          });
        };
      }
    }; // define

    // use this module to cherry pick functions into your prototype
    var define$3 = {};
    [define, define$1, define$2].forEach(function (m) {
      extend(define$3, m);
    });

    var elesfn$d = {
      animate: define$3.animate(),
      animation: define$3.animation(),
      animated: define$3.animated(),
      clearQueue: define$3.clearQueue(),
      delay: define$3.delay(),
      delayAnimation: define$3.delayAnimation(),
      stop: define$3.stop()
    };

    var elesfn$e = {
      classes: function classes(_classes) {
        var self = this;

        if (_classes === undefined) {
          var ret = [];

          self[0]._private.classes.forEach(function (cls) {
            return ret.push(cls);
          });

          return ret;
        } else if (!array(_classes)) {
          // extract classes from string
          _classes = (_classes || '').match(/\S+/g) || [];
        }

        var changed = [];
        var classesSet = new Set$1(_classes); // check and update each ele

        for (var j = 0; j < self.length; j++) {
          var ele = self[j];
          var _p = ele._private;
          var eleClasses = _p.classes;
          var changedEle = false; // check if ele has all of the passed classes

          for (var i = 0; i < _classes.length; i++) {
            var cls = _classes[i];
            var eleHasClass = eleClasses.has(cls);

            if (!eleHasClass) {
              changedEle = true;
              break;
            }
          } // check if ele has classes outside of those passed


          if (!changedEle) {
            changedEle = eleClasses.size !== _classes.length;
          }

          if (changedEle) {
            _p.classes = classesSet;
            changed.push(ele);
          }
        } // trigger update style on those eles that had class changes


        if (changed.length > 0) {
          this.spawn(changed).updateStyle().emit('class');
        }

        return self;
      },
      addClass: function addClass(classes) {
        return this.toggleClass(classes, true);
      },
      hasClass: function hasClass(className) {
        var ele = this[0];
        return ele != null && ele._private.classes.has(className);
      },
      toggleClass: function toggleClass(classes, toggle) {
        if (!array(classes)) {
          // extract classes from string
          classes = classes.match(/\S+/g) || [];
        }

        var self = this;
        var toggleUndefd = toggle === undefined;
        var changed = []; // eles who had classes changed

        for (var i = 0, il = self.length; i < il; i++) {
          var ele = self[i];
          var eleClasses = ele._private.classes;
          var changedEle = false;

          for (var j = 0; j < classes.length; j++) {
            var cls = classes[j];
            var hasClass = eleClasses.has(cls);
            var changedNow = false;

            if (toggle || toggleUndefd && !hasClass) {
              eleClasses.add(cls);
              changedNow = true;
            } else if (!toggle || toggleUndefd && hasClass) {
              eleClasses["delete"](cls);
              changedNow = true;
            }

            if (!changedEle && changedNow) {
              changed.push(ele);
              changedEle = true;
            }
          } // for j classes

        } // for i eles
        // trigger update style on those eles that had class changes


        if (changed.length > 0) {
          this.spawn(changed).updateStyle().emit('class');
        }

        return self;
      },
      removeClass: function removeClass(classes) {
        return this.toggleClass(classes, false);
      },
      flashClass: function flashClass(classes, duration) {
        var self = this;

        if (duration == null) {
          duration = 250;
        } else if (duration === 0) {
          return self; // nothing to do really
        }

        self.addClass(classes);
        setTimeout(function () {
          self.removeClass(classes);
        }, duration);
        return self;
      }
    };
    elesfn$e.className = elesfn$e.classNames = elesfn$e.classes;

    var tokens = {
      metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]',
      // chars we need to escape in let names, etc
      comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=',
      // binary comparison op (used in data selectors)
      boolOp: '\\?|\\!|\\^',
      // boolean (unary) operators (used in data selectors)
      string: '"(?:\\\\"|[^"])*"' + '|' + "'(?:\\\\'|[^'])*'",
      // string literals (used in data selectors) -- doublequotes | singlequotes
      number: number$1,
      // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
      meta: 'degree|indegree|outdegree',
      // allowed metadata fields (i.e. allowed functions to use from Collection)
      separator: '\\s*,\\s*',
      // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
      descendant: '\\s+',
      child: '\\s+>\\s+',
      subject: '\\$',
      group: 'node|edge|\\*',
      directedEdge: '\\s+->\\s+',
      undirectedEdge: '\\s+<->\\s+'
    };
    tokens.variable = '(?:[\\w-]|(?:\\\\' + tokens.metaChar + '))+'; // a variable name

    tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number

    tokens.className = tokens.variable; // a class name (follows variable conventions)

    tokens.id = tokens.variable; // an element id (follows variable conventions)

    (function () {
      var ops, op, i; // add @ variants to comparatorOp

      ops = tokens.comparatorOp.split('|');

      for (i = 0; i < ops.length; i++) {
        op = ops[i];
        tokens.comparatorOp += '|@' + op;
      } // add ! variants to comparatorOp


      ops = tokens.comparatorOp.split('|');

      for (i = 0; i < ops.length; i++) {
        op = ops[i];

        if (op.indexOf('!') >= 0) {
          continue;
        } // skip ops that explicitly contain !


        if (op === '=') {
          continue;
        } // skip = b/c != is explicitly defined


        tokens.comparatorOp += '|\\!' + op;
      }
    })();

    /**
     * Make a new query object
     *
     * @prop type {Type} The type enum (int) of the query
     * @prop checks List of checks to make against an ele to test for a match
     */
    var newQuery = function newQuery() {
      return {
        checks: []
      };
    };

    /**
     * A check type enum-like object.  Uses integer values for fast match() lookup.
     * The ordering does not matter as long as the ints are unique.
     */
    var Type = {
      /** E.g. node */
      GROUP: 0,

      /** A collection of elements */
      COLLECTION: 1,

      /** A filter(ele) function */
      FILTER: 2,

      /** E.g. [foo > 1] */
      DATA_COMPARE: 3,

      /** E.g. [foo] */
      DATA_EXIST: 4,

      /** E.g. [?foo] */
      DATA_BOOL: 5,

      /** E.g. [[degree > 2]] */
      META_COMPARE: 6,

      /** E.g. :selected */
      STATE: 7,

      /** E.g. #foo */
      ID: 8,

      /** E.g. .foo */
      CLASS: 9,

      /** E.g. #foo <-> #bar */
      UNDIRECTED_EDGE: 10,

      /** E.g. #foo -> #bar */
      DIRECTED_EDGE: 11,

      /** E.g. $#foo -> #bar */
      NODE_SOURCE: 12,

      /** E.g. #foo -> $#bar */
      NODE_TARGET: 13,

      /** E.g. $#foo <-> #bar */
      NODE_NEIGHBOR: 14,

      /** E.g. #foo > #bar */
      CHILD: 15,

      /** E.g. #foo #bar */
      DESCENDANT: 16,

      /** E.g. $#foo > #bar */
      PARENT: 17,

      /** E.g. $#foo #bar */
      ANCESTOR: 18,

      /** E.g. #foo > $bar > #baz */
      COMPOUND_SPLIT: 19,

      /** Always matches, useful placeholder for subject in `COMPOUND_SPLIT` */
      TRUE: 20
    };

    var stateSelectors = [{
      selector: ':selected',
      matches: function matches(ele) {
        return ele.selected();
      }
    }, {
      selector: ':unselected',
      matches: function matches(ele) {
        return !ele.selected();
      }
    }, {
      selector: ':selectable',
      matches: function matches(ele) {
        return ele.selectable();
      }
    }, {
      selector: ':unselectable',
      matches: function matches(ele) {
        return !ele.selectable();
      }
    }, {
      selector: ':locked',
      matches: function matches(ele) {
        return ele.locked();
      }
    }, {
      selector: ':unlocked',
      matches: function matches(ele) {
        return !ele.locked();
      }
    }, {
      selector: ':visible',
      matches: function matches(ele) {
        return ele.visible();
      }
    }, {
      selector: ':hidden',
      matches: function matches(ele) {
        return !ele.visible();
      }
    }, {
      selector: ':transparent',
      matches: function matches(ele) {
        return ele.transparent();
      }
    }, {
      selector: ':grabbed',
      matches: function matches(ele) {
        return ele.grabbed();
      }
    }, {
      selector: ':free',
      matches: function matches(ele) {
        return !ele.grabbed();
      }
    }, {
      selector: ':removed',
      matches: function matches(ele) {
        return ele.removed();
      }
    }, {
      selector: ':inside',
      matches: function matches(ele) {
        return !ele.removed();
      }
    }, {
      selector: ':grabbable',
      matches: function matches(ele) {
        return ele.grabbable();
      }
    }, {
      selector: ':ungrabbable',
      matches: function matches(ele) {
        return !ele.grabbable();
      }
    }, {
      selector: ':animated',
      matches: function matches(ele) {
        return ele.animated();
      }
    }, {
      selector: ':unanimated',
      matches: function matches(ele) {
        return !ele.animated();
      }
    }, {
      selector: ':parent',
      matches: function matches(ele) {
        return ele.isParent();
      }
    }, {
      selector: ':childless',
      matches: function matches(ele) {
        return ele.isChildless();
      }
    }, {
      selector: ':child',
      matches: function matches(ele) {
        return ele.isChild();
      }
    }, {
      selector: ':orphan',
      matches: function matches(ele) {
        return ele.isOrphan();
      }
    }, {
      selector: ':nonorphan',
      matches: function matches(ele) {
        return ele.isChild();
      }
    }, {
      selector: ':compound',
      matches: function matches(ele) {
        if (ele.isNode()) {
          return ele.isParent();
        } else {
          return ele.source().isParent() || ele.target().isParent();
        }
      }
    }, {
      selector: ':loop',
      matches: function matches(ele) {
        return ele.isLoop();
      }
    }, {
      selector: ':simple',
      matches: function matches(ele) {
        return ele.isSimple();
      }
    }, {
      selector: ':active',
      matches: function matches(ele) {
        return ele.active();
      }
    }, {
      selector: ':inactive',
      matches: function matches(ele) {
        return !ele.active();
      }
    }, {
      selector: ':backgrounding',
      matches: function matches(ele) {
        return ele.backgrounding();
      }
    }, {
      selector: ':nonbackgrounding',
      matches: function matches(ele) {
        return !ele.backgrounding();
      }
    }].sort(function (a, b) {
      // n.b. selectors that are starting substrings of others must have the longer ones first
      return descending(a.selector, b.selector);
    });

    var lookup = function () {
      var selToFn = {};
      var s;

      for (var i = 0; i < stateSelectors.length; i++) {
        s = stateSelectors[i];
        selToFn[s.selector] = s.matches;
      }

      return selToFn;
    }();

    var stateSelectorMatches = function stateSelectorMatches(sel, ele) {
      return lookup[sel](ele);
    };
    var stateSelectorRegex = '(' + stateSelectors.map(function (s) {
      return s.selector;
    }).join('|') + ')';

    // so that values get compared properly in Selector.filter()

    var cleanMetaChars = function cleanMetaChars(str) {
      return str.replace(new RegExp('\\\\(' + tokens.metaChar + ')', 'g'), function (match, $1) {
        return $1;
      });
    };

    var replaceLastQuery = function replaceLastQuery(selector, examiningQuery, replacementQuery) {
      selector[selector.length - 1] = replacementQuery;
    }; // NOTE: add new expression syntax here to have it recognised by the parser;
    // - a query contains all adjacent (i.e. no separator in between) expressions;
    // - the current query is stored in selector[i]
    // - you need to check the query objects in match() for it actually filter properly, but that's pretty straight forward


    var exprs = [{
      name: 'group',
      // just used for identifying when debugging
      query: true,
      regex: '(' + tokens.group + ')',
      populate: function populate(selector, query, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            group = _ref2[0];

        query.checks.push({
          type: Type.GROUP,
          value: group === '*' ? group : group + 's'
        });
      }
    }, {
      name: 'state',
      query: true,
      regex: stateSelectorRegex,
      populate: function populate(selector, query, _ref3) {
        var _ref4 = _slicedToArray(_ref3, 1),
            state = _ref4[0];

        query.checks.push({
          type: Type.STATE,
          value: state
        });
      }
    }, {
      name: 'id',
      query: true,
      regex: '\\#(' + tokens.id + ')',
      populate: function populate(selector, query, _ref5) {
        var _ref6 = _slicedToArray(_ref5, 1),
            id = _ref6[0];

        query.checks.push({
          type: Type.ID,
          value: cleanMetaChars(id)
        });
      }
    }, {
      name: 'className',
      query: true,
      regex: '\\.(' + tokens.className + ')',
      populate: function populate(selector, query, _ref7) {
        var _ref8 = _slicedToArray(_ref7, 1),
            className = _ref8[0];

        query.checks.push({
          type: Type.CLASS,
          value: cleanMetaChars(className)
        });
      }
    }, {
      name: 'dataExists',
      query: true,
      regex: '\\[\\s*(' + tokens.variable + ')\\s*\\]',
      populate: function populate(selector, query, _ref9) {
        var _ref10 = _slicedToArray(_ref9, 1),
            variable = _ref10[0];

        query.checks.push({
          type: Type.DATA_EXIST,
          field: cleanMetaChars(variable)
        });
      }
    }, {
      name: 'dataCompare',
      query: true,
      regex: '\\[\\s*(' + tokens.variable + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.value + ')\\s*\\]',
      populate: function populate(selector, query, _ref11) {
        var _ref12 = _slicedToArray(_ref11, 3),
            variable = _ref12[0],
            comparatorOp = _ref12[1],
            value = _ref12[2];

        var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;

        if (valueIsString) {
          value = value.substring(1, value.length - 1);
        } else {
          value = parseFloat(value);
        }

        query.checks.push({
          type: Type.DATA_COMPARE,
          field: cleanMetaChars(variable),
          operator: comparatorOp,
          value: value
        });
      }
    }, {
      name: 'dataBool',
      query: true,
      regex: '\\[\\s*(' + tokens.boolOp + ')\\s*(' + tokens.variable + ')\\s*\\]',
      populate: function populate(selector, query, _ref13) {
        var _ref14 = _slicedToArray(_ref13, 2),
            boolOp = _ref14[0],
            variable = _ref14[1];

        query.checks.push({
          type: Type.DATA_BOOL,
          field: cleanMetaChars(variable),
          operator: boolOp
        });
      }
    }, {
      name: 'metaCompare',
      query: true,
      regex: '\\[\\[\\s*(' + tokens.meta + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.number + ')\\s*\\]\\]',
      populate: function populate(selector, query, _ref15) {
        var _ref16 = _slicedToArray(_ref15, 3),
            meta = _ref16[0],
            comparatorOp = _ref16[1],
            number = _ref16[2];

        query.checks.push({
          type: Type.META_COMPARE,
          field: cleanMetaChars(meta),
          operator: comparatorOp,
          value: parseFloat(number)
        });
      }
    }, {
      name: 'nextQuery',
      separator: true,
      regex: tokens.separator,
      populate: function populate(selector, query) {
        var currentSubject = selector.currentSubject;
        var edgeCount = selector.edgeCount;
        var compoundCount = selector.compoundCount;
        var lastQ = selector[selector.length - 1];

        if (currentSubject != null) {
          lastQ.subject = currentSubject;
          selector.currentSubject = null;
        }

        lastQ.edgeCount = edgeCount;
        lastQ.compoundCount = compoundCount;
        selector.edgeCount = 0;
        selector.compoundCount = 0; // go on to next query

        var nextQuery = selector[selector.length++] = newQuery();
        return nextQuery; // this is the new query to be filled by the following exprs
      }
    }, {
      name: 'directedEdge',
      separator: true,
      regex: tokens.directedEdge,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          // undirected edge
          var edgeQuery = newQuery();
          var source = query;
          var target = newQuery();
          edgeQuery.checks.push({
            type: Type.DIRECTED_EDGE,
            source: source,
            target: target
          }); // the query in the selector should be the edge rather than the source

          replaceLastQuery(selector, query, edgeQuery);
          selector.edgeCount++; // we're now populating the target query with expressions that follow

          return target;
        } else {
          // source/target
          var srcTgtQ = newQuery();
          var _source = query;

          var _target = newQuery();

          srcTgtQ.checks.push({
            type: Type.NODE_SOURCE,
            source: _source,
            target: _target
          }); // the query in the selector should be the neighbourhood rather than the node

          replaceLastQuery(selector, query, srcTgtQ);
          selector.edgeCount++;
          return _target; // now populating the target with the following expressions
        }
      }
    }, {
      name: 'undirectedEdge',
      separator: true,
      regex: tokens.undirectedEdge,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          // undirected edge
          var edgeQuery = newQuery();
          var source = query;
          var target = newQuery();
          edgeQuery.checks.push({
            type: Type.UNDIRECTED_EDGE,
            nodes: [source, target]
          }); // the query in the selector should be the edge rather than the source

          replaceLastQuery(selector, query, edgeQuery);
          selector.edgeCount++; // we're now populating the target query with expressions that follow

          return target;
        } else {
          // neighbourhood
          var nhoodQ = newQuery();
          var node = query;
          var neighbor = newQuery();
          nhoodQ.checks.push({
            type: Type.NODE_NEIGHBOR,
            node: node,
            neighbor: neighbor
          }); // the query in the selector should be the neighbourhood rather than the node

          replaceLastQuery(selector, query, nhoodQ);
          return neighbor; // now populating the neighbor with following expressions
        }
      }
    }, {
      name: 'child',
      separator: true,
      regex: tokens.child,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          // default: child query
          var parentChildQuery = newQuery();
          var child = newQuery();
          var parent = selector[selector.length - 1];
          parentChildQuery.checks.push({
            type: Type.CHILD,
            parent: parent,
            child: child
          }); // the query in the selector should be the '>' itself

          replaceLastQuery(selector, query, parentChildQuery);
          selector.compoundCount++; // we're now populating the child query with expressions that follow

          return child;
        } else if (selector.currentSubject === query) {
          // compound split query
          var compound = newQuery();
          var left = selector[selector.length - 1];
          var right = newQuery();
          var subject = newQuery();

          var _child = newQuery();

          var _parent = newQuery(); // set up the root compound q


          compound.checks.push({
            type: Type.COMPOUND_SPLIT,
            left: left,
            right: right,
            subject: subject
          }); // populate the subject and replace the q at the old spot (within left) with TRUE

          subject.checks = query.checks; // take the checks from the left

          query.checks = [{
            type: Type.TRUE
          }]; // checks under left refs the subject implicitly
          // set up the right q

          _parent.checks.push({
            type: Type.TRUE
          }); // parent implicitly refs the subject


          right.checks.push({
            type: Type.PARENT,
            // type is swapped on right side queries
            parent: _parent,
            child: _child // empty for now

          });
          replaceLastQuery(selector, left, compound); // update the ref since we moved things around for `query`

          selector.currentSubject = subject;
          selector.compoundCount++;
          return _child; // now populating the right side's child
        } else {
          // parent query
          // info for parent query
          var _parent2 = newQuery();

          var _child2 = newQuery();

          var pcQChecks = [{
            type: Type.PARENT,
            parent: _parent2,
            child: _child2
          }]; // the parent-child query takes the place of the query previously being populated

          _parent2.checks = query.checks; // the previous query contains the checks for the parent

          query.checks = pcQChecks; // pc query takes over

          selector.compoundCount++;
          return _child2; // we're now populating the child
        }
      }
    }, {
      name: 'descendant',
      separator: true,
      regex: tokens.descendant,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          // default: descendant query
          var ancChQuery = newQuery();
          var descendant = newQuery();
          var ancestor = selector[selector.length - 1];
          ancChQuery.checks.push({
            type: Type.DESCENDANT,
            ancestor: ancestor,
            descendant: descendant
          }); // the query in the selector should be the '>' itself

          replaceLastQuery(selector, query, ancChQuery);
          selector.compoundCount++; // we're now populating the descendant query with expressions that follow

          return descendant;
        } else if (selector.currentSubject === query) {
          // compound split query
          var compound = newQuery();
          var left = selector[selector.length - 1];
          var right = newQuery();
          var subject = newQuery();

          var _descendant = newQuery();

          var _ancestor = newQuery(); // set up the root compound q


          compound.checks.push({
            type: Type.COMPOUND_SPLIT,
            left: left,
            right: right,
            subject: subject
          }); // populate the subject and replace the q at the old spot (within left) with TRUE

          subject.checks = query.checks; // take the checks from the left

          query.checks = [{
            type: Type.TRUE
          }]; // checks under left refs the subject implicitly
          // set up the right q

          _ancestor.checks.push({
            type: Type.TRUE
          }); // ancestor implicitly refs the subject


          right.checks.push({
            type: Type.ANCESTOR,
            // type is swapped on right side queries
            ancestor: _ancestor,
            descendant: _descendant // empty for now

          });
          replaceLastQuery(selector, left, compound); // update the ref since we moved things around for `query`

          selector.currentSubject = subject;
          selector.compoundCount++;
          return _descendant; // now populating the right side's descendant
        } else {
          // ancestor query
          // info for parent query
          var _ancestor2 = newQuery();

          var _descendant2 = newQuery();

          var adQChecks = [{
            type: Type.ANCESTOR,
            ancestor: _ancestor2,
            descendant: _descendant2
          }]; // the parent-child query takes the place of the query previously being populated

          _ancestor2.checks = query.checks; // the previous query contains the checks for the parent

          query.checks = adQChecks; // pc query takes over

          selector.compoundCount++;
          return _descendant2; // we're now populating the child
        }
      }
    }, {
      name: 'subject',
      modifier: true,
      regex: tokens.subject,
      populate: function populate(selector, query) {
        if (selector.currentSubject != null && selector.currentSubject !== query) {
          warn('Redefinition of subject in selector `' + selector.toString() + '`');
          return false;
        }

        selector.currentSubject = query;
        var topQ = selector[selector.length - 1];
        var topChk = topQ.checks[0];
        var topType = topChk == null ? null : topChk.type;

        if (topType === Type.DIRECTED_EDGE) {
          // directed edge with subject on the target
          // change to target node check
          topChk.type = Type.NODE_TARGET;
        } else if (topType === Type.UNDIRECTED_EDGE) {
          // undirected edge with subject on the second node
          // change to neighbor check
          topChk.type = Type.NODE_NEIGHBOR;
          topChk.node = topChk.nodes[1]; // second node is subject

          topChk.neighbor = topChk.nodes[0]; // clean up unused fields for new type

          topChk.nodes = null;
        }
      }
    }];
    exprs.forEach(function (e) {
      return e.regexObj = new RegExp('^' + e.regex);
    });

    /**
     * Of all the expressions, find the first match in the remaining text.
     * @param {string} remaining The remaining text to parse
     * @returns The matched expression and the newly remaining text `{ expr, match, name, remaining }`
     */

    var consumeExpr = function consumeExpr(remaining) {
      var expr;
      var match;
      var name;

      for (var j = 0; j < exprs.length; j++) {
        var e = exprs[j];
        var n = e.name;
        var m = remaining.match(e.regexObj);

        if (m != null) {
          match = m;
          expr = e;
          name = n;
          var consumed = m[0];
          remaining = remaining.substring(consumed.length);
          break; // we've consumed one expr, so we can return now
        }
      }

      return {
        expr: expr,
        match: match,
        name: name,
        remaining: remaining
      };
    };
    /**
     * Consume all the leading whitespace
     * @param {string} remaining The text to consume
     * @returns The text with the leading whitespace removed
     */


    var consumeWhitespace = function consumeWhitespace(remaining) {
      var match = remaining.match(/^\s+/);

      if (match) {
        var consumed = match[0];
        remaining = remaining.substring(consumed.length);
      }

      return remaining;
    };
    /**
     * Parse the string and store the parsed representation in the Selector.
     * @param {string} selector The selector string
     * @returns `true` if the selector was successfully parsed, `false` otherwise
     */


    var parse = function parse(selector) {
      var self = this;
      var remaining = self.inputText = selector;
      var currentQuery = self[0] = newQuery();
      self.length = 1;
      remaining = consumeWhitespace(remaining); // get rid of leading whitespace

      for (;;) {
        var exprInfo = consumeExpr(remaining);

        if (exprInfo.expr == null) {
          warn('The selector `' + selector + '`is invalid');
          return false;
        } else {
          var args = exprInfo.match.slice(1); // let the token populate the selector object in currentQuery

          var ret = exprInfo.expr.populate(self, currentQuery, args);

          if (ret === false) {
            return false; // exit if population failed
          } else if (ret != null) {
            currentQuery = ret; // change the current query to be filled if the expr specifies
          }
        }

        remaining = exprInfo.remaining; // we're done when there's nothing left to parse

        if (remaining.match(/^\s*$/)) {
          break;
        }
      }

      var lastQ = self[self.length - 1];

      if (self.currentSubject != null) {
        lastQ.subject = self.currentSubject;
      }

      lastQ.edgeCount = self.edgeCount;
      lastQ.compoundCount = self.compoundCount;

      for (var i = 0; i < self.length; i++) {
        var q = self[i]; // in future, this could potentially be allowed if there were operator precedence and detection of invalid combinations

        if (q.compoundCount > 0 && q.edgeCount > 0) {
          warn('The selector `' + selector + '` is invalid because it uses both a compound selector and an edge selector');
          return false;
        }

        if (q.edgeCount > 1) {
          warn('The selector `' + selector + '` is invalid because it uses multiple edge selectors');
          return false;
        } else if (q.edgeCount === 1) {
          warn('The selector `' + selector + '` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.');
        }
      }

      return true; // success
    };
    /**
     * Get the selector represented as a string.  This value uses default formatting,
     * so things like spacing may differ from the input text passed to the constructor.
     * @returns {string} The selector string
     */


    var toString = function toString() {
      if (this.toStringCache != null) {
        return this.toStringCache;
      }

      var clean = function clean(obj) {
        if (obj == null) {
          return '';
        } else {
          return obj;
        }
      };

      var cleanVal = function cleanVal(val) {
        if (string(val)) {
          return '"' + val + '"';
        } else {
          return clean(val);
        }
      };

      var space = function space(val) {
        return ' ' + val + ' ';
      };

      var checkToString = function checkToString(check, subject) {
        var type = check.type,
            value = check.value;

        switch (type) {
          case Type.GROUP:
            {
              var group = clean(value);
              return group.substring(0, group.length - 1);
            }

          case Type.DATA_COMPARE:
            {
              var field = check.field,
                  operator = check.operator;
              return '[' + field + space(clean(operator)) + cleanVal(value) + ']';
            }

          case Type.DATA_BOOL:
            {
              var _operator = check.operator,
                  _field = check.field;
              return '[' + clean(_operator) + _field + ']';
            }

          case Type.DATA_EXIST:
            {
              var _field2 = check.field;
              return '[' + _field2 + ']';
            }

          case Type.META_COMPARE:
            {
              var _operator2 = check.operator,
                  _field3 = check.field;
              return '[[' + _field3 + space(clean(_operator2)) + cleanVal(value) + ']]';
            }

          case Type.STATE:
            {
              return value;
            }

          case Type.ID:
            {
              return '#' + value;
            }

          case Type.CLASS:
            {
              return '.' + value;
            }

          case Type.PARENT:
          case Type.CHILD:
            {
              return queryToString(check.parent, subject) + space('>') + queryToString(check.child, subject);
            }

          case Type.ANCESTOR:
          case Type.DESCENDANT:
            {
              return queryToString(check.ancestor, subject) + ' ' + queryToString(check.descendant, subject);
            }

          case Type.COMPOUND_SPLIT:
            {
              var lhs = queryToString(check.left, subject);
              var sub = queryToString(check.subject, subject);
              var rhs = queryToString(check.right, subject);
              return lhs + (lhs.length > 0 ? ' ' : '') + sub + rhs;
            }

          case Type.TRUE:
            {
              return '';
            }
        }
      };

      var queryToString = function queryToString(query, subject) {
        return query.checks.reduce(function (str, chk, i) {
          return str + (subject === query && i === 0 ? '$' : '') + checkToString(chk, subject);
        }, '');
      };

      var str = '';

      for (var i = 0; i < this.length; i++) {
        var query = this[i];
        str += queryToString(query, query.subject);

        if (this.length > 1 && i < this.length - 1) {
          str += ', ';
        }
      }

      this.toStringCache = str;
      return str;
    };
    var parse$1 = {
      parse: parse,
      toString: toString
    };

    var valCmp = function valCmp(fieldVal, operator, value) {
      var matches;
      var isFieldStr = string(fieldVal);
      var isFieldNum = number(fieldVal);
      var isValStr = string(value);
      var fieldStr, valStr;
      var caseInsensitive = false;
      var notExpr = false;
      var isIneqCmp = false;

      if (operator.indexOf('!') >= 0) {
        operator = operator.replace('!', '');
        notExpr = true;
      }

      if (operator.indexOf('@') >= 0) {
        operator = operator.replace('@', '');
        caseInsensitive = true;
      }

      if (isFieldStr || isValStr || caseInsensitive) {
        fieldStr = !isFieldStr && !isFieldNum ? '' : '' + fieldVal;
        valStr = '' + value;
      } // if we're doing a case insensitive comparison, then we're using a STRING comparison
      // even if we're comparing numbers


      if (caseInsensitive) {
        fieldVal = fieldStr = fieldStr.toLowerCase();
        value = valStr = valStr.toLowerCase();
      }

      switch (operator) {
        case '*=':
          matches = fieldStr.indexOf(valStr) >= 0;
          break;

        case '$=':
          matches = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;
          break;

        case '^=':
          matches = fieldStr.indexOf(valStr) === 0;
          break;

        case '=':
          matches = fieldVal === value;
          break;

        case '>':
          isIneqCmp = true;
          matches = fieldVal > value;
          break;

        case '>=':
          isIneqCmp = true;
          matches = fieldVal >= value;
          break;

        case '<':
          isIneqCmp = true;
          matches = fieldVal < value;
          break;

        case '<=':
          isIneqCmp = true;
          matches = fieldVal <= value;
          break;

        default:
          matches = false;
          break;
      } // apply the not op, but null vals for inequalities should always stay non-matching


      if (notExpr && (fieldVal != null || !isIneqCmp)) {
        matches = !matches;
      }

      return matches;
    };
    var boolCmp = function boolCmp(fieldVal, operator) {
      switch (operator) {
        case '?':
          return fieldVal ? true : false;

        case '!':
          return fieldVal ? false : true;

        case '^':
          return fieldVal === undefined;
      }
    };
    var existCmp = function existCmp(fieldVal) {
      return fieldVal !== undefined;
    };
    var data = function data(ele, field) {
      return ele.data(field);
    };
    var meta = function meta(ele, field) {
      return ele[field]();
    };

    /** A lookup of `match(check, ele)` functions by `Type` int */

    var match = [];
    /**
     * Returns whether the query matches for the element
     * @param query The `{ type, value, ... }` query object
     * @param ele The element to compare against
    */

    var matches = function matches(query, ele) {
      return query.checks.every(function (chk) {
        return match[chk.type](chk, ele);
      });
    };

    match[Type.GROUP] = function (check, ele) {
      var group = check.value;
      return group === '*' || group === ele.group();
    };

    match[Type.STATE] = function (check, ele) {
      var stateSelector = check.value;
      return stateSelectorMatches(stateSelector, ele);
    };

    match[Type.ID] = function (check, ele) {
      var id = check.value;
      return ele.id() === id;
    };

    match[Type.CLASS] = function (check, ele) {
      var cls = check.value;
      return ele.hasClass(cls);
    };

    match[Type.META_COMPARE] = function (check, ele) {
      var field = check.field,
          operator = check.operator,
          value = check.value;
      return valCmp(meta(ele, field), operator, value);
    };

    match[Type.DATA_COMPARE] = function (check, ele) {
      var field = check.field,
          operator = check.operator,
          value = check.value;
      return valCmp(data(ele, field), operator, value);
    };

    match[Type.DATA_BOOL] = function (check, ele) {
      var field = check.field,
          operator = check.operator;
      return boolCmp(data(ele, field), operator);
    };

    match[Type.DATA_EXIST] = function (check, ele) {
      var field = check.field;
          check.operator;
      return existCmp(data(ele, field));
    };

    match[Type.UNDIRECTED_EDGE] = function (check, ele) {
      var qA = check.nodes[0];
      var qB = check.nodes[1];
      var src = ele.source();
      var tgt = ele.target();
      return matches(qA, src) && matches(qB, tgt) || matches(qB, src) && matches(qA, tgt);
    };

    match[Type.NODE_NEIGHBOR] = function (check, ele) {
      return matches(check.node, ele) && ele.neighborhood().some(function (n) {
        return n.isNode() && matches(check.neighbor, n);
      });
    };

    match[Type.DIRECTED_EDGE] = function (check, ele) {
      return matches(check.source, ele.source()) && matches(check.target, ele.target());
    };

    match[Type.NODE_SOURCE] = function (check, ele) {
      return matches(check.source, ele) && ele.outgoers().some(function (n) {
        return n.isNode() && matches(check.target, n);
      });
    };

    match[Type.NODE_TARGET] = function (check, ele) {
      return matches(check.target, ele) && ele.incomers().some(function (n) {
        return n.isNode() && matches(check.source, n);
      });
    };

    match[Type.CHILD] = function (check, ele) {
      return matches(check.child, ele) && matches(check.parent, ele.parent());
    };

    match[Type.PARENT] = function (check, ele) {
      return matches(check.parent, ele) && ele.children().some(function (c) {
        return matches(check.child, c);
      });
    };

    match[Type.DESCENDANT] = function (check, ele) {
      return matches(check.descendant, ele) && ele.ancestors().some(function (a) {
        return matches(check.ancestor, a);
      });
    };

    match[Type.ANCESTOR] = function (check, ele) {
      return matches(check.ancestor, ele) && ele.descendants().some(function (d) {
        return matches(check.descendant, d);
      });
    };

    match[Type.COMPOUND_SPLIT] = function (check, ele) {
      return matches(check.subject, ele) && matches(check.left, ele) && matches(check.right, ele);
    };

    match[Type.TRUE] = function () {
      return true;
    };

    match[Type.COLLECTION] = function (check, ele) {
      var collection = check.value;
      return collection.has(ele);
    };

    match[Type.FILTER] = function (check, ele) {
      var filter = check.value;
      return filter(ele);
    };

    var filter = function filter(collection) {
      var self = this; // for 1 id #foo queries, just get the element

      if (self.length === 1 && self[0].checks.length === 1 && self[0].checks[0].type === Type.ID) {
        return collection.getElementById(self[0].checks[0].value).collection();
      }

      var selectorFunction = function selectorFunction(element) {
        for (var j = 0; j < self.length; j++) {
          var query = self[j];

          if (matches(query, element)) {
            return true;
          }
        }

        return false;
      };

      if (self.text() == null) {
        selectorFunction = function selectorFunction() {
          return true;
        };
      }

      return collection.filter(selectorFunction);
    }; // filter
    // does selector match a single element?


    var matches$1 = function matches$1(ele) {
      var self = this;

      for (var j = 0; j < self.length; j++) {
        var query = self[j];

        if (matches(query, ele)) {
          return true;
        }
      }

      return false;
    }; // matches


    var matching = {
      matches: matches$1,
      filter: filter
    };

    var Selector = function Selector(selector) {
      this.inputText = selector;
      this.currentSubject = null;
      this.compoundCount = 0;
      this.edgeCount = 0;
      this.length = 0;

      if (selector == null || string(selector) && selector.match(/^\s*$/)) ; else if (elementOrCollection(selector)) {
        this.addQuery({
          checks: [{
            type: Type.COLLECTION,
            value: selector.collection()
          }]
        });
      } else if (fn(selector)) {
        this.addQuery({
          checks: [{
            type: Type.FILTER,
            value: selector
          }]
        });
      } else if (string(selector)) {
        if (!this.parse(selector)) {
          this.invalid = true;
        }
      } else {
        error('A selector must be created from a string; found ');
      }
    };

    var selfn = Selector.prototype;
    [parse$1, matching].forEach(function (p) {
      return extend(selfn, p);
    });

    selfn.text = function () {
      return this.inputText;
    };

    selfn.size = function () {
      return this.length;
    };

    selfn.eq = function (i) {
      return this[i];
    };

    selfn.sameText = function (otherSel) {
      return !this.invalid && !otherSel.invalid && this.text() === otherSel.text();
    };

    selfn.addQuery = function (q) {
      this[this.length++] = q;
    };

    selfn.selector = selfn.toString;

    var elesfn$f = {
      allAre: function allAre(selector) {
        var selObj = new Selector(selector);
        return this.every(function (ele) {
          return selObj.matches(ele);
        });
      },
      is: function is(selector) {
        var selObj = new Selector(selector);
        return this.some(function (ele) {
          return selObj.matches(ele);
        });
      },
      some: function some(fn, thisArg) {
        for (var i = 0; i < this.length; i++) {
          var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

          if (ret) {
            return true;
          }
        }

        return false;
      },
      every: function every(fn, thisArg) {
        for (var i = 0; i < this.length; i++) {
          var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

          if (!ret) {
            return false;
          }
        }

        return true;
      },
      same: function same(collection) {
        // cheap collection ref check
        if (this === collection) {
          return true;
        }

        collection = this.cy().collection(collection);
        var thisLength = this.length;
        var collectionLength = collection.length; // cheap length check

        if (thisLength !== collectionLength) {
          return false;
        } // cheap element ref check


        if (thisLength === 1) {
          return this[0] === collection[0];
        }

        return this.every(function (ele) {
          return collection.hasElementWithId(ele.id());
        });
      },
      anySame: function anySame(collection) {
        collection = this.cy().collection(collection);
        return this.some(function (ele) {
          return collection.hasElementWithId(ele.id());
        });
      },
      allAreNeighbors: function allAreNeighbors(collection) {
        collection = this.cy().collection(collection);
        var nhood = this.neighborhood();
        return collection.every(function (ele) {
          return nhood.hasElementWithId(ele.id());
        });
      },
      contains: function contains(collection) {
        collection = this.cy().collection(collection);
        var self = this;
        return collection.every(function (ele) {
          return self.hasElementWithId(ele.id());
        });
      }
    };
    elesfn$f.allAreNeighbours = elesfn$f.allAreNeighbors;
    elesfn$f.has = elesfn$f.contains;
    elesfn$f.equal = elesfn$f.equals = elesfn$f.same;

    var cache = function cache(fn, name) {
      return function traversalCache(arg1, arg2, arg3, arg4) {
        var selectorOrEles = arg1;
        var eles = this;
        var key;

        if (selectorOrEles == null) {
          key = '';
        } else if (elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {
          key = selectorOrEles.id();
        }

        if (eles.length === 1 && key) {
          var _p = eles[0]._private;
          var tch = _p.traversalCache = _p.traversalCache || {};
          var ch = tch[name] = tch[name] || [];
          var hash = hashString(key);
          var cacheHit = ch[hash];

          if (cacheHit) {
            return cacheHit;
          } else {
            return ch[hash] = fn.call(eles, arg1, arg2, arg3, arg4);
          }
        } else {
          return fn.call(eles, arg1, arg2, arg3, arg4);
        }
      };
    };

    var elesfn$g = {
      parent: function parent(selector) {
        var parents = []; // optimisation for single ele call

        if (this.length === 1) {
          var parent = this[0]._private.parent;

          if (parent) {
            return parent;
          }
        }

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var _parent = ele._private.parent;

          if (_parent) {
            parents.push(_parent);
          }
        }

        return this.spawn(parents, true).filter(selector);
      },
      parents: function parents(selector) {
        var parents = [];
        var eles = this.parent();

        while (eles.nonempty()) {
          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            parents.push(ele);
          }

          eles = eles.parent();
        }

        return this.spawn(parents, true).filter(selector);
      },
      commonAncestors: function commonAncestors(selector) {
        var ancestors;

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var parents = ele.parents();
          ancestors = ancestors || parents;
          ancestors = ancestors.intersect(parents); // current list must be common with current ele parents set
        }

        return ancestors.filter(selector);
      },
      orphans: function orphans(selector) {
        return this.stdFilter(function (ele) {
          return ele.isOrphan();
        }).filter(selector);
      },
      nonorphans: function nonorphans(selector) {
        return this.stdFilter(function (ele) {
          return ele.isChild();
        }).filter(selector);
      },
      children: cache(function (selector) {
        var children = [];

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var eleChildren = ele._private.children;

          for (var j = 0; j < eleChildren.length; j++) {
            children.push(eleChildren[j]);
          }
        }

        return this.spawn(children, true).filter(selector);
      }, 'children'),
      siblings: function siblings(selector) {
        return this.parent().children().not(this).filter(selector);
      },
      isParent: function isParent() {
        var ele = this[0];

        if (ele) {
          return ele.isNode() && ele._private.children.length !== 0;
        }
      },
      isChildless: function isChildless() {
        var ele = this[0];

        if (ele) {
          return ele.isNode() && ele._private.children.length === 0;
        }
      },
      isChild: function isChild() {
        var ele = this[0];

        if (ele) {
          return ele.isNode() && ele._private.parent != null;
        }
      },
      isOrphan: function isOrphan() {
        var ele = this[0];

        if (ele) {
          return ele.isNode() && ele._private.parent == null;
        }
      },
      descendants: function descendants(selector) {
        var elements = [];

        function add(eles) {
          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            elements.push(ele);

            if (ele.children().nonempty()) {
              add(ele.children());
            }
          }
        }

        add(this.children());
        return this.spawn(elements, true).filter(selector);
      }
    };

    function forEachCompound(eles, fn, includeSelf, recursiveStep) {
      var q = [];
      var did = new Set$1();
      var cy = eles.cy();
      var hasCompounds = cy.hasCompoundNodes();

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];

        if (includeSelf) {
          q.push(ele);
        } else if (hasCompounds) {
          recursiveStep(q, did, ele);
        }
      }

      while (q.length > 0) {
        var _ele = q.shift();

        fn(_ele);
        did.add(_ele.id());

        if (hasCompounds) {
          recursiveStep(q, did, _ele);
        }
      }

      return eles;
    }

    function addChildren(q, did, ele) {
      if (ele.isParent()) {
        var children = ele._private.children;

        for (var i = 0; i < children.length; i++) {
          var child = children[i];

          if (!did.has(child.id())) {
            q.push(child);
          }
        }
      }
    } // very efficient version of eles.add( eles.descendants() ).forEach()
    // for internal use


    elesfn$g.forEachDown = function (fn) {
      var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return forEachCompound(this, fn, includeSelf, addChildren);
    };

    function addParent(q, did, ele) {
      if (ele.isChild()) {
        var parent = ele._private.parent;

        if (!did.has(parent.id())) {
          q.push(parent);
        }
      }
    }

    elesfn$g.forEachUp = function (fn) {
      var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return forEachCompound(this, fn, includeSelf, addParent);
    };

    function addParentAndChildren(q, did, ele) {
      addParent(q, did, ele);
      addChildren(q, did, ele);
    }

    elesfn$g.forEachUpAndDown = function (fn) {
      var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return forEachCompound(this, fn, includeSelf, addParentAndChildren);
    }; // aliases


    elesfn$g.ancestors = elesfn$g.parents;

    var fn$1, elesfn$h;
    fn$1 = elesfn$h = {
      data: define$3.data({
        field: 'data',
        bindingEvent: 'data',
        allowBinding: true,
        allowSetting: true,
        settingEvent: 'data',
        settingTriggersEvent: true,
        triggerFnName: 'trigger',
        allowGetting: true,
        immutableKeys: {
          'id': true,
          'source': true,
          'target': true,
          'parent': true
        },
        updateStyle: true
      }),
      removeData: define$3.removeData({
        field: 'data',
        event: 'data',
        triggerFnName: 'trigger',
        triggerEvent: true,
        immutableKeys: {
          'id': true,
          'source': true,
          'target': true,
          'parent': true
        },
        updateStyle: true
      }),
      scratch: define$3.data({
        field: 'scratch',
        bindingEvent: 'scratch',
        allowBinding: true,
        allowSetting: true,
        settingEvent: 'scratch',
        settingTriggersEvent: true,
        triggerFnName: 'trigger',
        allowGetting: true,
        updateStyle: true
      }),
      removeScratch: define$3.removeData({
        field: 'scratch',
        event: 'scratch',
        triggerFnName: 'trigger',
        triggerEvent: true,
        updateStyle: true
      }),
      rscratch: define$3.data({
        field: 'rscratch',
        allowBinding: false,
        allowSetting: true,
        settingTriggersEvent: false,
        allowGetting: true
      }),
      removeRscratch: define$3.removeData({
        field: 'rscratch',
        triggerEvent: false
      }),
      id: function id() {
        var ele = this[0];

        if (ele) {
          return ele._private.data.id;
        }
      }
    }; // aliases

    fn$1.attr = fn$1.data;
    fn$1.removeAttr = fn$1.removeData;
    var data$1 = elesfn$h;

    var elesfn$i = {};

    function defineDegreeFunction(callback) {
      return function (includeLoops) {
        var self = this;

        if (includeLoops === undefined) {
          includeLoops = true;
        }

        if (self.length === 0) {
          return;
        }

        if (self.isNode() && !self.removed()) {
          var degree = 0;
          var node = self[0];
          var connectedEdges = node._private.edges;

          for (var i = 0; i < connectedEdges.length; i++) {
            var edge = connectedEdges[i];

            if (!includeLoops && edge.isLoop()) {
              continue;
            }

            degree += callback(node, edge);
          }

          return degree;
        } else {
          return;
        }
      };
    }

    extend(elesfn$i, {
      degree: defineDegreeFunction(function (node, edge) {
        if (edge.source().same(edge.target())) {
          return 2;
        } else {
          return 1;
        }
      }),
      indegree: defineDegreeFunction(function (node, edge) {
        if (edge.target().same(node)) {
          return 1;
        } else {
          return 0;
        }
      }),
      outdegree: defineDegreeFunction(function (node, edge) {
        if (edge.source().same(node)) {
          return 1;
        } else {
          return 0;
        }
      })
    });

    function defineDegreeBoundsFunction(degreeFn, callback) {
      return function (includeLoops) {
        var ret;
        var nodes = this.nodes();

        for (var i = 0; i < nodes.length; i++) {
          var ele = nodes[i];
          var degree = ele[degreeFn](includeLoops);

          if (degree !== undefined && (ret === undefined || callback(degree, ret))) {
            ret = degree;
          }
        }

        return ret;
      };
    }

    extend(elesfn$i, {
      minDegree: defineDegreeBoundsFunction('degree', function (degree, min) {
        return degree < min;
      }),
      maxDegree: defineDegreeBoundsFunction('degree', function (degree, max) {
        return degree > max;
      }),
      minIndegree: defineDegreeBoundsFunction('indegree', function (degree, min) {
        return degree < min;
      }),
      maxIndegree: defineDegreeBoundsFunction('indegree', function (degree, max) {
        return degree > max;
      }),
      minOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, min) {
        return degree < min;
      }),
      maxOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, max) {
        return degree > max;
      })
    });
    extend(elesfn$i, {
      totalDegree: function totalDegree(includeLoops) {
        var total = 0;
        var nodes = this.nodes();

        for (var i = 0; i < nodes.length; i++) {
          total += nodes[i].degree(includeLoops);
        }

        return total;
      }
    });

    var fn$2, elesfn$j;

    var beforePositionSet = function beforePositionSet(eles, newPos, silent) {
      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];

        if (!ele.locked()) {
          var oldPos = ele._private.position;
          var delta = {
            x: newPos.x != null ? newPos.x - oldPos.x : 0,
            y: newPos.y != null ? newPos.y - oldPos.y : 0
          };

          if (ele.isParent() && !(delta.x === 0 && delta.y === 0)) {
            ele.children().shift(delta, silent);
          }

          ele.dirtyBoundingBoxCache();
        }
      }
    };

    var positionDef = {
      field: 'position',
      bindingEvent: 'position',
      allowBinding: true,
      allowSetting: true,
      settingEvent: 'position',
      settingTriggersEvent: true,
      triggerFnName: 'emitAndNotify',
      allowGetting: true,
      validKeys: ['x', 'y'],
      beforeGet: function beforeGet(ele) {
        ele.updateCompoundBounds();
      },
      beforeSet: function beforeSet(eles, newPos) {
        beforePositionSet(eles, newPos, false);
      },
      onSet: function onSet(eles) {
        eles.dirtyCompoundBoundsCache();
      },
      canSet: function canSet(ele) {
        return !ele.locked();
      }
    };
    fn$2 = elesfn$j = {
      position: define$3.data(positionDef),
      // position but no notification to renderer
      silentPosition: define$3.data(extend({}, positionDef, {
        allowBinding: false,
        allowSetting: true,
        settingTriggersEvent: false,
        allowGetting: false,
        beforeSet: function beforeSet(eles, newPos) {
          beforePositionSet(eles, newPos, true);
        },
        onSet: function onSet(eles) {
          eles.dirtyCompoundBoundsCache();
        }
      })),
      positions: function positions(pos, silent) {
        if (plainObject(pos)) {
          if (silent) {
            this.silentPosition(pos);
          } else {
            this.position(pos);
          }
        } else if (fn(pos)) {
          var _fn = pos;
          var cy = this.cy();
          cy.startBatch();

          for (var i = 0; i < this.length; i++) {
            var ele = this[i];

            var _pos = void 0;

            if (_pos = _fn(ele, i)) {
              if (silent) {
                ele.silentPosition(_pos);
              } else {
                ele.position(_pos);
              }
            }
          }

          cy.endBatch();
        }

        return this; // chaining
      },
      silentPositions: function silentPositions(pos) {
        return this.positions(pos, true);
      },
      shift: function shift(dim, val, silent) {
        var delta;

        if (plainObject(dim)) {
          delta = {
            x: number(dim.x) ? dim.x : 0,
            y: number(dim.y) ? dim.y : 0
          };
          silent = val;
        } else if (string(dim) && number(val)) {
          delta = {
            x: 0,
            y: 0
          };
          delta[dim] = val;
        }

        if (delta != null) {
          var cy = this.cy();
          cy.startBatch();

          for (var i = 0; i < this.length; i++) {
            var ele = this[i];
            var pos = ele.position();
            var newPos = {
              x: pos.x + delta.x,
              y: pos.y + delta.y
            };

            if (silent) {
              ele.silentPosition(newPos);
            } else {
              ele.position(newPos);
            }
          }

          cy.endBatch();
        }

        return this;
      },
      silentShift: function silentShift(dim, val) {
        if (plainObject(dim)) {
          this.shift(dim, true);
        } else if (string(dim) && number(val)) {
          this.shift(dim, val, true);
        }

        return this;
      },
      // get/set the rendered (i.e. on screen) positon of the element
      renderedPosition: function renderedPosition(dim, val) {
        var ele = this[0];
        var cy = this.cy();
        var zoom = cy.zoom();
        var pan = cy.pan();
        var rpos = plainObject(dim) ? dim : undefined;
        var setting = rpos !== undefined || val !== undefined && string(dim);

        if (ele && ele.isNode()) {
          // must have an element and must be a node to return position
          if (setting) {
            for (var i = 0; i < this.length; i++) {
              var _ele = this[i];

              if (val !== undefined) {
                // set one dimension
                _ele.position(dim, (val - pan[dim]) / zoom);
              } else if (rpos !== undefined) {
                // set whole position
                _ele.position(renderedToModelPosition(rpos, zoom, pan));
              }
            }
          } else {
            // getting
            var pos = ele.position();
            rpos = modelToRenderedPosition(pos, zoom, pan);

            if (dim === undefined) {
              // then return the whole rendered position
              return rpos;
            } else {
              // then return the specified dimension
              return rpos[dim];
            }
          }
        } else if (!setting) {
          return undefined; // for empty collection case
        }

        return this; // chaining
      },
      // get/set the position relative to the parent
      relativePosition: function relativePosition(dim, val) {
        var ele = this[0];
        var cy = this.cy();
        var ppos = plainObject(dim) ? dim : undefined;
        var setting = ppos !== undefined || val !== undefined && string(dim);
        var hasCompoundNodes = cy.hasCompoundNodes();

        if (ele && ele.isNode()) {
          // must have an element and must be a node to return position
          if (setting) {
            for (var i = 0; i < this.length; i++) {
              var _ele2 = this[i];
              var parent = hasCompoundNodes ? _ele2.parent() : null;
              var hasParent = parent && parent.length > 0;
              var relativeToParent = hasParent;

              if (hasParent) {
                parent = parent[0];
              }

              var origin = relativeToParent ? parent.position() : {
                x: 0,
                y: 0
              };

              if (val !== undefined) {
                // set one dimension
                _ele2.position(dim, val + origin[dim]);
              } else if (ppos !== undefined) {
                // set whole position
                _ele2.position({
                  x: ppos.x + origin.x,
                  y: ppos.y + origin.y
                });
              }
            }
          } else {
            // getting
            var pos = ele.position();

            var _parent = hasCompoundNodes ? ele.parent() : null;

            var _hasParent = _parent && _parent.length > 0;

            var _relativeToParent = _hasParent;

            if (_hasParent) {
              _parent = _parent[0];
            }

            var _origin = _relativeToParent ? _parent.position() : {
              x: 0,
              y: 0
            };

            ppos = {
              x: pos.x - _origin.x,
              y: pos.y - _origin.y
            };

            if (dim === undefined) {
              // then return the whole rendered position
              return ppos;
            } else {
              // then return the specified dimension
              return ppos[dim];
            }
          }
        } else if (!setting) {
          return undefined; // for empty collection case
        }

        return this; // chaining
      }
    }; // aliases

    fn$2.modelPosition = fn$2.point = fn$2.position;
    fn$2.modelPositions = fn$2.points = fn$2.positions;
    fn$2.renderedPoint = fn$2.renderedPosition;
    fn$2.relativePoint = fn$2.relativePosition;
    var position = elesfn$j;

    var fn$3, elesfn$k;
    fn$3 = elesfn$k = {};

    elesfn$k.renderedBoundingBox = function (options) {
      var bb = this.boundingBox(options);
      var cy = this.cy();
      var zoom = cy.zoom();
      var pan = cy.pan();
      var x1 = bb.x1 * zoom + pan.x;
      var x2 = bb.x2 * zoom + pan.x;
      var y1 = bb.y1 * zoom + pan.y;
      var y2 = bb.y2 * zoom + pan.y;
      return {
        x1: x1,
        x2: x2,
        y1: y1,
        y2: y2,
        w: x2 - x1,
        h: y2 - y1
      };
    };

    elesfn$k.dirtyCompoundBoundsCache = function () {
      var silent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var cy = this.cy();

      if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
        return this;
      }

      this.forEachUp(function (ele) {
        if (ele.isParent()) {
          var _p = ele._private;
          _p.compoundBoundsClean = false;
          _p.bbCache = null;

          if (!silent) {
            ele.emitAndNotify('bounds');
          }
        }
      });
      return this;
    };

    elesfn$k.updateCompoundBounds = function () {
      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var cy = this.cy(); // not possible to do on non-compound graphs or with the style disabled

      if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
        return this;
      } // save cycles when batching -- but bounds will be stale (or not exist yet)


      if (!force && cy.batching()) {
        return this;
      }

      function update(parent) {
        if (!parent.isParent()) {
          return;
        }

        var _p = parent._private;
        var children = parent.children();
        var includeLabels = parent.pstyle('compound-sizing-wrt-labels').value === 'include';
        var min = {
          width: {
            val: parent.pstyle('min-width').pfValue,
            left: parent.pstyle('min-width-bias-left'),
            right: parent.pstyle('min-width-bias-right')
          },
          height: {
            val: parent.pstyle('min-height').pfValue,
            top: parent.pstyle('min-height-bias-top'),
            bottom: parent.pstyle('min-height-bias-bottom')
          }
        };
        var bb = children.boundingBox({
          includeLabels: includeLabels,
          includeOverlays: false,
          // updating the compound bounds happens outside of the regular
          // cache cycle (i.e. before fired events)
          useCache: false
        });
        var pos = _p.position; // if children take up zero area then keep position and fall back on stylesheet w/h

        if (bb.w === 0 || bb.h === 0) {
          bb = {
            w: parent.pstyle('width').pfValue,
            h: parent.pstyle('height').pfValue
          };
          bb.x1 = pos.x - bb.w / 2;
          bb.x2 = pos.x + bb.w / 2;
          bb.y1 = pos.y - bb.h / 2;
          bb.y2 = pos.y + bb.h / 2;
        }

        function computeBiasValues(propDiff, propBias, propBiasComplement) {
          var biasDiff = 0;
          var biasComplementDiff = 0;
          var biasTotal = propBias + propBiasComplement;

          if (propDiff > 0 && biasTotal > 0) {
            biasDiff = propBias / biasTotal * propDiff;
            biasComplementDiff = propBiasComplement / biasTotal * propDiff;
          }

          return {
            biasDiff: biasDiff,
            biasComplementDiff: biasComplementDiff
          };
        }

        function computePaddingValues(width, height, paddingObject, relativeTo) {
          // Assuming percentage is number from 0 to 1
          if (paddingObject.units === '%') {
            switch (relativeTo) {
              case 'width':
                return width > 0 ? paddingObject.pfValue * width : 0;

              case 'height':
                return height > 0 ? paddingObject.pfValue * height : 0;

              case 'average':
                return width > 0 && height > 0 ? paddingObject.pfValue * (width + height) / 2 : 0;

              case 'min':
                return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * height : paddingObject.pfValue * width : 0;

              case 'max':
                return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * width : paddingObject.pfValue * height : 0;

              default:
                return 0;
            }
          } else if (paddingObject.units === 'px') {
            return paddingObject.pfValue;
          } else {
            return 0;
          }
        }

        var leftVal = min.width.left.value;

        if (min.width.left.units === 'px' && min.width.val > 0) {
          leftVal = leftVal * 100 / min.width.val;
        }

        var rightVal = min.width.right.value;

        if (min.width.right.units === 'px' && min.width.val > 0) {
          rightVal = rightVal * 100 / min.width.val;
        }

        var topVal = min.height.top.value;

        if (min.height.top.units === 'px' && min.height.val > 0) {
          topVal = topVal * 100 / min.height.val;
        }

        var bottomVal = min.height.bottom.value;

        if (min.height.bottom.units === 'px' && min.height.val > 0) {
          bottomVal = bottomVal * 100 / min.height.val;
        }

        var widthBiasDiffs = computeBiasValues(min.width.val - bb.w, leftVal, rightVal);
        var diffLeft = widthBiasDiffs.biasDiff;
        var diffRight = widthBiasDiffs.biasComplementDiff;
        var heightBiasDiffs = computeBiasValues(min.height.val - bb.h, topVal, bottomVal);
        var diffTop = heightBiasDiffs.biasDiff;
        var diffBottom = heightBiasDiffs.biasComplementDiff;
        _p.autoPadding = computePaddingValues(bb.w, bb.h, parent.pstyle('padding'), parent.pstyle('padding-relative-to').value);
        _p.autoWidth = Math.max(bb.w, min.width.val);
        pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;
        _p.autoHeight = Math.max(bb.h, min.height.val);
        pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;
      }

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var _p = ele._private;

        if (!_p.compoundBoundsClean || force) {
          update(ele);

          if (!cy.batching()) {
            _p.compoundBoundsClean = true;
          }
        }
      }

      return this;
    };

    var noninf = function noninf(x) {
      if (x === Infinity || x === -Infinity) {
        return 0;
      }

      return x;
    };

    var updateBounds = function updateBounds(b, x1, y1, x2, y2) {
      // don't update with zero area boxes
      if (x2 - x1 === 0 || y2 - y1 === 0) {
        return;
      } // don't update with null dim


      if (x1 == null || y1 == null || x2 == null || y2 == null) {
        return;
      }

      b.x1 = x1 < b.x1 ? x1 : b.x1;
      b.x2 = x2 > b.x2 ? x2 : b.x2;
      b.y1 = y1 < b.y1 ? y1 : b.y1;
      b.y2 = y2 > b.y2 ? y2 : b.y2;
      b.w = b.x2 - b.x1;
      b.h = b.y2 - b.y1;
    };

    var updateBoundsFromBox = function updateBoundsFromBox(b, b2) {
      if (b2 == null) {
        return b;
      }

      return updateBounds(b, b2.x1, b2.y1, b2.x2, b2.y2);
    };

    var prefixedProperty = function prefixedProperty(obj, field, prefix) {
      return getPrefixedProperty(obj, field, prefix);
    };

    var updateBoundsFromArrow = function updateBoundsFromArrow(bounds, ele, prefix) {
      if (ele.cy().headless()) {
        return;
      }

      var _p = ele._private;
      var rstyle = _p.rstyle;
      var halfArW = rstyle.arrowWidth / 2;
      var arrowType = ele.pstyle(prefix + '-arrow-shape').value;
      var x;
      var y;

      if (arrowType !== 'none') {
        if (prefix === 'source') {
          x = rstyle.srcX;
          y = rstyle.srcY;
        } else if (prefix === 'target') {
          x = rstyle.tgtX;
          y = rstyle.tgtY;
        } else {
          x = rstyle.midX;
          y = rstyle.midY;
        } // always store the individual arrow bounds


        var bbs = _p.arrowBounds = _p.arrowBounds || {};
        var bb = bbs[prefix] = bbs[prefix] || {};
        bb.x1 = x - halfArW;
        bb.y1 = y - halfArW;
        bb.x2 = x + halfArW;
        bb.y2 = y + halfArW;
        bb.w = bb.x2 - bb.x1;
        bb.h = bb.y2 - bb.y1;
        expandBoundingBox(bb, 1);
        updateBounds(bounds, bb.x1, bb.y1, bb.x2, bb.y2);
      }
    };

    var updateBoundsFromLabel = function updateBoundsFromLabel(bounds, ele, prefix) {
      if (ele.cy().headless()) {
        return;
      }

      var prefixDash;

      if (prefix) {
        prefixDash = prefix + '-';
      } else {
        prefixDash = '';
      }

      var _p = ele._private;
      var rstyle = _p.rstyle;
      var label = ele.pstyle(prefixDash + 'label').strValue;

      if (label) {
        var halign = ele.pstyle('text-halign');
        var valign = ele.pstyle('text-valign');
        var labelWidth = prefixedProperty(rstyle, 'labelWidth', prefix);
        var labelHeight = prefixedProperty(rstyle, 'labelHeight', prefix);
        var labelX = prefixedProperty(rstyle, 'labelX', prefix);
        var labelY = prefixedProperty(rstyle, 'labelY', prefix);
        var marginX = ele.pstyle(prefixDash + 'text-margin-x').pfValue;
        var marginY = ele.pstyle(prefixDash + 'text-margin-y').pfValue;
        var isEdge = ele.isEdge();
        var rotation = ele.pstyle(prefixDash + 'text-rotation');
        var outlineWidth = ele.pstyle('text-outline-width').pfValue;
        var borderWidth = ele.pstyle('text-border-width').pfValue;
        var halfBorderWidth = borderWidth / 2;
        var padding = ele.pstyle('text-background-padding').pfValue;
        var marginOfError = 2; // expand to work around browser dimension inaccuracies

        var lh = labelHeight;
        var lw = labelWidth;
        var lw_2 = lw / 2;
        var lh_2 = lh / 2;
        var lx1, lx2, ly1, ly2;

        if (isEdge) {
          lx1 = labelX - lw_2;
          lx2 = labelX + lw_2;
          ly1 = labelY - lh_2;
          ly2 = labelY + lh_2;
        } else {
          switch (halign.value) {
            case 'left':
              lx1 = labelX - lw;
              lx2 = labelX;
              break;

            case 'center':
              lx1 = labelX - lw_2;
              lx2 = labelX + lw_2;
              break;

            case 'right':
              lx1 = labelX;
              lx2 = labelX + lw;
              break;
          }

          switch (valign.value) {
            case 'top':
              ly1 = labelY - lh;
              ly2 = labelY;
              break;

            case 'center':
              ly1 = labelY - lh_2;
              ly2 = labelY + lh_2;
              break;

            case 'bottom':
              ly1 = labelY;
              ly2 = labelY + lh;
              break;
          }
        } // shift by margin and expand by outline and border


        lx1 += marginX - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;
        lx2 += marginX + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError;
        ly1 += marginY - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;
        ly2 += marginY + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError; // always store the unrotated label bounds separately

        var bbPrefix = prefix || 'main';
        var bbs = _p.labelBounds;
        var bb = bbs[bbPrefix] = bbs[bbPrefix] || {};
        bb.x1 = lx1;
        bb.y1 = ly1;
        bb.x2 = lx2;
        bb.y2 = ly2;
        bb.w = lx2 - lx1;
        bb.h = ly2 - ly1;
        var isAutorotate = isEdge && rotation.strValue === 'autorotate';
        var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;

        if (isAutorotate || isPfValue) {
          var theta = isAutorotate ? prefixedProperty(_p.rstyle, 'labelAngle', prefix) : rotation.pfValue;
          var cos = Math.cos(theta);
          var sin = Math.sin(theta); // rotation point (default value for center-center)

          var xo = (lx1 + lx2) / 2;
          var yo = (ly1 + ly2) / 2;

          if (!isEdge) {
            switch (halign.value) {
              case 'left':
                xo = lx2;
                break;

              case 'right':
                xo = lx1;
                break;
            }

            switch (valign.value) {
              case 'top':
                yo = ly2;
                break;

              case 'bottom':
                yo = ly1;
                break;
            }
          }

          var rotate = function rotate(x, y) {
            x = x - xo;
            y = y - yo;
            return {
              x: x * cos - y * sin + xo,
              y: x * sin + y * cos + yo
            };
          };

          var px1y1 = rotate(lx1, ly1);
          var px1y2 = rotate(lx1, ly2);
          var px2y1 = rotate(lx2, ly1);
          var px2y2 = rotate(lx2, ly2);
          lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
          lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
          ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
          ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
        }

        var bbPrefixRot = bbPrefix + 'Rot';
        var bbRot = bbs[bbPrefixRot] = bbs[bbPrefixRot] || {};
        bbRot.x1 = lx1;
        bbRot.y1 = ly1;
        bbRot.x2 = lx2;
        bbRot.y2 = ly2;
        bbRot.w = lx2 - lx1;
        bbRot.h = ly2 - ly1;
        updateBounds(bounds, lx1, ly1, lx2, ly2);
        updateBounds(_p.labelBounds.all, lx1, ly1, lx2, ly2);
      }

      return bounds;
    }; // get the bounding box of the elements (in raw model position)


    var boundingBoxImpl = function boundingBoxImpl(ele, options) {
      var cy = ele._private.cy;
      var styleEnabled = cy.styleEnabled();
      var headless = cy.headless();
      var bounds = makeBoundingBox();
      var _p = ele._private;
      var isNode = ele.isNode();
      var isEdge = ele.isEdge();
      var ex1, ex2, ey1, ey2; // extrema of body / lines

      var x, y; // node pos

      var rstyle = _p.rstyle;
      var manualExpansion = isNode && styleEnabled ? ele.pstyle('bounds-expansion').pfValue : [0]; // must use `display` prop only, as reading `compound.width()` causes recursion
      // (other factors like width values will be considered later in this function anyway)

      var isDisplayed = function isDisplayed(ele) {
        return ele.pstyle('display').value !== 'none';
      };

      var displayed = !styleEnabled || isDisplayed(ele) // must take into account connected nodes b/c of implicit edge hiding on display:none node
      && (!isEdge || isDisplayed(ele.source()) && isDisplayed(ele.target()));

      if (displayed) {
        // displayed suffices, since we will find zero area eles anyway
        var overlayOpacity = 0;
        var overlayPadding = 0;

        if (styleEnabled && options.includeOverlays) {
          overlayOpacity = ele.pstyle('overlay-opacity').value;

          if (overlayOpacity !== 0) {
            overlayPadding = ele.pstyle('overlay-padding').value;
          }
        }

        var w = 0;
        var wHalf = 0;

        if (styleEnabled) {
          w = ele.pstyle('width').pfValue;
          wHalf = w / 2;
        }

        if (isNode && options.includeNodes) {
          var pos = ele.position();
          x = pos.x;
          y = pos.y;

          var _w = ele.outerWidth();

          var halfW = _w / 2;
          var h = ele.outerHeight();
          var halfH = h / 2; // handle node dimensions
          /////////////////////////

          ex1 = x - halfW;
          ex2 = x + halfW;
          ey1 = y - halfH;
          ey2 = y + halfH;
          updateBounds(bounds, ex1, ey1, ex2, ey2);
        } else if (isEdge && options.includeEdges) {
          if (styleEnabled && !headless) {
            var curveStyle = ele.pstyle('curve-style').strValue; // handle edge dimensions (rough box estimate)
            //////////////////////////////////////////////

            ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);
            ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);
            ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);
            ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY); // take into account edge width

            ex1 -= wHalf;
            ex2 += wHalf;
            ey1 -= wHalf;
            ey2 += wHalf;
            updateBounds(bounds, ex1, ey1, ex2, ey2); // precise edges
            ////////////////

            if (curveStyle === 'haystack') {
              var hpts = rstyle.haystackPts;

              if (hpts && hpts.length === 2) {
                ex1 = hpts[0].x;
                ey1 = hpts[0].y;
                ex2 = hpts[1].x;
                ey2 = hpts[1].y;

                if (ex1 > ex2) {
                  var temp = ex1;
                  ex1 = ex2;
                  ex2 = temp;
                }

                if (ey1 > ey2) {
                  var _temp = ey1;
                  ey1 = ey2;
                  ey2 = _temp;
                }

                updateBounds(bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf);
              }
            } else if (curveStyle === 'bezier' || curveStyle === 'unbundled-bezier' || curveStyle === 'segments' || curveStyle === 'taxi') {
              var pts;

              switch (curveStyle) {
                case 'bezier':
                case 'unbundled-bezier':
                  pts = rstyle.bezierPts;
                  break;

                case 'segments':
                case 'taxi':
                  pts = rstyle.linePts;
                  break;
              }

              if (pts != null) {
                for (var j = 0; j < pts.length; j++) {
                  var pt = pts[j];
                  ex1 = pt.x - wHalf;
                  ex2 = pt.x + wHalf;
                  ey1 = pt.y - wHalf;
                  ey2 = pt.y + wHalf;
                  updateBounds(bounds, ex1, ey1, ex2, ey2);
                }
              }
            } // bezier-like or segment-like edge

          } else {
            // headless or style disabled
            // fallback on source and target positions
            //////////////////////////////////////////
            var n1 = ele.source();
            var n1pos = n1.position();
            var n2 = ele.target();
            var n2pos = n2.position();
            ex1 = n1pos.x;
            ex2 = n2pos.x;
            ey1 = n1pos.y;
            ey2 = n2pos.y;

            if (ex1 > ex2) {
              var _temp2 = ex1;
              ex1 = ex2;
              ex2 = _temp2;
            }

            if (ey1 > ey2) {
              var _temp3 = ey1;
              ey1 = ey2;
              ey2 = _temp3;
            } // take into account edge width


            ex1 -= wHalf;
            ex2 += wHalf;
            ey1 -= wHalf;
            ey2 += wHalf;
            updateBounds(bounds, ex1, ey1, ex2, ey2);
          } // headless or style disabled

        } // edges
        // handle edge arrow size
        /////////////////////////


        if (styleEnabled && options.includeEdges && isEdge) {
          updateBoundsFromArrow(bounds, ele, 'mid-source');
          updateBoundsFromArrow(bounds, ele, 'mid-target');
          updateBoundsFromArrow(bounds, ele, 'source');
          updateBoundsFromArrow(bounds, ele, 'target');
        } // ghost
        ////////


        if (styleEnabled) {
          var ghost = ele.pstyle('ghost').value === 'yes';

          if (ghost) {
            var gx = ele.pstyle('ghost-offset-x').pfValue;
            var gy = ele.pstyle('ghost-offset-y').pfValue;
            updateBounds(bounds, bounds.x1 + gx, bounds.y1 + gy, bounds.x2 + gx, bounds.y2 + gy);
          }
        } // always store the body bounds separately from the labels


        var bbBody = _p.bodyBounds = _p.bodyBounds || {};
        assignBoundingBox(bbBody, bounds);
        expandBoundingBoxSides(bbBody, manualExpansion);
        expandBoundingBox(bbBody, 1); // expand to work around browser dimension inaccuracies
        // overlay
        //////////

        if (styleEnabled) {
          ex1 = bounds.x1;
          ex2 = bounds.x2;
          ey1 = bounds.y1;
          ey2 = bounds.y2;
          updateBounds(bounds, ex1 - overlayPadding, ey1 - overlayPadding, ex2 + overlayPadding, ey2 + overlayPadding);
        } // always store the body bounds separately from the labels


        var bbOverlay = _p.overlayBounds = _p.overlayBounds || {};
        assignBoundingBox(bbOverlay, bounds);
        expandBoundingBoxSides(bbOverlay, manualExpansion);
        expandBoundingBox(bbOverlay, 1); // expand to work around browser dimension inaccuracies
        // handle label dimensions
        //////////////////////////

        var bbLabels = _p.labelBounds = _p.labelBounds || {};

        if (bbLabels.all != null) {
          clearBoundingBox(bbLabels.all);
        } else {
          bbLabels.all = makeBoundingBox();
        }

        if (styleEnabled && options.includeLabels) {
          if (options.includeMainLabels) {
            updateBoundsFromLabel(bounds, ele, null);
          }

          if (isEdge) {
            if (options.includeSourceLabels) {
              updateBoundsFromLabel(bounds, ele, 'source');
            }

            if (options.includeTargetLabels) {
              updateBoundsFromLabel(bounds, ele, 'target');
            }
          }
        } // style enabled for labels

      } // if displayed


      bounds.x1 = noninf(bounds.x1);
      bounds.y1 = noninf(bounds.y1);
      bounds.x2 = noninf(bounds.x2);
      bounds.y2 = noninf(bounds.y2);
      bounds.w = noninf(bounds.x2 - bounds.x1);
      bounds.h = noninf(bounds.y2 - bounds.y1);

      if (bounds.w > 0 && bounds.h > 0 && displayed) {
        expandBoundingBoxSides(bounds, manualExpansion); // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides

        expandBoundingBox(bounds, 1);
      }

      return bounds;
    };

    var getKey = function getKey(opts) {
      var i = 0;

      var tf = function tf(val) {
        return (val ? 1 : 0) << i++;
      };

      var key = 0;
      key += tf(opts.incudeNodes);
      key += tf(opts.includeEdges);
      key += tf(opts.includeLabels);
      key += tf(opts.includeMainLabels);
      key += tf(opts.includeSourceLabels);
      key += tf(opts.includeTargetLabels);
      key += tf(opts.includeOverlays);
      return key;
    };

    var getBoundingBoxPosKey = function getBoundingBoxPosKey(ele) {
      if (ele.isEdge()) {
        var p1 = ele.source().position();
        var p2 = ele.target().position();

        var r = function r(x) {
          return Math.round(x);
        };

        return hashIntsArray([r(p1.x), r(p1.y), r(p2.x), r(p2.y)]);
      } else {
        return 0;
      }
    };

    var cachedBoundingBoxImpl = function cachedBoundingBoxImpl(ele, opts) {
      var _p = ele._private;
      var bb;
      var isEdge = ele.isEdge();
      var key = opts == null ? defBbOptsKey : getKey(opts);
      var usingDefOpts = key === defBbOptsKey;
      var currPosKey = getBoundingBoxPosKey(ele);
      var isPosKeySame = _p.bbCachePosKey === currPosKey;
      var useCache = opts.useCache && isPosKeySame;

      var isDirty = function isDirty(ele) {
        return ele._private.bbCache == null || ele._private.styleDirty;
      };

      var needRecalc = !useCache || isDirty(ele) || isEdge && isDirty(ele.source()) || isDirty(ele.target());

      if (needRecalc) {
        if (!isPosKeySame) {
          ele.recalculateRenderedStyle(useCache);
        }

        bb = boundingBoxImpl(ele, defBbOpts);
        _p.bbCache = bb;
        _p.bbCachePosKey = currPosKey;
      } else {
        bb = _p.bbCache;
      } // not using def opts => need to build up bb from combination of sub bbs


      if (!usingDefOpts) {
        var isNode = ele.isNode();
        bb = makeBoundingBox();

        if (opts.includeNodes && isNode || opts.includeEdges && !isNode) {
          if (opts.includeOverlays) {
            updateBoundsFromBox(bb, _p.overlayBounds);
          } else {
            updateBoundsFromBox(bb, _p.bodyBounds);
          }
        }

        if (opts.includeLabels) {
          if (opts.includeMainLabels && (!isEdge || opts.includeSourceLabels && opts.includeTargetLabels)) {
            updateBoundsFromBox(bb, _p.labelBounds.all);
          } else {
            if (opts.includeMainLabels) {
              updateBoundsFromBox(bb, _p.labelBounds.mainRot);
            }

            if (opts.includeSourceLabels) {
              updateBoundsFromBox(bb, _p.labelBounds.sourceRot);
            }

            if (opts.includeTargetLabels) {
              updateBoundsFromBox(bb, _p.labelBounds.targetRot);
            }
          }
        }

        bb.w = bb.x2 - bb.x1;
        bb.h = bb.y2 - bb.y1;
      }

      return bb;
    };

    var defBbOpts = {
      includeNodes: true,
      includeEdges: true,
      includeLabels: true,
      includeMainLabels: true,
      includeSourceLabels: true,
      includeTargetLabels: true,
      includeOverlays: true,
      useCache: true
    };
    var defBbOptsKey = getKey(defBbOpts);
    var filledBbOpts = defaults(defBbOpts);

    elesfn$k.boundingBox = function (options) {
      var bounds; // the main usecase is ele.boundingBox() for a single element with no/def options
      // specified s.t. the cache is used, so check for this case to make it faster by
      // avoiding the overhead of the rest of the function

      if (this.length === 1 && this[0]._private.bbCache != null && !this[0]._private.styleDirty && (options === undefined || options.useCache === undefined || options.useCache === true)) {
        if (options === undefined) {
          options = defBbOpts;
        } else {
          options = filledBbOpts(options);
        }

        bounds = cachedBoundingBoxImpl(this[0], options);
      } else {
        bounds = makeBoundingBox();
        options = options || defBbOpts;
        var opts = filledBbOpts(options);
        var eles = this;
        var cy = eles.cy();
        var styleEnabled = cy.styleEnabled();

        if (styleEnabled) {
          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var _p = ele._private;
            var currPosKey = getBoundingBoxPosKey(ele);
            var isPosKeySame = _p.bbCachePosKey === currPosKey;
            var useCache = opts.useCache && isPosKeySame && !_p.styleDirty;
            ele.recalculateRenderedStyle(useCache);
          }
        }

        this.updateCompoundBounds(!options.useCache);

        for (var _i = 0; _i < eles.length; _i++) {
          var _ele = eles[_i];
          updateBoundsFromBox(bounds, cachedBoundingBoxImpl(_ele, opts));
        }
      }

      bounds.x1 = noninf(bounds.x1);
      bounds.y1 = noninf(bounds.y1);
      bounds.x2 = noninf(bounds.x2);
      bounds.y2 = noninf(bounds.y2);
      bounds.w = noninf(bounds.x2 - bounds.x1);
      bounds.h = noninf(bounds.y2 - bounds.y1);
      return bounds;
    };

    elesfn$k.dirtyBoundingBoxCache = function () {
      for (var i = 0; i < this.length; i++) {
        var _p = this[i]._private;
        _p.bbCache = null;
        _p.bbCachePosKey = null;
        _p.bodyBounds = null;
        _p.overlayBounds = null;
        _p.labelBounds.all = null;
        _p.labelBounds.source = null;
        _p.labelBounds.target = null;
        _p.labelBounds.main = null;
        _p.labelBounds.sourceRot = null;
        _p.labelBounds.targetRot = null;
        _p.labelBounds.mainRot = null;
        _p.arrowBounds.source = null;
        _p.arrowBounds.target = null;
        _p.arrowBounds['mid-source'] = null;
        _p.arrowBounds['mid-target'] = null;
      }

      this.emitAndNotify('bounds');
      return this;
    }; // private helper to get bounding box for custom node positions
    // - good for perf in certain cases but currently requires dirtying the rendered style
    // - would be better to not modify the nodes but the nodes are read directly everywhere in the renderer...
    // - try to use for only things like discrete layouts where the node position would change anyway


    elesfn$k.boundingBoxAt = function (fn) {
      var nodes = this.nodes();
      var cy = this.cy();
      var hasCompoundNodes = cy.hasCompoundNodes();
      var parents = cy.collection();

      if (hasCompoundNodes) {
        parents = nodes.filter(function (node) {
          return node.isParent();
        });
        nodes = nodes.not(parents);
      }

      if (plainObject(fn)) {
        var obj = fn;

        fn = function fn() {
          return obj;
        };
      }

      var storeOldPos = function storeOldPos(node, i) {
        return node._private.bbAtOldPos = fn(node, i);
      };

      var getOldPos = function getOldPos(node) {
        return node._private.bbAtOldPos;
      };

      cy.startBatch();
      nodes.forEach(storeOldPos).silentPositions(fn);

      if (hasCompoundNodes) {
        parents.dirtyCompoundBoundsCache();
        parents.dirtyBoundingBoxCache();
        parents.updateCompoundBounds(true); // force update b/c we're inside a batch cycle
      }

      var bb = copyBoundingBox(this.boundingBox({
        useCache: false
      }));
      nodes.silentPositions(getOldPos);

      if (hasCompoundNodes) {
        parents.dirtyCompoundBoundsCache();
        parents.dirtyBoundingBoxCache();
        parents.updateCompoundBounds(true); // force update b/c we're inside a batch cycle
      }

      cy.endBatch();
      return bb;
    };

    fn$3.boundingbox = fn$3.bb = fn$3.boundingBox;
    fn$3.renderedBoundingbox = fn$3.renderedBoundingBox;
    var bounds = elesfn$k;

    var fn$4, elesfn$l;
    fn$4 = elesfn$l = {};

    var defineDimFns = function defineDimFns(opts) {
      opts.uppercaseName = capitalize(opts.name);
      opts.autoName = 'auto' + opts.uppercaseName;
      opts.labelName = 'label' + opts.uppercaseName;
      opts.outerName = 'outer' + opts.uppercaseName;
      opts.uppercaseOuterName = capitalize(opts.outerName);

      fn$4[opts.name] = function dimImpl() {
        var ele = this[0];
        var _p = ele._private;
        var cy = _p.cy;
        var styleEnabled = cy._private.styleEnabled;

        if (ele) {
          if (styleEnabled) {
            if (ele.isParent()) {
              ele.updateCompoundBounds();
              return _p[opts.autoName] || 0;
            }

            var d = ele.pstyle(opts.name);

            switch (d.strValue) {
              case 'label':
                ele.recalculateRenderedStyle();
                return _p.rstyle[opts.labelName] || 0;

              default:
                return d.pfValue;
            }
          } else {
            return 1;
          }
        }
      };

      fn$4['outer' + opts.uppercaseName] = function outerDimImpl() {
        var ele = this[0];
        var _p = ele._private;
        var cy = _p.cy;
        var styleEnabled = cy._private.styleEnabled;

        if (ele) {
          if (styleEnabled) {
            var dim = ele[opts.name]();
            var border = ele.pstyle('border-width').pfValue; // n.b. 1/2 each side

            var padding = 2 * ele.padding();
            return dim + border + padding;
          } else {
            return 1;
          }
        }
      };

      fn$4['rendered' + opts.uppercaseName] = function renderedDimImpl() {
        var ele = this[0];

        if (ele) {
          var d = ele[opts.name]();
          return d * this.cy().zoom();
        }
      };

      fn$4['rendered' + opts.uppercaseOuterName] = function renderedOuterDimImpl() {
        var ele = this[0];

        if (ele) {
          var od = ele[opts.outerName]();
          return od * this.cy().zoom();
        }
      };
    };

    defineDimFns({
      name: 'width'
    });
    defineDimFns({
      name: 'height'
    });

    elesfn$l.padding = function () {
      var ele = this[0];
      var _p = ele._private;

      if (ele.isParent()) {
        ele.updateCompoundBounds();

        if (_p.autoPadding !== undefined) {
          return _p.autoPadding;
        } else {
          return ele.pstyle('padding').pfValue;
        }
      } else {
        return ele.pstyle('padding').pfValue;
      }
    };

    elesfn$l.paddedHeight = function () {
      var ele = this[0];
      return ele.height() + 2 * ele.padding();
    };

    elesfn$l.paddedWidth = function () {
      var ele = this[0];
      return ele.width() + 2 * ele.padding();
    };

    var widthHeight = elesfn$l;

    var ifEdge = function ifEdge(ele, getValue) {
      if (ele.isEdge()) {
        return getValue(ele);
      }
    };

    var ifEdgeRenderedPosition = function ifEdgeRenderedPosition(ele, getPoint) {
      if (ele.isEdge()) {
        var cy = ele.cy();
        return modelToRenderedPosition(getPoint(ele), cy.zoom(), cy.pan());
      }
    };

    var ifEdgeRenderedPositions = function ifEdgeRenderedPositions(ele, getPoints) {
      if (ele.isEdge()) {
        var cy = ele.cy();
        var pan = cy.pan();
        var zoom = cy.zoom();
        return getPoints(ele).map(function (p) {
          return modelToRenderedPosition(p, zoom, pan);
        });
      }
    };

    var controlPoints = function controlPoints(ele) {
      return ele.renderer().getControlPoints(ele);
    };

    var segmentPoints = function segmentPoints(ele) {
      return ele.renderer().getSegmentPoints(ele);
    };

    var sourceEndpoint = function sourceEndpoint(ele) {
      return ele.renderer().getSourceEndpoint(ele);
    };

    var targetEndpoint = function targetEndpoint(ele) {
      return ele.renderer().getTargetEndpoint(ele);
    };

    var midpoint = function midpoint(ele) {
      return ele.renderer().getEdgeMidpoint(ele);
    };

    var pts = {
      controlPoints: {
        get: controlPoints,
        mult: true
      },
      segmentPoints: {
        get: segmentPoints,
        mult: true
      },
      sourceEndpoint: {
        get: sourceEndpoint
      },
      targetEndpoint: {
        get: targetEndpoint
      },
      midpoint: {
        get: midpoint
      }
    };

    var renderedName = function renderedName(name) {
      return 'rendered' + name[0].toUpperCase() + name.substr(1);
    };

    var edgePoints = Object.keys(pts).reduce(function (obj, name) {
      var spec = pts[name];
      var rName = renderedName(name);

      obj[name] = function () {
        return ifEdge(this, spec.get);
      };

      if (spec.mult) {
        obj[rName] = function () {
          return ifEdgeRenderedPositions(this, spec.get);
        };
      } else {
        obj[rName] = function () {
          return ifEdgeRenderedPosition(this, spec.get);
        };
      }

      return obj;
    }, {});

    var dimensions = extend({}, position, bounds, widthHeight, edgePoints);

    /*!
    Event object based on jQuery events, MIT license

    https://jquery.org/license/
    https://tldrlegal.com/license/mit-license
    https://github.com/jquery/jquery/blob/master/src/event.js
    */
    var Event = function Event(src, props) {
      this.recycle(src, props);
    };

    function returnFalse() {
      return false;
    }

    function returnTrue() {
      return true;
    } // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


    Event.prototype = {
      instanceString: function instanceString() {
        return 'event';
      },
      recycle: function recycle(src, props) {
        this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;

        if (src != null && src.preventDefault) {
          // Browser Event object
          this.type = src.type; // Events bubbling up the document may have been marked as prevented
          // by a handler lower down the tree; reflect the correct value.

          this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;
        } else if (src != null && src.type) {
          // Plain object containing all event details
          props = src;
        } else {
          // Event string
          this.type = src;
        } // Put explicitly provided properties onto the event object


        if (props != null) {
          // more efficient to manually copy fields we use
          this.originalEvent = props.originalEvent;
          this.type = props.type != null ? props.type : this.type;
          this.cy = props.cy;
          this.target = props.target;
          this.position = props.position;
          this.renderedPosition = props.renderedPosition;
          this.namespace = props.namespace;
          this.layout = props.layout;
        }

        if (this.cy != null && this.position != null && this.renderedPosition == null) {
          // create a rendered position based on the passed position
          var pos = this.position;
          var zoom = this.cy.zoom();
          var pan = this.cy.pan();
          this.renderedPosition = {
            x: pos.x * zoom + pan.x,
            y: pos.y * zoom + pan.y
          };
        } // Create a timestamp if incoming event doesn't have one


        this.timeStamp = src && src.timeStamp || Date.now();
      },
      preventDefault: function preventDefault() {
        this.isDefaultPrevented = returnTrue;
        var e = this.originalEvent;

        if (!e) {
          return;
        } // if preventDefault exists run it on the original event


        if (e.preventDefault) {
          e.preventDefault();
        }
      },
      stopPropagation: function stopPropagation() {
        this.isPropagationStopped = returnTrue;
        var e = this.originalEvent;

        if (!e) {
          return;
        } // if stopPropagation exists run it on the original event


        if (e.stopPropagation) {
          e.stopPropagation();
        }
      },
      stopImmediatePropagation: function stopImmediatePropagation() {
        this.isImmediatePropagationStopped = returnTrue;
        this.stopPropagation();
      },
      isDefaultPrevented: returnFalse,
      isPropagationStopped: returnFalse,
      isImmediatePropagationStopped: returnFalse
    };

    var eventRegex = /^([^.]+)(\.(?:[^.]+))?$/; // regex for matching event strings (e.g. "click.namespace")

    var universalNamespace = '.*'; // matches as if no namespace specified and prevents users from unbinding accidentally

    var defaults$8 = {
      qualifierCompare: function qualifierCompare(q1, q2) {
        return q1 === q2;
      },
      eventMatches: function eventMatches()
      /*context, listener, eventObj*/
      {
        return true;
      },
      addEventFields: function addEventFields()
      /*context, evt*/
      {},
      callbackContext: function callbackContext(context
      /*, listener, eventObj*/
      ) {
        return context;
      },
      beforeEmit: function beforeEmit()
      /* context, listener, eventObj */
      {},
      afterEmit: function afterEmit()
      /* context, listener, eventObj */
      {},
      bubble: function bubble()
      /*context*/
      {
        return false;
      },
      parent: function parent()
      /*context*/
      {
        return null;
      },
      context: null
    };
    var defaultsKeys = Object.keys(defaults$8);
    var emptyOpts = {};

    function Emitter() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emptyOpts;
      var context = arguments.length > 1 ? arguments[1] : undefined;

      // micro-optimisation vs Object.assign() -- reduces Element instantiation time
      for (var i = 0; i < defaultsKeys.length; i++) {
        var key = defaultsKeys[i];
        this[key] = opts[key] || defaults$8[key];
      }

      this.context = context || this.context;
      this.listeners = [];
      this.emitting = 0;
    }

    var p = Emitter.prototype;

    var forEachEvent = function forEachEvent(self, handler, events, qualifier, callback, conf, confOverrides) {
      if (fn(qualifier)) {
        callback = qualifier;
        qualifier = null;
      }

      if (confOverrides) {
        if (conf == null) {
          conf = confOverrides;
        } else {
          conf = extend({}, conf, confOverrides);
        }
      }

      var eventList = array(events) ? events : events.split(/\s+/);

      for (var i = 0; i < eventList.length; i++) {
        var evt = eventList[i];

        if (emptyString(evt)) {
          continue;
        }

        var match = evt.match(eventRegex); // type[.namespace]

        if (match) {
          var type = match[1];
          var namespace = match[2] ? match[2] : null;
          var ret = handler(self, evt, type, namespace, qualifier, callback, conf);

          if (ret === false) {
            break;
          } // allow exiting early

        }
      }
    };

    var makeEventObj = function makeEventObj(self, obj) {
      self.addEventFields(self.context, obj);
      return new Event(obj.type, obj);
    };

    var forEachEventObj = function forEachEventObj(self, handler, events) {
      if (event(events)) {
        handler(self, events);
        return;
      } else if (plainObject(events)) {
        handler(self, makeEventObj(self, events));
        return;
      }

      var eventList = array(events) ? events : events.split(/\s+/);

      for (var i = 0; i < eventList.length; i++) {
        var evt = eventList[i];

        if (emptyString(evt)) {
          continue;
        }

        var match = evt.match(eventRegex); // type[.namespace]

        if (match) {
          var type = match[1];
          var namespace = match[2] ? match[2] : null;
          var eventObj = makeEventObj(self, {
            type: type,
            namespace: namespace,
            target: self.context
          });
          handler(self, eventObj);
        }
      }
    };

    p.on = p.addListener = function (events, qualifier, callback, conf, confOverrides) {
      forEachEvent(this, function (self, event, type, namespace, qualifier, callback, conf) {
        if (fn(callback)) {
          self.listeners.push({
            event: event,
            // full event string
            callback: callback,
            // callback to run
            type: type,
            // the event type (e.g. 'click')
            namespace: namespace,
            // the event namespace (e.g. ".foo")
            qualifier: qualifier,
            // a restriction on whether to match this emitter
            conf: conf // additional configuration

          });
        }
      }, events, qualifier, callback, conf, confOverrides);
      return this;
    };

    p.one = function (events, qualifier, callback, conf) {
      return this.on(events, qualifier, callback, conf, {
        one: true
      });
    };

    p.removeListener = p.off = function (events, qualifier, callback, conf) {
      var _this = this;

      if (this.emitting !== 0) {
        this.listeners = copyArray(this.listeners);
      }

      var listeners = this.listeners;

      var _loop = function _loop(i) {
        var listener = listeners[i];
        forEachEvent(_this, function (self, event, type, namespace, qualifier, callback
        /*, conf*/
        ) {
          if ((listener.type === type || events === '*') && (!namespace && listener.namespace !== '.*' || listener.namespace === namespace) && (!qualifier || self.qualifierCompare(listener.qualifier, qualifier)) && (!callback || listener.callback === callback)) {
            listeners.splice(i, 1);
            return false;
          }
        }, events, qualifier, callback, conf);
      };

      for (var i = listeners.length - 1; i >= 0; i--) {
        _loop(i);
      }

      return this;
    };

    p.removeAllListeners = function () {
      return this.removeListener('*');
    };

    p.emit = p.trigger = function (events, extraParams, manualCallback) {
      var listeners = this.listeners;
      var numListenersBeforeEmit = listeners.length;
      this.emitting++;

      if (!array(extraParams)) {
        extraParams = [extraParams];
      }

      forEachEventObj(this, function (self, eventObj) {
        if (manualCallback != null) {
          listeners = [{
            event: eventObj.event,
            type: eventObj.type,
            namespace: eventObj.namespace,
            callback: manualCallback
          }];
          numListenersBeforeEmit = listeners.length;
        }

        var _loop2 = function _loop2(i) {
          var listener = listeners[i];

          if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self.eventMatches(self.context, listener, eventObj)) {
            var args = [eventObj];

            if (extraParams != null) {
              push(args, extraParams);
            }

            self.beforeEmit(self.context, listener, eventObj);

            if (listener.conf && listener.conf.one) {
              self.listeners = self.listeners.filter(function (l) {
                return l !== listener;
              });
            }

            var context = self.callbackContext(self.context, listener, eventObj);
            var ret = listener.callback.apply(context, args);
            self.afterEmit(self.context, listener, eventObj);

            if (ret === false) {
              eventObj.stopPropagation();
              eventObj.preventDefault();
            }
          } // if listener matches

        };

        for (var i = 0; i < numListenersBeforeEmit; i++) {
          _loop2(i);
        } // for listener


        if (self.bubble(self.context) && !eventObj.isPropagationStopped()) {
          self.parent(self.context).emit(eventObj, extraParams);
        }
      }, events);
      this.emitting--;
      return this;
    };

    var emitterOptions = {
      qualifierCompare: function qualifierCompare(selector1, selector2) {
        if (selector1 == null || selector2 == null) {
          return selector1 == null && selector2 == null;
        } else {
          return selector1.sameText(selector2);
        }
      },
      eventMatches: function eventMatches(ele, listener, eventObj) {
        var selector = listener.qualifier;

        if (selector != null) {
          return ele !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
        }

        return true;
      },
      addEventFields: function addEventFields(ele, evt) {
        evt.cy = ele.cy();
        evt.target = ele;
      },
      callbackContext: function callbackContext(ele, listener, eventObj) {
        return listener.qualifier != null ? eventObj.target : ele;
      },
      beforeEmit: function beforeEmit(context, listener
      /*, eventObj*/
      ) {
        if (listener.conf && listener.conf.once) {
          listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);
        }
      },
      bubble: function bubble() {
        return true;
      },
      parent: function parent(ele) {
        return ele.isChild() ? ele.parent() : ele.cy();
      }
    };

    var argSelector = function argSelector(arg) {
      if (string(arg)) {
        return new Selector(arg);
      } else {
        return arg;
      }
    };

    var elesfn$m = {
      createEmitter: function createEmitter() {
        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var _p = ele._private;

          if (!_p.emitter) {
            _p.emitter = new Emitter(emitterOptions, ele);
          }
        }

        return this;
      },
      emitter: function emitter() {
        return this._private.emitter;
      },
      on: function on(events, selector, callback) {
        var argSel = argSelector(selector);

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          ele.emitter().on(events, argSel, callback);
        }

        return this;
      },
      removeListener: function removeListener(events, selector, callback) {
        var argSel = argSelector(selector);

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          ele.emitter().removeListener(events, argSel, callback);
        }

        return this;
      },
      removeAllListeners: function removeAllListeners() {
        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          ele.emitter().removeAllListeners();
        }

        return this;
      },
      one: function one(events, selector, callback) {
        var argSel = argSelector(selector);

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          ele.emitter().one(events, argSel, callback);
        }

        return this;
      },
      once: function once(events, selector, callback) {
        var argSel = argSelector(selector);

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          ele.emitter().on(events, argSel, callback, {
            once: true,
            onceCollection: this
          });
        }
      },
      emit: function emit(events, extraParams) {
        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          ele.emitter().emit(events, extraParams);
        }

        return this;
      },
      emitAndNotify: function emitAndNotify(event, extraParams) {
        // for internal use only
        if (this.length === 0) {
          return;
        } // empty collections don't need to notify anything
        // notify renderer


        this.cy().notify(event, this);
        this.emit(event, extraParams);
        return this;
      }
    };
    define$3.eventAliasesOn(elesfn$m);

    var elesfn$n = {
      nodes: function nodes(selector) {
        return this.filter(function (ele) {
          return ele.isNode();
        }).filter(selector);
      },
      edges: function edges(selector) {
        return this.filter(function (ele) {
          return ele.isEdge();
        }).filter(selector);
      },
      // internal helper to get nodes and edges as separate collections with single iteration over elements
      byGroup: function byGroup() {
        var nodes = this.spawn();
        var edges = this.spawn();

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];

          if (ele.isNode()) {
            nodes.push(ele);
          } else {
            edges.push(ele);
          }
        }

        return {
          nodes: nodes,
          edges: edges
        };
      },
      filter: function filter(_filter, thisArg) {
        if (_filter === undefined) {
          // check this first b/c it's the most common/performant case
          return this;
        } else if (string(_filter) || elementOrCollection(_filter)) {
          return new Selector(_filter).filter(this);
        } else if (fn(_filter)) {
          var filterEles = this.spawn();
          var eles = this;

          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var include = thisArg ? _filter.apply(thisArg, [ele, i, eles]) : _filter(ele, i, eles);

            if (include) {
              filterEles.push(ele);
            }
          }

          return filterEles;
        }

        return this.spawn(); // if not handled by above, give 'em an empty collection
      },
      not: function not(toRemove) {
        if (!toRemove) {
          return this;
        } else {
          if (string(toRemove)) {
            toRemove = this.filter(toRemove);
          }

          var elements = this.spawn();

          for (var i = 0; i < this.length; i++) {
            var element = this[i];
            var remove = toRemove.has(element);

            if (!remove) {
              elements.push(element);
            }
          }

          return elements;
        }
      },
      absoluteComplement: function absoluteComplement() {
        var cy = this.cy();
        return cy.mutableElements().not(this);
      },
      intersect: function intersect(other) {
        // if a selector is specified, then filter by it instead
        if (string(other)) {
          var selector = other;
          return this.filter(selector);
        }

        var elements = this.spawn();
        var col1 = this;
        var col2 = other;
        var col1Smaller = this.length < other.length;
        var colS = col1Smaller ? col1 : col2;
        var colL = col1Smaller ? col2 : col1;

        for (var i = 0; i < colS.length; i++) {
          var ele = colS[i];

          if (colL.has(ele)) {
            elements.push(ele);
          }
        }

        return elements;
      },
      xor: function xor(other) {
        var cy = this._private.cy;

        if (string(other)) {
          other = cy.$(other);
        }

        var elements = this.spawn();
        var col1 = this;
        var col2 = other;

        var add = function add(col, other) {
          for (var i = 0; i < col.length; i++) {
            var ele = col[i];
            var id = ele._private.data.id;
            var inOther = other.hasElementWithId(id);

            if (!inOther) {
              elements.push(ele);
            }
          }
        };

        add(col1, col2);
        add(col2, col1);
        return elements;
      },
      diff: function diff(other) {
        var cy = this._private.cy;

        if (string(other)) {
          other = cy.$(other);
        }

        var left = this.spawn();
        var right = this.spawn();
        var both = this.spawn();
        var col1 = this;
        var col2 = other;

        var add = function add(col, other, retEles) {
          for (var i = 0; i < col.length; i++) {
            var ele = col[i];
            var id = ele._private.data.id;
            var inOther = other.hasElementWithId(id);

            if (inOther) {
              both.merge(ele);
            } else {
              retEles.push(ele);
            }
          }
        };

        add(col1, col2, left);
        add(col2, col1, right);
        return {
          left: left,
          right: right,
          both: both
        };
      },
      add: function add(toAdd) {
        var cy = this._private.cy;

        if (!toAdd) {
          return this;
        }

        if (string(toAdd)) {
          var selector = toAdd;
          toAdd = cy.mutableElements().filter(selector);
        }

        var elements = this.spawnSelf();

        for (var i = 0; i < toAdd.length; i++) {
          var ele = toAdd[i];
          var add = !this.has(ele);

          if (add) {
            elements.push(ele);
          }
        }

        return elements;
      },
      // in place merge on calling collection
      merge: function merge(toAdd) {
        var _p = this._private;
        var cy = _p.cy;

        if (!toAdd) {
          return this;
        }

        if (toAdd && string(toAdd)) {
          var selector = toAdd;
          toAdd = cy.mutableElements().filter(selector);
        }

        var map = _p.map;

        for (var i = 0; i < toAdd.length; i++) {
          var toAddEle = toAdd[i];
          var id = toAddEle._private.data.id;
          var add = !map.has(id);

          if (add) {
            var index = this.length++;
            this[index] = toAddEle;
            map.set(id, {
              ele: toAddEle,
              index: index
            });
          }
        }

        return this; // chaining
      },
      unmergeAt: function unmergeAt(i) {
        var ele = this[i];
        var id = ele.id();
        var _p = this._private;
        var map = _p.map; // remove ele

        this[i] = undefined;
        map["delete"](id);
        var unmergedLastEle = i === this.length - 1; // replace empty spot with last ele in collection

        if (this.length > 1 && !unmergedLastEle) {
          var lastEleI = this.length - 1;
          var lastEle = this[lastEleI];
          var lastEleId = lastEle._private.data.id;
          this[lastEleI] = undefined;
          this[i] = lastEle;
          map.set(lastEleId, {
            ele: lastEle,
            index: i
          });
        } // the collection is now 1 ele smaller


        this.length--;
        return this;
      },
      // remove single ele in place in calling collection
      unmergeOne: function unmergeOne(ele) {
        ele = ele[0];
        var _p = this._private;
        var id = ele._private.data.id;
        var map = _p.map;
        var entry = map.get(id);

        if (!entry) {
          return this; // no need to remove
        }

        var i = entry.index;
        this.unmergeAt(i);
        return this;
      },
      // remove eles in place on calling collection
      unmerge: function unmerge(toRemove) {
        var cy = this._private.cy;

        if (!toRemove) {
          return this;
        }

        if (toRemove && string(toRemove)) {
          var selector = toRemove;
          toRemove = cy.mutableElements().filter(selector);
        }

        for (var i = 0; i < toRemove.length; i++) {
          this.unmergeOne(toRemove[i]);
        }

        return this; // chaining
      },
      unmergeBy: function unmergeBy(toRmFn) {
        for (var i = this.length - 1; i >= 0; i--) {
          var ele = this[i];

          if (toRmFn(ele)) {
            this.unmergeAt(i);
          }
        }

        return this;
      },
      map: function map(mapFn, thisArg) {
        var arr = [];
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var ret = thisArg ? mapFn.apply(thisArg, [ele, i, eles]) : mapFn(ele, i, eles);
          arr.push(ret);
        }

        return arr;
      },
      reduce: function reduce(fn, initialValue) {
        var val = initialValue;
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          val = fn(val, eles[i], i, eles);
        }

        return val;
      },
      max: function max(valFn, thisArg) {
        var max = -Infinity;
        var maxEle;
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

          if (val > max) {
            max = val;
            maxEle = ele;
          }
        }

        return {
          value: max,
          ele: maxEle
        };
      },
      min: function min(valFn, thisArg) {
        var min = Infinity;
        var minEle;
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

          if (val < min) {
            min = val;
            minEle = ele;
          }
        }

        return {
          value: min,
          ele: minEle
        };
      }
    }; // aliases

    var fn$5 = elesfn$n;
    fn$5['u'] = fn$5['|'] = fn$5['+'] = fn$5.union = fn$5.or = fn$5.add;
    fn$5['\\'] = fn$5['!'] = fn$5['-'] = fn$5.difference = fn$5.relativeComplement = fn$5.subtract = fn$5.not;
    fn$5['n'] = fn$5['&'] = fn$5['.'] = fn$5.and = fn$5.intersection = fn$5.intersect;
    fn$5['^'] = fn$5['(+)'] = fn$5['(-)'] = fn$5.symmetricDifference = fn$5.symdiff = fn$5.xor;
    fn$5.fnFilter = fn$5.filterFn = fn$5.stdFilter = fn$5.filter;
    fn$5.complement = fn$5.abscomp = fn$5.absoluteComplement;

    var elesfn$o = {
      isNode: function isNode() {
        return this.group() === 'nodes';
      },
      isEdge: function isEdge() {
        return this.group() === 'edges';
      },
      isLoop: function isLoop() {
        return this.isEdge() && this.source()[0] === this.target()[0];
      },
      isSimple: function isSimple() {
        return this.isEdge() && this.source()[0] !== this.target()[0];
      },
      group: function group() {
        var ele = this[0];

        if (ele) {
          return ele._private.group;
        }
      }
    };

    /**
     *  Elements are drawn in a specific order based on compound depth (low to high), the element type (nodes above edges),
     *  and z-index (low to high).  These styles affect how this applies:
     *
     *  z-compound-depth: May be `bottom | orphan | auto | top`.  The first drawn is `bottom`, then `orphan` which is the
     *      same depth as the root of the compound graph, followed by the default value `auto` which draws in order from
     *      root to leaves of the compound graph.  The last drawn is `top`.
     *  z-index-compare: May be `auto | manual`.  The default value is `auto` which always draws edges under nodes.
     *      `manual` ignores this convention and draws based on the `z-index` value setting.
     *  z-index: An integer value that affects the relative draw order of elements.  In general, an element with a higher
     *      `z-index` will be drawn on top of an element with a lower `z-index`.
     */

    var zIndexSort = function zIndexSort(a, b) {
      var cy = a.cy();
      var hasCompoundNodes = cy.hasCompoundNodes();

      function getDepth(ele) {
        var style = ele.pstyle('z-compound-depth');

        if (style.value === 'auto') {
          return hasCompoundNodes ? ele.zDepth() : 0;
        } else if (style.value === 'bottom') {
          return -1;
        } else if (style.value === 'top') {
          return MAX_INT;
        } // 'orphan'


        return 0;
      }

      var depthDiff = getDepth(a) - getDepth(b);

      if (depthDiff !== 0) {
        return depthDiff;
      }

      function getEleDepth(ele) {
        var style = ele.pstyle('z-index-compare');

        if (style.value === 'auto') {
          return ele.isNode() ? 1 : 0;
        } // 'manual'


        return 0;
      }

      var eleDiff = getEleDepth(a) - getEleDepth(b);

      if (eleDiff !== 0) {
        return eleDiff;
      }

      var zDiff = a.pstyle('z-index').value - b.pstyle('z-index').value;

      if (zDiff !== 0) {
        return zDiff;
      } // compare indices in the core (order added to graph w/ last on top)


      return a.poolIndex() - b.poolIndex();
    };

    var elesfn$p = {
      forEach: function forEach(fn$1, thisArg) {
        if (fn(fn$1)) {
          var N = this.length;

          for (var i = 0; i < N; i++) {
            var ele = this[i];
            var ret = thisArg ? fn$1.apply(thisArg, [ele, i, this]) : fn$1(ele, i, this);

            if (ret === false) {
              break;
            } // exit each early on return false

          }
        }

        return this;
      },
      toArray: function toArray() {
        var array = [];

        for (var i = 0; i < this.length; i++) {
          array.push(this[i]);
        }

        return array;
      },
      slice: function slice(start, end) {
        var array = [];
        var thisSize = this.length;

        if (end == null) {
          end = thisSize;
        }

        if (start == null) {
          start = 0;
        }

        if (start < 0) {
          start = thisSize + start;
        }

        if (end < 0) {
          end = thisSize + end;
        }

        for (var i = start; i >= 0 && i < end && i < thisSize; i++) {
          array.push(this[i]);
        }

        return this.spawn(array);
      },
      size: function size() {
        return this.length;
      },
      eq: function eq(i) {
        return this[i] || this.spawn();
      },
      first: function first() {
        return this[0] || this.spawn();
      },
      last: function last() {
        return this[this.length - 1] || this.spawn();
      },
      empty: function empty() {
        return this.length === 0;
      },
      nonempty: function nonempty() {
        return !this.empty();
      },
      sort: function sort(sortFn) {
        if (!fn(sortFn)) {
          return this;
        }

        var sorted = this.toArray().sort(sortFn);
        return this.spawn(sorted);
      },
      sortByZIndex: function sortByZIndex() {
        return this.sort(zIndexSort);
      },
      zDepth: function zDepth() {
        var ele = this[0];

        if (!ele) {
          return undefined;
        } // let cy = ele.cy();


        var _p = ele._private;
        var group = _p.group;

        if (group === 'nodes') {
          var depth = _p.data.parent ? ele.parents().size() : 0;

          if (!ele.isParent()) {
            return MAX_INT - 1; // childless nodes always on top
          }

          return depth;
        } else {
          var src = _p.source;
          var tgt = _p.target;
          var srcDepth = src.zDepth();
          var tgtDepth = tgt.zDepth();
          return Math.max(srcDepth, tgtDepth, 0); // depth of deepest parent
        }
      }
    };
    elesfn$p.each = elesfn$p.forEach;

    var defineSymbolIterator = function defineSymbolIterator() {
      var typeofUndef =  "undefined" ;
      var isIteratorSupported = (typeof Symbol === "undefined" ? "undefined" : _typeof(Symbol)) != typeofUndef && _typeof(Symbol.iterator) != typeofUndef; // eslint-disable-line no-undef

      if (isIteratorSupported) {
        elesfn$p[Symbol.iterator] = function () {
          var _this = this;

          // eslint-disable-line no-undef
          var entry = {
            value: undefined,
            done: false
          };
          var i = 0;
          var length = this.length;
          return _defineProperty({
            next: function next() {
              if (i < length) {
                entry.value = _this[i++];
              } else {
                entry.value = undefined;
                entry.done = true;
              }

              return entry;
            }
          }, Symbol.iterator, function () {
            // eslint-disable-line no-undef
            return this;
          });
        };
      }
    };

    defineSymbolIterator();

    var getLayoutDimensionOptions = defaults({
      nodeDimensionsIncludeLabels: false
    });
    var elesfn$q = {
      // Calculates and returns node dimensions { x, y } based on options given
      layoutDimensions: function layoutDimensions(options) {
        options = getLayoutDimensionOptions(options);
        var dims;

        if (!this.takesUpSpace()) {
          dims = {
            w: 0,
            h: 0
          };
        } else if (options.nodeDimensionsIncludeLabels) {
          var bbDim = this.boundingBox();
          dims = {
            w: bbDim.w,
            h: bbDim.h
          };
        } else {
          dims = {
            w: this.outerWidth(),
            h: this.outerHeight()
          };
        } // sanitise the dimensions for external layouts (avoid division by zero)


        if (dims.w === 0 || dims.h === 0) {
          dims.w = dims.h = 1;
        }

        return dims;
      },
      // using standard layout options, apply position function (w/ or w/o animation)
      layoutPositions: function layoutPositions(layout, options, fn) {
        var nodes = this.nodes().filter(function (n) {
          return !n.isParent();
        });
        var cy = this.cy();
        var layoutEles = options.eles; // nodes & edges

        var getMemoizeKey = function getMemoizeKey(node) {
          return node.id();
        };

        var fnMem = memoize(fn, getMemoizeKey); // memoized version of position function

        layout.emit({
          type: 'layoutstart',
          layout: layout
        });
        layout.animations = [];

        var calculateSpacing = function calculateSpacing(spacing, nodesBb, pos) {
          var center = {
            x: nodesBb.x1 + nodesBb.w / 2,
            y: nodesBb.y1 + nodesBb.h / 2
          };
          var spacingVector = {
            // scale from center of bounding box (not necessarily 0,0)
            x: (pos.x - center.x) * spacing,
            y: (pos.y - center.y) * spacing
          };
          return {
            x: center.x + spacingVector.x,
            y: center.y + spacingVector.y
          };
        };

        var useSpacingFactor = options.spacingFactor && options.spacingFactor !== 1;

        var spacingBb = function spacingBb() {
          if (!useSpacingFactor) {
            return null;
          }

          var bb = makeBoundingBox();

          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var pos = fnMem(node, i);
            expandBoundingBoxByPoint(bb, pos.x, pos.y);
          }

          return bb;
        };

        var bb = spacingBb();
        var getFinalPos = memoize(function (node, i) {
          var newPos = fnMem(node, i);

          if (useSpacingFactor) {
            var spacing = Math.abs(options.spacingFactor);
            newPos = calculateSpacing(spacing, bb, newPos);
          }

          if (options.transform != null) {
            newPos = options.transform(node, newPos);
          }

          return newPos;
        }, getMemoizeKey);

        if (options.animate) {
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var newPos = getFinalPos(node, i);
            var animateNode = options.animateFilter == null || options.animateFilter(node, i);

            if (animateNode) {
              var ani = node.animation({
                position: newPos,
                duration: options.animationDuration,
                easing: options.animationEasing
              });
              layout.animations.push(ani);
            } else {
              node.position(newPos);
            }
          }

          if (options.fit) {
            var fitAni = cy.animation({
              fit: {
                boundingBox: layoutEles.boundingBoxAt(getFinalPos),
                padding: options.padding
              },
              duration: options.animationDuration,
              easing: options.animationEasing
            });
            layout.animations.push(fitAni);
          } else if (options.zoom !== undefined && options.pan !== undefined) {
            var zoomPanAni = cy.animation({
              zoom: options.zoom,
              pan: options.pan,
              duration: options.animationDuration,
              easing: options.animationEasing
            });
            layout.animations.push(zoomPanAni);
          }

          layout.animations.forEach(function (ani) {
            return ani.play();
          });
          layout.one('layoutready', options.ready);
          layout.emit({
            type: 'layoutready',
            layout: layout
          });
          Promise$1.all(layout.animations.map(function (ani) {
            return ani.promise();
          })).then(function () {
            layout.one('layoutstop', options.stop);
            layout.emit({
              type: 'layoutstop',
              layout: layout
            });
          });
        } else {
          nodes.positions(getFinalPos);

          if (options.fit) {
            cy.fit(options.eles, options.padding);
          }

          if (options.zoom != null) {
            cy.zoom(options.zoom);
          }

          if (options.pan) {
            cy.pan(options.pan);
          }

          layout.one('layoutready', options.ready);
          layout.emit({
            type: 'layoutready',
            layout: layout
          });
          layout.one('layoutstop', options.stop);
          layout.emit({
            type: 'layoutstop',
            layout: layout
          });
        }

        return this; // chaining
      },
      layout: function layout(options) {
        var cy = this.cy();
        return cy.makeLayout(extend({}, options, {
          eles: this
        }));
      }
    }; // aliases:

    elesfn$q.createLayout = elesfn$q.makeLayout = elesfn$q.layout;

    function styleCache(key, fn, ele) {
      var _p = ele._private;
      var cache = _p.styleCache = _p.styleCache || [];
      var val;

      if ((val = cache[key]) != null) {
        return val;
      } else {
        val = cache[key] = fn(ele);
        return val;
      }
    }

    function cacheStyleFunction(key, fn) {
      key = hashString(key);
      return function cachedStyleFunction(ele) {
        return styleCache(key, fn, ele);
      };
    }

    function cachePrototypeStyleFunction(key, fn) {
      key = hashString(key);

      var selfFn = function selfFn(ele) {
        return fn.call(ele);
      };

      return function cachedPrototypeStyleFunction() {
        var ele = this[0];

        if (ele) {
          return styleCache(key, selfFn, ele);
        }
      };
    }

    var elesfn$r = {
      recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {
        var cy = this.cy();
        var renderer = cy.renderer();
        var styleEnabled = cy.styleEnabled();

        if (renderer && styleEnabled) {
          renderer.recalculateRenderedStyle(this, useCache);
        }

        return this;
      },
      dirtyStyleCache: function dirtyStyleCache() {
        var cy = this.cy();

        var dirty = function dirty(ele) {
          return ele._private.styleCache = null;
        };

        if (cy.hasCompoundNodes()) {
          var eles;
          eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
          eles.merge(eles.connectedEdges());
          eles.forEach(dirty);
        } else {
          this.forEach(function (ele) {
            dirty(ele);
            ele.connectedEdges().forEach(dirty);
          });
        }

        return this;
      },
      // fully updates (recalculates) the style for the elements
      updateStyle: function updateStyle(notifyRenderer) {
        var cy = this._private.cy;

        if (!cy.styleEnabled()) {
          return this;
        }

        if (cy.batching()) {
          var bEles = cy._private.batchStyleEles;
          bEles.merge(this);
          return this; // chaining and exit early when batching
        }

        var hasCompounds = cy.hasCompoundNodes();
        var updatedEles = this;
        notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

        if (hasCompounds) {
          // then add everything up and down for compound selector checks
          updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
        } // let changedEles = style.apply( updatedEles );


        var changedEles = updatedEles;

        if (notifyRenderer) {
          changedEles.emitAndNotify('style'); // let renderer know we changed style
        } else {
          changedEles.emit('style'); // just fire the event
        }

        updatedEles.forEach(function (ele) {
          return ele._private.styleDirty = true;
        });
        return this; // chaining
      },
      // private: clears dirty flag and recalculates style
      cleanStyle: function cleanStyle() {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return;
        }

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];

          if (ele._private.styleDirty) {
            // n.b. this flag should be set before apply() to avoid potential infinite recursion
            ele._private.styleDirty = false;
            cy.style().apply(ele);
          }
        }
      },
      // get the internal parsed style object for the specified property
      parsedStyle: function parsedStyle(property) {
        var includeNonDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var ele = this[0];
        var cy = ele.cy();

        if (!cy.styleEnabled()) {
          return;
        }

        if (ele) {
          this.cleanStyle();
          var overriddenStyle = ele._private.style[property];

          if (overriddenStyle != null) {
            return overriddenStyle;
          } else if (includeNonDefault) {
            return cy.style().getDefaultProperty(property);
          } else {
            return null;
          }
        }
      },
      numericStyle: function numericStyle(property) {
        var ele = this[0];

        if (!ele.cy().styleEnabled()) {
          return;
        }

        if (ele) {
          var pstyle = ele.pstyle(property);
          return pstyle.pfValue !== undefined ? pstyle.pfValue : pstyle.value;
        }
      },
      numericStyleUnits: function numericStyleUnits(property) {
        var ele = this[0];

        if (!ele.cy().styleEnabled()) {
          return;
        }

        if (ele) {
          return ele.pstyle(property).units;
        }
      },
      // get the specified css property as a rendered value (i.e. on-screen value)
      // or get the whole rendered style if no property specified (NB doesn't allow setting)
      renderedStyle: function renderedStyle(property) {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return this;
        }

        var ele = this[0];

        if (ele) {
          return cy.style().getRenderedStyle(ele, property);
        }
      },
      // read the calculated css style of the element or override the style (via a bypass)
      style: function style(name, value) {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return this;
        }

        var updateTransitions = false;
        var style = cy.style();

        if (plainObject(name)) {
          // then extend the bypass
          var props = name;
          style.applyBypass(this, props, updateTransitions);
          this.emitAndNotify('style'); // let the renderer know we've updated style
        } else if (string(name)) {
          if (value === undefined) {
            // then get the property from the style
            var ele = this[0];

            if (ele) {
              return style.getStylePropertyValue(ele, name);
            } else {
              // empty collection => can't get any value
              return;
            }
          } else {
            // then set the bypass with the property value
            style.applyBypass(this, name, value, updateTransitions);
            this.emitAndNotify('style'); // let the renderer know we've updated style
          }
        } else if (name === undefined) {
          var _ele = this[0];

          if (_ele) {
            return style.getRawStyle(_ele);
          } else {
            // empty collection => can't get any value
            return;
          }
        }

        return this; // chaining
      },
      removeStyle: function removeStyle(names) {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return this;
        }

        var updateTransitions = false;
        var style = cy.style();
        var eles = this;

        if (names === undefined) {
          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            style.removeAllBypasses(ele, updateTransitions);
          }
        } else {
          names = names.split(/\s+/);

          for (var _i = 0; _i < eles.length; _i++) {
            var _ele2 = eles[_i];
            style.removeBypasses(_ele2, names, updateTransitions);
          }
        }

        this.emitAndNotify('style'); // let the renderer know we've updated style

        return this; // chaining
      },
      show: function show() {
        this.css('display', 'element');
        return this; // chaining
      },
      hide: function hide() {
        this.css('display', 'none');
        return this; // chaining
      },
      effectiveOpacity: function effectiveOpacity() {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return 1;
        }

        var hasCompoundNodes = cy.hasCompoundNodes();
        var ele = this[0];

        if (ele) {
          var _p = ele._private;
          var parentOpacity = ele.pstyle('opacity').value;

          if (!hasCompoundNodes) {
            return parentOpacity;
          }

          var parents = !_p.data.parent ? null : ele.parents();

          if (parents) {
            for (var i = 0; i < parents.length; i++) {
              var parent = parents[i];
              var opacity = parent.pstyle('opacity').value;
              parentOpacity = opacity * parentOpacity;
            }
          }

          return parentOpacity;
        }
      },
      transparent: function transparent() {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return false;
        }

        var ele = this[0];
        var hasCompoundNodes = ele.cy().hasCompoundNodes();

        if (ele) {
          if (!hasCompoundNodes) {
            return ele.pstyle('opacity').value === 0;
          } else {
            return ele.effectiveOpacity() === 0;
          }
        }
      },
      backgrounding: function backgrounding() {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return false;
        }

        var ele = this[0];
        return ele._private.backgrounding ? true : false;
      }
    };

    function checkCompound(ele, parentOk) {
      var _p = ele._private;
      var parents = _p.data.parent ? ele.parents() : null;

      if (parents) {
        for (var i = 0; i < parents.length; i++) {
          var parent = parents[i];

          if (!parentOk(parent)) {
            return false;
          }
        }
      }

      return true;
    }

    function defineDerivedStateFunction(specs) {
      var ok = specs.ok;
      var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;
      var parentOk = specs.parentOk || specs.ok;
      return function () {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return true;
        }

        var ele = this[0];
        var hasCompoundNodes = cy.hasCompoundNodes();

        if (ele) {
          var _p = ele._private;

          if (!ok(ele)) {
            return false;
          }

          if (ele.isNode()) {
            return !hasCompoundNodes || checkCompound(ele, parentOk);
          } else {
            var src = _p.source;
            var tgt = _p.target;
            return edgeOkViaNode(src) && (!hasCompoundNodes || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes || checkCompound(tgt, edgeOkViaNode)));
          }
        }
      };
    }

    var eleTakesUpSpace = cacheStyleFunction('eleTakesUpSpace', function (ele) {
      return ele.pstyle('display').value === 'element' && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);
    });
    elesfn$r.takesUpSpace = cachePrototypeStyleFunction('takesUpSpace', defineDerivedStateFunction({
      ok: eleTakesUpSpace
    }));
    var eleInteractive = cacheStyleFunction('eleInteractive', function (ele) {
      return ele.pstyle('events').value === 'yes' && ele.pstyle('visibility').value === 'visible' && eleTakesUpSpace(ele);
    });
    var parentInteractive = cacheStyleFunction('parentInteractive', function (parent) {
      return parent.pstyle('visibility').value === 'visible' && eleTakesUpSpace(parent);
    });
    elesfn$r.interactive = cachePrototypeStyleFunction('interactive', defineDerivedStateFunction({
      ok: eleInteractive,
      parentOk: parentInteractive,
      edgeOkViaNode: eleTakesUpSpace
    }));

    elesfn$r.noninteractive = function () {
      var ele = this[0];

      if (ele) {
        return !ele.interactive();
      }
    };

    var eleVisible = cacheStyleFunction('eleVisible', function (ele) {
      return ele.pstyle('visibility').value === 'visible' && ele.pstyle('opacity').pfValue !== 0 && eleTakesUpSpace(ele);
    });
    var edgeVisibleViaNode = eleTakesUpSpace;
    elesfn$r.visible = cachePrototypeStyleFunction('visible', defineDerivedStateFunction({
      ok: eleVisible,
      edgeOkViaNode: edgeVisibleViaNode
    }));

    elesfn$r.hidden = function () {
      var ele = this[0];

      if (ele) {
        return !ele.visible();
      }
    };

    elesfn$r.isBundledBezier = cachePrototypeStyleFunction('isBundledBezier', function () {
      if (!this.cy().styleEnabled()) {
        return false;
      }

      return !this.removed() && this.pstyle('curve-style').value === 'bezier' && this.takesUpSpace();
    });
    elesfn$r.bypass = elesfn$r.css = elesfn$r.style;
    elesfn$r.renderedCss = elesfn$r.renderedStyle;
    elesfn$r.removeBypass = elesfn$r.removeCss = elesfn$r.removeStyle;
    elesfn$r.pstyle = elesfn$r.parsedStyle;

    var elesfn$s = {};

    function defineSwitchFunction(params) {
      return function () {
        var args = arguments;
        var changedEles = []; // e.g. cy.nodes().select( data, handler )

        if (args.length === 2) {
          var data = args[0];
          var handler = args[1];
          this.on(params.event, data, handler);
        } // e.g. cy.nodes().select( handler )
        else if (args.length === 1 && fn(args[0])) {
            var _handler = args[0];
            this.on(params.event, _handler);
          } // e.g. cy.nodes().select()
          // e.g. (private) cy.nodes().select(['tapselect'])
          else if (args.length === 0 || args.length === 1 && array(args[0])) {
              var addlEvents = args.length === 1 ? args[0] : null;

              for (var i = 0; i < this.length; i++) {
                var ele = this[i];
                var able = !params.ableField || ele._private[params.ableField];
                var changed = ele._private[params.field] != params.value;

                if (params.overrideAble) {
                  var overrideAble = params.overrideAble(ele);

                  if (overrideAble !== undefined) {
                    able = overrideAble;

                    if (!overrideAble) {
                      return this;
                    } // to save cycles assume not able for all on override

                  }
                }

                if (able) {
                  ele._private[params.field] = params.value;

                  if (changed) {
                    changedEles.push(ele);
                  }
                }
              }

              var changedColl = this.spawn(changedEles);
              changedColl.updateStyle(); // change of state => possible change of style

              changedColl.emit(params.event);

              if (addlEvents) {
                changedColl.emit(addlEvents);
              }
            }

        return this;
      };
    }

    function defineSwitchSet(params) {
      elesfn$s[params.field] = function () {
        var ele = this[0];

        if (ele) {
          if (params.overrideField) {
            var val = params.overrideField(ele);

            if (val !== undefined) {
              return val;
            }
          }

          return ele._private[params.field];
        }
      };

      elesfn$s[params.on] = defineSwitchFunction({
        event: params.on,
        field: params.field,
        ableField: params.ableField,
        overrideAble: params.overrideAble,
        value: true
      });
      elesfn$s[params.off] = defineSwitchFunction({
        event: params.off,
        field: params.field,
        ableField: params.ableField,
        overrideAble: params.overrideAble,
        value: false
      });
    }

    defineSwitchSet({
      field: 'locked',
      overrideField: function overrideField(ele) {
        return ele.cy().autolock() ? true : undefined;
      },
      on: 'lock',
      off: 'unlock'
    });
    defineSwitchSet({
      field: 'grabbable',
      overrideField: function overrideField(ele) {
        return ele.cy().autoungrabify() || ele.pannable() ? false : undefined;
      },
      on: 'grabify',
      off: 'ungrabify'
    });
    defineSwitchSet({
      field: 'selected',
      ableField: 'selectable',
      overrideAble: function overrideAble(ele) {
        return ele.cy().autounselectify() ? false : undefined;
      },
      on: 'select',
      off: 'unselect'
    });
    defineSwitchSet({
      field: 'selectable',
      overrideField: function overrideField(ele) {
        return ele.cy().autounselectify() ? false : undefined;
      },
      on: 'selectify',
      off: 'unselectify'
    });
    elesfn$s.deselect = elesfn$s.unselect;

    elesfn$s.grabbed = function () {
      var ele = this[0];

      if (ele) {
        return ele._private.grabbed;
      }
    };

    defineSwitchSet({
      field: 'active',
      on: 'activate',
      off: 'unactivate'
    });
    defineSwitchSet({
      field: 'pannable',
      on: 'panify',
      off: 'unpanify'
    });

    elesfn$s.inactive = function () {
      var ele = this[0];

      if (ele) {
        return !ele._private.active;
      }
    };

    var elesfn$t = {}; // DAG functions
    ////////////////

    var defineDagExtremity = function defineDagExtremity(params) {
      return function dagExtremityImpl(selector) {
        var eles = this;
        var ret = [];

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];

          if (!ele.isNode()) {
            continue;
          }

          var disqualified = false;
          var edges = ele.connectedEdges();

          for (var j = 0; j < edges.length; j++) {
            var edge = edges[j];
            var src = edge.source();
            var tgt = edge.target();

            if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {
              disqualified = true;
              break;
            }
          }

          if (!disqualified) {
            ret.push(ele);
          }
        }

        return this.spawn(ret, true).filter(selector);
      };
    };

    var defineDagOneHop = function defineDagOneHop(params) {
      return function (selector) {
        var eles = this;
        var oEles = [];

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];

          if (!ele.isNode()) {
            continue;
          }

          var edges = ele.connectedEdges();

          for (var j = 0; j < edges.length; j++) {
            var edge = edges[j];
            var src = edge.source();
            var tgt = edge.target();

            if (params.outgoing && src === ele) {
              oEles.push(edge);
              oEles.push(tgt);
            } else if (params.incoming && tgt === ele) {
              oEles.push(edge);
              oEles.push(src);
            }
          }
        }

        return this.spawn(oEles, true).filter(selector);
      };
    };

    var defineDagAllHops = function defineDagAllHops(params) {
      return function (selector) {
        var eles = this;
        var sEles = [];
        var sElesIds = {};

        for (;;) {
          var next = params.outgoing ? eles.outgoers() : eles.incomers();

          if (next.length === 0) {
            break;
          } // done if none left


          var newNext = false;

          for (var i = 0; i < next.length; i++) {
            var n = next[i];
            var nid = n.id();

            if (!sElesIds[nid]) {
              sElesIds[nid] = true;
              sEles.push(n);
              newNext = true;
            }
          }

          if (!newNext) {
            break;
          } // done if touched all outgoers already


          eles = next;
        }

        return this.spawn(sEles, true).filter(selector);
      };
    };

    elesfn$t.clearTraversalCache = function () {
      for (var i = 0; i < this.length; i++) {
        this[i]._private.traversalCache = null;
      }
    };

    extend(elesfn$t, {
      // get the root nodes in the DAG
      roots: defineDagExtremity({
        noIncomingEdges: true
      }),
      // get the leaf nodes in the DAG
      leaves: defineDagExtremity({
        noOutgoingEdges: true
      }),
      // normally called children in graph theory
      // these nodes =edges=> outgoing nodes
      outgoers: cache(defineDagOneHop({
        outgoing: true
      }), 'outgoers'),
      // aka DAG descendants
      successors: defineDagAllHops({
        outgoing: true
      }),
      // normally called parents in graph theory
      // these nodes <=edges= incoming nodes
      incomers: cache(defineDagOneHop({
        incoming: true
      }), 'incomers'),
      // aka DAG ancestors
      predecessors: defineDagAllHops({
        incoming: true
      })
    }); // Neighbourhood functions
    //////////////////////////

    extend(elesfn$t, {
      neighborhood: cache(function (selector) {
        var elements = [];
        var nodes = this.nodes();

        for (var i = 0; i < nodes.length; i++) {
          // for all nodes
          var node = nodes[i];
          var connectedEdges = node.connectedEdges(); // for each connected edge, add the edge and the other node

          for (var j = 0; j < connectedEdges.length; j++) {
            var edge = connectedEdges[j];
            var src = edge.source();
            var tgt = edge.target();
            var otherNode = node === src ? tgt : src; // need check in case of loop

            if (otherNode.length > 0) {
              elements.push(otherNode[0]); // add node 1 hop away
            } // add connected edge


            elements.push(edge[0]);
          }
        }

        return this.spawn(elements, true).filter(selector);
      }, 'neighborhood'),
      closedNeighborhood: function closedNeighborhood(selector) {
        return this.neighborhood().add(this).filter(selector);
      },
      openNeighborhood: function openNeighborhood(selector) {
        return this.neighborhood(selector);
      }
    }); // aliases

    elesfn$t.neighbourhood = elesfn$t.neighborhood;
    elesfn$t.closedNeighbourhood = elesfn$t.closedNeighborhood;
    elesfn$t.openNeighbourhood = elesfn$t.openNeighborhood; // Edge functions
    /////////////////

    extend(elesfn$t, {
      source: cache(function sourceImpl(selector) {
        var ele = this[0];
        var src;

        if (ele) {
          src = ele._private.source || ele.cy().collection();
        }

        return src && selector ? src.filter(selector) : src;
      }, 'source'),
      target: cache(function targetImpl(selector) {
        var ele = this[0];
        var tgt;

        if (ele) {
          tgt = ele._private.target || ele.cy().collection();
        }

        return tgt && selector ? tgt.filter(selector) : tgt;
      }, 'target'),
      sources: defineSourceFunction({
        attr: 'source'
      }),
      targets: defineSourceFunction({
        attr: 'target'
      })
    });

    function defineSourceFunction(params) {
      return function sourceImpl(selector) {
        var sources = [];

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var src = ele._private[params.attr];

          if (src) {
            sources.push(src);
          }
        }

        return this.spawn(sources, true).filter(selector);
      };
    }

    extend(elesfn$t, {
      edgesWith: cache(defineEdgesWithFunction(), 'edgesWith'),
      edgesTo: cache(defineEdgesWithFunction({
        thisIsSrc: true
      }), 'edgesTo')
    });

    function defineEdgesWithFunction(params) {
      return function edgesWithImpl(otherNodes) {
        var elements = [];
        var cy = this._private.cy;
        var p = params || {}; // get elements if a selector is specified

        if (string(otherNodes)) {
          otherNodes = cy.$(otherNodes);
        }

        for (var h = 0; h < otherNodes.length; h++) {
          var edges = otherNodes[h]._private.edges;

          for (var i = 0; i < edges.length; i++) {
            var edge = edges[i];
            var edgeData = edge._private.data;
            var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);
            var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);
            var edgeConnectsThisAndOther = thisToOther || otherToThis;

            if (!edgeConnectsThisAndOther) {
              continue;
            }

            if (p.thisIsSrc || p.thisIsTgt) {
              if (p.thisIsSrc && !thisToOther) {
                continue;
              }

              if (p.thisIsTgt && !otherToThis) {
                continue;
              }
            }

            elements.push(edge);
          }
        }

        return this.spawn(elements, true);
      };
    }

    extend(elesfn$t, {
      connectedEdges: cache(function (selector) {
        var retEles = [];
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          var node = eles[i];

          if (!node.isNode()) {
            continue;
          }

          var edges = node._private.edges;

          for (var j = 0; j < edges.length; j++) {
            var edge = edges[j];
            retEles.push(edge);
          }
        }

        return this.spawn(retEles, true).filter(selector);
      }, 'connectedEdges'),
      connectedNodes: cache(function (selector) {
        var retEles = [];
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          var edge = eles[i];

          if (!edge.isEdge()) {
            continue;
          }

          retEles.push(edge.source()[0]);
          retEles.push(edge.target()[0]);
        }

        return this.spawn(retEles, true).filter(selector);
      }, 'connectedNodes'),
      parallelEdges: cache(defineParallelEdgesFunction(), 'parallelEdges'),
      codirectedEdges: cache(defineParallelEdgesFunction({
        codirected: true
      }), 'codirectedEdges')
    });

    function defineParallelEdgesFunction(params) {
      var defaults = {
        codirected: false
      };
      params = extend({}, defaults, params);
      return function parallelEdgesImpl(selector) {
        // micro-optimised for renderer
        var elements = [];
        var edges = this.edges();
        var p = params; // look at all the edges in the collection

        for (var i = 0; i < edges.length; i++) {
          var edge1 = edges[i];
          var edge1_p = edge1._private;
          var src1 = edge1_p.source;
          var srcid1 = src1._private.data.id;
          var tgtid1 = edge1_p.data.target;
          var srcEdges1 = src1._private.edges; // look at edges connected to the src node of this edge

          for (var j = 0; j < srcEdges1.length; j++) {
            var edge2 = srcEdges1[j];
            var edge2data = edge2._private.data;
            var tgtid2 = edge2data.target;
            var srcid2 = edge2data.source;
            var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
            var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;

            if (p.codirected && codirected || !p.codirected && (codirected || oppdirected)) {
              elements.push(edge2);
            }
          }
        }

        return this.spawn(elements, true).filter(selector);
      };
    } // Misc functions
    /////////////////


    extend(elesfn$t, {
      components: function components(root) {
        var self = this;
        var cy = self.cy();
        var visited = cy.collection();
        var unvisited = root == null ? self.nodes() : root.nodes();
        var components = [];

        if (root != null && unvisited.empty()) {
          // root may contain only edges
          unvisited = root.sources(); // doesn't matter which node to use (undirected), so just use the source sides
        }

        var visitInComponent = function visitInComponent(node, component) {
          visited.merge(node);
          unvisited.unmerge(node);
          component.merge(node);
        };

        if (unvisited.empty()) {
          return self.spawn();
        }

        var _loop = function _loop() {
          // each iteration yields a component
          var cmpt = cy.collection();
          components.push(cmpt);
          var root = unvisited[0];
          visitInComponent(root, cmpt);
          self.bfs({
            directed: false,
            roots: root,
            visit: function visit(v) {
              return visitInComponent(v, cmpt);
            }
          });
          cmpt.forEach(function (node) {
            node.connectedEdges().forEach(function (e) {
              // connectedEdges() usually cached
              if (self.has(e) && cmpt.has(e.source()) && cmpt.has(e.target())) {
                // has() is cheap
                cmpt.merge(e); // forEach() only considers nodes -- sets N at call time
              }
            });
          });
        };

        do {
          _loop();
        } while (unvisited.length > 0);

        return components;
      },
      component: function component() {
        var ele = this[0];
        return ele.cy().mutableElements().components(ele)[0];
      }
    });
    elesfn$t.componentsOf = elesfn$t.components;

    var Collection = function Collection(cy, elements) {
      var unique = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (cy === undefined) {
        error('A collection must have a reference to the core');
        return;
      }

      var map = new Map$1();
      var createdElements = false;

      if (!elements) {
        elements = [];
      } else if (elements.length > 0 && plainObject(elements[0]) && !element(elements[0])) {
        createdElements = true; // make elements from json and restore all at once later

        var eles = [];
        var elesIds = new Set$1();

        for (var i = 0, l = elements.length; i < l; i++) {
          var json = elements[i];

          if (json.data == null) {
            json.data = {};
          }

          var _data = json.data; // make sure newly created elements have valid ids

          if (_data.id == null) {
            _data.id = uuid();
          } else if (cy.hasElementWithId(_data.id) || elesIds.has(_data.id)) {
            continue; // can't create element if prior id already exists
          }

          var ele = new Element$1(cy, json, false);
          eles.push(ele);
          elesIds.add(_data.id);
        }

        elements = eles;
      }

      this.length = 0;

      for (var _i = 0, _l = elements.length; _i < _l; _i++) {
        var element$1 = elements[_i][0]; // [0] in case elements is an array of collections, rather than array of elements

        if (element$1 == null) {
          continue;
        }

        var id = element$1._private.data.id;

        if (!unique || !map.has(id)) {
          if (unique) {
            map.set(id, {
              index: this.length,
              ele: element$1
            });
          }

          this[this.length] = element$1;
          this.length++;
        }
      }

      this._private = {
        eles: this,
        cy: cy,

        get map() {
          if (this.lazyMap == null) {
            this.rebuildMap();
          }

          return this.lazyMap;
        },

        set map(m) {
          this.lazyMap = m;
        },

        rebuildMap: function rebuildMap() {
          var m = this.lazyMap = new Map$1();
          var eles = this.eles;

          for (var _i2 = 0; _i2 < eles.length; _i2++) {
            var _ele = eles[_i2];
            m.set(_ele.id(), {
              index: _i2,
              ele: _ele
            });
          }
        }
      };

      if (unique) {
        this._private.map = map;
      } // restore the elements if we created them from json


      if (createdElements) {
        this.restore();
      }
    }; // Functions
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // keep the prototypes in sync (an element has the same functions as a collection)
    // and use elefn and elesfn as shorthands to the prototypes


    var elesfn$u = Element$1.prototype = Collection.prototype = Object.create(Array.prototype);

    elesfn$u.instanceString = function () {
      return 'collection';
    };

    elesfn$u.spawn = function (eles, unique) {
      return new Collection(this.cy(), eles, unique);
    };

    elesfn$u.spawnSelf = function () {
      return this.spawn(this);
    };

    elesfn$u.cy = function () {
      return this._private.cy;
    };

    elesfn$u.renderer = function () {
      return this._private.cy.renderer();
    };

    elesfn$u.element = function () {
      return this[0];
    };

    elesfn$u.collection = function () {
      if (collection(this)) {
        return this;
      } else {
        // an element
        return new Collection(this._private.cy, [this]);
      }
    };

    elesfn$u.unique = function () {
      return new Collection(this._private.cy, this, true);
    };

    elesfn$u.hasElementWithId = function (id) {
      id = '' + id; // id must be string

      return this._private.map.has(id);
    };

    elesfn$u.getElementById = function (id) {
      id = '' + id; // id must be string

      var cy = this._private.cy;

      var entry = this._private.map.get(id);

      return entry ? entry.ele : new Collection(cy); // get ele or empty collection
    };

    elesfn$u.$id = elesfn$u.getElementById;

    elesfn$u.poolIndex = function () {
      var cy = this._private.cy;
      var eles = cy._private.elements;
      var id = this[0]._private.data.id;
      return eles._private.map.get(id).index;
    };

    elesfn$u.indexOf = function (ele) {
      var id = ele[0]._private.data.id;
      return this._private.map.get(id).index;
    };

    elesfn$u.indexOfId = function (id) {
      id = '' + id; // id must be string

      return this._private.map.get(id).index;
    };

    elesfn$u.json = function (obj) {
      var ele = this.element();
      var cy = this.cy();

      if (ele == null && obj) {
        return this;
      } // can't set to no eles


      if (ele == null) {
        return undefined;
      } // can't get from no eles


      var p = ele._private;

      if (plainObject(obj)) {
        // set
        cy.startBatch();

        if (obj.data) {
          ele.data(obj.data);
          var _data2 = p.data;

          if (ele.isEdge()) {
            // source and target are immutable via data()
            var move = false;
            var spec = {};
            var src = obj.data.source;
            var tgt = obj.data.target;

            if (src != null && src != _data2.source) {
              spec.source = '' + src; // id must be string

              move = true;
            }

            if (tgt != null && tgt != _data2.target) {
              spec.target = '' + tgt; // id must be string

              move = true;
            }

            if (move) {
              ele = ele.move(spec);
            }
          } else {
            // parent is immutable via data()
            var newParentValSpecd = 'parent' in obj.data;
            var parent = obj.data.parent;

            if (newParentValSpecd && (parent != null || _data2.parent != null) && parent != _data2.parent) {
              if (parent === undefined) {
                // can't set undefined imperatively, so use null
                parent = null;
              }

              if (parent != null) {
                parent = '' + parent; // id must be string
              }

              ele = ele.move({
                parent: parent
              });
            }
          }
        }

        if (obj.position) {
          ele.position(obj.position);
        } // ignore group -- immutable


        var checkSwitch = function checkSwitch(k, trueFnName, falseFnName) {
          var obj_k = obj[k];

          if (obj_k != null && obj_k !== p[k]) {
            if (obj_k) {
              ele[trueFnName]();
            } else {
              ele[falseFnName]();
            }
          }
        };

        checkSwitch('removed', 'remove', 'restore');
        checkSwitch('selected', 'select', 'unselect');
        checkSwitch('selectable', 'selectify', 'unselectify');
        checkSwitch('locked', 'lock', 'unlock');
        checkSwitch('grabbable', 'grabify', 'ungrabify');
        checkSwitch('pannable', 'panify', 'unpanify');

        if (obj.classes != null) {
          ele.classes(obj.classes);
        }

        cy.endBatch();
        return this;
      } else if (obj === undefined) {
        // get
        var json = {
          data: copy(p.data),
          position: copy(p.position),
          group: p.group,
          removed: p.removed,
          selected: p.selected,
          selectable: p.selectable,
          locked: p.locked,
          grabbable: p.grabbable,
          pannable: p.pannable,
          classes: null
        };
        json.classes = '';
        var i = 0;
        p.classes.forEach(function (cls) {
          return json.classes += i++ === 0 ? cls : ' ' + cls;
        });
        return json;
      }
    };

    elesfn$u.jsons = function () {
      var jsons = [];

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var json = ele.json();
        jsons.push(json);
      }

      return jsons;
    };

    elesfn$u.clone = function () {
      var cy = this.cy();
      var elesArr = [];

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var json = ele.json();
        var clone = new Element$1(cy, json, false); // NB no restore

        elesArr.push(clone);
      }

      return new Collection(cy, elesArr);
    };

    elesfn$u.copy = elesfn$u.clone;

    elesfn$u.restore = function () {
      var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var addToPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var self = this;
      var cy = self.cy();
      var cy_p = cy._private; // create arrays of nodes and edges, since we need to
      // restore the nodes first

      var nodes = [];
      var edges = [];
      var elements;

      for (var _i3 = 0, l = self.length; _i3 < l; _i3++) {
        var ele = self[_i3];

        if (addToPool && !ele.removed()) {
          // don't need to handle this ele
          continue;
        } // keep nodes first in the array and edges after


        if (ele.isNode()) {
          // put to front of array if node
          nodes.push(ele);
        } else {
          // put to end of array if edge
          edges.push(ele);
        }
      }

      elements = nodes.concat(edges);
      var i;

      var removeFromElements = function removeFromElements() {
        elements.splice(i, 1);
        i--;
      }; // now, restore each element


      for (i = 0; i < elements.length; i++) {
        var _ele2 = elements[i];
        var _private = _ele2._private;
        var _data3 = _private.data; // the traversal cache should start fresh when ele is added

        _ele2.clearTraversalCache(); // set id and validate


        if (!addToPool && !_private.removed) ; else if (_data3.id === undefined) {
          _data3.id = uuid();
        } else if (number(_data3.id)) {
          _data3.id = '' + _data3.id; // now it's a string
        } else if (emptyString(_data3.id) || !string(_data3.id)) {
          error('Can not create element with invalid string ID `' + _data3.id + '`'); // can't create element if it has empty string as id or non-string id

          removeFromElements();
          continue;
        } else if (cy.hasElementWithId(_data3.id)) {
          error('Can not create second element with ID `' + _data3.id + '`'); // can't create element if one already has that id

          removeFromElements();
          continue;
        }

        var id = _data3.id; // id is finalised, now let's keep a ref

        if (_ele2.isNode()) {
          // extra checks for nodes
          var pos = _private.position; // make sure the nodes have a defined position

          if (pos.x == null) {
            pos.x = 0;
          }

          if (pos.y == null) {
            pos.y = 0;
          }
        }

        if (_ele2.isEdge()) {
          // extra checks for edges
          var edge = _ele2;
          var fields = ['source', 'target'];
          var fieldsLength = fields.length;
          var badSourceOrTarget = false;

          for (var j = 0; j < fieldsLength; j++) {
            var field = fields[j];
            var val = _data3[field];

            if (number(val)) {
              val = _data3[field] = '' + _data3[field]; // now string
            }

            if (val == null || val === '') {
              // can't create if source or target is not defined properly
              error('Can not create edge `' + id + '` with unspecified ' + field);
              badSourceOrTarget = true;
            } else if (!cy.hasElementWithId(val)) {
              // can't create edge if one of its nodes doesn't exist
              error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');
              badSourceOrTarget = true;
            }
          }

          if (badSourceOrTarget) {
            removeFromElements();
            continue;
          } // can't create this


          var src = cy.getElementById(_data3.source);
          var tgt = cy.getElementById(_data3.target); // only one edge in node if loop

          if (src.same(tgt)) {
            src._private.edges.push(edge);
          } else {
            src._private.edges.push(edge);

            tgt._private.edges.push(edge);
          }

          edge._private.source = src;
          edge._private.target = tgt;
        } // if is edge
        // create mock ids / indexes maps for element so it can be used like collections


        _private.map = new Map$1();

        _private.map.set(id, {
          ele: _ele2,
          index: 0
        });

        _private.removed = false;

        if (addToPool) {
          cy.addToPool(_ele2);
        }
      } // for each element
      // do compound node sanity checks


      for (var _i4 = 0; _i4 < nodes.length; _i4++) {
        // each node
        var node = nodes[_i4];
        var _data4 = node._private.data;

        if (number(_data4.parent)) {
          // then automake string
          _data4.parent = '' + _data4.parent;
        }

        var parentId = _data4.parent;
        var specifiedParent = parentId != null;

        if (specifiedParent) {
          var parent = cy.getElementById(parentId);

          if (parent.empty()) {
            // non-existant parent; just remove it
            _data4.parent = undefined;
          } else {
            var selfAsParent = false;
            var ancestor = parent;

            while (!ancestor.empty()) {
              if (node.same(ancestor)) {
                // mark self as parent and remove from data
                selfAsParent = true;
                _data4.parent = undefined; // remove parent reference
                // exit or we loop forever

                break;
              }

              ancestor = ancestor.parent();
            }

            if (!selfAsParent) {
              // connect with children
              parent[0]._private.children.push(node);

              node._private.parent = parent[0]; // let the core know we have a compound graph

              cy_p.hasCompoundNodes = true;
            }
          } // else

        } // if specified parent

      } // for each node


      if (elements.length > 0) {
        var restored = elements.length === self.length ? self : new Collection(cy, elements);

        for (var _i5 = 0; _i5 < restored.length; _i5++) {
          var _ele3 = restored[_i5];

          if (_ele3.isNode()) {
            continue;
          } // adding an edge invalidates the traversal caches for the parallel edges


          _ele3.parallelEdges().clearTraversalCache(); // adding an edge invalidates the traversal cache for the connected nodes


          _ele3.source().clearTraversalCache();

          _ele3.target().clearTraversalCache();
        }

        var toUpdateStyle;

        if (cy_p.hasCompoundNodes) {
          toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());
        } else {
          toUpdateStyle = restored;
        }

        toUpdateStyle.dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(notifyRenderer);

        if (notifyRenderer) {
          restored.emitAndNotify('add');
        } else if (addToPool) {
          restored.emit('add');
        }
      }

      return self; // chainability
    };

    elesfn$u.removed = function () {
      var ele = this[0];
      return ele && ele._private.removed;
    };

    elesfn$u.inside = function () {
      var ele = this[0];
      return ele && !ele._private.removed;
    };

    elesfn$u.remove = function () {
      var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var removeFromPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var self = this;
      var elesToRemove = [];
      var elesToRemoveIds = {};
      var cy = self._private.cy; // add connected edges

      function addConnectedEdges(node) {
        var edges = node._private.edges;

        for (var i = 0; i < edges.length; i++) {
          add(edges[i]);
        }
      } // add descendant nodes


      function addChildren(node) {
        var children = node._private.children;

        for (var i = 0; i < children.length; i++) {
          add(children[i]);
        }
      }

      function add(ele) {
        var alreadyAdded = elesToRemoveIds[ele.id()];

        if (removeFromPool && ele.removed() || alreadyAdded) {
          return;
        } else {
          elesToRemoveIds[ele.id()] = true;
        }

        if (ele.isNode()) {
          elesToRemove.push(ele); // nodes are removed last

          addConnectedEdges(ele);
          addChildren(ele);
        } else {
          elesToRemove.unshift(ele); // edges are removed first
        }
      } // make the list of elements to remove
      // (may be removing more than specified due to connected edges etc)


      for (var i = 0, l = self.length; i < l; i++) {
        var ele = self[i];
        add(ele);
      }

      function removeEdgeRef(node, edge) {
        var connectedEdges = node._private.edges;
        removeFromArray(connectedEdges, edge); // removing an edges invalidates the traversal cache for its nodes

        node.clearTraversalCache();
      }

      function removeParallelRef(pllEdge) {
        // removing an edge invalidates the traversal caches for the parallel edges
        pllEdge.clearTraversalCache();
      }

      var alteredParents = [];
      alteredParents.ids = {};

      function removeChildRef(parent, ele) {
        ele = ele[0];
        parent = parent[0];
        var children = parent._private.children;
        var pid = parent.id();
        removeFromArray(children, ele); // remove parent => child ref

        ele._private.parent = null; // remove child => parent ref

        if (!alteredParents.ids[pid]) {
          alteredParents.ids[pid] = true;
          alteredParents.push(parent);
        }
      }

      self.dirtyCompoundBoundsCache();

      if (removeFromPool) {
        cy.removeFromPool(elesToRemove); // remove from core pool
      }

      for (var _i6 = 0; _i6 < elesToRemove.length; _i6++) {
        var _ele4 = elesToRemove[_i6];

        if (_ele4.isEdge()) {
          // remove references to this edge in its connected nodes
          var src = _ele4.source()[0];

          var tgt = _ele4.target()[0];

          removeEdgeRef(src, _ele4);
          removeEdgeRef(tgt, _ele4);

          var pllEdges = _ele4.parallelEdges();

          for (var j = 0; j < pllEdges.length; j++) {
            var pllEdge = pllEdges[j];
            removeParallelRef(pllEdge);

            if (pllEdge.isBundledBezier()) {
              pllEdge.dirtyBoundingBoxCache();
            }
          }
        } else {
          // remove reference to parent
          var parent = _ele4.parent();

          if (parent.length !== 0) {
            removeChildRef(parent, _ele4);
          }
        }

        if (removeFromPool) {
          // mark as removed
          _ele4._private.removed = true;
        }
      } // check to see if we have a compound graph or not


      var elesStillInside = cy._private.elements;
      cy._private.hasCompoundNodes = false;

      for (var _i7 = 0; _i7 < elesStillInside.length; _i7++) {
        var _ele5 = elesStillInside[_i7];

        if (_ele5.isParent()) {
          cy._private.hasCompoundNodes = true;
          break;
        }
      }

      var removedElements = new Collection(this.cy(), elesToRemove);

      if (removedElements.size() > 0) {
        // must manually notify since trigger won't do this automatically once removed
        if (notifyRenderer) {
          removedElements.emitAndNotify('remove');
        } else if (removeFromPool) {
          removedElements.emit('remove');
        }
      } // the parents who were modified by the removal need their style updated


      for (var _i8 = 0; _i8 < alteredParents.length; _i8++) {
        var _ele6 = alteredParents[_i8];

        if (!removeFromPool || !_ele6.removed()) {
          _ele6.updateStyle();
        }
      }

      return removedElements;
    };

    elesfn$u.move = function (struct) {
      var cy = this._private.cy;
      var eles = this; // just clean up refs, caches, etc. in the same way as when removing and then restoring
      // (our calls to remove/restore do not remove from the graph or make events)

      var notifyRenderer = false;
      var modifyPool = false;

      var toString = function toString(id) {
        return id == null ? id : '' + id;
      }; // id must be string


      if (struct.source !== undefined || struct.target !== undefined) {
        var srcId = toString(struct.source);
        var tgtId = toString(struct.target);
        var srcExists = srcId != null && cy.hasElementWithId(srcId);
        var tgtExists = tgtId != null && cy.hasElementWithId(tgtId);

        if (srcExists || tgtExists) {
          cy.batch(function () {
            // avoid duplicate style updates
            eles.remove(notifyRenderer, modifyPool); // clean up refs etc.

            eles.emitAndNotify('moveout');

            for (var i = 0; i < eles.length; i++) {
              var ele = eles[i];
              var _data5 = ele._private.data;

              if (ele.isEdge()) {
                if (srcExists) {
                  _data5.source = srcId;
                }

                if (tgtExists) {
                  _data5.target = tgtId;
                }
              }
            }

            eles.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
          });
          eles.emitAndNotify('move');
        }
      } else if (struct.parent !== undefined) {
        // move node to new parent
        var parentId = toString(struct.parent);
        var parentExists = parentId === null || cy.hasElementWithId(parentId);

        if (parentExists) {
          var pidToAssign = parentId === null ? undefined : parentId;
          cy.batch(function () {
            // avoid duplicate style updates
            var updated = eles.remove(notifyRenderer, modifyPool); // clean up refs etc.

            updated.emitAndNotify('moveout');

            for (var i = 0; i < eles.length; i++) {
              var ele = eles[i];
              var _data6 = ele._private.data;

              if (ele.isNode()) {
                _data6.parent = pidToAssign;
              }
            }

            updated.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
          });
          eles.emitAndNotify('move');
        }
      }

      return this;
    };

    [elesfn$c, elesfn$d, elesfn$e, elesfn$f, elesfn$g, data$1, elesfn$i, dimensions, elesfn$m, elesfn$n, elesfn$o, elesfn$p, elesfn$q, elesfn$r, elesfn$s, elesfn$t].forEach(function (props) {
      extend(elesfn$u, props);
    });

    var corefn = {
      add: function add(opts) {
        var elements;
        var cy = this; // add the elements

        if (elementOrCollection(opts)) {
          var eles = opts;

          if (eles._private.cy === cy) {
            // same instance => just restore
            elements = eles.restore();
          } else {
            // otherwise, copy from json
            var jsons = [];

            for (var i = 0; i < eles.length; i++) {
              var ele = eles[i];
              jsons.push(ele.json());
            }

            elements = new Collection(cy, jsons);
          }
        } // specify an array of options
        else if (array(opts)) {
            var _jsons = opts;
            elements = new Collection(cy, _jsons);
          } // specify via opts.nodes and opts.edges
          else if (plainObject(opts) && (array(opts.nodes) || array(opts.edges))) {
              var elesByGroup = opts;
              var _jsons2 = [];
              var grs = ['nodes', 'edges'];

              for (var _i = 0, il = grs.length; _i < il; _i++) {
                var group = grs[_i];
                var elesArray = elesByGroup[group];

                if (array(elesArray)) {
                  for (var j = 0, jl = elesArray.length; j < jl; j++) {
                    var json = extend({
                      group: group
                    }, elesArray[j]);

                    _jsons2.push(json);
                  }
                }
              }

              elements = new Collection(cy, _jsons2);
            } // specify options for one element
            else {
                var _json = opts;
                elements = new Element$1(cy, _json).collection();
              }

        return elements;
      },
      remove: function remove(collection) {
        if (elementOrCollection(collection)) ; else if (string(collection)) {
          var selector = collection;
          collection = this.$(selector);
        }

        return collection.remove();
      }
    };

    /* global Float32Array */

    /*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
    function generateCubicBezier(mX1, mY1, mX2, mY2) {
      var NEWTON_ITERATIONS = 4,
          NEWTON_MIN_SLOPE = 0.001,
          SUBDIVISION_PRECISION = 0.0000001,
          SUBDIVISION_MAX_ITERATIONS = 10,
          kSplineTableSize = 11,
          kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
          float32ArraySupported = typeof Float32Array !== 'undefined';
      /* Must contain four arguments. */

      if (arguments.length !== 4) {
        return false;
      }
      /* Arguments must be numbers. */


      for (var i = 0; i < 4; ++i) {
        if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
          return false;
        }
      }
      /* X values must be in the [0, 1] range. */


      mX1 = Math.min(mX1, 1);
      mX2 = Math.min(mX2, 1);
      mX1 = Math.max(mX1, 0);
      mX2 = Math.max(mX2, 0);
      var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

      function A(aA1, aA2) {
        return 1.0 - 3.0 * aA2 + 3.0 * aA1;
      }

      function B(aA1, aA2) {
        return 3.0 * aA2 - 6.0 * aA1;
      }

      function C(aA1) {
        return 3.0 * aA1;
      }

      function calcBezier(aT, aA1, aA2) {
        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
      }

      function getSlope(aT, aA1, aA2) {
        return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
      }

      function newtonRaphsonIterate(aX, aGuessT) {
        for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {
          var currentSlope = getSlope(aGuessT, mX1, mX2);

          if (currentSlope === 0.0) {
            return aGuessT;
          }

          var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
          aGuessT -= currentX / currentSlope;
        }

        return aGuessT;
      }

      function calcSampleValues() {
        for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {
          mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);
        }
      }

      function binarySubdivide(aX, aA, aB) {
        var currentX,
            currentT,
            i = 0;

        do {
          currentT = aA + (aB - aA) / 2.0;
          currentX = calcBezier(currentT, mX1, mX2) - aX;

          if (currentX > 0.0) {
            aB = currentT;
          } else {
            aA = currentT;
          }
        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

        return currentT;
      }

      function getTForX(aX) {
        var intervalStart = 0.0,
            currentSample = 1,
            lastSample = kSplineTableSize - 1;

        for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
          intervalStart += kSampleStepSize;
        }

        --currentSample;
        var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),
            guessForT = intervalStart + dist * kSampleStepSize,
            initialSlope = getSlope(guessForT, mX1, mX2);

        if (initialSlope >= NEWTON_MIN_SLOPE) {
          return newtonRaphsonIterate(aX, guessForT);
        } else if (initialSlope === 0.0) {
          return guessForT;
        } else {
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
        }
      }

      var _precomputed = false;

      function precompute() {
        _precomputed = true;

        if (mX1 !== mY1 || mX2 !== mY2) {
          calcSampleValues();
        }
      }

      var f = function f(aX) {
        if (!_precomputed) {
          precompute();
        }

        if (mX1 === mY1 && mX2 === mY2) {
          return aX;
        }

        if (aX === 0) {
          return 0;
        }

        if (aX === 1) {
          return 1;
        }

        return calcBezier(getTForX(aX), mY1, mY2);
      };

      f.getControlPoints = function () {
        return [{
          x: mX1,
          y: mY1
        }, {
          x: mX2,
          y: mY2
        }];
      };

      var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";

      f.toString = function () {
        return str;
      };

      return f;
    }

    /*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */

    /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
       then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
    var generateSpringRK4 = function () {
      function springAccelerationForState(state) {
        return -state.tension * state.x - state.friction * state.v;
      }

      function springEvaluateStateWithDerivative(initialState, dt, derivative) {
        var state = {
          x: initialState.x + derivative.dx * dt,
          v: initialState.v + derivative.dv * dt,
          tension: initialState.tension,
          friction: initialState.friction
        };
        return {
          dx: state.v,
          dv: springAccelerationForState(state)
        };
      }

      function springIntegrateState(state, dt) {
        var a = {
          dx: state.v,
          dv: springAccelerationForState(state)
        },
            b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
            c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
            d = springEvaluateStateWithDerivative(state, dt, c),
            dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
            dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);
        state.x = state.x + dxdt * dt;
        state.v = state.v + dvdt * dt;
        return state;
      }

      return function springRK4Factory(tension, friction, duration) {
        var initState = {
          x: -1,
          v: 0,
          tension: null,
          friction: null
        },
            path = [0],
            time_lapsed = 0,
            tolerance = 1 / 10000,
            DT = 16 / 1000,
            have_duration,
            dt,
            last_state;
        tension = parseFloat(tension) || 500;
        friction = parseFloat(friction) || 20;
        duration = duration || null;
        initState.tension = tension;
        initState.friction = friction;
        have_duration = duration !== null;
        /* Calculate the actual time it takes for this animation to complete with the provided conditions. */

        if (have_duration) {
          /* Run the simulation without a duration. */
          time_lapsed = springRK4Factory(tension, friction);
          /* Compute the adjusted time delta. */

          dt = time_lapsed / duration * DT;
        } else {
          dt = DT;
        }

        for (;;) {
          /* Next/step function .*/
          last_state = springIntegrateState(last_state || initState, dt);
          /* Store the position. */

          path.push(1 + last_state.x);
          time_lapsed += 16;
          /* If the change threshold is reached, break. */

          if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
            break;
          }
        }
        /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
           computed path and returns a snapshot of the position according to a given percentComplete. */


        return !have_duration ? time_lapsed : function (percentComplete) {
          return path[percentComplete * (path.length - 1) | 0];
        };
      };
    }();

    var cubicBezier = function cubicBezier(t1, p1, t2, p2) {
      var bezier = generateCubicBezier(t1, p1, t2, p2);
      return function (start, end, percent) {
        return start + (end - start) * bezier(percent);
      };
    };

    var easings = {
      'linear': function linear(start, end, percent) {
        return start + (end - start) * percent;
      },
      // default easings
      'ease': cubicBezier(0.25, 0.1, 0.25, 1),
      'ease-in': cubicBezier(0.42, 0, 1, 1),
      'ease-out': cubicBezier(0, 0, 0.58, 1),
      'ease-in-out': cubicBezier(0.42, 0, 0.58, 1),
      // sine
      'ease-in-sine': cubicBezier(0.47, 0, 0.745, 0.715),
      'ease-out-sine': cubicBezier(0.39, 0.575, 0.565, 1),
      'ease-in-out-sine': cubicBezier(0.445, 0.05, 0.55, 0.95),
      // quad
      'ease-in-quad': cubicBezier(0.55, 0.085, 0.68, 0.53),
      'ease-out-quad': cubicBezier(0.25, 0.46, 0.45, 0.94),
      'ease-in-out-quad': cubicBezier(0.455, 0.03, 0.515, 0.955),
      // cubic
      'ease-in-cubic': cubicBezier(0.55, 0.055, 0.675, 0.19),
      'ease-out-cubic': cubicBezier(0.215, 0.61, 0.355, 1),
      'ease-in-out-cubic': cubicBezier(0.645, 0.045, 0.355, 1),
      // quart
      'ease-in-quart': cubicBezier(0.895, 0.03, 0.685, 0.22),
      'ease-out-quart': cubicBezier(0.165, 0.84, 0.44, 1),
      'ease-in-out-quart': cubicBezier(0.77, 0, 0.175, 1),
      // quint
      'ease-in-quint': cubicBezier(0.755, 0.05, 0.855, 0.06),
      'ease-out-quint': cubicBezier(0.23, 1, 0.32, 1),
      'ease-in-out-quint': cubicBezier(0.86, 0, 0.07, 1),
      // expo
      'ease-in-expo': cubicBezier(0.95, 0.05, 0.795, 0.035),
      'ease-out-expo': cubicBezier(0.19, 1, 0.22, 1),
      'ease-in-out-expo': cubicBezier(1, 0, 0, 1),
      // circ
      'ease-in-circ': cubicBezier(0.6, 0.04, 0.98, 0.335),
      'ease-out-circ': cubicBezier(0.075, 0.82, 0.165, 1),
      'ease-in-out-circ': cubicBezier(0.785, 0.135, 0.15, 0.86),
      // user param easings...
      'spring': function spring(tension, friction, duration) {
        if (duration === 0) {
          // can't get a spring w/ duration 0
          return easings.linear; // duration 0 => jump to end so impl doesn't matter
        }

        var spring = generateSpringRK4(tension, friction, duration);
        return function (start, end, percent) {
          return start + (end - start) * spring(percent);
        };
      },
      'cubic-bezier': cubicBezier
    };

    function getEasedValue(type, start, end, percent, easingFn) {
      if (percent === 1) {
        return end;
      }

      if (start === end) {
        return end;
      }

      var val = easingFn(start, end, percent);

      if (type == null) {
        return val;
      }

      if (type.roundValue || type.color) {
        val = Math.round(val);
      }

      if (type.min !== undefined) {
        val = Math.max(val, type.min);
      }

      if (type.max !== undefined) {
        val = Math.min(val, type.max);
      }

      return val;
    }

    function getValue(prop, spec) {
      if (prop.pfValue != null || prop.value != null) {
        if (prop.pfValue != null && (spec == null || spec.type.units !== '%')) {
          return prop.pfValue;
        } else {
          return prop.value;
        }
      } else {
        return prop;
      }
    }

    function ease(startProp, endProp, percent, easingFn, propSpec) {
      var type = propSpec != null ? propSpec.type : null;

      if (percent < 0) {
        percent = 0;
      } else if (percent > 1) {
        percent = 1;
      }

      var start = getValue(startProp, propSpec);
      var end = getValue(endProp, propSpec);

      if (number(start) && number(end)) {
        return getEasedValue(type, start, end, percent, easingFn);
      } else if (array(start) && array(end)) {
        var easedArr = [];

        for (var i = 0; i < end.length; i++) {
          var si = start[i];
          var ei = end[i];

          if (si != null && ei != null) {
            var val = getEasedValue(type, si, ei, percent, easingFn);
            easedArr.push(val);
          } else {
            easedArr.push(ei);
          }
        }

        return easedArr;
      }

      return undefined;
    }

    function step(self, ani, now, isCore) {
      var isEles = !isCore;
      var _p = self._private;
      var ani_p = ani._private;
      var pEasing = ani_p.easing;
      var startTime = ani_p.startTime;
      var cy = isCore ? self : self.cy();
      var style = cy.style();

      if (!ani_p.easingImpl) {
        if (pEasing == null) {
          // use default
          ani_p.easingImpl = easings['linear'];
        } else {
          // then define w/ name
          var easingVals;

          if (string(pEasing)) {
            var easingProp = style.parse('transition-timing-function', pEasing);
            easingVals = easingProp.value;
          } else {
            // then assume preparsed array
            easingVals = pEasing;
          }

          var name, args;

          if (string(easingVals)) {
            name = easingVals;
            args = [];
          } else {
            name = easingVals[1];
            args = easingVals.slice(2).map(function (n) {
              return +n;
            });
          }

          if (args.length > 0) {
            // create with args
            if (name === 'spring') {
              args.push(ani_p.duration); // need duration to generate spring
            }

            ani_p.easingImpl = easings[name].apply(null, args);
          } else {
            // static impl by name
            ani_p.easingImpl = easings[name];
          }
        }
      }

      var easing = ani_p.easingImpl;
      var percent;

      if (ani_p.duration === 0) {
        percent = 1;
      } else {
        percent = (now - startTime) / ani_p.duration;
      }

      if (ani_p.applying) {
        percent = ani_p.progress;
      }

      if (percent < 0) {
        percent = 0;
      } else if (percent > 1) {
        percent = 1;
      }

      if (ani_p.delay == null) {
        // then update
        var startPos = ani_p.startPosition;
        var endPos = ani_p.position;

        if (endPos && isEles && !self.locked()) {
          var newPos = {};

          if (valid(startPos.x, endPos.x)) {
            newPos.x = ease(startPos.x, endPos.x, percent, easing);
          }

          if (valid(startPos.y, endPos.y)) {
            newPos.y = ease(startPos.y, endPos.y, percent, easing);
          }

          self.position(newPos);
        }

        var startPan = ani_p.startPan;
        var endPan = ani_p.pan;
        var pan = _p.pan;
        var animatingPan = endPan != null && isCore;

        if (animatingPan) {
          if (valid(startPan.x, endPan.x)) {
            pan.x = ease(startPan.x, endPan.x, percent, easing);
          }

          if (valid(startPan.y, endPan.y)) {
            pan.y = ease(startPan.y, endPan.y, percent, easing);
          }

          self.emit('pan');
        }

        var startZoom = ani_p.startZoom;
        var endZoom = ani_p.zoom;
        var animatingZoom = endZoom != null && isCore;

        if (animatingZoom) {
          if (valid(startZoom, endZoom)) {
            _p.zoom = bound(_p.minZoom, ease(startZoom, endZoom, percent, easing), _p.maxZoom);
          }

          self.emit('zoom');
        }

        if (animatingPan || animatingZoom) {
          self.emit('viewport');
        }

        var props = ani_p.style;

        if (props && props.length > 0 && isEles) {
          for (var i = 0; i < props.length; i++) {
            var prop = props[i];
            var _name = prop.name;
            var end = prop;
            var start = ani_p.startStyle[_name];
            var propSpec = style.properties[start.name];
            var easedVal = ease(start, end, percent, easing, propSpec);
            style.overrideBypass(self, _name, easedVal);
          } // for props


          self.emit('style');
        } // if

      }

      ani_p.progress = percent;
      return percent;
    }

    function valid(start, end) {
      if (start == null || end == null) {
        return false;
      }

      if (number(start) && number(end)) {
        return true;
      } else if (start && end) {
        return true;
      }

      return false;
    }

    function startAnimation(self, ani, now, isCore) {
      var ani_p = ani._private;
      ani_p.started = true;
      ani_p.startTime = now - ani_p.progress * ani_p.duration;
    }

    function stepAll(now, cy) {
      var eles = cy._private.aniEles;
      var doneEles = [];

      function stepOne(ele, isCore) {
        var _p = ele._private;
        var current = _p.animation.current;
        var queue = _p.animation.queue;
        var ranAnis = false; // if nothing currently animating, get something from the queue

        if (current.length === 0) {
          var next = queue.shift();

          if (next) {
            current.push(next);
          }
        }

        var callbacks = function callbacks(_callbacks) {
          for (var j = _callbacks.length - 1; j >= 0; j--) {
            var cb = _callbacks[j];
            cb();
          }

          _callbacks.splice(0, _callbacks.length);
        }; // step and remove if done


        for (var i = current.length - 1; i >= 0; i--) {
          var ani = current[i];
          var ani_p = ani._private;

          if (ani_p.stopped) {
            current.splice(i, 1);
            ani_p.hooked = false;
            ani_p.playing = false;
            ani_p.started = false;
            callbacks(ani_p.frames);
            continue;
          }

          if (!ani_p.playing && !ani_p.applying) {
            continue;
          } // an apply() while playing shouldn't do anything


          if (ani_p.playing && ani_p.applying) {
            ani_p.applying = false;
          }

          if (!ani_p.started) {
            startAnimation(ele, ani, now);
          }

          step(ele, ani, now, isCore);

          if (ani_p.applying) {
            ani_p.applying = false;
          }

          callbacks(ani_p.frames);

          if (ani_p.step != null) {
            ani_p.step(now);
          }

          if (ani.completed()) {
            current.splice(i, 1);
            ani_p.hooked = false;
            ani_p.playing = false;
            ani_p.started = false;
            callbacks(ani_p.completes);
          }

          ranAnis = true;
        }

        if (!isCore && current.length === 0 && queue.length === 0) {
          doneEles.push(ele);
        }

        return ranAnis;
      } // stepElement
      // handle all eles


      var ranEleAni = false;

      for (var e = 0; e < eles.length; e++) {
        var ele = eles[e];
        var handledThisEle = stepOne(ele);
        ranEleAni = ranEleAni || handledThisEle;
      } // each element


      var ranCoreAni = stepOne(cy, true); // notify renderer

      if (ranEleAni || ranCoreAni) {
        if (eles.length > 0) {
          cy.notify('draw', eles);
        } else {
          cy.notify('draw');
        }
      } // remove elements from list of currently animating if its queues are empty


      eles.unmerge(doneEles);
      cy.emit('step');
    } // stepAll

    var corefn$1 = {
      // pull in animation functions
      animate: define$3.animate(),
      animation: define$3.animation(),
      animated: define$3.animated(),
      clearQueue: define$3.clearQueue(),
      delay: define$3.delay(),
      delayAnimation: define$3.delayAnimation(),
      stop: define$3.stop(),
      addToAnimationPool: function addToAnimationPool(eles) {
        var cy = this;

        if (!cy.styleEnabled()) {
          return;
        } // save cycles when no style used


        cy._private.aniEles.merge(eles);
      },
      stopAnimationLoop: function stopAnimationLoop() {
        this._private.animationsRunning = false;
      },
      startAnimationLoop: function startAnimationLoop() {
        var cy = this;
        cy._private.animationsRunning = true;

        if (!cy.styleEnabled()) {
          return;
        } // save cycles when no style used
        // NB the animation loop will exec in headless environments if style enabled
        // and explicit cy.destroy() is necessary to stop the loop


        function headlessStep() {
          if (!cy._private.animationsRunning) {
            return;
          }

          requestAnimationFrame$1(function animationStep(now) {
            stepAll(now, cy);
            headlessStep();
          });
        }

        var renderer = cy.renderer();

        if (renderer && renderer.beforeRender) {
          // let the renderer schedule animations
          renderer.beforeRender(function rendererAnimationStep(willDraw, now) {
            stepAll(now, cy);
          }, renderer.beforeRenderPriorities.animations);
        } else {
          // manage the animation loop ourselves
          headlessStep(); // first call
        }
      }
    };

    var emitterOptions$1 = {
      qualifierCompare: function qualifierCompare(selector1, selector2) {
        if (selector1 == null || selector2 == null) {
          return selector1 == null && selector2 == null;
        } else {
          return selector1.sameText(selector2);
        }
      },
      eventMatches: function eventMatches(cy, listener, eventObj) {
        var selector = listener.qualifier;

        if (selector != null) {
          return cy !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
        }

        return true;
      },
      addEventFields: function addEventFields(cy, evt) {
        evt.cy = cy;
        evt.target = cy;
      },
      callbackContext: function callbackContext(cy, listener, eventObj) {
        return listener.qualifier != null ? eventObj.target : cy;
      }
    };

    var argSelector$1 = function argSelector(arg) {
      if (string(arg)) {
        return new Selector(arg);
      } else {
        return arg;
      }
    };

    var elesfn$v = {
      createEmitter: function createEmitter() {
        var _p = this._private;

        if (!_p.emitter) {
          _p.emitter = new Emitter(emitterOptions$1, this);
        }

        return this;
      },
      emitter: function emitter() {
        return this._private.emitter;
      },
      on: function on(events, selector, callback) {
        this.emitter().on(events, argSelector$1(selector), callback);
        return this;
      },
      removeListener: function removeListener(events, selector, callback) {
        this.emitter().removeListener(events, argSelector$1(selector), callback);
        return this;
      },
      removeAllListeners: function removeAllListeners() {
        this.emitter().removeAllListeners();
        return this;
      },
      one: function one(events, selector, callback) {
        this.emitter().one(events, argSelector$1(selector), callback);
        return this;
      },
      once: function once(events, selector, callback) {
        this.emitter().one(events, argSelector$1(selector), callback);
        return this;
      },
      emit: function emit(events, extraParams) {
        this.emitter().emit(events, extraParams);
        return this;
      },
      emitAndNotify: function emitAndNotify(event, eles) {
        this.emit(event);
        this.notify(event, eles);
        return this;
      }
    };
    define$3.eventAliasesOn(elesfn$v);

    var corefn$2 = {
      png: function png(options) {
        var renderer = this._private.renderer;
        options = options || {};
        return renderer.png(options);
      },
      jpg: function jpg(options) {
        var renderer = this._private.renderer;
        options = options || {};
        options.bg = options.bg || '#fff';
        return renderer.jpg(options);
      }
    };
    corefn$2.jpeg = corefn$2.jpg;

    var corefn$3 = {
      layout: function layout(options) {
        var cy = this;

        if (options == null) {
          error('Layout options must be specified to make a layout');
          return;
        }

        if (options.name == null) {
          error('A `name` must be specified to make a layout');
          return;
        }

        var name = options.name;
        var Layout = cy.extension('layout', name);

        if (Layout == null) {
          error('No such layout `' + name + '` found.  Did you forget to import it and `cytoscape.use()` it?');
          return;
        }

        var eles;

        if (string(options.eles)) {
          eles = cy.$(options.eles);
        } else {
          eles = options.eles != null ? options.eles : cy.$();
        }

        var layout = new Layout(extend({}, options, {
          cy: cy,
          eles: eles
        }));
        return layout;
      }
    };
    corefn$3.createLayout = corefn$3.makeLayout = corefn$3.layout;

    var corefn$4 = {
      notify: function notify(eventName, eventEles) {
        var _p = this._private;

        if (this.batching()) {
          _p.batchNotifications = _p.batchNotifications || {};
          var eles = _p.batchNotifications[eventName] = _p.batchNotifications[eventName] || this.collection();

          if (eventEles != null) {
            eles.merge(eventEles);
          }

          return; // notifications are disabled during batching
        }

        if (!_p.notificationsEnabled) {
          return;
        } // exit on disabled


        var renderer = this.renderer(); // exit if destroy() called on core or renderer in between frames #1499 #1528

        if (this.destroyed() || !renderer) {
          return;
        }

        renderer.notify(eventName, eventEles);
      },
      notifications: function notifications(bool) {
        var p = this._private;

        if (bool === undefined) {
          return p.notificationsEnabled;
        } else {
          p.notificationsEnabled = bool ? true : false;
        }

        return this;
      },
      noNotifications: function noNotifications(callback) {
        this.notifications(false);
        callback();
        this.notifications(true);
      },
      batching: function batching() {
        return this._private.batchCount > 0;
      },
      startBatch: function startBatch() {
        var _p = this._private;

        if (_p.batchCount == null) {
          _p.batchCount = 0;
        }

        if (_p.batchCount === 0) {
          _p.batchStyleEles = this.collection();
          _p.batchNotifications = {};
        }

        _p.batchCount++;
        return this;
      },
      endBatch: function endBatch() {
        var _p = this._private;

        if (_p.batchCount === 0) {
          return this;
        }

        _p.batchCount--;

        if (_p.batchCount === 0) {
          // update style for dirty eles
          _p.batchStyleEles.updateStyle();

          var renderer = this.renderer(); // notify the renderer of queued eles and event types

          Object.keys(_p.batchNotifications).forEach(function (eventName) {
            var eles = _p.batchNotifications[eventName];

            if (eles.empty()) {
              renderer.notify(eventName);
            } else {
              renderer.notify(eventName, eles);
            }
          });
        }

        return this;
      },
      batch: function batch(callback) {
        this.startBatch();
        callback();
        this.endBatch();
        return this;
      },
      // for backwards compatibility
      batchData: function batchData(map) {
        var cy = this;
        return this.batch(function () {
          var ids = Object.keys(map);

          for (var i = 0; i < ids.length; i++) {
            var id = ids[i];
            var data = map[id];
            var ele = cy.getElementById(id);
            ele.data(data);
          }
        });
      }
    };

    var rendererDefaults = defaults({
      hideEdgesOnViewport: false,
      textureOnViewport: false,
      motionBlur: false,
      motionBlurOpacity: 0.05,
      pixelRatio: undefined,
      desktopTapThreshold: 4,
      touchTapThreshold: 8,
      wheelSensitivity: 1,
      debug: false,
      showFps: false
    });
    var corefn$5 = {
      renderTo: function renderTo(context, zoom, pan, pxRatio) {
        var r = this._private.renderer;
        r.renderTo(context, zoom, pan, pxRatio);
        return this;
      },
      renderer: function renderer() {
        return this._private.renderer;
      },
      forceRender: function forceRender() {
        this.notify('draw');
        return this;
      },
      resize: function resize() {
        this.invalidateSize();
        this.emitAndNotify('resize');
        return this;
      },
      initRenderer: function initRenderer(options) {
        var cy = this;
        var RendererProto = cy.extension('renderer', options.name);

        if (RendererProto == null) {
          error("Can not initialise: No such renderer `".concat(options.name, "` found. Did you forget to import it and `cytoscape.use()` it?"));
          return;
        }

        if (options.wheelSensitivity !== undefined) {
          warn("You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.");
        }

        var rOpts = rendererDefaults(options);
        rOpts.cy = cy;
        cy._private.renderer = new RendererProto(rOpts);
        this.notify('init');
      },
      destroyRenderer: function destroyRenderer() {
        var cy = this;
        cy.notify('destroy'); // destroy the renderer

        var domEle = cy.container();

        if (domEle) {
          domEle._cyreg = null;

          while (domEle.childNodes.length > 0) {
            domEle.removeChild(domEle.childNodes[0]);
          }
        }

        cy._private.renderer = null; // to be extra safe, remove the ref

        cy.mutableElements().forEach(function (ele) {
          var _p = ele._private;
          _p.rscratch = {};
          _p.rstyle = {};
          _p.animation.current = [];
          _p.animation.queue = [];
        });
      },
      onRender: function onRender(fn) {
        return this.on('render', fn);
      },
      offRender: function offRender(fn) {
        return this.off('render', fn);
      }
    };
    corefn$5.invalidateDimensions = corefn$5.resize;

    var corefn$6 = {
      // get a collection
      // - empty collection on no args
      // - collection of elements in the graph on selector arg
      // - guarantee a returned collection when elements or collection specified
      collection: function collection(eles, opts) {
        if (string(eles)) {
          return this.$(eles);
        } else if (elementOrCollection(eles)) {
          return eles.collection();
        } else if (array(eles)) {
          return new Collection(this, eles, opts);
        }

        return new Collection(this);
      },
      nodes: function nodes(selector) {
        var nodes = this.$(function (ele) {
          return ele.isNode();
        });

        if (selector) {
          return nodes.filter(selector);
        }

        return nodes;
      },
      edges: function edges(selector) {
        var edges = this.$(function (ele) {
          return ele.isEdge();
        });

        if (selector) {
          return edges.filter(selector);
        }

        return edges;
      },
      // search the graph like jQuery
      $: function $(selector) {
        var eles = this._private.elements;

        if (selector) {
          return eles.filter(selector);
        } else {
          return eles.spawnSelf();
        }
      },
      mutableElements: function mutableElements() {
        return this._private.elements;
      }
    }; // aliases

    corefn$6.elements = corefn$6.filter = corefn$6.$;

    var styfn = {}; // keys for style blocks, e.g. ttfftt

    var TRUE = 't';
    var FALSE = 'f'; // (potentially expensive calculation)
    // apply the style to the element based on
    // - its bypass
    // - what selectors match it

    styfn.apply = function (eles) {
      var self = this;
      var _p = self._private;
      var cy = _p.cy;
      var updatedEles = cy.collection();

      for (var ie = 0; ie < eles.length; ie++) {
        var ele = eles[ie];
        var cxtMeta = self.getContextMeta(ele);

        if (cxtMeta.empty) {
          continue;
        }

        var cxtStyle = self.getContextStyle(cxtMeta);
        var app = self.applyContextStyle(cxtMeta, cxtStyle, ele);

        if (ele._private.appliedInitStyle) {
          self.updateTransitions(ele, app.diffProps);
        } else {
          ele._private.appliedInitStyle = true;
        }

        var hintsDiff = self.updateStyleHints(ele);

        if (hintsDiff) {
          updatedEles.push(ele);
        }
      } // for elements


      return updatedEles;
    };

    styfn.getPropertiesDiff = function (oldCxtKey, newCxtKey) {
      var self = this;
      var cache = self._private.propDiffs = self._private.propDiffs || {};
      var dualCxtKey = oldCxtKey + '-' + newCxtKey;
      var cachedVal = cache[dualCxtKey];

      if (cachedVal) {
        return cachedVal;
      }

      var diffProps = [];
      var addedProp = {};

      for (var i = 0; i < self.length; i++) {
        var cxt = self[i];
        var oldHasCxt = oldCxtKey[i] === TRUE;
        var newHasCxt = newCxtKey[i] === TRUE;
        var cxtHasDiffed = oldHasCxt !== newHasCxt;
        var cxtHasMappedProps = cxt.mappedProperties.length > 0;

        if (cxtHasDiffed || newHasCxt && cxtHasMappedProps) {
          var props = void 0;

          if (cxtHasDiffed && cxtHasMappedProps) {
            props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
          } else if (cxtHasDiffed) {
            props = cxt.properties; // need to check them all
          } else if (cxtHasMappedProps) {
            props = cxt.mappedProperties; // only need to check mapped
          }

          for (var j = 0; j < props.length; j++) {
            var prop = props[j];
            var name = prop.name; // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
            // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
            // is cached)

            var laterCxtOverrides = false;

            for (var k = i + 1; k < self.length; k++) {
              var laterCxt = self[k];
              var hasLaterCxt = newCxtKey[k] === TRUE;

              if (!hasLaterCxt) {
                continue;
              } // can't override unless the context is active


              laterCxtOverrides = laterCxt.properties[prop.name] != null;

              if (laterCxtOverrides) {
                break;
              } // exit early as long as one later context overrides

            }

            if (!addedProp[name] && !laterCxtOverrides) {
              addedProp[name] = true;
              diffProps.push(name);
            }
          } // for props

        } // if

      } // for contexts


      cache[dualCxtKey] = diffProps;
      return diffProps;
    };

    styfn.getContextMeta = function (ele) {
      var self = this;
      var cxtKey = '';
      var diffProps;
      var prevKey = ele._private.styleCxtKey || ''; // get the cxt key

      for (var i = 0; i < self.length; i++) {
        var context = self[i];
        var contextSelectorMatches = context.selector && context.selector.matches(ele); // NB: context.selector may be null for 'core'

        if (contextSelectorMatches) {
          cxtKey += TRUE;
        } else {
          cxtKey += FALSE;
        }
      } // for context


      diffProps = self.getPropertiesDiff(prevKey, cxtKey);
      ele._private.styleCxtKey = cxtKey;
      return {
        key: cxtKey,
        diffPropNames: diffProps,
        empty: diffProps.length === 0
      };
    }; // gets a computed ele style object based on matched contexts


    styfn.getContextStyle = function (cxtMeta) {
      var cxtKey = cxtMeta.key;
      var self = this;
      var cxtStyles = this._private.contextStyles = this._private.contextStyles || {}; // if already computed style, returned cached copy

      if (cxtStyles[cxtKey]) {
        return cxtStyles[cxtKey];
      }

      var style = {
        _private: {
          key: cxtKey
        }
      };

      for (var i = 0; i < self.length; i++) {
        var cxt = self[i];
        var hasCxt = cxtKey[i] === TRUE;

        if (!hasCxt) {
          continue;
        }

        for (var j = 0; j < cxt.properties.length; j++) {
          var prop = cxt.properties[j];
          style[prop.name] = prop;
        }
      }

      cxtStyles[cxtKey] = style;
      return style;
    };

    styfn.applyContextStyle = function (cxtMeta, cxtStyle, ele) {
      var self = this;
      var diffProps = cxtMeta.diffPropNames;
      var retDiffProps = {};
      var types = self.types;

      for (var i = 0; i < diffProps.length; i++) {
        var diffPropName = diffProps[i];
        var cxtProp = cxtStyle[diffPropName];
        var eleProp = ele.pstyle(diffPropName);

        if (!cxtProp) {
          // no context prop means delete
          if (!eleProp) {
            continue; // no existing prop means nothing needs to be removed
            // nb affects initial application on mapped values like control-point-distances
          } else if (eleProp.bypass) {
            cxtProp = {
              name: diffPropName,
              deleteBypassed: true
            };
          } else {
            cxtProp = {
              name: diffPropName,
              "delete": true
            };
          }
        } // save cycles when the context prop doesn't need to be applied


        if (eleProp === cxtProp) {
          continue;
        } // save cycles when a mapped context prop doesn't need to be applied


        if (cxtProp.mapped === types.fn // context prop is function mapper
        && eleProp != null // some props can be null even by default (e.g. a prop that overrides another one)
        && eleProp.mapping != null // ele prop is a concrete value from from a mapper
        && eleProp.mapping.value === cxtProp.value // the current prop on the ele is a flat prop value for the function mapper
        ) {
            // NB don't write to cxtProp, as it's shared among eles (stored in stylesheet)
            var mapping = eleProp.mapping; // can write to mapping, as it's a per-ele copy

            var fnValue = mapping.fnValue = cxtProp.value(ele); // temporarily cache the value in case of a miss

            if (fnValue === mapping.prevFnValue) {
              continue;
            }
          }

        var retDiffProp = retDiffProps[diffPropName] = {
          prev: eleProp
        };
        self.applyParsedProperty(ele, cxtProp);
        retDiffProp.next = ele.pstyle(diffPropName);

        if (retDiffProp.next && retDiffProp.next.bypass) {
          retDiffProp.next = retDiffProp.next.bypassed;
        }
      }

      return {
        diffProps: retDiffProps
      };
    };

    styfn.updateStyleHints = function (ele) {
      var _p = ele._private;
      var self = this;
      var propNames = self.propertyGroupNames;
      var propGrKeys = self.propertyGroupKeys;

      var propHash = function propHash(ele, propNames, seedKey) {
        return self.getPropertiesHash(ele, propNames, seedKey);
      };

      var oldStyleKey = _p.styleKey;

      if (ele.removed()) {
        return false;
      }

      var isNode = _p.group === 'nodes'; // get the style key hashes per prop group
      // but lazily -- only use non-default prop values to reduce the number of hashes
      //

      var overriddenStyles = ele._private.style;
      propNames = Object.keys(overriddenStyles);

      for (var i = 0; i < propGrKeys.length; i++) {
        var grKey = propGrKeys[i];
        _p.styleKeys[grKey] = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];
      }

      var updateGrKey1 = function updateGrKey1(val, grKey) {
        return _p.styleKeys[grKey][0] = hashInt(val, _p.styleKeys[grKey][0]);
      };

      var updateGrKey2 = function updateGrKey2(val, grKey) {
        return _p.styleKeys[grKey][1] = hashIntAlt(val, _p.styleKeys[grKey][1]);
      };

      var updateGrKey = function updateGrKey(val, grKey) {
        updateGrKey1(val, grKey);
        updateGrKey2(val, grKey);
      };

      var updateGrKeyWStr = function updateGrKeyWStr(strVal, grKey) {
        for (var j = 0; j < strVal.length; j++) {
          var ch = strVal.charCodeAt(j);
          updateGrKey1(ch, grKey);
          updateGrKey2(ch, grKey);
        }
      }; // - hashing works on 32 bit ints b/c we use bitwise ops
      // - small numbers get cut off (e.g. 0.123 is seen as 0 by the hashing function)
      // - raise up small numbers so more significant digits are seen by hashing
      // - make small numbers larger than a normal value to avoid collisions
      // - works in practice and it's relatively cheap


      var N = 2000000000;

      var cleanNum = function cleanNum(val) {
        return -128 < val && val < 128 && Math.floor(val) !== val ? N - (val * 1024 | 0) : val;
      };

      for (var _i = 0; _i < propNames.length; _i++) {
        var name = propNames[_i];
        var parsedProp = overriddenStyles[name];

        if (parsedProp == null) {
          continue;
        }

        var propInfo = this.properties[name];
        var type = propInfo.type;
        var _grKey = propInfo.groupKey;
        var normalizedNumberVal = void 0;

        if (propInfo.hashOverride != null) {
          normalizedNumberVal = propInfo.hashOverride(ele, parsedProp);
        } else if (parsedProp.pfValue != null) {
          normalizedNumberVal = parsedProp.pfValue;
        } // might not be a number if it allows enums


        var numberVal = propInfo.enums == null ? parsedProp.value : null;
        var haveNormNum = normalizedNumberVal != null;
        var haveUnitedNum = numberVal != null;
        var haveNum = haveNormNum || haveUnitedNum;
        var units = parsedProp.units; // numbers are cheaper to hash than strings
        // 1 hash op vs n hash ops (for length n string)

        if (type.number && haveNum && !type.multiple) {
          var v = haveNormNum ? normalizedNumberVal : numberVal;
          updateGrKey(cleanNum(v), _grKey);

          if (!haveNormNum && units != null) {
            updateGrKeyWStr(units, _grKey);
          }
        } else {
          updateGrKeyWStr(parsedProp.strValue, _grKey);
        }
      } // overall style key
      //


      var hash = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];

      for (var _i2 = 0; _i2 < propGrKeys.length; _i2++) {
        var _grKey2 = propGrKeys[_i2];
        var grHash = _p.styleKeys[_grKey2];
        hash[0] = hashInt(grHash[0], hash[0]);
        hash[1] = hashIntAlt(grHash[1], hash[1]);
      }

      _p.styleKey = combineHashes(hash[0], hash[1]); // label dims
      //

      var sk = _p.styleKeys;
      _p.labelDimsKey = combineHashesArray(sk.labelDimensions);
      var labelKeys = propHash(ele, ['label'], sk.labelDimensions);
      _p.labelKey = combineHashesArray(labelKeys);
      _p.labelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, labelKeys));

      if (!isNode) {
        var sourceLabelKeys = propHash(ele, ['source-label'], sk.labelDimensions);
        _p.sourceLabelKey = combineHashesArray(sourceLabelKeys);
        _p.sourceLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, sourceLabelKeys));
        var targetLabelKeys = propHash(ele, ['target-label'], sk.labelDimensions);
        _p.targetLabelKey = combineHashesArray(targetLabelKeys);
        _p.targetLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, targetLabelKeys));
      } // node
      //


      if (isNode) {
        var _p$styleKeys = _p.styleKeys,
            nodeBody = _p$styleKeys.nodeBody,
            nodeBorder = _p$styleKeys.nodeBorder,
            backgroundImage = _p$styleKeys.backgroundImage,
            compound = _p$styleKeys.compound,
            pie = _p$styleKeys.pie;
        var nodeKeys = [nodeBody, nodeBorder, backgroundImage, compound, pie].filter(function (k) {
          return k != null;
        }).reduce(hashArrays, [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT]);
        _p.nodeKey = combineHashesArray(nodeKeys);
        _p.hasPie = pie != null && pie[0] !== DEFAULT_HASH_SEED && pie[1] !== DEFAULT_HASH_SEED_ALT;
      }

      return oldStyleKey !== _p.styleKey;
    };

    styfn.clearStyleHints = function (ele) {
      var _p = ele._private;
      _p.styleCxtKey = '';
      _p.styleKeys = {};
      _p.styleKey = null;
      _p.labelKey = null;
      _p.labelStyleKey = null;
      _p.sourceLabelKey = null;
      _p.sourceLabelStyleKey = null;
      _p.targetLabelKey = null;
      _p.targetLabelStyleKey = null;
      _p.nodeKey = null;
      _p.hasPie = null;
    }; // apply a property to the style (for internal use)
    // returns whether application was successful
    //
    // now, this function flattens the property, and here's how:
    //
    // for parsedProp:{ bypass: true, deleteBypass: true }
    // no property is generated, instead the bypass property in the
    // element's style is replaced by what's pointed to by the `bypassed`
    // field in the bypass property (i.e. restoring the property the
    // bypass was overriding)
    //
    // for parsedProp:{ mapped: truthy }
    // the generated flattenedProp:{ mapping: prop }
    //
    // for parsedProp:{ bypass: true }
    // the generated flattenedProp:{ bypassed: parsedProp }


    styfn.applyParsedProperty = function (ele, parsedProp) {
      var self = this;
      var prop = parsedProp;
      var style = ele._private.style;
      var flatProp;
      var types = self.types;
      var type = self.properties[prop.name].type;
      var propIsBypass = prop.bypass;
      var origProp = style[prop.name];
      var origPropIsBypass = origProp && origProp.bypass;
      var _p = ele._private;
      var flatPropMapping = 'mapping';

      var getVal = function getVal(p) {
        if (p == null) {
          return null;
        } else if (p.pfValue != null) {
          return p.pfValue;
        } else {
          return p.value;
        }
      };

      var checkTriggers = function checkTriggers() {
        var fromVal = getVal(origProp);
        var toVal = getVal(prop);
        self.checkTriggers(ele, prop.name, fromVal, toVal);
      };

      if (prop && prop.name.substr(0, 3) === 'pie') {
        warn('The pie style properties are deprecated.  Create charts using background images instead.');
      } // edge sanity checks to prevent the client from making serious mistakes


      if (parsedProp.name === 'curve-style' && ele.isEdge() && ( // loops must be bundled beziers
      parsedProp.value !== 'bezier' && ele.isLoop() || // edges connected to compound nodes can not be haystacks
      parsedProp.value === 'haystack' && (ele.source().isParent() || ele.target().isParent()))) {
        prop = parsedProp = this.parse(parsedProp.name, 'bezier', propIsBypass);
      }

      if (prop["delete"]) {
        // delete the property and use the default value on falsey value
        style[prop.name] = undefined;
        checkTriggers();
        return true;
      }

      if (prop.deleteBypassed) {
        // delete the property that the
        if (!origProp) {
          checkTriggers();
          return true; // can't delete if no prop
        } else if (origProp.bypass) {
          // delete bypassed
          origProp.bypassed = undefined;
          checkTriggers();
          return true;
        } else {
          return false; // we're unsuccessful deleting the bypassed
        }
      } // check if we need to delete the current bypass


      if (prop.deleteBypass) {
        // then this property is just here to indicate we need to delete
        if (!origProp) {
          checkTriggers();
          return true; // property is already not defined
        } else if (origProp.bypass) {
          // then replace the bypass property with the original
          // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
          style[prop.name] = origProp.bypassed;
          checkTriggers();
          return true;
        } else {
          return false; // we're unsuccessful deleting the bypass
        }
      }

      var printMappingErr = function printMappingErr() {
        warn('Do not assign mappings to elements without corresponding data (i.e. ele `' + ele.id() + '` has no mapping for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined');
      }; // put the property in the style objects


      switch (prop.mapped) {
        // flatten the property if mapped
        case types.mapData:
          {
            // flatten the field (e.g. data.foo.bar)
            var fields = prop.field.split('.');
            var fieldVal = _p.data;

            for (var i = 0; i < fields.length && fieldVal; i++) {
              var field = fields[i];
              fieldVal = fieldVal[field];
            }

            if (fieldVal == null) {
              printMappingErr();
              return false;
            }

            var percent;

            if (!number(fieldVal)) {
              // then don't apply and fall back on the existing style
              warn('Do not use continuous mappers without specifying numeric data (i.e. `' + prop.field + ': ' + fieldVal + '` for `' + ele.id() + '` is non-numeric)');
              return false;
            } else {
              var fieldWidth = prop.fieldMax - prop.fieldMin;

              if (fieldWidth === 0) {
                // safety check -- not strictly necessary as no props of zero range should be passed here
                percent = 0;
              } else {
                percent = (fieldVal - prop.fieldMin) / fieldWidth;
              }
            } // make sure to bound percent value


            if (percent < 0) {
              percent = 0;
            } else if (percent > 1) {
              percent = 1;
            }

            if (type.color) {
              var r1 = prop.valueMin[0];
              var r2 = prop.valueMax[0];
              var g1 = prop.valueMin[1];
              var g2 = prop.valueMax[1];
              var b1 = prop.valueMin[2];
              var b2 = prop.valueMax[2];
              var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
              var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];
              var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];
              flatProp = {
                // colours are simple, so just create the flat property instead of expensive string parsing
                bypass: prop.bypass,
                // we're a bypass if the mapping property is a bypass
                name: prop.name,
                value: clr,
                strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
              };
            } else if (type.number) {
              var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
              flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);
            } else {
              return false; // can only map to colours and numbers
            }

            if (!flatProp) {
              // if we can't flatten the property, then don't apply the property and fall back on the existing style
              printMappingErr();
              return false;
            }

            flatProp.mapping = prop; // keep a reference to the mapping

            prop = flatProp; // the flattened (mapped) property is the one we want

            break;
          }
        // direct mapping

        case types.data:
          {
            // flatten the field (e.g. data.foo.bar)
            var _fields = prop.field.split('.');

            var _fieldVal = _p.data;

            for (var _i3 = 0; _i3 < _fields.length && _fieldVal; _i3++) {
              var _field = _fields[_i3];
              _fieldVal = _fieldVal[_field];
            }

            if (_fieldVal != null) {
              flatProp = this.parse(prop.name, _fieldVal, prop.bypass, flatPropMapping);
            }

            if (!flatProp) {
              // if we can't flatten the property, then don't apply and fall back on the existing style
              printMappingErr();
              return false;
            }

            flatProp.mapping = prop; // keep a reference to the mapping

            prop = flatProp; // the flattened (mapped) property is the one we want

            break;
          }

        case types.fn:
          {
            var fn = prop.value;
            var fnRetVal = prop.fnValue != null ? prop.fnValue : fn(ele); // check for cached value before calling function

            prop.prevFnValue = fnRetVal;

            if (fnRetVal == null) {
              warn('Custom function mappers may not return null (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is null)');
              return false;
            }

            flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);

            if (!flatProp) {
              warn('Custom function mappers may not return invalid values for the property type (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is invalid)');
              return false;
            }

            flatProp.mapping = copy(prop); // keep a reference to the mapping

            prop = flatProp; // the flattened (mapped) property is the one we want

            break;
          }

        case undefined:
          break;
        // just set the property

        default:
          return false;
        // not a valid mapping
      } // if the property is a bypass property, then link the resultant property to the original one


      if (propIsBypass) {
        if (origPropIsBypass) {
          // then this bypass overrides the existing one
          prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
        } else {
          // then link the orig prop to the new bypass
          prop.bypassed = origProp;
        }

        style[prop.name] = prop; // and set
      } else {
        // prop is not bypass
        if (origPropIsBypass) {
          // then keep the orig prop (since it's a bypass) and link to the new prop
          origProp.bypassed = prop;
        } else {
          // then just replace the old prop with the new one
          style[prop.name] = prop;
        }
      }

      checkTriggers();
      return true;
    };

    styfn.cleanElements = function (eles, keepBypasses) {
      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        this.clearStyleHints(ele);
        ele.dirtyCompoundBoundsCache();
        ele.dirtyBoundingBoxCache();

        if (!keepBypasses) {
          ele._private.style = {};
        } else {
          var style = ele._private.style;
          var propNames = Object.keys(style);

          for (var j = 0; j < propNames.length; j++) {
            var propName = propNames[j];
            var eleProp = style[propName];

            if (eleProp != null) {
              if (eleProp.bypass) {
                eleProp.bypassed = null;
              } else {
                style[propName] = null;
              }
            }
          }
        }
      }
    }; // updates the visual style for all elements (useful for manual style modification after init)


    styfn.update = function () {
      var cy = this._private.cy;
      var eles = cy.mutableElements();
      eles.updateStyle();
    }; // diffProps : { name => { prev, next } }


    styfn.updateTransitions = function (ele, diffProps) {
      var self = this;
      var _p = ele._private;
      var props = ele.pstyle('transition-property').value;
      var duration = ele.pstyle('transition-duration').pfValue;
      var delay = ele.pstyle('transition-delay').pfValue;

      if (props.length > 0 && duration > 0) {
        var style = {}; // build up the style to animate towards

        var anyPrev = false;

        for (var i = 0; i < props.length; i++) {
          var prop = props[i];
          var styProp = ele.pstyle(prop);
          var diffProp = diffProps[prop];

          if (!diffProp) {
            continue;
          }

          var prevProp = diffProp.prev;
          var fromProp = prevProp;
          var toProp = diffProp.next != null ? diffProp.next : styProp;
          var diff = false;
          var initVal = void 0;
          var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

          if (!fromProp) {
            continue;
          } // consider px values


          if (number(fromProp.pfValue) && number(toProp.pfValue)) {
            diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy

            initVal = fromProp.pfValue + initDt * diff; // consider numerical values
          } else if (number(fromProp.value) && number(toProp.value)) {
            diff = toProp.value - fromProp.value; // nonzero is truthy

            initVal = fromProp.value + initDt * diff; // consider colour values
          } else if (array(fromProp.value) && array(toProp.value)) {
            diff = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];
            initVal = fromProp.strValue;
          } // the previous value is good for an animation only if it's different


          if (diff) {
            style[prop] = toProp.strValue; // to val

            this.applyBypass(ele, prop, initVal); // from val

            anyPrev = true;
          }
        } // end if props allow ani
        // can't transition if there's nothing previous to transition from


        if (!anyPrev) {
          return;
        }

        _p.transitioning = true;
        new Promise$1(function (resolve) {
          if (delay > 0) {
            ele.delayAnimation(delay).play().promise().then(resolve);
          } else {
            resolve();
          }
        }).then(function () {
          return ele.animation({
            style: style,
            duration: duration,
            easing: ele.pstyle('transition-timing-function').value,
            queue: false
          }).play().promise();
        }).then(function () {
          // if( !isBypass ){
          self.removeBypasses(ele, props);
          ele.emitAndNotify('style'); // }

          _p.transitioning = false;
        });
      } else if (_p.transitioning) {
        this.removeBypasses(ele, props);
        ele.emitAndNotify('style');
        _p.transitioning = false;
      }
    };

    styfn.checkTrigger = function (ele, name, fromValue, toValue, getTrigger, onTrigger) {
      var prop = this.properties[name];
      var triggerCheck = getTrigger(prop);

      if (triggerCheck != null && triggerCheck(fromValue, toValue)) {
        onTrigger(prop);
      }
    };

    styfn.checkZOrderTrigger = function (ele, name, fromValue, toValue) {
      var _this = this;

      this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
        return prop.triggersZOrder;
      }, function () {
        _this._private.cy.notify('zorder', ele);
      });
    };

    styfn.checkBoundsTrigger = function (ele, name, fromValue, toValue) {
      this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
        return prop.triggersBounds;
      }, function (prop) {
        ele.dirtyCompoundBoundsCache();
        ele.dirtyBoundingBoxCache(); // if the prop change makes the bb of pll bezier edges invalid,
        // then dirty the pll edge bb cache as well

        if ( // only for beziers -- so performance of other edges isn't affected
        name === 'curve-style' && (fromValue === 'bezier' || toValue === 'bezier') && prop.triggersBoundsOfParallelBeziers) {
          ele.parallelEdges().forEach(function (pllEdge) {
            if (pllEdge.isBundledBezier()) {
              pllEdge.dirtyBoundingBoxCache();
            }
          });
        }
      });
    };

    styfn.checkTriggers = function (ele, name, fromValue, toValue) {
      ele.dirtyStyleCache();
      this.checkZOrderTrigger(ele, name, fromValue, toValue);
      this.checkBoundsTrigger(ele, name, fromValue, toValue);
    };

    var styfn$1 = {}; // bypasses are applied to an existing style on an element, and just tacked on temporarily
    // returns true iff application was successful for at least 1 specified property

    styfn$1.applyBypass = function (eles, name, value, updateTransitions) {
      var self = this;
      var props = [];
      var isBypass = true; // put all the properties (can specify one or many) in an array after parsing them

      if (name === '*' || name === '**') {
        // apply to all property names
        if (value !== undefined) {
          for (var i = 0; i < self.properties.length; i++) {
            var prop = self.properties[i];
            var _name = prop.name;
            var parsedProp = this.parse(_name, value, true);

            if (parsedProp) {
              props.push(parsedProp);
            }
          }
        }
      } else if (string(name)) {
        // then parse the single property
        var _parsedProp = this.parse(name, value, true);

        if (_parsedProp) {
          props.push(_parsedProp);
        }
      } else if (plainObject(name)) {
        // then parse each property
        var specifiedProps = name;
        updateTransitions = value;
        var names = Object.keys(specifiedProps);

        for (var _i = 0; _i < names.length; _i++) {
          var _name2 = names[_i];
          var _value = specifiedProps[_name2];

          if (_value === undefined) {
            // try camel case name too
            _value = specifiedProps[dash2camel(_name2)];
          }

          if (_value !== undefined) {
            var _parsedProp2 = this.parse(_name2, _value, true);

            if (_parsedProp2) {
              props.push(_parsedProp2);
            }
          }
        }
      } else {
        // can't do anything without well defined properties
        return false;
      } // we've failed if there are no valid properties


      if (props.length === 0) {
        return false;
      } // now, apply the bypass properties on the elements


      var ret = false; // return true if at least one succesful bypass applied

      for (var _i2 = 0; _i2 < eles.length; _i2++) {
        // for each ele
        var ele = eles[_i2];
        var diffProps = {};
        var diffProp = void 0;

        for (var j = 0; j < props.length; j++) {
          // for each prop
          var _prop = props[j];

          if (updateTransitions) {
            var prevProp = ele.pstyle(_prop.name);
            diffProp = diffProps[_prop.name] = {
              prev: prevProp
            };
          }

          ret = this.applyParsedProperty(ele, copy(_prop)) || ret;

          if (updateTransitions) {
            diffProp.next = ele.pstyle(_prop.name);
          }
        } // for props


        if (ret) {
          this.updateStyleHints(ele);
        }

        if (updateTransitions) {
          this.updateTransitions(ele, diffProps, isBypass);
        }
      } // for eles


      return ret;
    }; // only useful in specific cases like animation


    styfn$1.overrideBypass = function (eles, name, value) {
      name = camel2dash(name);

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var prop = ele._private.style[name];
        var type = this.properties[name].type;
        var isColor = type.color;
        var isMulti = type.mutiple;
        var oldValue = !prop ? null : prop.pfValue != null ? prop.pfValue : prop.value;

        if (!prop || !prop.bypass) {
          // need a bypass if one doesn't exist
          this.applyBypass(ele, name, value);
        } else {
          prop.value = value;

          if (prop.pfValue != null) {
            prop.pfValue = value;
          }

          if (isColor) {
            prop.strValue = 'rgb(' + value.join(',') + ')';
          } else if (isMulti) {
            prop.strValue = value.join(' ');
          } else {
            prop.strValue = '' + value;
          }

          this.updateStyleHints(ele);
        }

        this.checkTriggers(ele, name, oldValue, value);
      }
    };

    styfn$1.removeAllBypasses = function (eles, updateTransitions) {
      return this.removeBypasses(eles, this.propertyNames, updateTransitions);
    };

    styfn$1.removeBypasses = function (eles, props, updateTransitions) {
      var isBypass = true;

      for (var j = 0; j < eles.length; j++) {
        var ele = eles[j];
        var diffProps = {};

        for (var i = 0; i < props.length; i++) {
          var name = props[i];
          var prop = this.properties[name];
          var prevProp = ele.pstyle(prop.name);

          if (!prevProp || !prevProp.bypass) {
            // if a bypass doesn't exist for the prop, nothing needs to be removed
            continue;
          }

          var value = ''; // empty => remove bypass

          var parsedProp = this.parse(name, value, true);
          var diffProp = diffProps[prop.name] = {
            prev: prevProp
          };
          this.applyParsedProperty(ele, parsedProp);
          diffProp.next = ele.pstyle(prop.name);
        } // for props


        this.updateStyleHints(ele);

        if (updateTransitions) {
          this.updateTransitions(ele, diffProps, isBypass);
        }
      } // for eles

    };

    var styfn$2 = {}; // gets what an em size corresponds to in pixels relative to a dom element

    styfn$2.getEmSizeInPixels = function () {
      var px = this.containerCss('font-size');

      if (px != null) {
        return parseFloat(px);
      } else {
        return 1; // for headless
      }
    }; // gets css property from the core container


    styfn$2.containerCss = function (propName) {
      var cy = this._private.cy;
      var domElement = cy.container();

      if (window$1 && domElement && window$1.getComputedStyle) {
        return window$1.getComputedStyle(domElement).getPropertyValue(propName);
      }
    };

    var styfn$3 = {}; // gets the rendered style for an element

    styfn$3.getRenderedStyle = function (ele, prop) {
      if (prop) {
        return this.getStylePropertyValue(ele, prop, true);
      } else {
        return this.getRawStyle(ele, true);
      }
    }; // gets the raw style for an element


    styfn$3.getRawStyle = function (ele, isRenderedVal) {
      var self = this;
      ele = ele[0]; // insure it's an element

      if (ele) {
        var rstyle = {};

        for (var i = 0; i < self.properties.length; i++) {
          var prop = self.properties[i];
          var val = self.getStylePropertyValue(ele, prop.name, isRenderedVal);

          if (val != null) {
            rstyle[prop.name] = val;
            rstyle[dash2camel(prop.name)] = val;
          }
        }

        return rstyle;
      }
    };

    styfn$3.getIndexedStyle = function (ele, property, subproperty, index) {
      var pstyle = ele.pstyle(property)[subproperty][index];
      return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];
    };

    styfn$3.getStylePropertyValue = function (ele, propName, isRenderedVal) {
      var self = this;
      ele = ele[0]; // insure it's an element

      if (ele) {
        var prop = self.properties[propName];

        if (prop.alias) {
          prop = prop.pointsTo;
        }

        var type = prop.type;
        var styleProp = ele.pstyle(prop.name);

        if (styleProp) {
          var value = styleProp.value,
              units = styleProp.units,
              strValue = styleProp.strValue;

          if (isRenderedVal && type.number && value != null && number(value)) {
            var zoom = ele.cy().zoom();

            var getRenderedValue = function getRenderedValue(val) {
              return val * zoom;
            };

            var getValueStringWithUnits = function getValueStringWithUnits(val, units) {
              return getRenderedValue(val) + units;
            };

            var isArrayValue = array(value);
            var haveUnits = isArrayValue ? units.every(function (u) {
              return u != null;
            }) : units != null;

            if (haveUnits) {
              if (isArrayValue) {
                return value.map(function (v, i) {
                  return getValueStringWithUnits(v, units[i]);
                }).join(' ');
              } else {
                return getValueStringWithUnits(value, units);
              }
            } else {
              if (isArrayValue) {
                return value.map(function (v) {
                  return string(v) ? v : '' + getRenderedValue(v);
                }).join(' ');
              } else {
                return '' + getRenderedValue(value);
              }
            }
          } else if (strValue != null) {
            return strValue;
          }
        }

        return null;
      }
    };

    styfn$3.getAnimationStartStyle = function (ele, aniProps) {
      var rstyle = {};

      for (var i = 0; i < aniProps.length; i++) {
        var aniProp = aniProps[i];
        var name = aniProp.name;
        var styleProp = ele.pstyle(name);

        if (styleProp !== undefined) {
          // then make a prop of it
          if (plainObject(styleProp)) {
            styleProp = this.parse(name, styleProp.strValue);
          } else {
            styleProp = this.parse(name, styleProp);
          }
        }

        if (styleProp) {
          rstyle[name] = styleProp;
        }
      }

      return rstyle;
    };

    styfn$3.getPropsList = function (propsObj) {
      var self = this;
      var rstyle = [];
      var style = propsObj;
      var props = self.properties;

      if (style) {
        var names = Object.keys(style);

        for (var i = 0; i < names.length; i++) {
          var name = names[i];
          var val = style[name];
          var prop = props[name] || props[camel2dash(name)];
          var styleProp = this.parse(prop.name, val);

          if (styleProp) {
            rstyle.push(styleProp);
          }
        }
      }

      return rstyle;
    };

    styfn$3.getNonDefaultPropertiesHash = function (ele, propNames, seed) {
      var hash = seed.slice();
      var name, val, strVal, chVal;
      var i, j;

      for (i = 0; i < propNames.length; i++) {
        name = propNames[i];
        val = ele.pstyle(name, false);

        if (val == null) {
          continue;
        } else if (val.pfValue != null) {
          hash[0] = hashInt(chVal, hash[0]);
          hash[1] = hashIntAlt(chVal, hash[1]);
        } else {
          strVal = val.strValue;

          for (j = 0; j < strVal.length; j++) {
            chVal = strVal.charCodeAt(j);
            hash[0] = hashInt(chVal, hash[0]);
            hash[1] = hashIntAlt(chVal, hash[1]);
          }
        }
      }

      return hash;
    };

    styfn$3.getPropertiesHash = styfn$3.getNonDefaultPropertiesHash;

    var styfn$4 = {};

    styfn$4.appendFromJson = function (json) {
      var style = this;

      for (var i = 0; i < json.length; i++) {
        var context = json[i];
        var selector = context.selector;
        var props = context.style || context.css;
        var names = Object.keys(props);
        style.selector(selector); // apply selector

        for (var j = 0; j < names.length; j++) {
          var name = names[j];
          var value = props[name];
          style.css(name, value); // apply property
        }
      }

      return style;
    }; // accessible cy.style() function


    styfn$4.fromJson = function (json) {
      var style = this;
      style.resetToDefault();
      style.appendFromJson(json);
      return style;
    }; // get json from cy.style() api


    styfn$4.json = function () {
      var json = [];

      for (var i = this.defaultLength; i < this.length; i++) {
        var cxt = this[i];
        var selector = cxt.selector;
        var props = cxt.properties;
        var css = {};

        for (var j = 0; j < props.length; j++) {
          var prop = props[j];
          css[prop.name] = prop.strValue;
        }

        json.push({
          selector: !selector ? 'core' : selector.toString(),
          style: css
        });
      }

      return json;
    };

    var styfn$5 = {};

    styfn$5.appendFromString = function (string) {
      var self = this;
      var style = this;
      var remaining = '' + string;
      var selAndBlockStr;
      var blockRem;
      var propAndValStr; // remove comments from the style string

      remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, '');

      function removeSelAndBlockFromRemaining() {
        // remove the parsed selector and block from the remaining text to parse
        if (remaining.length > selAndBlockStr.length) {
          remaining = remaining.substr(selAndBlockStr.length);
        } else {
          remaining = '';
        }
      }

      function removePropAndValFromRem() {
        // remove the parsed property and value from the remaining block text to parse
        if (blockRem.length > propAndValStr.length) {
          blockRem = blockRem.substr(propAndValStr.length);
        } else {
          blockRem = '';
        }
      }

      for (;;) {
        var nothingLeftToParse = remaining.match(/^\s*$/);

        if (nothingLeftToParse) {
          break;
        }

        var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);

        if (!selAndBlock) {
          warn('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);
          break;
        }

        selAndBlockStr = selAndBlock[0]; // parse the selector

        var selectorStr = selAndBlock[1];

        if (selectorStr !== 'core') {
          var selector = new Selector(selectorStr);

          if (selector.invalid) {
            warn('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr); // skip this selector and block

            removeSelAndBlockFromRemaining();
            continue;
          }
        } // parse the block of properties and values


        var blockStr = selAndBlock[2];
        var invalidBlock = false;
        blockRem = blockStr;
        var props = [];

        for (;;) {
          var _nothingLeftToParse = blockRem.match(/^\s*$/);

          if (_nothingLeftToParse) {
            break;
          }

          var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);

          if (!propAndVal) {
            warn('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);
            invalidBlock = true;
            break;
          }

          propAndValStr = propAndVal[0];
          var propStr = propAndVal[1];
          var valStr = propAndVal[2];
          var prop = self.properties[propStr];

          if (!prop) {
            warn('Skipping property: Invalid property name in: ' + propAndValStr); // skip this property in the block

            removePropAndValFromRem();
            continue;
          }

          var parsedProp = style.parse(propStr, valStr);

          if (!parsedProp) {
            warn('Skipping property: Invalid property definition in: ' + propAndValStr); // skip this property in the block

            removePropAndValFromRem();
            continue;
          }

          props.push({
            name: propStr,
            val: valStr
          });
          removePropAndValFromRem();
        }

        if (invalidBlock) {
          removeSelAndBlockFromRemaining();
          break;
        } // put the parsed block in the style


        style.selector(selectorStr);

        for (var i = 0; i < props.length; i++) {
          var _prop = props[i];
          style.css(_prop.name, _prop.val);
        }

        removeSelAndBlockFromRemaining();
      }

      return style;
    };

    styfn$5.fromString = function (string) {
      var style = this;
      style.resetToDefault();
      style.appendFromString(string);
      return style;
    };

    var styfn$6 = {};

    (function () {
      var number = number$1;
      var rgba = rgbaNoBackRefs;
      var hsla = hslaNoBackRefs;
      var hex3$1 = hex3;
      var hex6$1 = hex6;

      var data = function data(prefix) {
        return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$';
      };

      var mapData = function mapData(prefix) {
        var mapArg = number + '|\\w+|' + rgba + '|' + hsla + '|' + hex3$1 + '|' + hex6$1;
        return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number + ')\\s*\\,\\s*(' + number + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
      };

      var urlRegexes = ['^url\\s*\\(\\s*[\'"]?(.+?)[\'"]?\\s*\\)$', '^(none)$', '^(.+)$']; // each visual style property has a type and needs to be validated according to it

      styfn$6.types = {
        time: {
          number: true,
          min: 0,
          units: 's|ms',
          implicitUnits: 'ms'
        },
        percent: {
          number: true,
          min: 0,
          max: 100,
          units: '%',
          implicitUnits: '%'
        },
        percentages: {
          number: true,
          min: 0,
          max: 100,
          units: '%',
          implicitUnits: '%',
          multiple: true
        },
        zeroOneNumber: {
          number: true,
          min: 0,
          max: 1,
          unitless: true
        },
        zeroOneNumbers: {
          number: true,
          min: 0,
          max: 1,
          unitless: true,
          multiple: true
        },
        nOneOneNumber: {
          number: true,
          min: -1,
          max: 1,
          unitless: true
        },
        nonNegativeInt: {
          number: true,
          min: 0,
          integer: true,
          unitless: true
        },
        position: {
          enums: ['parent', 'origin']
        },
        nodeSize: {
          number: true,
          min: 0,
          enums: ['label']
        },
        number: {
          number: true,
          unitless: true
        },
        numbers: {
          number: true,
          unitless: true,
          multiple: true
        },
        positiveNumber: {
          number: true,
          unitless: true,
          min: 0,
          strictMin: true
        },
        size: {
          number: true,
          min: 0
        },
        bidirectionalSize: {
          number: true
        },
        // allows negative
        bidirectionalSizeMaybePercent: {
          number: true,
          allowPercent: true
        },
        // allows negative
        bidirectionalSizes: {
          number: true,
          multiple: true
        },
        // allows negative
        sizeMaybePercent: {
          number: true,
          min: 0,
          allowPercent: true
        },
        axisDirection: {
          enums: ['horizontal', 'leftward', 'rightward', 'vertical', 'upward', 'downward', 'auto']
        },
        paddingRelativeTo: {
          enums: ['width', 'height', 'average', 'min', 'max']
        },
        bgWH: {
          number: true,
          min: 0,
          allowPercent: true,
          enums: ['auto'],
          multiple: true
        },
        bgPos: {
          number: true,
          allowPercent: true,
          multiple: true
        },
        bgRelativeTo: {
          enums: ['inner', 'include-padding'],
          multiple: true
        },
        bgRepeat: {
          enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'],
          multiple: true
        },
        bgFit: {
          enums: ['none', 'contain', 'cover'],
          multiple: true
        },
        bgCrossOrigin: {
          enums: ['anonymous', 'use-credentials'],
          multiple: true
        },
        bgClip: {
          enums: ['none', 'node'],
          multiple: true
        },
        bgContainment: {
          enums: ['inside', 'over'],
          multiple: true
        },
        color: {
          color: true
        },
        colors: {
          color: true,
          multiple: true
        },
        fill: {
          enums: ['solid', 'linear-gradient', 'radial-gradient']
        },
        bool: {
          enums: ['yes', 'no']
        },
        bools: {
          enums: ['yes', 'no'],
          multiple: true
        },
        lineStyle: {
          enums: ['solid', 'dotted', 'dashed']
        },
        lineCap: {
          enums: ['butt', 'round', 'square']
        },
        borderStyle: {
          enums: ['solid', 'dotted', 'dashed', 'double']
        },
        curveStyle: {
          enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments', 'straight', 'straight-triangle', 'taxi']
        },
        fontFamily: {
          regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$'
        },
        fontStyle: {
          enums: ['italic', 'normal', 'oblique']
        },
        fontWeight: {
          enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900]
        },
        textDecoration: {
          enums: ['none', 'underline', 'overline', 'line-through']
        },
        textTransform: {
          enums: ['none', 'uppercase', 'lowercase']
        },
        textWrap: {
          enums: ['none', 'wrap', 'ellipsis']
        },
        textOverflowWrap: {
          enums: ['whitespace', 'anywhere']
        },
        textBackgroundShape: {
          enums: ['rectangle', 'roundrectangle', 'round-rectangle']
        },
        nodeShape: {
          enums: ['rectangle', 'roundrectangle', 'round-rectangle', 'cutrectangle', 'cut-rectangle', 'bottomroundrectangle', 'bottom-round-rectangle', 'barrel', 'ellipse', 'triangle', 'round-triangle', 'square', 'pentagon', 'round-pentagon', 'hexagon', 'round-hexagon', 'concavehexagon', 'concave-hexagon', 'heptagon', 'round-heptagon', 'octagon', 'round-octagon', 'tag', 'round-tag', 'star', 'diamond', 'round-diamond', 'vee', 'rhomboid', 'polygon']
        },
        overlayShape: {
          enums: ['roundrectangle', 'round-rectangle', 'ellipse']
        },
        compoundIncludeLabels: {
          enums: ['include', 'exclude']
        },
        arrowShape: {
          enums: ['tee', 'triangle', 'triangle-tee', 'circle-triangle', 'triangle-cross', 'triangle-backcurve', 'vee', 'square', 'circle', 'diamond', 'chevron', 'none']
        },
        arrowFill: {
          enums: ['filled', 'hollow']
        },
        display: {
          enums: ['element', 'none']
        },
        visibility: {
          enums: ['hidden', 'visible']
        },
        zCompoundDepth: {
          enums: ['bottom', 'orphan', 'auto', 'top']
        },
        zIndexCompare: {
          enums: ['auto', 'manual']
        },
        valign: {
          enums: ['top', 'center', 'bottom']
        },
        halign: {
          enums: ['left', 'center', 'right']
        },
        justification: {
          enums: ['left', 'center', 'right', 'auto']
        },
        text: {
          string: true
        },
        data: {
          mapping: true,
          regex: data('data')
        },
        layoutData: {
          mapping: true,
          regex: data('layoutData')
        },
        scratch: {
          mapping: true,
          regex: data('scratch')
        },
        mapData: {
          mapping: true,
          regex: mapData('mapData')
        },
        mapLayoutData: {
          mapping: true,
          regex: mapData('mapLayoutData')
        },
        mapScratch: {
          mapping: true,
          regex: mapData('mapScratch')
        },
        fn: {
          mapping: true,
          fn: true
        },
        url: {
          regexes: urlRegexes,
          singleRegexMatchValue: true
        },
        urls: {
          regexes: urlRegexes,
          singleRegexMatchValue: true,
          multiple: true
        },
        propList: {
          propList: true
        },
        angle: {
          number: true,
          units: 'deg|rad',
          implicitUnits: 'rad'
        },
        textRotation: {
          number: true,
          units: 'deg|rad',
          implicitUnits: 'rad',
          enums: ['none', 'autorotate']
        },
        polygonPointList: {
          number: true,
          multiple: true,
          evenMultiple: true,
          min: -1,
          max: 1,
          unitless: true
        },
        edgeDistances: {
          enums: ['intersection', 'node-position']
        },
        edgeEndpoint: {
          number: true,
          multiple: true,
          units: '%|px|em|deg|rad',
          implicitUnits: 'px',
          enums: ['inside-to-node', 'outside-to-node', 'outside-to-node-or-label', 'outside-to-line', 'outside-to-line-or-label'],
          singleEnum: true,
          validate: function validate(valArr, unitsArr) {
            switch (valArr.length) {
              case 2:
                // can be % or px only
                return unitsArr[0] !== 'deg' && unitsArr[0] !== 'rad' && unitsArr[1] !== 'deg' && unitsArr[1] !== 'rad';

              case 1:
                // can be enum, deg, or rad only
                return string(valArr[0]) || unitsArr[0] === 'deg' || unitsArr[0] === 'rad';

              default:
                return false;
            }
          }
        },
        easing: {
          regexes: ['^(spring)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$', '^(cubic-bezier)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$'],
          enums: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine', 'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad', 'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic', 'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart', 'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint', 'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo', 'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ']
        },
        gradientDirection: {
          enums: ['to-bottom', 'to-top', 'to-left', 'to-right', 'to-bottom-right', 'to-bottom-left', 'to-top-right', 'to-top-left', 'to-right-bottom', 'to-left-bottom', 'to-right-top', 'to-left-top']
        },
        boundsExpansion: {
          number: true,
          multiple: true,
          min: 0,
          validate: function validate(valArr) {
            var length = valArr.length;
            return length === 1 || length === 2 || length === 4;
          }
        }
      };
      var diff = {
        zeroNonZero: function zeroNonZero(val1, val2) {
          if ((val1 == null || val2 == null) && val1 !== val2) {
            return true; // null cases could represent any value
          }

          if (val1 == 0 && val2 != 0) {
            return true;
          } else if (val1 != 0 && val2 == 0) {
            return true;
          } else {
            return false;
          }
        },
        any: function any(val1, val2) {
          return val1 != val2;
        },
        emptyNonEmpty: function emptyNonEmpty(str1, str2) {
          var empty1 = emptyString(str1);
          var empty2 = emptyString(str2);
          return empty1 && !empty2 || !empty1 && empty2;
        }
      }; // define visual style properties
      //
      // - n.b. adding a new group of props may require updates to updateStyleHints()
      // - adding new props to an existing group gets handled automatically

      var t = styfn$6.types;
      var mainLabel = [{
        name: 'label',
        type: t.text,
        triggersBounds: diff.any,
        triggersZOrder: diff.emptyNonEmpty
      }, {
        name: 'text-rotation',
        type: t.textRotation,
        triggersBounds: diff.any
      }, {
        name: 'text-margin-x',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'text-margin-y',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }];
      var sourceLabel = [{
        name: 'source-label',
        type: t.text,
        triggersBounds: diff.any
      }, {
        name: 'source-text-rotation',
        type: t.textRotation,
        triggersBounds: diff.any
      }, {
        name: 'source-text-margin-x',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'source-text-margin-y',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'source-text-offset',
        type: t.size,
        triggersBounds: diff.any
      }];
      var targetLabel = [{
        name: 'target-label',
        type: t.text,
        triggersBounds: diff.any
      }, {
        name: 'target-text-rotation',
        type: t.textRotation,
        triggersBounds: diff.any
      }, {
        name: 'target-text-margin-x',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'target-text-margin-y',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'target-text-offset',
        type: t.size,
        triggersBounds: diff.any
      }];
      var labelDimensions = [{
        name: 'font-family',
        type: t.fontFamily,
        triggersBounds: diff.any
      }, {
        name: 'font-style',
        type: t.fontStyle,
        triggersBounds: diff.any
      }, {
        name: 'font-weight',
        type: t.fontWeight,
        triggersBounds: diff.any
      }, {
        name: 'font-size',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'text-transform',
        type: t.textTransform,
        triggersBounds: diff.any
      }, {
        name: 'text-wrap',
        type: t.textWrap,
        triggersBounds: diff.any
      }, {
        name: 'text-overflow-wrap',
        type: t.textOverflowWrap,
        triggersBounds: diff.any
      }, {
        name: 'text-max-width',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'text-outline-width',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'line-height',
        type: t.positiveNumber,
        triggersBounds: diff.any
      }];
      var commonLabel = [{
        name: 'text-valign',
        type: t.valign,
        triggersBounds: diff.any
      }, {
        name: 'text-halign',
        type: t.halign,
        triggersBounds: diff.any
      }, {
        name: 'color',
        type: t.color
      }, {
        name: 'text-outline-color',
        type: t.color
      }, {
        name: 'text-outline-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'text-background-color',
        type: t.color
      }, {
        name: 'text-background-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'text-background-padding',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'text-border-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'text-border-color',
        type: t.color
      }, {
        name: 'text-border-width',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'text-border-style',
        type: t.borderStyle,
        triggersBounds: diff.any
      }, {
        name: 'text-background-shape',
        type: t.textBackgroundShape,
        triggersBounds: diff.any
      }, {
        name: 'text-justification',
        type: t.justification
      }];
      var behavior = [{
        name: 'events',
        type: t.bool
      }, {
        name: 'text-events',
        type: t.bool
      }];
      var visibility = [{
        name: 'display',
        type: t.display,
        triggersZOrder: diff.any,
        triggersBounds: diff.any,
        triggersBoundsOfParallelBeziers: true
      }, {
        name: 'visibility',
        type: t.visibility,
        triggersZOrder: diff.any
      }, {
        name: 'opacity',
        type: t.zeroOneNumber,
        triggersZOrder: diff.zeroNonZero
      }, {
        name: 'text-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'min-zoomed-font-size',
        type: t.size
      }, {
        name: 'z-compound-depth',
        type: t.zCompoundDepth,
        triggersZOrder: diff.any
      }, {
        name: 'z-index-compare',
        type: t.zIndexCompare,
        triggersZOrder: diff.any
      }, {
        name: 'z-index',
        type: t.nonNegativeInt,
        triggersZOrder: diff.any
      }];
      var overlay = [{
        name: 'overlay-padding',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'overlay-color',
        type: t.color
      }, {
        name: 'overlay-opacity',
        type: t.zeroOneNumber,
        triggersBounds: diff.zeroNonZero
      }, {
        name: 'overlay-shape',
        type: t.overlayShape,
        triggersBounds: diff.any
      }];
      var underlay = [{
        name: 'underlay-padding',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'underlay-color',
        type: t.color
      }, {
        name: 'underlay-opacity',
        type: t.zeroOneNumber,
        triggersBounds: diff.zeroNonZero
      }, {
        name: 'underlay-shape',
        type: t.overlayShape,
        triggersBounds: diff.any
      }];
      var transition = [{
        name: 'transition-property',
        type: t.propList
      }, {
        name: 'transition-duration',
        type: t.time
      }, {
        name: 'transition-delay',
        type: t.time
      }, {
        name: 'transition-timing-function',
        type: t.easing
      }];

      var nodeSizeHashOverride = function nodeSizeHashOverride(ele, parsedProp) {
        if (parsedProp.value === 'label') {
          return -ele.poolIndex(); // no hash key hits is using label size (hitrate for perf probably low anyway)
        } else {
          return parsedProp.pfValue;
        }
      };

      var nodeBody = [{
        name: 'height',
        type: t.nodeSize,
        triggersBounds: diff.any,
        hashOverride: nodeSizeHashOverride
      }, {
        name: 'width',
        type: t.nodeSize,
        triggersBounds: diff.any,
        hashOverride: nodeSizeHashOverride
      }, {
        name: 'shape',
        type: t.nodeShape,
        triggersBounds: diff.any
      }, {
        name: 'shape-polygon-points',
        type: t.polygonPointList,
        triggersBounds: diff.any
      }, {
        name: 'background-color',
        type: t.color
      }, {
        name: 'background-fill',
        type: t.fill
      }, {
        name: 'background-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'background-blacken',
        type: t.nOneOneNumber
      }, {
        name: 'background-gradient-stop-colors',
        type: t.colors
      }, {
        name: 'background-gradient-stop-positions',
        type: t.percentages
      }, {
        name: 'background-gradient-direction',
        type: t.gradientDirection
      }, {
        name: 'padding',
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: 'padding-relative-to',
        type: t.paddingRelativeTo,
        triggersBounds: diff.any
      }, {
        name: 'bounds-expansion',
        type: t.boundsExpansion,
        triggersBounds: diff.any
      }];
      var nodeBorder = [{
        name: 'border-color',
        type: t.color
      }, {
        name: 'border-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'border-width',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'border-style',
        type: t.borderStyle
      }];
      var backgroundImage = [{
        name: 'background-image',
        type: t.urls
      }, {
        name: 'background-image-crossorigin',
        type: t.bgCrossOrigin
      }, {
        name: 'background-image-opacity',
        type: t.zeroOneNumbers
      }, {
        name: 'background-image-containment',
        type: t.bgContainment
      }, {
        name: 'background-image-smoothing',
        type: t.bools
      }, {
        name: 'background-position-x',
        type: t.bgPos
      }, {
        name: 'background-position-y',
        type: t.bgPos
      }, {
        name: 'background-width-relative-to',
        type: t.bgRelativeTo
      }, {
        name: 'background-height-relative-to',
        type: t.bgRelativeTo
      }, {
        name: 'background-repeat',
        type: t.bgRepeat
      }, {
        name: 'background-fit',
        type: t.bgFit
      }, {
        name: 'background-clip',
        type: t.bgClip
      }, {
        name: 'background-width',
        type: t.bgWH
      }, {
        name: 'background-height',
        type: t.bgWH
      }, {
        name: 'background-offset-x',
        type: t.bgPos
      }, {
        name: 'background-offset-y',
        type: t.bgPos
      }];
      var compound = [{
        name: 'position',
        type: t.position,
        triggersBounds: diff.any
      }, {
        name: 'compound-sizing-wrt-labels',
        type: t.compoundIncludeLabels,
        triggersBounds: diff.any
      }, {
        name: 'min-width',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'min-width-bias-left',
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: 'min-width-bias-right',
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: 'min-height',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'min-height-bias-top',
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: 'min-height-bias-bottom',
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }];
      var edgeLine = [{
        name: 'line-style',
        type: t.lineStyle
      }, {
        name: 'line-color',
        type: t.color
      }, {
        name: 'line-fill',
        type: t.fill
      }, {
        name: 'line-cap',
        type: t.lineCap
      }, {
        name: 'line-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'line-dash-pattern',
        type: t.numbers
      }, {
        name: 'line-dash-offset',
        type: t.number
      }, {
        name: 'line-gradient-stop-colors',
        type: t.colors
      }, {
        name: 'line-gradient-stop-positions',
        type: t.percentages
      }, {
        name: 'curve-style',
        type: t.curveStyle,
        triggersBounds: diff.any,
        triggersBoundsOfParallelBeziers: true
      }, {
        name: 'haystack-radius',
        type: t.zeroOneNumber,
        triggersBounds: diff.any
      }, {
        name: 'source-endpoint',
        type: t.edgeEndpoint,
        triggersBounds: diff.any
      }, {
        name: 'target-endpoint',
        type: t.edgeEndpoint,
        triggersBounds: diff.any
      }, {
        name: 'control-point-step-size',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'control-point-distances',
        type: t.bidirectionalSizes,
        triggersBounds: diff.any
      }, {
        name: 'control-point-weights',
        type: t.numbers,
        triggersBounds: diff.any
      }, {
        name: 'segment-distances',
        type: t.bidirectionalSizes,
        triggersBounds: diff.any
      }, {
        name: 'segment-weights',
        type: t.numbers,
        triggersBounds: diff.any
      }, {
        name: 'taxi-turn',
        type: t.bidirectionalSizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: 'taxi-turn-min-distance',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'taxi-direction',
        type: t.axisDirection,
        triggersBounds: diff.any
      }, {
        name: 'edge-distances',
        type: t.edgeDistances,
        triggersBounds: diff.any
      }, {
        name: 'arrow-scale',
        type: t.positiveNumber,
        triggersBounds: diff.any
      }, {
        name: 'loop-direction',
        type: t.angle,
        triggersBounds: diff.any
      }, {
        name: 'loop-sweep',
        type: t.angle,
        triggersBounds: diff.any
      }, {
        name: 'source-distance-from-node',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'target-distance-from-node',
        type: t.size,
        triggersBounds: diff.any
      }];
      var ghost = [{
        name: 'ghost',
        type: t.bool,
        triggersBounds: diff.any
      }, {
        name: 'ghost-offset-x',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'ghost-offset-y',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'ghost-opacity',
        type: t.zeroOneNumber
      }];
      var core = [{
        name: 'selection-box-color',
        type: t.color
      }, {
        name: 'selection-box-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'selection-box-border-color',
        type: t.color
      }, {
        name: 'selection-box-border-width',
        type: t.size
      }, {
        name: 'active-bg-color',
        type: t.color
      }, {
        name: 'active-bg-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'active-bg-size',
        type: t.size
      }, {
        name: 'outside-texture-bg-color',
        type: t.color
      }, {
        name: 'outside-texture-bg-opacity',
        type: t.zeroOneNumber
      }]; // pie backgrounds for nodes

      var pie = [];
      styfn$6.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)

      pie.push({
        name: 'pie-size',
        type: t.sizeMaybePercent
      });

      for (var i = 1; i <= styfn$6.pieBackgroundN; i++) {
        pie.push({
          name: 'pie-' + i + '-background-color',
          type: t.color
        });
        pie.push({
          name: 'pie-' + i + '-background-size',
          type: t.percent
        });
        pie.push({
          name: 'pie-' + i + '-background-opacity',
          type: t.zeroOneNumber
        });
      } // edge arrows


      var edgeArrow = [];
      var arrowPrefixes = styfn$6.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];
      [{
        name: 'arrow-shape',
        type: t.arrowShape,
        triggersBounds: diff.any
      }, {
        name: 'arrow-color',
        type: t.color
      }, {
        name: 'arrow-fill',
        type: t.arrowFill
      }].forEach(function (prop) {
        arrowPrefixes.forEach(function (prefix) {
          var name = prefix + '-' + prop.name;
          var type = prop.type,
              triggersBounds = prop.triggersBounds;
          edgeArrow.push({
            name: name,
            type: type,
            triggersBounds: triggersBounds
          });
        });
      }, {});
      var props = styfn$6.properties = [].concat(behavior, transition, visibility, overlay, underlay, ghost, commonLabel, labelDimensions, mainLabel, sourceLabel, targetLabel, nodeBody, nodeBorder, backgroundImage, pie, compound, edgeLine, edgeArrow, core);
      var propGroups = styfn$6.propertyGroups = {
        // common to all eles
        behavior: behavior,
        transition: transition,
        visibility: visibility,
        overlay: overlay,
        underlay: underlay,
        ghost: ghost,
        // labels
        commonLabel: commonLabel,
        labelDimensions: labelDimensions,
        mainLabel: mainLabel,
        sourceLabel: sourceLabel,
        targetLabel: targetLabel,
        // node props
        nodeBody: nodeBody,
        nodeBorder: nodeBorder,
        backgroundImage: backgroundImage,
        pie: pie,
        compound: compound,
        // edge props
        edgeLine: edgeLine,
        edgeArrow: edgeArrow,
        core: core
      };
      var propGroupNames = styfn$6.propertyGroupNames = {};
      var propGroupKeys = styfn$6.propertyGroupKeys = Object.keys(propGroups);
      propGroupKeys.forEach(function (key) {
        propGroupNames[key] = propGroups[key].map(function (prop) {
          return prop.name;
        });
        propGroups[key].forEach(function (prop) {
          return prop.groupKey = key;
        });
      }); // define aliases

      var aliases = styfn$6.aliases = [{
        name: 'content',
        pointsTo: 'label'
      }, {
        name: 'control-point-distance',
        pointsTo: 'control-point-distances'
      }, {
        name: 'control-point-weight',
        pointsTo: 'control-point-weights'
      }, {
        name: 'edge-text-rotation',
        pointsTo: 'text-rotation'
      }, {
        name: 'padding-left',
        pointsTo: 'padding'
      }, {
        name: 'padding-right',
        pointsTo: 'padding'
      }, {
        name: 'padding-top',
        pointsTo: 'padding'
      }, {
        name: 'padding-bottom',
        pointsTo: 'padding'
      }]; // list of property names

      styfn$6.propertyNames = props.map(function (p) {
        return p.name;
      }); // allow access of properties by name ( e.g. style.properties.height )

      for (var _i = 0; _i < props.length; _i++) {
        var prop = props[_i];
        props[prop.name] = prop; // allow lookup by name
      } // map aliases


      for (var _i2 = 0; _i2 < aliases.length; _i2++) {
        var alias = aliases[_i2];
        var pointsToProp = props[alias.pointsTo];
        var aliasProp = {
          name: alias.name,
          alias: true,
          pointsTo: pointsToProp
        }; // add alias prop for parsing

        props.push(aliasProp);
        props[alias.name] = aliasProp; // allow lookup by name
      }
    })();

    styfn$6.getDefaultProperty = function (name) {
      return this.getDefaultProperties()[name];
    };

    styfn$6.getDefaultProperties = function () {
      var _p = this._private;

      if (_p.defaultProperties != null) {
        return _p.defaultProperties;
      }

      var rawProps = extend({
        // core props
        'selection-box-color': '#ddd',
        'selection-box-opacity': 0.65,
        'selection-box-border-color': '#aaa',
        'selection-box-border-width': 1,
        'active-bg-color': 'black',
        'active-bg-opacity': 0.15,
        'active-bg-size': 30,
        'outside-texture-bg-color': '#000',
        'outside-texture-bg-opacity': 0.125,
        // common node/edge props
        'events': 'yes',
        'text-events': 'no',
        'text-valign': 'top',
        'text-halign': 'center',
        'text-justification': 'auto',
        'line-height': 1,
        'color': '#000',
        'text-outline-color': '#000',
        'text-outline-width': 0,
        'text-outline-opacity': 1,
        'text-opacity': 1,
        'text-decoration': 'none',
        'text-transform': 'none',
        'text-wrap': 'none',
        'text-overflow-wrap': 'whitespace',
        'text-max-width': 9999,
        'text-background-color': '#000',
        'text-background-opacity': 0,
        'text-background-shape': 'rectangle',
        'text-background-padding': 0,
        'text-border-opacity': 0,
        'text-border-width': 0,
        'text-border-style': 'solid',
        'text-border-color': '#000',
        'font-family': 'Helvetica Neue, Helvetica, sans-serif',
        'font-style': 'normal',
        'font-weight': 'normal',
        'font-size': 16,
        'min-zoomed-font-size': 0,
        'text-rotation': 'none',
        'source-text-rotation': 'none',
        'target-text-rotation': 'none',
        'visibility': 'visible',
        'display': 'element',
        'opacity': 1,
        'z-compound-depth': 'auto',
        'z-index-compare': 'auto',
        'z-index': 0,
        'label': '',
        'text-margin-x': 0,
        'text-margin-y': 0,
        'source-label': '',
        'source-text-offset': 0,
        'source-text-margin-x': 0,
        'source-text-margin-y': 0,
        'target-label': '',
        'target-text-offset': 0,
        'target-text-margin-x': 0,
        'target-text-margin-y': 0,
        'overlay-opacity': 0,
        'overlay-color': '#000',
        'overlay-padding': 10,
        'overlay-shape': 'round-rectangle',
        'underlay-opacity': 0,
        'underlay-color': '#000',
        'underlay-padding': 10,
        'underlay-shape': 'round-rectangle',
        'transition-property': 'none',
        'transition-duration': 0,
        'transition-delay': 0,
        'transition-timing-function': 'linear',
        // node props
        'background-blacken': 0,
        'background-color': '#999',
        'background-fill': 'solid',
        'background-opacity': 1,
        'background-image': 'none',
        'background-image-crossorigin': 'anonymous',
        'background-image-opacity': 1,
        'background-image-containment': 'inside',
        'background-image-smoothing': 'yes',
        'background-position-x': '50%',
        'background-position-y': '50%',
        'background-offset-x': 0,
        'background-offset-y': 0,
        'background-width-relative-to': 'include-padding',
        'background-height-relative-to': 'include-padding',
        'background-repeat': 'no-repeat',
        'background-fit': 'none',
        'background-clip': 'node',
        'background-width': 'auto',
        'background-height': 'auto',
        'border-color': '#000',
        'border-opacity': 1,
        'border-width': 0,
        'border-style': 'solid',
        'height': 30,
        'width': 30,
        'shape': 'ellipse',
        'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',
        'bounds-expansion': 0,
        // node gradient
        'background-gradient-direction': 'to-bottom',
        'background-gradient-stop-colors': '#999',
        'background-gradient-stop-positions': '0%',
        // ghost props
        'ghost': 'no',
        'ghost-offset-y': 0,
        'ghost-offset-x': 0,
        'ghost-opacity': 0,
        // compound props
        'padding': 0,
        'padding-relative-to': 'width',
        'position': 'origin',
        'compound-sizing-wrt-labels': 'include',
        'min-width': 0,
        'min-width-bias-left': 0,
        'min-width-bias-right': 0,
        'min-height': 0,
        'min-height-bias-top': 0,
        'min-height-bias-bottom': 0
      }, {
        // node pie bg
        'pie-size': '100%'
      }, [{
        name: 'pie-{{i}}-background-color',
        value: 'black'
      }, {
        name: 'pie-{{i}}-background-size',
        value: '0%'
      }, {
        name: 'pie-{{i}}-background-opacity',
        value: 1
      }].reduce(function (css, prop) {
        for (var i = 1; i <= styfn$6.pieBackgroundN; i++) {
          var name = prop.name.replace('{{i}}', i);
          var val = prop.value;
          css[name] = val;
        }

        return css;
      }, {}), {
        // edge props
        'line-style': 'solid',
        'line-color': '#999',
        'line-fill': 'solid',
        'line-cap': 'butt',
        'line-opacity': 1,
        'line-gradient-stop-colors': '#999',
        'line-gradient-stop-positions': '0%',
        'control-point-step-size': 40,
        'control-point-weights': 0.5,
        'segment-weights': 0.5,
        'segment-distances': 20,
        'taxi-turn': '50%',
        'taxi-turn-min-distance': 10,
        'taxi-direction': 'auto',
        'edge-distances': 'intersection',
        'curve-style': 'haystack',
        'haystack-radius': 0,
        'arrow-scale': 1,
        'loop-direction': '-45deg',
        'loop-sweep': '-90deg',
        'source-distance-from-node': 0,
        'target-distance-from-node': 0,
        'source-endpoint': 'outside-to-node',
        'target-endpoint': 'outside-to-node',
        'line-dash-pattern': [6, 3],
        'line-dash-offset': 0
      }, [{
        name: 'arrow-shape',
        value: 'none'
      }, {
        name: 'arrow-color',
        value: '#999'
      }, {
        name: 'arrow-fill',
        value: 'filled'
      }].reduce(function (css, prop) {
        styfn$6.arrowPrefixes.forEach(function (prefix) {
          var name = prefix + '-' + prop.name;
          var val = prop.value;
          css[name] = val;
        });
        return css;
      }, {}));
      var parsedProps = {};

      for (var i = 0; i < this.properties.length; i++) {
        var prop = this.properties[i];

        if (prop.pointsTo) {
          continue;
        }

        var name = prop.name;
        var val = rawProps[name];
        var parsedProp = this.parse(name, val);
        parsedProps[name] = parsedProp;
      }

      _p.defaultProperties = parsedProps;
      return _p.defaultProperties;
    };

    styfn$6.addDefaultStylesheet = function () {
      this.selector(':parent').css({
        'shape': 'rectangle',
        'padding': 10,
        'background-color': '#eee',
        'border-color': '#ccc',
        'border-width': 1
      }).selector('edge').css({
        'width': 3
      }).selector(':loop').css({
        'curve-style': 'bezier'
      }).selector('edge:compound').css({
        'curve-style': 'bezier',
        'source-endpoint': 'outside-to-line',
        'target-endpoint': 'outside-to-line'
      }).selector(':selected').css({
        'background-color': '#0169D9',
        'line-color': '#0169D9',
        'source-arrow-color': '#0169D9',
        'target-arrow-color': '#0169D9',
        'mid-source-arrow-color': '#0169D9',
        'mid-target-arrow-color': '#0169D9'
      }).selector(':parent:selected').css({
        'background-color': '#CCE1F9',
        'border-color': '#aec8e5'
      }).selector(':active').css({
        'overlay-color': 'black',
        'overlay-padding': 10,
        'overlay-opacity': 0.25
      });
      this.defaultLength = this.length;
    };

    var styfn$7 = {}; // a caching layer for property parsing

    styfn$7.parse = function (name, value, propIsBypass, propIsFlat) {
      var self = this; // function values can't be cached in all cases, and there isn't much benefit of caching them anyway

      if (fn(value)) {
        return self.parseImplWarn(name, value, propIsBypass, propIsFlat);
      }

      var flatKey = propIsFlat === 'mapping' || propIsFlat === true || propIsFlat === false || propIsFlat == null ? 'dontcare' : propIsFlat;
      var bypassKey = propIsBypass ? 't' : 'f';
      var valueKey = '' + value;
      var argHash = hashStrings(name, valueKey, bypassKey, flatKey);
      var propCache = self.propCache = self.propCache || [];
      var ret;

      if (!(ret = propCache[argHash])) {
        ret = propCache[argHash] = self.parseImplWarn(name, value, propIsBypass, propIsFlat);
      } // - bypasses can't be shared b/c the value can be changed by animations or otherwise overridden
      // - mappings can't be shared b/c mappings are per-element


      if (propIsBypass || propIsFlat === 'mapping') {
        // need a copy since props are mutated later in their lifecycles
        ret = copy(ret);

        if (ret) {
          ret.value = copy(ret.value); // because it could be an array, e.g. colour
        }
      }

      return ret;
    };

    styfn$7.parseImplWarn = function (name, value, propIsBypass, propIsFlat) {
      var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);

      if (!prop && value != null) {
        warn("The style property `".concat(name, ": ").concat(value, "` is invalid"));
      }

      if (prop && (prop.name === 'width' || prop.name === 'height') && value === 'label') {
        warn('The style value of `label` is deprecated for `' + prop.name + '`');
      }

      return prop;
    }; // parse a property; return null on invalid; return parsed property otherwise
    // fields :
    // - name : the name of the property
    // - value : the parsed, native-typed value of the property
    // - strValue : a string value that represents the property value in valid css
    // - bypass : true iff the property is a bypass property


    styfn$7.parseImpl = function (name, value, propIsBypass, propIsFlat) {
      var self = this;
      name = camel2dash(name); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

      var property = self.properties[name];
      var passedValue = value;
      var types = self.types;

      if (!property) {
        return null;
      } // return null on property of unknown name


      if (value === undefined) {
        return null;
      } // can't assign undefined
      // the property may be an alias


      if (property.alias) {
        property = property.pointsTo;
        name = property.name;
      }

      var valueIsString = string(value);

      if (valueIsString) {
        // trim the value to make parsing easier
        value = value.trim();
      }

      var type = property.type;

      if (!type) {
        return null;
      } // no type, no luck
      // check if bypass is null or empty string (i.e. indication to delete bypass property)


      if (propIsBypass && (value === '' || value === null)) {
        return {
          name: name,
          value: value,
          bypass: true,
          deleteBypass: true
        };
      } // check if value is a function used as a mapper


      if (fn(value)) {
        return {
          name: name,
          value: value,
          strValue: 'fn',
          mapped: types.fn,
          bypass: propIsBypass
        };
      } // check if value is mapped


      var data, mapData;

      if (!valueIsString || propIsFlat || value.length < 7 || value[1] !== 'a') ; else if (value.length >= 7 && value[0] === 'd' && (data = new RegExp(types.data.regex).exec(value))) {
        if (propIsBypass) {
          return false;
        } // mappers not allowed in bypass


        var mapped = types.data;
        return {
          name: name,
          value: data,
          strValue: '' + value,
          mapped: mapped,
          field: data[1],
          bypass: propIsBypass
        };
      } else if (value.length >= 10 && value[0] === 'm' && (mapData = new RegExp(types.mapData.regex).exec(value))) {
        if (propIsBypass) {
          return false;
        } // mappers not allowed in bypass


        if (type.multiple) {
          return false;
        } // impossible to map to num


        var _mapped = types.mapData; // we can map only if the type is a colour or a number

        if (!(type.color || type.number)) {
          return false;
        }

        var valueMin = this.parse(name, mapData[4]); // parse to validate

        if (!valueMin || valueMin.mapped) {
          return false;
        } // can't be invalid or mapped


        var valueMax = this.parse(name, mapData[5]); // parse to validate

        if (!valueMax || valueMax.mapped) {
          return false;
        } // can't be invalid or mapped
        // check if valueMin and valueMax are the same


        if (valueMin.pfValue === valueMax.pfValue || valueMin.strValue === valueMax.strValue) {
          warn('`' + name + ': ' + value + '` is not a valid mapper because the output range is zero; converting to `' + name + ': ' + valueMin.strValue + '`');
          return this.parse(name, valueMin.strValue); // can't make much of a mapper without a range
        } else if (type.color) {
          var c1 = valueMin.value;
          var c2 = valueMax.value;
          var same = c1[0] === c2[0] // red
          && c1[1] === c2[1] // green
          && c1[2] === c2[2] // blue
          && ( // optional alpha
          c1[3] === c2[3] // same alpha outright
          || (c1[3] == null || c1[3] === 1) && ( // full opacity for colour 1?
          c2[3] == null || c2[3] === 1) // full opacity for colour 2?
          );

          if (same) {
            return false;
          } // can't make a mapper without a range

        }

        return {
          name: name,
          value: mapData,
          strValue: '' + value,
          mapped: _mapped,
          field: mapData[1],
          fieldMin: parseFloat(mapData[2]),
          // min & max are numeric
          fieldMax: parseFloat(mapData[3]),
          valueMin: valueMin.value,
          valueMax: valueMax.value,
          bypass: propIsBypass
        };
      }

      if (type.multiple && propIsFlat !== 'multiple') {
        var vals;

        if (valueIsString) {
          vals = value.split(/\s+/);
        } else if (array(value)) {
          vals = value;
        } else {
          vals = [value];
        }

        if (type.evenMultiple && vals.length % 2 !== 0) {
          return null;
        }

        var valArr = [];
        var unitsArr = [];
        var pfValArr = [];
        var strVal = '';
        var hasEnum = false;

        for (var i = 0; i < vals.length; i++) {
          var p = self.parse(name, vals[i], propIsBypass, 'multiple');
          hasEnum = hasEnum || string(p.value);
          valArr.push(p.value);
          pfValArr.push(p.pfValue != null ? p.pfValue : p.value);
          unitsArr.push(p.units);
          strVal += (i > 0 ? ' ' : '') + p.strValue;
        }

        if (type.validate && !type.validate(valArr, unitsArr)) {
          return null;
        }

        if (type.singleEnum && hasEnum) {
          if (valArr.length === 1 && string(valArr[0])) {
            return {
              name: name,
              value: valArr[0],
              strValue: valArr[0],
              bypass: propIsBypass
            };
          } else {
            return null;
          }
        }

        return {
          name: name,
          value: valArr,
          pfValue: pfValArr,
          strValue: strVal,
          bypass: propIsBypass,
          units: unitsArr
        };
      } // several types also allow enums


      var checkEnums = function checkEnums() {
        for (var _i = 0; _i < type.enums.length; _i++) {
          var en = type.enums[_i];

          if (en === value) {
            return {
              name: name,
              value: value,
              strValue: '' + value,
              bypass: propIsBypass
            };
          }
        }

        return null;
      }; // check the type and return the appropriate object


      if (type.number) {
        var units;
        var implicitUnits = 'px'; // not set => px

        if (type.units) {
          // use specified units if set
          units = type.units;
        }

        if (type.implicitUnits) {
          implicitUnits = type.implicitUnits;
        }

        if (!type.unitless) {
          if (valueIsString) {
            var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');

            if (units) {
              unitsRegex = units;
            } // only allow explicit units if so set


            var match = value.match('^(' + number$1 + ')(' + unitsRegex + ')?' + '$');

            if (match) {
              value = match[1];
              units = match[2] || implicitUnits;
            }
          } else if (!units || type.implicitUnits) {
            units = implicitUnits; // implicitly px if unspecified
          }
        }

        value = parseFloat(value); // if not a number and enums not allowed, then the value is invalid

        if (isNaN(value) && type.enums === undefined) {
          return null;
        } // check if this number type also accepts special keywords in place of numbers
        // (i.e. `left`, `auto`, etc)


        if (isNaN(value) && type.enums !== undefined) {
          value = passedValue;
          return checkEnums();
        } // check if value must be an integer


        if (type.integer && !integer(value)) {
          return null;
        } // check value is within range


        if (type.min !== undefined && (value < type.min || type.strictMin && value === type.min) || type.max !== undefined && (value > type.max || type.strictMax && value === type.max)) {
          return null;
        }

        var ret = {
          name: name,
          value: value,
          strValue: '' + value + (units ? units : ''),
          units: units,
          bypass: propIsBypass
        }; // normalise value in pixels

        if (type.unitless || units !== 'px' && units !== 'em') {
          ret.pfValue = value;
        } else {
          ret.pfValue = units === 'px' || !units ? value : this.getEmSizeInPixels() * value;
        } // normalise value in ms


        if (units === 'ms' || units === 's') {
          ret.pfValue = units === 'ms' ? value : 1000 * value;
        } // normalise value in rad


        if (units === 'deg' || units === 'rad') {
          ret.pfValue = units === 'rad' ? value : deg2rad(value);
        } // normalize value in %


        if (units === '%') {
          ret.pfValue = value / 100;
        }

        return ret;
      } else if (type.propList) {
        var props = [];
        var propsStr = '' + value;

        if (propsStr === 'none') ; else {
          // go over each prop
          var propsSplit = propsStr.split(/\s*,\s*|\s+/);

          for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {
            var propName = propsSplit[_i2].trim();

            if (self.properties[propName]) {
              props.push(propName);
            } else {
              warn('`' + propName + '` is not a valid property name');
            }
          }

          if (props.length === 0) {
            return null;
          }
        }

        return {
          name: name,
          value: props,
          strValue: props.length === 0 ? 'none' : props.join(' '),
          bypass: propIsBypass
        };
      } else if (type.color) {
        var tuple = color2tuple(value);

        if (!tuple) {
          return null;
        }

        return {
          name: name,
          value: tuple,
          pfValue: tuple,
          strValue: 'rgb(' + tuple[0] + ',' + tuple[1] + ',' + tuple[2] + ')',
          // n.b. no spaces b/c of multiple support
          bypass: propIsBypass
        };
      } else if (type.regex || type.regexes) {
        // first check enums
        if (type.enums) {
          var enumProp = checkEnums();

          if (enumProp) {
            return enumProp;
          }
        }

        var regexes = type.regexes ? type.regexes : [type.regex];

        for (var _i3 = 0; _i3 < regexes.length; _i3++) {
          var regex = new RegExp(regexes[_i3]); // make a regex from the type string

          var m = regex.exec(value);

          if (m) {
            // regex matches
            return {
              name: name,
              value: type.singleRegexMatchValue ? m[1] : m,
              strValue: '' + value,
              bypass: propIsBypass
            };
          }
        }

        return null; // didn't match any
      } else if (type.string) {
        // just return
        return {
          name: name,
          value: '' + value,
          strValue: '' + value,
          bypass: propIsBypass
        };
      } else if (type.enums) {
        // check enums last because it's a combo type in others
        return checkEnums();
      } else {
        return null; // not a type we can handle
      }
    };

    var Style = function Style(cy) {
      if (!(this instanceof Style)) {
        return new Style(cy);
      }

      if (!core$1(cy)) {
        error('A style must have a core reference');
        return;
      }

      this._private = {
        cy: cy,
        coreStyle: {}
      };
      this.length = 0;
      this.resetToDefault();
    };

    var styfn$8 = Style.prototype;

    styfn$8.instanceString = function () {
      return 'style';
    }; // remove all contexts


    styfn$8.clear = function () {
      var _p = this._private;
      var cy = _p.cy;
      var eles = cy.elements();

      for (var i = 0; i < this.length; i++) {
        this[i] = undefined;
      }

      this.length = 0;
      _p.contextStyles = {};
      _p.propDiffs = {};
      this.cleanElements(eles, true);
      eles.forEach(function (ele) {
        var ele_p = ele[0]._private;
        ele_p.styleDirty = true;
        ele_p.appliedInitStyle = false;
      });
      return this; // chaining
    };

    styfn$8.resetToDefault = function () {
      this.clear();
      this.addDefaultStylesheet();
      return this;
    }; // builds a style object for the 'core' selector


    styfn$8.core = function (propName) {
      return this._private.coreStyle[propName] || this.getDefaultProperty(propName);
    }; // create a new context from the specified selector string and switch to that context


    styfn$8.selector = function (selectorStr) {
      // 'core' is a special case and does not need a selector
      var selector = selectorStr === 'core' ? null : new Selector(selectorStr);
      var i = this.length++; // new context means new index

      this[i] = {
        selector: selector,
        properties: [],
        mappedProperties: [],
        index: i
      };
      return this; // chaining
    }; // add one or many css rules to the current context


    styfn$8.css = function () {
      var self = this;
      var args = arguments;

      if (args.length === 1) {
        var map = args[0];

        for (var i = 0; i < self.properties.length; i++) {
          var prop = self.properties[i];
          var mapVal = map[prop.name];

          if (mapVal === undefined) {
            mapVal = map[dash2camel(prop.name)];
          }

          if (mapVal !== undefined) {
            this.cssRule(prop.name, mapVal);
          }
        }
      } else if (args.length === 2) {
        this.cssRule(args[0], args[1]);
      } // do nothing if args are invalid


      return this; // chaining
    };

    styfn$8.style = styfn$8.css; // add a single css rule to the current context

    styfn$8.cssRule = function (name, value) {
      // name-value pair
      var property = this.parse(name, value); // add property to current context if valid

      if (property) {
        var i = this.length - 1;
        this[i].properties.push(property);
        this[i].properties[property.name] = property; // allow access by name as well

        if (property.name.match(/pie-(\d+)-background-size/) && property.value) {
          this._private.hasPie = true;
        }

        if (property.mapped) {
          this[i].mappedProperties.push(property);
        } // add to core style if necessary


        var currentSelectorIsCore = !this[i].selector;

        if (currentSelectorIsCore) {
          this._private.coreStyle[property.name] = property;
        }
      }

      return this; // chaining
    };

    styfn$8.append = function (style) {
      if (stylesheet(style)) {
        style.appendToStyle(this);
      } else if (array(style)) {
        this.appendFromJson(style);
      } else if (string(style)) {
        this.appendFromString(style);
      } // you probably wouldn't want to append a Style, since you'd duplicate the default parts


      return this;
    }; // static function


    Style.fromJson = function (cy, json) {
      var style = new Style(cy);
      style.fromJson(json);
      return style;
    };

    Style.fromString = function (cy, string) {
      return new Style(cy).fromString(string);
    };

    [styfn, styfn$1, styfn$2, styfn$3, styfn$4, styfn$5, styfn$6, styfn$7].forEach(function (props) {
      extend(styfn$8, props);
    });
    Style.types = styfn$8.types;
    Style.properties = styfn$8.properties;
    Style.propertyGroups = styfn$8.propertyGroups;
    Style.propertyGroupNames = styfn$8.propertyGroupNames;
    Style.propertyGroupKeys = styfn$8.propertyGroupKeys;

    var corefn$7 = {
      style: function style(newStyle) {
        if (newStyle) {
          var s = this.setStyle(newStyle);
          s.update();
        }

        return this._private.style;
      },
      setStyle: function setStyle(style) {
        var _p = this._private;

        if (stylesheet(style)) {
          _p.style = style.generateStyle(this);
        } else if (array(style)) {
          _p.style = Style.fromJson(this, style);
        } else if (string(style)) {
          _p.style = Style.fromString(this, style);
        } else {
          _p.style = Style(this);
        }

        return _p.style;
      },
      // e.g. cy.data() changed => recalc ele mappers
      updateStyle: function updateStyle() {
        this.mutableElements().updateStyle(); // just send to all eles
      }
    };

    var defaultSelectionType = 'single';
    var corefn$8 = {
      autolock: function autolock(bool) {
        if (bool !== undefined) {
          this._private.autolock = bool ? true : false;
        } else {
          return this._private.autolock;
        }

        return this; // chaining
      },
      autoungrabify: function autoungrabify(bool) {
        if (bool !== undefined) {
          this._private.autoungrabify = bool ? true : false;
        } else {
          return this._private.autoungrabify;
        }

        return this; // chaining
      },
      autounselectify: function autounselectify(bool) {
        if (bool !== undefined) {
          this._private.autounselectify = bool ? true : false;
        } else {
          return this._private.autounselectify;
        }

        return this; // chaining
      },
      selectionType: function selectionType(selType) {
        var _p = this._private;

        if (_p.selectionType == null) {
          _p.selectionType = defaultSelectionType;
        }

        if (selType !== undefined) {
          if (selType === 'additive' || selType === 'single') {
            _p.selectionType = selType;
          }
        } else {
          return _p.selectionType;
        }

        return this;
      },
      panningEnabled: function panningEnabled(bool) {
        if (bool !== undefined) {
          this._private.panningEnabled = bool ? true : false;
        } else {
          return this._private.panningEnabled;
        }

        return this; // chaining
      },
      userPanningEnabled: function userPanningEnabled(bool) {
        if (bool !== undefined) {
          this._private.userPanningEnabled = bool ? true : false;
        } else {
          return this._private.userPanningEnabled;
        }

        return this; // chaining
      },
      zoomingEnabled: function zoomingEnabled(bool) {
        if (bool !== undefined) {
          this._private.zoomingEnabled = bool ? true : false;
        } else {
          return this._private.zoomingEnabled;
        }

        return this; // chaining
      },
      userZoomingEnabled: function userZoomingEnabled(bool) {
        if (bool !== undefined) {
          this._private.userZoomingEnabled = bool ? true : false;
        } else {
          return this._private.userZoomingEnabled;
        }

        return this; // chaining
      },
      boxSelectionEnabled: function boxSelectionEnabled(bool) {
        if (bool !== undefined) {
          this._private.boxSelectionEnabled = bool ? true : false;
        } else {
          return this._private.boxSelectionEnabled;
        }

        return this; // chaining
      },
      pan: function pan() {
        var args = arguments;
        var pan = this._private.pan;
        var dim, val, dims, x, y;

        switch (args.length) {
          case 0:
            // .pan()
            return pan;

          case 1:
            if (string(args[0])) {
              // .pan('x')
              dim = args[0];
              return pan[dim];
            } else if (plainObject(args[0])) {
              // .pan({ x: 0, y: 100 })
              if (!this._private.panningEnabled) {
                return this;
              }

              dims = args[0];
              x = dims.x;
              y = dims.y;

              if (number(x)) {
                pan.x = x;
              }

              if (number(y)) {
                pan.y = y;
              }

              this.emit('pan viewport');
            }

            break;

          case 2:
            // .pan('x', 100)
            if (!this._private.panningEnabled) {
              return this;
            }

            dim = args[0];
            val = args[1];

            if ((dim === 'x' || dim === 'y') && number(val)) {
              pan[dim] = val;
            }

            this.emit('pan viewport');
            break;
          // invalid
        }

        this.notify('viewport');
        return this; // chaining
      },
      panBy: function panBy(arg0, arg1) {
        var args = arguments;
        var pan = this._private.pan;
        var dim, val, dims, x, y;

        if (!this._private.panningEnabled) {
          return this;
        }

        switch (args.length) {
          case 1:
            if (plainObject(arg0)) {
              // .panBy({ x: 0, y: 100 })
              dims = args[0];
              x = dims.x;
              y = dims.y;

              if (number(x)) {
                pan.x += x;
              }

              if (number(y)) {
                pan.y += y;
              }

              this.emit('pan viewport');
            }

            break;

          case 2:
            // .panBy('x', 100)
            dim = arg0;
            val = arg1;

            if ((dim === 'x' || dim === 'y') && number(val)) {
              pan[dim] += val;
            }

            this.emit('pan viewport');
            break;
          // invalid
        }

        this.notify('viewport');
        return this; // chaining
      },
      fit: function fit(elements, padding) {
        var viewportState = this.getFitViewport(elements, padding);

        if (viewportState) {
          var _p = this._private;
          _p.zoom = viewportState.zoom;
          _p.pan = viewportState.pan;
          this.emit('pan zoom viewport');
          this.notify('viewport');
        }

        return this; // chaining
      },
      getFitViewport: function getFitViewport(elements, padding) {
        if (number(elements) && padding === undefined) {
          // elements is optional
          padding = elements;
          elements = undefined;
        }

        if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
          return;
        }

        var bb;

        if (string(elements)) {
          var sel = elements;
          elements = this.$(sel);
        } else if (boundingBox(elements)) {
          // assume bb
          var bbe = elements;
          bb = {
            x1: bbe.x1,
            y1: bbe.y1,
            x2: bbe.x2,
            y2: bbe.y2
          };
          bb.w = bb.x2 - bb.x1;
          bb.h = bb.y2 - bb.y1;
        } else if (!elementOrCollection(elements)) {
          elements = this.mutableElements();
        }

        if (elementOrCollection(elements) && elements.empty()) {
          return;
        } // can't fit to nothing


        bb = bb || elements.boundingBox();
        var w = this.width();
        var h = this.height();
        var zoom;
        padding = number(padding) ? padding : 0;

        if (!isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {
          zoom = Math.min((w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h); // crop zoom

          zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
          zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;
          var pan = {
            // now pan to middle
            x: (w - zoom * (bb.x1 + bb.x2)) / 2,
            y: (h - zoom * (bb.y1 + bb.y2)) / 2
          };
          return {
            zoom: zoom,
            pan: pan
          };
        }

        return;
      },
      zoomRange: function zoomRange(min, max) {
        var _p = this._private;

        if (max == null) {
          var opts = min;
          min = opts.min;
          max = opts.max;
        }

        if (number(min) && number(max) && min <= max) {
          _p.minZoom = min;
          _p.maxZoom = max;
        } else if (number(min) && max === undefined && min <= _p.maxZoom) {
          _p.minZoom = min;
        } else if (number(max) && min === undefined && max >= _p.minZoom) {
          _p.maxZoom = max;
        }

        return this;
      },
      minZoom: function minZoom(zoom) {
        if (zoom === undefined) {
          return this._private.minZoom;
        } else {
          return this.zoomRange({
            min: zoom
          });
        }
      },
      maxZoom: function maxZoom(zoom) {
        if (zoom === undefined) {
          return this._private.maxZoom;
        } else {
          return this.zoomRange({
            max: zoom
          });
        }
      },
      getZoomedViewport: function getZoomedViewport(params) {
        var _p = this._private;
        var currentPan = _p.pan;
        var currentZoom = _p.zoom;
        var pos; // in rendered px

        var zoom;
        var bail = false;

        if (!_p.zoomingEnabled) {
          // zooming disabled
          bail = true;
        }

        if (number(params)) {
          // then set the zoom
          zoom = params;
        } else if (plainObject(params)) {
          // then zoom about a point
          zoom = params.level;

          if (params.position != null) {
            pos = modelToRenderedPosition(params.position, currentZoom, currentPan);
          } else if (params.renderedPosition != null) {
            pos = params.renderedPosition;
          }

          if (pos != null && !_p.panningEnabled) {
            // panning disabled
            bail = true;
          }
        } // crop zoom


        zoom = zoom > _p.maxZoom ? _p.maxZoom : zoom;
        zoom = zoom < _p.minZoom ? _p.minZoom : zoom; // can't zoom with invalid params

        if (bail || !number(zoom) || zoom === currentZoom || pos != null && (!number(pos.x) || !number(pos.y))) {
          return null;
        }

        if (pos != null) {
          // set zoom about position
          var pan1 = currentPan;
          var zoom1 = currentZoom;
          var zoom2 = zoom;
          var pan2 = {
            x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,
            y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y
          };
          return {
            zoomed: true,
            panned: true,
            zoom: zoom2,
            pan: pan2
          };
        } else {
          // just set the zoom
          return {
            zoomed: true,
            panned: false,
            zoom: zoom,
            pan: currentPan
          };
        }
      },
      zoom: function zoom(params) {
        if (params === undefined) {
          // get
          return this._private.zoom;
        } else {
          // set
          var vp = this.getZoomedViewport(params);
          var _p = this._private;

          if (vp == null || !vp.zoomed) {
            return this;
          }

          _p.zoom = vp.zoom;

          if (vp.panned) {
            _p.pan.x = vp.pan.x;
            _p.pan.y = vp.pan.y;
          }

          this.emit('zoom' + (vp.panned ? ' pan' : '') + ' viewport');
          this.notify('viewport');
          return this; // chaining
        }
      },
      viewport: function viewport(opts) {
        var _p = this._private;
        var zoomDefd = true;
        var panDefd = true;
        var events = []; // to trigger

        var zoomFailed = false;
        var panFailed = false;

        if (!opts) {
          return this;
        }

        if (!number(opts.zoom)) {
          zoomDefd = false;
        }

        if (!plainObject(opts.pan)) {
          panDefd = false;
        }

        if (!zoomDefd && !panDefd) {
          return this;
        }

        if (zoomDefd) {
          var z = opts.zoom;

          if (z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled) {
            zoomFailed = true;
          } else {
            _p.zoom = z;
            events.push('zoom');
          }
        }

        if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {
          var p = opts.pan;

          if (number(p.x)) {
            _p.pan.x = p.x;
            panFailed = false;
          }

          if (number(p.y)) {
            _p.pan.y = p.y;
            panFailed = false;
          }

          if (!panFailed) {
            events.push('pan');
          }
        }

        if (events.length > 0) {
          events.push('viewport');
          this.emit(events.join(' '));
          this.notify('viewport');
        }

        return this; // chaining
      },
      center: function center(elements) {
        var pan = this.getCenterPan(elements);

        if (pan) {
          this._private.pan = pan;
          this.emit('pan viewport');
          this.notify('viewport');
        }

        return this; // chaining
      },
      getCenterPan: function getCenterPan(elements, zoom) {
        if (!this._private.panningEnabled) {
          return;
        }

        if (string(elements)) {
          var selector = elements;
          elements = this.mutableElements().filter(selector);
        } else if (!elementOrCollection(elements)) {
          elements = this.mutableElements();
        }

        if (elements.length === 0) {
          return;
        } // can't centre pan to nothing


        var bb = elements.boundingBox();
        var w = this.width();
        var h = this.height();
        zoom = zoom === undefined ? this._private.zoom : zoom;
        var pan = {
          // middle
          x: (w - zoom * (bb.x1 + bb.x2)) / 2,
          y: (h - zoom * (bb.y1 + bb.y2)) / 2
        };
        return pan;
      },
      reset: function reset() {
        if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
          return this;
        }

        this.viewport({
          pan: {
            x: 0,
            y: 0
          },
          zoom: 1
        });
        return this; // chaining
      },
      invalidateSize: function invalidateSize() {
        this._private.sizeCache = null;
      },
      size: function size() {
        var _p = this._private;
        var container = _p.container;
        return _p.sizeCache = _p.sizeCache || (container ? function () {
          var style = window$1.getComputedStyle(container);

          var val = function val(name) {
            return parseFloat(style.getPropertyValue(name));
          };

          return {
            width: container.clientWidth - val('padding-left') - val('padding-right'),
            height: container.clientHeight - val('padding-top') - val('padding-bottom')
          };
        }() : {
          // fallback if no container (not 0 b/c can be used for dividing etc)
          width: 1,
          height: 1
        });
      },
      width: function width() {
        return this.size().width;
      },
      height: function height() {
        return this.size().height;
      },
      extent: function extent() {
        var pan = this._private.pan;
        var zoom = this._private.zoom;
        var rb = this.renderedExtent();
        var b = {
          x1: (rb.x1 - pan.x) / zoom,
          x2: (rb.x2 - pan.x) / zoom,
          y1: (rb.y1 - pan.y) / zoom,
          y2: (rb.y2 - pan.y) / zoom
        };
        b.w = b.x2 - b.x1;
        b.h = b.y2 - b.y1;
        return b;
      },
      renderedExtent: function renderedExtent() {
        var width = this.width();
        var height = this.height();
        return {
          x1: 0,
          y1: 0,
          x2: width,
          y2: height,
          w: width,
          h: height
        };
      },
      multiClickDebounceTime: function multiClickDebounceTime(_int) {
        if (_int) this._private.multiClickDebounceTime = _int;else return this._private.multiClickDebounceTime;
        return this; // chaining
      }
    }; // aliases

    corefn$8.centre = corefn$8.center; // backwards compatibility

    corefn$8.autolockNodes = corefn$8.autolock;
    corefn$8.autoungrabifyNodes = corefn$8.autoungrabify;

    var fn$6 = {
      data: define$3.data({
        field: 'data',
        bindingEvent: 'data',
        allowBinding: true,
        allowSetting: true,
        settingEvent: 'data',
        settingTriggersEvent: true,
        triggerFnName: 'trigger',
        allowGetting: true,
        updateStyle: true
      }),
      removeData: define$3.removeData({
        field: 'data',
        event: 'data',
        triggerFnName: 'trigger',
        triggerEvent: true,
        updateStyle: true
      }),
      scratch: define$3.data({
        field: 'scratch',
        bindingEvent: 'scratch',
        allowBinding: true,
        allowSetting: true,
        settingEvent: 'scratch',
        settingTriggersEvent: true,
        triggerFnName: 'trigger',
        allowGetting: true,
        updateStyle: true
      }),
      removeScratch: define$3.removeData({
        field: 'scratch',
        event: 'scratch',
        triggerFnName: 'trigger',
        triggerEvent: true,
        updateStyle: true
      })
    }; // aliases

    fn$6.attr = fn$6.data;
    fn$6.removeAttr = fn$6.removeData;

    var Core = function Core(opts) {
      var cy = this;
      opts = extend({}, opts);
      var container = opts.container; // allow for passing a wrapped jquery object
      // e.g. cytoscape({ container: $('#cy') })

      if (container && !htmlElement(container) && htmlElement(container[0])) {
        container = container[0];
      }

      var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery

      reg = reg || {};

      if (reg && reg.cy) {
        reg.cy.destroy();
        reg = {}; // old instance => replace reg completely
      }

      var readies = reg.readies = reg.readies || [];

      if (container) {
        container._cyreg = reg;
      } // make sure container assoc'd reg points to this cy


      reg.cy = cy;
      var head = window$1 !== undefined && container !== undefined && !opts.headless;
      var options = opts;
      options.layout = extend({
        name: head ? 'grid' : 'null'
      }, options.layout);
      options.renderer = extend({
        name: head ? 'canvas' : 'null'
      }, options.renderer);

      var defVal = function defVal(def, val, altVal) {
        if (val !== undefined) {
          return val;
        } else if (altVal !== undefined) {
          return altVal;
        } else {
          return def;
        }
      };

      var _p = this._private = {
        container: container,
        // html dom ele container
        ready: false,
        // whether ready has been triggered
        options: options,
        // cached options
        elements: new Collection(this),
        // elements in the graph
        listeners: [],
        // list of listeners
        aniEles: new Collection(this),
        // elements being animated
        data: options.data || {},
        // data for the core
        scratch: {},
        // scratch object for core
        layout: null,
        renderer: null,
        destroyed: false,
        // whether destroy was called
        notificationsEnabled: true,
        // whether notifications are sent to the renderer
        minZoom: 1e-50,
        maxZoom: 1e50,
        zoomingEnabled: defVal(true, options.zoomingEnabled),
        userZoomingEnabled: defVal(true, options.userZoomingEnabled),
        panningEnabled: defVal(true, options.panningEnabled),
        userPanningEnabled: defVal(true, options.userPanningEnabled),
        boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),
        autolock: defVal(false, options.autolock, options.autolockNodes),
        autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),
        autounselectify: defVal(false, options.autounselectify),
        styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
        zoom: number(options.zoom) ? options.zoom : 1,
        pan: {
          x: plainObject(options.pan) && number(options.pan.x) ? options.pan.x : 0,
          y: plainObject(options.pan) && number(options.pan.y) ? options.pan.y : 0
        },
        animation: {
          // object for currently-running animations
          current: [],
          queue: []
        },
        hasCompoundNodes: false,
        multiClickDebounceTime: defVal(250, options.multiClickDebounceTime)
      };

      this.createEmitter(); // set selection type

      this.selectionType(options.selectionType); // init zoom bounds

      this.zoomRange({
        min: options.minZoom,
        max: options.maxZoom
      });

      var loadExtData = function loadExtData(extData, next) {
        var anyIsPromise = extData.some(promise);

        if (anyIsPromise) {
          return Promise$1.all(extData).then(next); // load all data asynchronously, then exec rest of init
        } else {
          next(extData); // exec synchronously for convenience
        }
      }; // start with the default stylesheet so we have something before loading an external stylesheet


      if (_p.styleEnabled) {
        cy.setStyle([]);
      } // create the renderer


      var rendererOptions = extend({}, options, options.renderer); // allow rendering hints in top level options

      cy.initRenderer(rendererOptions);

      var setElesAndLayout = function setElesAndLayout(elements, onload, ondone) {
        cy.notifications(false); // remove old elements

        var oldEles = cy.mutableElements();

        if (oldEles.length > 0) {
          oldEles.remove();
        }

        if (elements != null) {
          if (plainObject(elements) || array(elements)) {
            cy.add(elements);
          }
        }

        cy.one('layoutready', function (e) {
          cy.notifications(true);
          cy.emit(e); // we missed this event by turning notifications off, so pass it on

          cy.one('load', onload);
          cy.emitAndNotify('load');
        }).one('layoutstop', function () {
          cy.one('done', ondone);
          cy.emit('done');
        });
        var layoutOpts = extend({}, cy._private.options.layout);
        layoutOpts.eles = cy.elements();
        cy.layout(layoutOpts).run();
      };

      loadExtData([options.style, options.elements], function (thens) {
        var initStyle = thens[0];
        var initEles = thens[1]; // init style

        if (_p.styleEnabled) {
          cy.style().append(initStyle);
        } // initial load


        setElesAndLayout(initEles, function () {
          // onready
          cy.startAnimationLoop();
          _p.ready = true; // if a ready callback is specified as an option, the bind it

          if (fn(options.ready)) {
            cy.on('ready', options.ready);
          } // bind all the ready handlers registered before creating this instance


          for (var i = 0; i < readies.length; i++) {
            var fn$1 = readies[i];
            cy.on('ready', fn$1);
          }

          if (reg) {
            reg.readies = [];
          } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc


          cy.emit('ready');
        }, options.done);
      });
    };

    var corefn$9 = Core.prototype; // short alias

    extend(corefn$9, {
      instanceString: function instanceString() {
        return 'core';
      },
      isReady: function isReady() {
        return this._private.ready;
      },
      destroyed: function destroyed() {
        return this._private.destroyed;
      },
      ready: function ready(fn) {
        if (this.isReady()) {
          this.emitter().emit('ready', [], fn); // just calls fn as though triggered via ready event
        } else {
          this.on('ready', fn);
        }

        return this;
      },
      destroy: function destroy() {
        var cy = this;
        if (cy.destroyed()) return;
        cy.stopAnimationLoop();
        cy.destroyRenderer();
        this.emit('destroy');
        cy._private.destroyed = true;
        return cy;
      },
      hasElementWithId: function hasElementWithId(id) {
        return this._private.elements.hasElementWithId(id);
      },
      getElementById: function getElementById(id) {
        return this._private.elements.getElementById(id);
      },
      hasCompoundNodes: function hasCompoundNodes() {
        return this._private.hasCompoundNodes;
      },
      headless: function headless() {
        return this._private.renderer.isHeadless();
      },
      styleEnabled: function styleEnabled() {
        return this._private.styleEnabled;
      },
      addToPool: function addToPool(eles) {
        this._private.elements.merge(eles);

        return this; // chaining
      },
      removeFromPool: function removeFromPool(eles) {
        this._private.elements.unmerge(eles);

        return this;
      },
      container: function container() {
        return this._private.container || null;
      },
      mount: function mount(container) {
        if (container == null) {
          return;
        }

        var cy = this;
        var _p = cy._private;
        var options = _p.options;

        if (!htmlElement(container) && htmlElement(container[0])) {
          container = container[0];
        }

        cy.stopAnimationLoop();
        cy.destroyRenderer();
        _p.container = container;
        _p.styleEnabled = true;
        cy.invalidateSize();
        cy.initRenderer(extend({}, options, options.renderer, {
          // allow custom renderer name to be re-used, otherwise use canvas
          name: options.renderer.name === 'null' ? 'canvas' : options.renderer.name
        }));
        cy.startAnimationLoop();
        cy.style(options.style);
        cy.emit('mount');
        return cy;
      },
      unmount: function unmount() {
        var cy = this;
        cy.stopAnimationLoop();
        cy.destroyRenderer();
        cy.initRenderer({
          name: 'null'
        });
        cy.emit('unmount');
        return cy;
      },
      options: function options() {
        return copy(this._private.options);
      },
      json: function json(obj) {
        var cy = this;
        var _p = cy._private;
        var eles = cy.mutableElements();

        var getFreshRef = function getFreshRef(ele) {
          return cy.getElementById(ele.id());
        };

        if (plainObject(obj)) {
          // set
          cy.startBatch();

          if (obj.elements) {
            var idInJson = {};

            var updateEles = function updateEles(jsons, gr) {
              var toAdd = [];
              var toMod = [];

              for (var i = 0; i < jsons.length; i++) {
                var json = jsons[i];

                if (!json.data.id) {
                  warn('cy.json() cannot handle elements without an ID attribute');
                  continue;
                }

                var id = '' + json.data.id; // id must be string

                var ele = cy.getElementById(id);
                idInJson[id] = true;

                if (ele.length !== 0) {
                  // existing element should be updated
                  toMod.push({
                    ele: ele,
                    json: json
                  });
                } else {
                  // otherwise should be added
                  if (gr) {
                    json.group = gr;
                    toAdd.push(json);
                  } else {
                    toAdd.push(json);
                  }
                }
              }

              cy.add(toAdd);

              for (var _i = 0; _i < toMod.length; _i++) {
                var _toMod$_i = toMod[_i],
                    _ele = _toMod$_i.ele,
                    _json = _toMod$_i.json;

                _ele.json(_json);
              }
            };

            if (array(obj.elements)) {
              // elements: []
              updateEles(obj.elements);
            } else {
              // elements: { nodes: [], edges: [] }
              var grs = ['nodes', 'edges'];

              for (var i = 0; i < grs.length; i++) {
                var gr = grs[i];
                var elements = obj.elements[gr];

                if (array(elements)) {
                  updateEles(elements, gr);
                }
              }
            }

            var parentsToRemove = cy.collection();
            eles.filter(function (ele) {
              return !idInJson[ele.id()];
            }).forEach(function (ele) {
              if (ele.isParent()) {
                parentsToRemove.merge(ele);
              } else {
                ele.remove();
              }
            }); // so that children are not removed w/parent

            parentsToRemove.forEach(function (ele) {
              return ele.children().move({
                parent: null
              });
            }); // intermediate parents may be moved by prior line, so make sure we remove by fresh refs

            parentsToRemove.forEach(function (ele) {
              return getFreshRef(ele).remove();
            });
          }

          if (obj.style) {
            cy.style(obj.style);
          }

          if (obj.zoom != null && obj.zoom !== _p.zoom) {
            cy.zoom(obj.zoom);
          }

          if (obj.pan) {
            if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {
              cy.pan(obj.pan);
            }
          }

          if (obj.data) {
            cy.data(obj.data);
          }

          var fields = ['minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled', 'panningEnabled', 'userPanningEnabled', 'boxSelectionEnabled', 'autolock', 'autoungrabify', 'autounselectify', 'multiClickDebounceTime'];

          for (var _i2 = 0; _i2 < fields.length; _i2++) {
            var f = fields[_i2];

            if (obj[f] != null) {
              cy[f](obj[f]);
            }
          }

          cy.endBatch();
          return this; // chaining
        } else {
          // get
          var flat = !!obj;
          var json = {};

          if (flat) {
            json.elements = this.elements().map(function (ele) {
              return ele.json();
            });
          } else {
            json.elements = {};
            eles.forEach(function (ele) {
              var group = ele.group();

              if (!json.elements[group]) {
                json.elements[group] = [];
              }

              json.elements[group].push(ele.json());
            });
          }

          if (this._private.styleEnabled) {
            json.style = cy.style().json();
          }

          json.data = copy(cy.data());
          var options = _p.options;
          json.zoomingEnabled = _p.zoomingEnabled;
          json.userZoomingEnabled = _p.userZoomingEnabled;
          json.zoom = _p.zoom;
          json.minZoom = _p.minZoom;
          json.maxZoom = _p.maxZoom;
          json.panningEnabled = _p.panningEnabled;
          json.userPanningEnabled = _p.userPanningEnabled;
          json.pan = copy(_p.pan);
          json.boxSelectionEnabled = _p.boxSelectionEnabled;
          json.renderer = copy(options.renderer);
          json.hideEdgesOnViewport = options.hideEdgesOnViewport;
          json.textureOnViewport = options.textureOnViewport;
          json.wheelSensitivity = options.wheelSensitivity;
          json.motionBlur = options.motionBlur;
          json.multiClickDebounceTime = options.multiClickDebounceTime;
          return json;
        }
      }
    });
    corefn$9.$id = corefn$9.getElementById;
    [corefn, corefn$1, elesfn$v, corefn$2, corefn$3, corefn$4, corefn$5, corefn$6, corefn$7, corefn$8, fn$6].forEach(function (props) {
      extend(corefn$9, props);
    });

    /* eslint-disable no-unused-vars */

    var defaults$9 = {
      fit: true,
      // whether to fit the viewport to the graph
      directed: false,
      // whether the tree is directed downwards (or edges can point in any direction if false)
      padding: 30,
      // padding on fit
      circle: false,
      // put depths in concentric circles if true, put depths top down if false
      grid: false,
      // whether to create an even grid into which the DAG is placed (circle:false only)
      spacingFactor: 1.75,
      // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
      boundingBox: undefined,
      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      avoidOverlap: true,
      // prevents node overlap, may overflow boundingBox if not enough space
      nodeDimensionsIncludeLabels: false,
      // Excludes the label when calculating node bounding boxes for the layout algorithm
      roots: undefined,
      // the roots of the trees
      maximal: false,
      // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only)
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled,
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts

    };
    /* eslint-enable */

    var getInfo = function getInfo(ele) {
      return ele.scratch('breadthfirst');
    };

    var setInfo = function setInfo(ele, obj) {
      return ele.scratch('breadthfirst', obj);
    };

    function BreadthFirstLayout(options) {
      this.options = extend({}, defaults$9, options);
    }

    BreadthFirstLayout.prototype.run = function () {
      var params = this.options;
      var options = params;
      var cy = params.cy;
      var eles = options.eles;
      var nodes = eles.nodes().filter(function (n) {
        return !n.isParent();
      });
      var graph = eles;
      var directed = options.directed;
      var maximal = options.maximal || options.maximalAdjustments > 0; // maximalAdjustments for compat. w/ old code

      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });
      var roots;

      if (elementOrCollection(options.roots)) {
        roots = options.roots;
      } else if (array(options.roots)) {
        var rootsArray = [];

        for (var i = 0; i < options.roots.length; i++) {
          var id = options.roots[i];
          var ele = cy.getElementById(id);
          rootsArray.push(ele);
        }

        roots = cy.collection(rootsArray);
      } else if (string(options.roots)) {
        roots = cy.$(options.roots);
      } else {
        if (directed) {
          roots = nodes.roots();
        } else {
          var components = eles.components();
          roots = cy.collection();

          var _loop = function _loop(_i) {
            var comp = components[_i];
            var maxDegree = comp.maxDegree(false);
            var compRoots = comp.filter(function (ele) {
              return ele.degree(false) === maxDegree;
            });
            roots = roots.add(compRoots);
          };

          for (var _i = 0; _i < components.length; _i++) {
            _loop(_i);
          }
        }
      }

      var depths = [];
      var foundByBfs = {};

      var addToDepth = function addToDepth(ele, d) {
        if (depths[d] == null) {
          depths[d] = [];
        }

        var i = depths[d].length;
        depths[d].push(ele);
        setInfo(ele, {
          index: i,
          depth: d
        });
      };

      var changeDepth = function changeDepth(ele, newDepth) {
        var _getInfo = getInfo(ele),
            depth = _getInfo.depth,
            index = _getInfo.index;

        depths[depth][index] = null;
        addToDepth(ele, newDepth);
      }; // find the depths of the nodes


      graph.bfs({
        roots: roots,
        directed: options.directed,
        visit: function visit(node, edge, pNode, i, depth) {
          var ele = node[0];
          var id = ele.id();
          addToDepth(ele, depth);
          foundByBfs[id] = true;
        }
      }); // check for nodes not found by bfs

      var orphanNodes = [];

      for (var _i2 = 0; _i2 < nodes.length; _i2++) {
        var _ele = nodes[_i2];

        if (foundByBfs[_ele.id()]) {
          continue;
        } else {
          orphanNodes.push(_ele);
        }
      } // assign the nodes a depth and index


      var assignDepthsAt = function assignDepthsAt(i) {
        var eles = depths[i];

        for (var j = 0; j < eles.length; j++) {
          var _ele2 = eles[j];

          if (_ele2 == null) {
            eles.splice(j, 1);
            j--;
            continue;
          }

          setInfo(_ele2, {
            depth: i,
            index: j
          });
        }
      };

      var assignDepths = function assignDepths() {
        for (var _i3 = 0; _i3 < depths.length; _i3++) {
          assignDepthsAt(_i3);
        }
      };

      var adjustMaximally = function adjustMaximally(ele, shifted) {
        var eInfo = getInfo(ele);
        var incomers = ele.incomers().filter(function (el) {
          return el.isNode() && eles.has(el);
        });
        var maxDepth = -1;
        var id = ele.id();

        for (var k = 0; k < incomers.length; k++) {
          var incmr = incomers[k];
          var iInfo = getInfo(incmr);
          maxDepth = Math.max(maxDepth, iInfo.depth);
        }

        if (eInfo.depth <= maxDepth) {
          if (shifted[id]) {
            return null;
          }

          changeDepth(ele, maxDepth + 1);
          shifted[id] = true;
          return true;
        }

        return false;
      }; // for the directed case, try to make the edges all go down (i.e. depth i => depth i + 1)


      if (directed && maximal) {
        var Q = [];
        var shifted = {};

        var enqueue = function enqueue(n) {
          return Q.push(n);
        };

        var dequeue = function dequeue() {
          return Q.shift();
        };

        nodes.forEach(function (n) {
          return Q.push(n);
        });

        while (Q.length > 0) {
          var _ele3 = dequeue();

          var didShift = adjustMaximally(_ele3, shifted);

          if (didShift) {
            _ele3.outgoers().filter(function (el) {
              return el.isNode() && eles.has(el);
            }).forEach(enqueue);
          } else if (didShift === null) {
            warn('Detected double maximal shift for node `' + _ele3.id() + '`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.');
            break; // exit on failure
          }
        }
      }

      assignDepths(); // clear holes
      // find min distance we need to leave between nodes

      var minDistance = 0;

      if (options.avoidOverlap) {
        for (var _i4 = 0; _i4 < nodes.length; _i4++) {
          var n = nodes[_i4];
          var nbb = n.layoutDimensions(options);
          var w = nbb.w;
          var h = nbb.h;
          minDistance = Math.max(minDistance, w, h);
        }
      } // get the weighted percent for an element based on its connectivity to other levels


      var cachedWeightedPercent = {};

      var getWeightedPercent = function getWeightedPercent(ele) {
        if (cachedWeightedPercent[ele.id()]) {
          return cachedWeightedPercent[ele.id()];
        }

        var eleDepth = getInfo(ele).depth;
        var neighbors = ele.neighborhood();
        var percent = 0;
        var samples = 0;

        for (var _i5 = 0; _i5 < neighbors.length; _i5++) {
          var neighbor = neighbors[_i5];

          if (neighbor.isEdge() || neighbor.isParent() || !nodes.has(neighbor)) {
            continue;
          }

          var bf = getInfo(neighbor);

          if (bf == null) {
            continue;
          }

          var index = bf.index;
          var depth = bf.depth; // unassigned neighbours shouldn't affect the ordering

          if (index == null || depth == null) {
            continue;
          }

          var nDepth = depths[depth].length;

          if (depth < eleDepth) {
            // only get influenced by elements above
            percent += index / nDepth;
            samples++;
          }
        }

        samples = Math.max(1, samples);
        percent = percent / samples;

        if (samples === 0) {
          // put lone nodes at the start
          percent = 0;
        }

        cachedWeightedPercent[ele.id()] = percent;
        return percent;
      }; // rearrange the indices in each depth level based on connectivity


      var sortFn = function sortFn(a, b) {
        var apct = getWeightedPercent(a);
        var bpct = getWeightedPercent(b);
        var diff = apct - bpct;

        if (diff === 0) {
          return ascending(a.id(), b.id()); // make sure sort doesn't have don't-care comparisons
        } else {
          return diff;
        }
      }; // sort each level to make connected nodes closer


      for (var _i6 = 0; _i6 < depths.length; _i6++) {
        depths[_i6].sort(sortFn);

        assignDepthsAt(_i6);
      } // assign orphan nodes to a new top-level depth


      var orphanDepth = [];

      for (var _i7 = 0; _i7 < orphanNodes.length; _i7++) {
        orphanDepth.push(orphanNodes[_i7]);
      }

      depths.unshift(orphanDepth);
      assignDepths();
      var biggestDepthSize = 0;

      for (var _i8 = 0; _i8 < depths.length; _i8++) {
        biggestDepthSize = Math.max(depths[_i8].length, biggestDepthSize);
      }

      var center = {
        x: bb.x1 + bb.w / 2,
        y: bb.x1 + bb.h / 2
      };
      var maxDepthSize = depths.reduce(function (max, eles) {
        return Math.max(max, eles.length);
      }, 0);

      var getPosition = function getPosition(ele) {
        var _getInfo2 = getInfo(ele),
            depth = _getInfo2.depth,
            index = _getInfo2.index;

        var depthSize = depths[depth].length;
        var distanceX = Math.max(bb.w / ((options.grid ? maxDepthSize : depthSize) + 1), minDistance);
        var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);
        var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);
        radiusStepSize = Math.max(radiusStepSize, minDistance);

        if (!options.circle) {
          var epos = {
            x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
            y: (depth + 1) * distanceY
          };
          return epos;
        } else {
          var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
          var theta = 2 * Math.PI / depths[depth].length * index;

          if (depth === 0 && depths[0].length === 1) {
            radius = 1;
          }

          return {
            x: center.x + radius * Math.cos(theta),
            y: center.y + radius * Math.sin(theta)
          };
        }
      };

      eles.nodes().layoutPositions(this, options, getPosition);
      return this; // chaining
    };

    var defaults$a = {
      fit: true,
      // whether to fit the viewport to the graph
      padding: 30,
      // the padding on fit
      boundingBox: undefined,
      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      avoidOverlap: true,
      // prevents node overlap, may overflow boundingBox and radius if not enough space
      nodeDimensionsIncludeLabels: false,
      // Excludes the label when calculating node bounding boxes for the layout algorithm
      spacingFactor: undefined,
      // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
      radius: undefined,
      // the radius of the circle
      startAngle: 3 / 2 * Math.PI,
      // where nodes start in radians
      sweep: undefined,
      // how many radians should be between the first and last node (defaults to full circle)
      clockwise: true,
      // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
      sort: undefined,
      // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts 

    };

    function CircleLayout(options) {
      this.options = extend({}, defaults$a, options);
    }

    CircleLayout.prototype.run = function () {
      var params = this.options;
      var options = params;
      var cy = params.cy;
      var eles = options.eles;
      var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
      var nodes = eles.nodes().not(':parent');

      if (options.sort) {
        nodes = nodes.sort(options.sort);
      }

      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });
      var center = {
        x: bb.x1 + bb.w / 2,
        y: bb.y1 + bb.h / 2
      };
      var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;
      var dTheta = sweep / Math.max(1, nodes.length - 1);
      var r;
      var minDistance = 0;

      for (var i = 0; i < nodes.length; i++) {
        var n = nodes[i];
        var nbb = n.layoutDimensions(options);
        var w = nbb.w;
        var h = nbb.h;
        minDistance = Math.max(minDistance, w, h);
      }

      if (number(options.radius)) {
        r = options.radius;
      } else if (nodes.length <= 1) {
        r = 0;
      } else {
        r = Math.min(bb.h, bb.w) / 2 - minDistance;
      } // calculate the radius


      if (nodes.length > 1 && options.avoidOverlap) {
        // but only if more than one node (can't overlap)
        minDistance *= 1.75; // just to have some nice spacing

        var dcos = Math.cos(dTheta) - Math.cos(0);
        var dsin = Math.sin(dTheta) - Math.sin(0);
        var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

        r = Math.max(rMin, r);
      }

      var getPos = function getPos(ele, i) {
        var theta = options.startAngle + i * dTheta * (clockwise ? 1 : -1);
        var rx = r * Math.cos(theta);
        var ry = r * Math.sin(theta);
        var pos = {
          x: center.x + rx,
          y: center.y + ry
        };
        return pos;
      };

      eles.nodes().layoutPositions(this, options, getPos);
      return this; // chaining
    };

    var defaults$b = {
      fit: true,
      // whether to fit the viewport to the graph
      padding: 30,
      // the padding on fit
      startAngle: 3 / 2 * Math.PI,
      // where nodes start in radians
      sweep: undefined,
      // how many radians should be between the first and last node (defaults to full circle)
      clockwise: true,
      // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
      equidistant: false,
      // whether levels have an equal radial distance betwen them, may cause bounding box overflow
      minNodeSpacing: 10,
      // min spacing between outside of nodes (used for radius adjustment)
      boundingBox: undefined,
      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      avoidOverlap: true,
      // prevents node overlap, may overflow boundingBox if not enough space
      nodeDimensionsIncludeLabels: false,
      // Excludes the label when calculating node bounding boxes for the layout algorithm
      height: undefined,
      // height of layout area (overrides container height)
      width: undefined,
      // width of layout area (overrides container width)
      spacingFactor: undefined,
      // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
      concentric: function concentric(node) {
        // returns numeric value for each node, placing higher nodes in levels towards the centre
        return node.degree();
      },
      levelWidth: function levelWidth(nodes) {
        // the variation of concentric values in each level
        return nodes.maxDegree() / 4;
      },
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts

    };

    function ConcentricLayout(options) {
      this.options = extend({}, defaults$b, options);
    }

    ConcentricLayout.prototype.run = function () {
      var params = this.options;
      var options = params;
      var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
      var cy = params.cy;
      var eles = options.eles;
      var nodes = eles.nodes().not(':parent');
      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });
      var center = {
        x: bb.x1 + bb.w / 2,
        y: bb.y1 + bb.h / 2
      };
      var nodeValues = []; // { node, value }

      var maxNodeSize = 0;

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var value = void 0; // calculate the node value

        value = options.concentric(node);
        nodeValues.push({
          value: value,
          node: node
        }); // for style mapping

        node._private.scratch.concentric = value;
      } // in case we used the `concentric` in style


      nodes.updateStyle(); // calculate max size now based on potentially updated mappers

      for (var _i = 0; _i < nodes.length; _i++) {
        var _node = nodes[_i];

        var nbb = _node.layoutDimensions(options);

        maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);
      } // sort node values in descreasing order


      nodeValues.sort(function (a, b) {
        return b.value - a.value;
      });
      var levelWidth = options.levelWidth(nodes); // put the values into levels

      var levels = [[]];
      var currentLevel = levels[0];

      for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {
        var val = nodeValues[_i2];

        if (currentLevel.length > 0) {
          var diff = Math.abs(currentLevel[0].value - val.value);

          if (diff >= levelWidth) {
            currentLevel = [];
            levels.push(currentLevel);
          }
        }

        currentLevel.push(val);
      } // create positions from levels


      var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

      if (!options.avoidOverlap) {
        // then strictly constrain to bb
        var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
        var maxR = Math.min(bb.w, bb.h) / 2 - minDist;
        var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);
        minDist = Math.min(minDist, rStep);
      } // find the metrics for each level


      var r = 0;

      for (var _i3 = 0; _i3 < levels.length; _i3++) {
        var level = levels[_i3];
        var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;
        var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1); // calculate the radius

        if (level.length > 1 && options.avoidOverlap) {
          // but only if more than one node (can't overlap)
          var dcos = Math.cos(dTheta) - Math.cos(0);
          var dsin = Math.sin(dTheta) - Math.sin(0);
          var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

          r = Math.max(rMin, r);
        }

        level.r = r;
        r += minDist;
      }

      if (options.equidistant) {
        var rDeltaMax = 0;
        var _r = 0;

        for (var _i4 = 0; _i4 < levels.length; _i4++) {
          var _level = levels[_i4];
          var rDelta = _level.r - _r;
          rDeltaMax = Math.max(rDeltaMax, rDelta);
        }

        _r = 0;

        for (var _i5 = 0; _i5 < levels.length; _i5++) {
          var _level2 = levels[_i5];

          if (_i5 === 0) {
            _r = _level2.r;
          }

          _level2.r = _r;
          _r += rDeltaMax;
        }
      } // calculate the node positions


      var pos = {}; // id => position

      for (var _i6 = 0; _i6 < levels.length; _i6++) {
        var _level3 = levels[_i6];
        var _dTheta = _level3.dTheta;
        var _r2 = _level3.r;

        for (var j = 0; j < _level3.length; j++) {
          var _val = _level3[j];
          var theta = options.startAngle + (clockwise ? 1 : -1) * _dTheta * j;
          var p = {
            x: center.x + _r2 * Math.cos(theta),
            y: center.y + _r2 * Math.sin(theta)
          };
          pos[_val.node.id()] = p;
        }
      } // position the nodes


      eles.nodes().layoutPositions(this, options, function (ele) {
        var id = ele.id();
        return pos[id];
      });
      return this; // chaining
    };

    /*
    The CoSE layout was written by Gerardo Huck.
    https://www.linkedin.com/in/gerardohuck/

    Based on the following article:
    http://dl.acm.org/citation.cfm?id=1498047

    Modifications tracked on Github.
    */
    var DEBUG;
    /**
     * @brief :  default layout options
     */

    var defaults$c = {
      // Called on `layoutready`
      ready: function ready() {},
      // Called on `layoutstop`
      stop: function stop() {},
      // Whether to animate while running the layout
      // true : Animate continuously as the layout is running
      // false : Just show the end result
      // 'end' : Animate with the end result, from the initial positions to the end positions
      animate: true,
      // Easing of the animation for animate:'end'
      animationEasing: undefined,
      // The duration of the animation for animate:'end'
      animationDuration: undefined,
      // A function that determines whether the node should be animated
      // All nodes animated by default on animate enabled
      // Non-animated nodes are positioned immediately when the layout starts
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // The layout animates only after this many milliseconds for animate:true
      // (prevents flashing on fast runs)
      animationThreshold: 250,
      // Number of iterations between consecutive screen positions update
      refresh: 20,
      // Whether to fit the network view after when done
      fit: true,
      // Padding on fit
      padding: 30,
      // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      boundingBox: undefined,
      // Excludes the label when calculating node bounding boxes for the layout algorithm
      nodeDimensionsIncludeLabels: false,
      // Randomize the initial positions of the nodes (true) or use existing positions (false)
      randomize: false,
      // Extra spacing between components in non-compound graphs
      componentSpacing: 40,
      // Node repulsion (non overlapping) multiplier
      nodeRepulsion: function nodeRepulsion(node) {
        return 2048;
      },
      // Node repulsion (overlapping) multiplier
      nodeOverlap: 4,
      // Ideal edge (non nested) length
      idealEdgeLength: function idealEdgeLength(edge) {
        return 32;
      },
      // Divisor to compute edge forces
      edgeElasticity: function edgeElasticity(edge) {
        return 32;
      },
      // Nesting factor (multiplier) to compute ideal edge length for nested edges
      nestingFactor: 1.2,
      // Gravity force (constant)
      gravity: 1,
      // Maximum number of iterations to perform
      numIter: 1000,
      // Initial temperature (maximum node displacement)
      initialTemp: 1000,
      // Cooling factor (how the temperature is reduced between consecutive iterations
      coolingFactor: 0.99,
      // Lower temperature threshold (below this point the layout will end)
      minTemp: 1.0
    };
    /**
     * @brief       : constructor
     * @arg options : object containing layout options
     */

    function CoseLayout(options) {
      this.options = extend({}, defaults$c, options);
      this.options.layout = this;
    }
    /**
     * @brief : runs the layout
     */


    CoseLayout.prototype.run = function () {
      var options = this.options;
      var cy = options.cy;
      var layout = this;
      layout.stopped = false;

      if (options.animate === true || options.animate === false) {
        layout.emit({
          type: 'layoutstart',
          layout: layout
        });
      } // Set DEBUG - Global variable


      if (true === options.debug) {
        DEBUG = true;
      } else {
        DEBUG = false;
      } // Initialize layout info


      var layoutInfo = createLayoutInfo(cy, layout, options); // Show LayoutInfo contents if debugging

      if (DEBUG) {
        printLayoutInfo(layoutInfo);
      } // If required, randomize node positions


      if (options.randomize) {
        randomizePositions(layoutInfo);
      }

      var startTime = performanceNow();

      var refresh = function refresh() {
        refreshPositions(layoutInfo, cy, options); // Fit the graph if necessary

        if (true === options.fit) {
          cy.fit(options.padding);
        }
      };

      var mainLoop = function mainLoop(i) {
        if (layout.stopped || i >= options.numIter) {
          // logDebug("Layout manually stopped. Stopping computation in step " + i);
          return false;
        } // Do one step in the phisical simulation


        step$1(layoutInfo, options); // Update temperature

        layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor; // logDebug("New temperature: " + layoutInfo.temperature);

        if (layoutInfo.temperature < options.minTemp) {
          // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
          return false;
        }

        return true;
      };

      var done = function done() {
        if (options.animate === true || options.animate === false) {
          refresh(); // Layout has finished

          layout.one('layoutstop', options.stop);
          layout.emit({
            type: 'layoutstop',
            layout: layout
          });
        } else {
          var nodes = options.eles.nodes();
          var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
          nodes.layoutPositions(layout, options, getScaledPos);
        }
      };

      var i = 0;
      var loopRet = true;

      if (options.animate === true) {
        var frame = function frame() {
          var f = 0;

          while (loopRet && f < options.refresh) {
            loopRet = mainLoop(i);
            i++;
            f++;
          }

          if (!loopRet) {
            // it's done
            separateComponents(layoutInfo, options);
            done();
          } else {
            var now = performanceNow();

            if (now - startTime >= options.animationThreshold) {
              refresh();
            }

            requestAnimationFrame$1(frame);
          }
        };

        frame();
      } else {
        while (loopRet) {
          loopRet = mainLoop(i);
          i++;
        }

        separateComponents(layoutInfo, options);
        done();
      }

      return this; // chaining
    };
    /**
     * @brief : called on continuous layouts to stop them before they finish
     */


    CoseLayout.prototype.stop = function () {
      this.stopped = true;

      if (this.thread) {
        this.thread.stop();
      }

      this.emit('layoutstop');
      return this; // chaining
    };

    CoseLayout.prototype.destroy = function () {
      if (this.thread) {
        this.thread.stop();
      }

      return this; // chaining
    };
    /**
     * @brief     : Creates an object which is contains all the data
     *              used in the layout process
     * @arg cy    : cytoscape.js object
     * @return    : layoutInfo object initialized
     */


    var createLayoutInfo = function createLayoutInfo(cy, layout, options) {
      // Shortcut
      var edges = options.eles.edges();
      var nodes = options.eles.nodes();
      var layoutInfo = {
        isCompound: cy.hasCompoundNodes(),
        layoutNodes: [],
        idToIndex: {},
        nodeSize: nodes.size(),
        graphSet: [],
        indexToGraph: [],
        layoutEdges: [],
        edgeSize: edges.size(),
        temperature: options.initialTemp,
        clientWidth: cy.width(),
        clientHeight: cy.width(),
        boundingBox: makeBoundingBox(options.boundingBox ? options.boundingBox : {
          x1: 0,
          y1: 0,
          w: cy.width(),
          h: cy.height()
        })
      };
      var components = options.eles.components();
      var id2cmptId = {};

      for (var i = 0; i < components.length; i++) {
        var component = components[i];

        for (var j = 0; j < component.length; j++) {
          var node = component[j];
          id2cmptId[node.id()] = i;
        }
      } // Iterate over all nodes, creating layout nodes


      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = nodes[i];
        var nbb = n.layoutDimensions(options);
        var tempNode = {};
        tempNode.isLocked = n.locked();
        tempNode.id = n.data('id');
        tempNode.parentId = n.data('parent');
        tempNode.cmptId = id2cmptId[n.id()];
        tempNode.children = [];
        tempNode.positionX = n.position('x');
        tempNode.positionY = n.position('y');
        tempNode.offsetX = 0;
        tempNode.offsetY = 0;
        tempNode.height = nbb.w;
        tempNode.width = nbb.h;
        tempNode.maxX = tempNode.positionX + tempNode.width / 2;
        tempNode.minX = tempNode.positionX - tempNode.width / 2;
        tempNode.maxY = tempNode.positionY + tempNode.height / 2;
        tempNode.minY = tempNode.positionY - tempNode.height / 2;
        tempNode.padLeft = parseFloat(n.style('padding'));
        tempNode.padRight = parseFloat(n.style('padding'));
        tempNode.padTop = parseFloat(n.style('padding'));
        tempNode.padBottom = parseFloat(n.style('padding')); // forces

        tempNode.nodeRepulsion = fn(options.nodeRepulsion) ? options.nodeRepulsion(n) : options.nodeRepulsion; // Add new node

        layoutInfo.layoutNodes.push(tempNode); // Add entry to id-index map

        layoutInfo.idToIndex[tempNode.id] = i;
      } // Inline implementation of a queue, used for traversing the graph in BFS order


      var queue = [];
      var start = 0; // Points to the start the queue

      var end = -1; // Points to the end of the queue

      var tempGraph = []; // Second pass to add child information and
      // initialize queue for hierarchical traversal

      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = layoutInfo.layoutNodes[i];
        var p_id = n.parentId; // Check if node n has a parent node

        if (null != p_id) {
          // Add node Id to parent's list of children
          layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);
        } else {
          // If a node doesn't have a parent, then it's in the root graph
          queue[++end] = n.id;
          tempGraph.push(n.id);
        }
      } // Add root graph to graphSet


      layoutInfo.graphSet.push(tempGraph); // Traverse the graph, level by level,

      while (start <= end) {
        // Get the node to visit and remove it from queue
        var node_id = queue[start++];
        var node_ix = layoutInfo.idToIndex[node_id];
        var node = layoutInfo.layoutNodes[node_ix];
        var children = node.children;

        if (children.length > 0) {
          // Add children nodes as a new graph to graph set
          layoutInfo.graphSet.push(children); // Add children to que queue to be visited

          for (var i = 0; i < children.length; i++) {
            queue[++end] = children[i];
          }
        }
      } // Create indexToGraph map


      for (var i = 0; i < layoutInfo.graphSet.length; i++) {
        var graph = layoutInfo.graphSet[i];

        for (var j = 0; j < graph.length; j++) {
          var index = layoutInfo.idToIndex[graph[j]];
          layoutInfo.indexToGraph[index] = i;
        }
      } // Iterate over all edges, creating Layout Edges


      for (var i = 0; i < layoutInfo.edgeSize; i++) {
        var e = edges[i];
        var tempEdge = {};
        tempEdge.id = e.data('id');
        tempEdge.sourceId = e.data('source');
        tempEdge.targetId = e.data('target'); // Compute ideal length

        var idealLength = fn(options.idealEdgeLength) ? options.idealEdgeLength(e) : options.idealEdgeLength;
        var elasticity = fn(options.edgeElasticity) ? options.edgeElasticity(e) : options.edgeElasticity; // Check if it's an inter graph edge

        var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];
        var targetIx = layoutInfo.idToIndex[tempEdge.targetId];
        var sourceGraph = layoutInfo.indexToGraph[sourceIx];
        var targetGraph = layoutInfo.indexToGraph[targetIx];

        if (sourceGraph != targetGraph) {
          // Find lowest common graph ancestor
          var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo); // Compute sum of node depths, relative to lca graph

          var lcaGraph = layoutInfo.graphSet[lca];
          var depth = 0; // Source depth

          var tempNode = layoutInfo.layoutNodes[sourceIx];

          while (-1 === lcaGraph.indexOf(tempNode.id)) {
            tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
            depth++;
          } // Target depth


          tempNode = layoutInfo.layoutNodes[targetIx];

          while (-1 === lcaGraph.indexOf(tempNode.id)) {
            tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
            depth++;
          } // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
          //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
          //  ". Depth: " + depth);
          // Update idealLength


          idealLength *= depth * options.nestingFactor;
        }

        tempEdge.idealLength = idealLength;
        tempEdge.elasticity = elasticity;
        layoutInfo.layoutEdges.push(tempEdge);
      } // Finally, return layoutInfo object


      return layoutInfo;
    };
    /**
     * @brief : This function finds the index of the lowest common
     *          graph ancestor between 2 nodes in the subtree
     *          (from the graph hierarchy induced tree) whose
     *          root is graphIx
     *
     * @arg node1: node1's ID
     * @arg node2: node2's ID
     * @arg layoutInfo: layoutInfo object
     *
     */


    var findLCA = function findLCA(node1, node2, layoutInfo) {
      // Find their common ancester, starting from the root graph
      var res = findLCA_aux(node1, node2, 0, layoutInfo);

      if (2 > res.count) {
        // If aux function couldn't find the common ancester,
        // then it is the root graph
        return 0;
      } else {
        return res.graph;
      }
    };
    /**
     * @brief          : Auxiliary function used for LCA computation
     *
     * @arg node1      : node1's ID
     * @arg node2      : node2's ID
     * @arg graphIx    : subgraph index
     * @arg layoutInfo : layoutInfo object
     *
     * @return         : object of the form {count: X, graph: Y}, where:
     *                   X is the number of ancesters (max: 2) found in
     *                   graphIx (and it's subgraphs),
     *                   Y is the graph index of the lowest graph containing
     *                   all X nodes
     */


    var findLCA_aux = function findLCA_aux(node1, node2, graphIx, layoutInfo) {
      var graph = layoutInfo.graphSet[graphIx]; // If both nodes belongs to graphIx

      if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
        return {
          count: 2,
          graph: graphIx
        };
      } // Make recursive calls for all subgraphs


      var c = 0;

      for (var i = 0; i < graph.length; i++) {
        var nodeId = graph[i];
        var nodeIx = layoutInfo.idToIndex[nodeId];
        var children = layoutInfo.layoutNodes[nodeIx].children; // If the node has no child, skip it

        if (0 === children.length) {
          continue;
        }

        var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
        var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);

        if (0 === result.count) {
          // Neither node1 nor node2 are present in this subgraph
          continue;
        } else if (1 === result.count) {
          // One of (node1, node2) is present in this subgraph
          c++;

          if (2 === c) {
            // We've already found both nodes, no need to keep searching
            break;
          }
        } else {
          // Both nodes are present in this subgraph
          return result;
        }
      }

      return {
        count: c,
        graph: graphIx
      };
    };
    /**
     * @brief: printsLayoutInfo into js console
     *         Only used for debbuging
     */


var printLayoutInfo; 
    /**
     * @brief : Randomizes the position of all nodes
     */


    var randomizePositions = function randomizePositions(layoutInfo, cy) {
      var width = layoutInfo.clientWidth;
      var height = layoutInfo.clientHeight;

      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = layoutInfo.layoutNodes[i]; // No need to randomize compound nodes or locked nodes

        if (0 === n.children.length && !n.isLocked) {
          n.positionX = Math.random() * width;
          n.positionY = Math.random() * height;
        }
      }
    };

    var getScaleInBoundsFn = function getScaleInBoundsFn(layoutInfo, options, nodes) {
      var bb = layoutInfo.boundingBox;
      var coseBB = {
        x1: Infinity,
        x2: -Infinity,
        y1: Infinity,
        y2: -Infinity
      };

      if (options.boundingBox) {
        nodes.forEach(function (node) {
          var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];
          coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);
          coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);
          coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);
          coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);
        });
        coseBB.w = coseBB.x2 - coseBB.x1;
        coseBB.h = coseBB.y2 - coseBB.y1;
      }

      return function (ele, i) {
        var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]];

        if (options.boundingBox) {
          // then add extra bounding box constraint
          var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
          var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;
          return {
            x: bb.x1 + pctX * bb.w,
            y: bb.y1 + pctY * bb.h
          };
        } else {
          return {
            x: lnode.positionX,
            y: lnode.positionY
          };
        }
      };
    };
    /**
     * @brief          : Updates the positions of nodes in the network
     * @arg layoutInfo : LayoutInfo object
     * @arg cy         : Cytoscape object
     * @arg options    : Layout options
     */


    var refreshPositions = function refreshPositions(layoutInfo, cy, options) {
      // var s = 'Refreshing positions';
      // logDebug(s);
      var layout = options.layout;
      var nodes = options.eles.nodes();
      var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
      nodes.positions(getScaledPos); // Trigger layoutReady only on first call

      if (true !== layoutInfo.ready) {
        // s = 'Triggering layoutready';
        // logDebug(s);
        layoutInfo.ready = true;
        layout.one('layoutready', options.ready);
        layout.emit({
          type: 'layoutready',
          layout: this
        });
      }
    };
    /**
     * @brief : Logs a debug message in JS console, if DEBUG is ON
     */
    // var logDebug = function(text) {
    //   if (DEBUG) {
    //     console.debug(text);
    //   }
    // };

    /**
     * @brief          : Performs one iteration of the physical simulation
     * @arg layoutInfo : LayoutInfo object already initialized
     * @arg cy         : Cytoscape object
     * @arg options    : Layout options
     */


    var step$1 = function step(layoutInfo, options, _step) {
      // var s = "\n\n###############################";
      // s += "\nSTEP: " + step;
      // s += "\n###############################\n";
      // logDebug(s);
      // Calculate node repulsions
      calculateNodeForces(layoutInfo, options); // Calculate edge forces

      calculateEdgeForces(layoutInfo); // Calculate gravity forces

      calculateGravityForces(layoutInfo, options); // Propagate forces from parent to child

      propagateForces(layoutInfo); // Update positions based on calculated forces

      updatePositions(layoutInfo);
    };
    /**
     * @brief : Computes the node repulsion forces
     */


    var calculateNodeForces = function calculateNodeForces(layoutInfo, options) {
      // Go through each of the graphs in graphSet
      // Nodes only repel each other if they belong to the same graph
      // var s = 'calculateNodeForces';
      // logDebug(s);
      for (var i = 0; i < layoutInfo.graphSet.length; i++) {
        var graph = layoutInfo.graphSet[i];
        var numNodes = graph.length; // s = "Set: " + graph.toString();
        // logDebug(s);
        // Now get all the pairs of nodes
        // Only get each pair once, (A, B) = (B, A)

        for (var j = 0; j < numNodes; j++) {
          var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];

          for (var k = j + 1; k < numNodes; k++) {
            var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];
            nodeRepulsion(node1, node2, layoutInfo, options);
          }
        }
      }
    };

    var randomDistance = function randomDistance(max) {
      return -max + 2 * max * Math.random();
    };
    /**
     * @brief : Compute the node repulsion forces between a pair of nodes
     */


    var nodeRepulsion = function nodeRepulsion(node1, node2, layoutInfo, options) {
      // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;
      var cmptId1 = node1.cmptId;
      var cmptId2 = node2.cmptId;

      if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {
        return;
      } // Get direction of line connecting both node centers


      var directionX = node2.positionX - node1.positionX;
      var directionY = node2.positionY - node1.positionY;
      var maxRandDist = 1; // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;
      // If both centers are the same, apply a random force

      if (0 === directionX && 0 === directionY) {
        directionX = randomDistance(maxRandDist);
        directionY = randomDistance(maxRandDist);
      }

      var overlap = nodesOverlap(node1, node2, directionX, directionY);

      if (overlap > 0) {
        // s += "\nNodes DO overlap.";
        // s += "\nOverlap: " + overlap;
        // If nodes overlap, repulsion force is proportional
        // to the overlap
        var force = options.nodeOverlap * overlap; // Compute the module and components of the force vector

        var distance = Math.sqrt(directionX * directionX + directionY * directionY); // s += "\nDistance: " + distance;

        var forceX = force * directionX / distance;
        var forceY = force * directionY / distance;
      } else {
        // s += "\nNodes do NOT overlap.";
        // If there's no overlap, force is inversely proportional
        // to squared distance
        // Get clipping points for both nodes
        var point1 = findClippingPoint(node1, directionX, directionY);
        var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY); // Use clipping points to compute distance

        var distanceX = point2.x - point1.x;
        var distanceY = point2.y - point1.y;
        var distanceSqr = distanceX * distanceX + distanceY * distanceY;
        var distance = Math.sqrt(distanceSqr); // s += "\nDistance: " + distance;
        // Compute the module and components of the force vector

        var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;
        var forceX = force * distanceX / distance;
        var forceY = force * distanceY / distance;
      } // Apply force


      if (!node1.isLocked) {
        node1.offsetX -= forceX;
        node1.offsetY -= forceY;
      }

      if (!node2.isLocked) {
        node2.offsetX += forceX;
        node2.offsetY += forceY;
      } // s += "\nForceX: " + forceX + " ForceY: " + forceY;
      // logDebug(s);


      return;
    };
    /**
     * @brief  : Determines whether two nodes overlap or not
     * @return : Amount of overlapping (0 => no overlap)
     */


    var nodesOverlap = function nodesOverlap(node1, node2, dX, dY) {
      if (dX > 0) {
        var overlapX = node1.maxX - node2.minX;
      } else {
        var overlapX = node2.maxX - node1.minX;
      }

      if (dY > 0) {
        var overlapY = node1.maxY - node2.minY;
      } else {
        var overlapY = node2.maxY - node1.minY;
      }

      if (overlapX >= 0 && overlapY >= 0) {
        return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
      } else {
        return 0;
      }
    };
    /**
     * @brief : Finds the point in which an edge (direction dX, dY) intersects
     *          the rectangular bounding box of it's source/target node
     */


    var findClippingPoint = function findClippingPoint(node, dX, dY) {
      // Shorcuts
      var X = node.positionX;
      var Y = node.positionY;
      var H = node.height || 1;
      var W = node.width || 1;
      var dirSlope = dY / dX;
      var nodeSlope = H / W; // var s = 'Computing clipping point of node ' + node.id +
      //   " . Height:  " + H + ", Width: " + W +
      //   "\nDirection " + dX + ", " + dY;
      //
      // Compute intersection

      var res = {}; // Case: Vertical direction (up)

      if (0 === dX && 0 < dY) {
        res.x = X; // s += "\nUp direction";

        res.y = Y + H / 2;
        return res;
      } // Case: Vertical direction (down)


      if (0 === dX && 0 > dY) {
        res.x = X;
        res.y = Y + H / 2; // s += "\nDown direction";

        return res;
      } // Case: Intersects the right border


      if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
        res.x = X + W / 2;
        res.y = Y + W * dY / 2 / dX; // s += "\nRightborder";

        return res;
      } // Case: Intersects the left border


      if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
        res.x = X - W / 2;
        res.y = Y - W * dY / 2 / dX; // s += "\nLeftborder";

        return res;
      } // Case: Intersects the top border


      if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
        res.x = X + H * dX / 2 / dY;
        res.y = Y + H / 2; // s += "\nTop border";

        return res;
      } // Case: Intersects the bottom border


      if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
        res.x = X - H * dX / 2 / dY;
        res.y = Y - H / 2; // s += "\nBottom border";

        return res;
      } // s += "\nClipping point found at " + res.x + ", " + res.y;
      // logDebug(s);


      return res;
    };
    /**
     * @brief : Calculates all edge forces
     */


    var calculateEdgeForces = function calculateEdgeForces(layoutInfo, options) {
      // Iterate over all edges
      for (var i = 0; i < layoutInfo.edgeSize; i++) {
        // Get edge, source & target nodes
        var edge = layoutInfo.layoutEdges[i];
        var sourceIx = layoutInfo.idToIndex[edge.sourceId];
        var source = layoutInfo.layoutNodes[sourceIx];
        var targetIx = layoutInfo.idToIndex[edge.targetId];
        var target = layoutInfo.layoutNodes[targetIx]; // Get direction of line connecting both node centers

        var directionX = target.positionX - source.positionX;
        var directionY = target.positionY - source.positionY; // If both centers are the same, do nothing.
        // A random force has already been applied as node repulsion

        if (0 === directionX && 0 === directionY) {
          continue;
        } // Get clipping points for both nodes


        var point1 = findClippingPoint(source, directionX, directionY);
        var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);
        var lx = point2.x - point1.x;
        var ly = point2.y - point1.y;
        var l = Math.sqrt(lx * lx + ly * ly);
        var force = Math.pow(edge.idealLength - l, 2) / edge.elasticity;

        if (0 !== l) {
          var forceX = force * lx / l;
          var forceY = force * ly / l;
        } else {
          var forceX = 0;
          var forceY = 0;
        } // Add this force to target and source nodes


        if (!source.isLocked) {
          source.offsetX += forceX;
          source.offsetY += forceY;
        }

        if (!target.isLocked) {
          target.offsetX -= forceX;
          target.offsetY -= forceY;
        } // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
        // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
        // logDebug(s);

      }
    };
    /**
     * @brief : Computes gravity forces for all nodes
     */


    var calculateGravityForces = function calculateGravityForces(layoutInfo, options) {
      if (options.gravity === 0) {
        return;
      }

      var distThreshold = 1; // var s = 'calculateGravityForces';
      // logDebug(s);

      for (var i = 0; i < layoutInfo.graphSet.length; i++) {
        var graph = layoutInfo.graphSet[i];
        var numNodes = graph.length; // s = "Set: " + graph.toString();
        // logDebug(s);
        // Compute graph center

        if (0 === i) {
          var centerX = layoutInfo.clientHeight / 2;
          var centerY = layoutInfo.clientWidth / 2;
        } else {
          // Get Parent node for this graph, and use its position as center
          var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
          var parent = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
          var centerX = parent.positionX;
          var centerY = parent.positionY;
        } // s = "Center found at: " + centerX + ", " + centerY;
        // logDebug(s);
        // Apply force to all nodes in graph


        for (var j = 0; j < numNodes; j++) {
          var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]]; // s = "Node: " + node.id;

          if (node.isLocked) {
            continue;
          }

          var dx = centerX - node.positionX;
          var dy = centerY - node.positionY;
          var d = Math.sqrt(dx * dx + dy * dy);

          if (d > distThreshold) {
            var fx = options.gravity * dx / d;
            var fy = options.gravity * dy / d;
            node.offsetX += fx;
            node.offsetY += fy; // s += ": Applied force: " + fx + ", " + fy;
          } // s += ": skypped since it's too close to center";
            // logDebug(s);

        }
      }
    };
    /**
     * @brief          : This function propagates the existing offsets from
     *                   parent nodes to its descendents.
     * @arg layoutInfo : layoutInfo Object
     * @arg cy         : cytoscape Object
     * @arg options    : Layout options
     */


    var propagateForces = function propagateForces(layoutInfo, options) {
      // Inline implementation of a queue, used for traversing the graph in BFS order
      var queue = [];
      var start = 0; // Points to the start the queue

      var end = -1; // Points to the end of the queue
      // logDebug('propagateForces');
      // Start by visiting the nodes in the root graph

      queue.push.apply(queue, layoutInfo.graphSet[0]);
      end += layoutInfo.graphSet[0].length; // Traverse the graph, level by level,

      while (start <= end) {
        // Get the node to visit and remove it from queue
        var nodeId = queue[start++];
        var nodeIndex = layoutInfo.idToIndex[nodeId];
        var node = layoutInfo.layoutNodes[nodeIndex];
        var children = node.children; // We only need to process the node if it's compound

        if (0 < children.length && !node.isLocked) {
          var offX = node.offsetX;
          var offY = node.offsetY; // var s = "Propagating offset from parent node : " + node.id +
          //   ". OffsetX: " + offX + ". OffsetY: " + offY;
          // s += "\n Children: " + children.toString();
          // logDebug(s);

          for (var i = 0; i < children.length; i++) {
            var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]]; // Propagate offset

            childNode.offsetX += offX;
            childNode.offsetY += offY; // Add children to queue to be visited

            queue[++end] = children[i];
          } // Reset parent offsets


          node.offsetX = 0;
          node.offsetY = 0;
        }
      }
    };
    /**
     * @brief : Updates the layout model positions, based on
     *          the accumulated forces
     */


    var updatePositions = function updatePositions(layoutInfo, options) {
      // var s = 'Updating positions';
      // logDebug(s);
      // Reset boundaries for compound nodes
      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = layoutInfo.layoutNodes[i];

        if (0 < n.children.length) {
          // logDebug("Resetting boundaries of compound node: " + n.id);
          n.maxX = undefined;
          n.minX = undefined;
          n.maxY = undefined;
          n.minY = undefined;
        }
      }

      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = layoutInfo.layoutNodes[i];

        if (0 < n.children.length || n.isLocked) {
          // No need to set compound or locked node position
          // logDebug("Skipping position update of node: " + n.id);
          continue;
        } // s = "Node: " + n.id + " Previous position: (" +
        // n.positionX + ", " + n.positionY + ").";
        // Limit displacement in order to improve stability


        var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);
        n.positionX += tempForce.x;
        n.positionY += tempForce.y;
        n.offsetX = 0;
        n.offsetY = 0;
        n.minX = n.positionX - n.width;
        n.maxX = n.positionX + n.width;
        n.minY = n.positionY - n.height;
        n.maxY = n.positionY + n.height; // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
        // logDebug(s);
        // Update ancestry boudaries

        updateAncestryBoundaries(n, layoutInfo);
      } // Update size, position of compund nodes


      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = layoutInfo.layoutNodes[i];

        if (0 < n.children.length && !n.isLocked) {
          n.positionX = (n.maxX + n.minX) / 2;
          n.positionY = (n.maxY + n.minY) / 2;
          n.width = n.maxX - n.minX;
          n.height = n.maxY - n.minY; // s = "Updating position, size of compound node " + n.id;
          // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
          // s += "\nWidth: " + n.width + ", Height: " + n.height;
          // logDebug(s);
        }
      }
    };
    /**
     * @brief : Limits a force (forceX, forceY) to be not
     *          greater (in modulo) than max.
     8          Preserves force direction.
      */


    var limitForce = function limitForce(forceX, forceY, max) {
      // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
      var force = Math.sqrt(forceX * forceX + forceY * forceY);

      if (force > max) {
        var res = {
          x: max * forceX / force,
          y: max * forceY / force
        };
      } else {
        var res = {
          x: forceX,
          y: forceY
        };
      } // s += ".\nResult: (" + res.x + ", " + res.y + ")";
      // logDebug(s);


      return res;
    };
    /**
     * @brief : Function used for keeping track of compound node
     *          sizes, since they should bound all their subnodes.
     */


    var updateAncestryBoundaries = function updateAncestryBoundaries(node, layoutInfo) {
      // var s = "Propagating new position/size of node " + node.id;
      var parentId = node.parentId;

      if (null == parentId) {
        // If there's no parent, we are done
        // s += ". No parent node.";
        // logDebug(s);
        return;
      } // Get Parent Node


      var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
      var flag = false; // MaxX

      if (null == p.maxX || node.maxX + p.padRight > p.maxX) {
        p.maxX = node.maxX + p.padRight;
        flag = true; // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
      } // MinX


      if (null == p.minX || node.minX - p.padLeft < p.minX) {
        p.minX = node.minX - p.padLeft;
        flag = true; // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
      } // MaxY


      if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {
        p.maxY = node.maxY + p.padBottom;
        flag = true; // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
      } // MinY


      if (null == p.minY || node.minY - p.padTop < p.minY) {
        p.minY = node.minY - p.padTop;
        flag = true; // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
      } // If updated boundaries, propagate changes upward


      if (flag) {
        // logDebug(s);
        return updateAncestryBoundaries(p, layoutInfo);
      } // s += ". No changes in boundaries/position of parent node " + p.id;
      // logDebug(s);


      return;
    };

    var separateComponents = function separateComponents(layoutInfo, options) {
      var nodes = layoutInfo.layoutNodes;
      var components = [];

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var cid = node.cmptId;
        var component = components[cid] = components[cid] || [];
        component.push(node);
      }

      var totalA = 0;

      for (var i = 0; i < components.length; i++) {
        var c = components[i];

        if (!c) {
          continue;
        }

        c.x1 = Infinity;
        c.x2 = -Infinity;
        c.y1 = Infinity;
        c.y2 = -Infinity;

        for (var j = 0; j < c.length; j++) {
          var n = c[j];
          c.x1 = Math.min(c.x1, n.positionX - n.width / 2);
          c.x2 = Math.max(c.x2, n.positionX + n.width / 2);
          c.y1 = Math.min(c.y1, n.positionY - n.height / 2);
          c.y2 = Math.max(c.y2, n.positionY + n.height / 2);
        }

        c.w = c.x2 - c.x1;
        c.h = c.y2 - c.y1;
        totalA += c.w * c.h;
      }

      components.sort(function (c1, c2) {
        return c2.w * c2.h - c1.w * c1.h;
      });
      var x = 0;
      var y = 0;
      var usedW = 0;
      var rowH = 0;
      var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;

      for (var i = 0; i < components.length; i++) {
        var c = components[i];

        if (!c) {
          continue;
        }

        for (var j = 0; j < c.length; j++) {
          var n = c[j];

          if (!n.isLocked) {
            n.positionX += x - c.x1;
            n.positionY += y - c.y1;
          }
        }

        x += c.w + options.componentSpacing;
        usedW += c.w + options.componentSpacing;
        rowH = Math.max(rowH, c.h);

        if (usedW > maxRowW) {
          y += rowH + options.componentSpacing;
          x = 0;
          usedW = 0;
          rowH = 0;
        }
      }
    };

    var defaults$d = {
      fit: true,
      // whether to fit the viewport to the graph
      padding: 30,
      // padding used on fit
      boundingBox: undefined,
      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      avoidOverlap: true,
      // prevents node overlap, may overflow boundingBox if not enough space
      avoidOverlapPadding: 10,
      // extra spacing around nodes when avoidOverlap: true
      nodeDimensionsIncludeLabels: false,
      // Excludes the label when calculating node bounding boxes for the layout algorithm
      spacingFactor: undefined,
      // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
      condense: false,
      // uses all available space on false, uses minimal space on true
      rows: undefined,
      // force num of rows in the grid
      cols: undefined,
      // force num of columns in the grid
      position: function position(node) {},
      // returns { row, col } for element
      sort: undefined,
      // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts 

    };

    function GridLayout(options) {
      this.options = extend({}, defaults$d, options);
    }

    GridLayout.prototype.run = function () {
      var params = this.options;
      var options = params;
      var cy = params.cy;
      var eles = options.eles;
      var nodes = eles.nodes().not(':parent');

      if (options.sort) {
        nodes = nodes.sort(options.sort);
      }

      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });

      if (bb.h === 0 || bb.w === 0) {
        eles.nodes().layoutPositions(this, options, function (ele) {
          return {
            x: bb.x1,
            y: bb.y1
          };
        });
      } else {
        // width/height * splits^2 = cells where splits is number of times to split width
        var cells = nodes.size();
        var splits = Math.sqrt(cells * bb.h / bb.w);
        var rows = Math.round(splits);
        var cols = Math.round(bb.w / bb.h * splits);

        var small = function small(val) {
          if (val == null) {
            return Math.min(rows, cols);
          } else {
            var min = Math.min(rows, cols);

            if (min == rows) {
              rows = val;
            } else {
              cols = val;
            }
          }
        };

        var large = function large(val) {
          if (val == null) {
            return Math.max(rows, cols);
          } else {
            var max = Math.max(rows, cols);

            if (max == rows) {
              rows = val;
            } else {
              cols = val;
            }
          }
        };

        var oRows = options.rows;
        var oCols = options.cols != null ? options.cols : options.columns; // if rows or columns were set in options, use those values

        if (oRows != null && oCols != null) {
          rows = oRows;
          cols = oCols;
        } else if (oRows != null && oCols == null) {
          rows = oRows;
          cols = Math.ceil(cells / rows);
        } else if (oRows == null && oCols != null) {
          cols = oCols;
          rows = Math.ceil(cells / cols);
        } // otherwise use the automatic values and adjust accordingly
        // if rounding was up, see if we can reduce rows or columns
        else if (cols * rows > cells) {
            var sm = small();
            var lg = large(); // reducing the small side takes away the most cells, so try it first

            if ((sm - 1) * lg >= cells) {
              small(sm - 1);
            } else if ((lg - 1) * sm >= cells) {
              large(lg - 1);
            }
          } else {
            // if rounding was too low, add rows or columns
            while (cols * rows < cells) {
              var _sm = small();

              var _lg = large(); // try to add to larger side first (adds less in multiplication)


              if ((_lg + 1) * _sm >= cells) {
                large(_lg + 1);
              } else {
                small(_sm + 1);
              }
            }
          }

        var cellWidth = bb.w / cols;
        var cellHeight = bb.h / rows;

        if (options.condense) {
          cellWidth = 0;
          cellHeight = 0;
        }

        if (options.avoidOverlap) {
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var pos = node._private.position;

            if (pos.x == null || pos.y == null) {
              // for bb
              pos.x = 0;
              pos.y = 0;
            }

            var nbb = node.layoutDimensions(options);
            var p = options.avoidOverlapPadding;
            var w = nbb.w + p;
            var h = nbb.h + p;
            cellWidth = Math.max(cellWidth, w);
            cellHeight = Math.max(cellHeight, h);
          }
        }

        var cellUsed = {}; // e.g. 'c-0-2' => true

        var used = function used(row, col) {
          return cellUsed['c-' + row + '-' + col] ? true : false;
        };

        var use = function use(row, col) {
          cellUsed['c-' + row + '-' + col] = true;
        }; // to keep track of current cell position


        var row = 0;
        var col = 0;

        var moveToNextCell = function moveToNextCell() {
          col++;

          if (col >= cols) {
            col = 0;
            row++;
          }
        }; // get a cache of all the manual positions


        var id2manPos = {};

        for (var _i = 0; _i < nodes.length; _i++) {
          var _node = nodes[_i];
          var rcPos = options.position(_node);

          if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {
            // must have at least row or col def'd
            var _pos = {
              row: rcPos.row,
              col: rcPos.col
            };

            if (_pos.col === undefined) {
              // find unused col
              _pos.col = 0;

              while (used(_pos.row, _pos.col)) {
                _pos.col++;
              }
            } else if (_pos.row === undefined) {
              // find unused row
              _pos.row = 0;

              while (used(_pos.row, _pos.col)) {
                _pos.row++;
              }
            }

            id2manPos[_node.id()] = _pos;
            use(_pos.row, _pos.col);
          }
        }

        var getPos = function getPos(element, i) {
          var x, y;

          if (element.locked() || element.isParent()) {
            return false;
          } // see if we have a manual position set


          var rcPos = id2manPos[element.id()];

          if (rcPos) {
            x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;
            y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;
          } else {
            // otherwise set automatically
            while (used(row, col)) {
              moveToNextCell();
            }

            x = col * cellWidth + cellWidth / 2 + bb.x1;
            y = row * cellHeight + cellHeight / 2 + bb.y1;
            use(row, col);
            moveToNextCell();
          }

          return {
            x: x,
            y: y
          };
        };

        nodes.layoutPositions(this, options, getPos);
      }

      return this; // chaining
    };

    var defaults$e = {
      ready: function ready() {},
      // on layoutready
      stop: function stop() {} // on layoutstop

    }; // constructor
    // options : object containing layout options

    function NullLayout(options) {
      this.options = extend({}, defaults$e, options);
    } // runs the layout


    NullLayout.prototype.run = function () {
      var options = this.options;
      var eles = options.eles; // elements to consider in the layout

      var layout = this; // cy is automatically populated for us in the constructor
      // (disable eslint for next line as this serves as example layout code to external developers)
      // eslint-disable-next-line no-unused-vars

      options.cy;
      layout.emit('layoutstart'); // puts all nodes at (0, 0)
      // n.b. most layouts would use layoutPositions(), instead of positions() and manual events

      eles.nodes().positions(function () {
        return {
          x: 0,
          y: 0
        };
      }); // trigger layoutready when each node has had its position set at least once

      layout.one('layoutready', options.ready);
      layout.emit('layoutready'); // trigger layoutstop when the layout stops (e.g. finishes)

      layout.one('layoutstop', options.stop);
      layout.emit('layoutstop');
      return this; // chaining
    }; // called on continuous layouts to stop them before they finish


    NullLayout.prototype.stop = function () {
      return this; // chaining
    };

    var defaults$f = {
      positions: undefined,
      // map of (node id) => (position obj); or function(node){ return somPos; }
      zoom: undefined,
      // the zoom level to set (prob want fit = false if set)
      pan: undefined,
      // the pan level to set (prob want fit = false if set)
      fit: true,
      // whether to fit to viewport
      padding: 30,
      // padding on fit
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts

    };

    function PresetLayout(options) {
      this.options = extend({}, defaults$f, options);
    }

    PresetLayout.prototype.run = function () {
      var options = this.options;
      var eles = options.eles;
      var nodes = eles.nodes();
      var posIsFn = fn(options.positions);

      function getPosition(node) {
        if (options.positions == null) {
          return copyPosition(node.position());
        }

        if (posIsFn) {
          return options.positions(node);
        }

        var pos = options.positions[node._private.data.id];

        if (pos == null) {
          return null;
        }

        return pos;
      }

      nodes.layoutPositions(this, options, function (node, i) {
        var position = getPosition(node);

        if (node.locked() || position == null) {
          return false;
        }

        return position;
      });
      return this; // chaining
    };

    var defaults$g = {
      fit: true,
      // whether to fit to viewport
      padding: 30,
      // fit padding
      boundingBox: undefined,
      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts 

    };

    function RandomLayout(options) {
      this.options = extend({}, defaults$g, options);
    }

    RandomLayout.prototype.run = function () {
      var options = this.options;
      var cy = options.cy;
      var eles = options.eles;
      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });

      var getPos = function getPos(node, i) {
        return {
          x: bb.x1 + Math.round(Math.random() * bb.w),
          y: bb.y1 + Math.round(Math.random() * bb.h)
        };
      };

      eles.nodes().layoutPositions(this, options, getPos);
      return this; // chaining
    };

    var layout = [{
      name: 'breadthfirst',
      impl: BreadthFirstLayout
    }, {
      name: 'circle',
      impl: CircleLayout
    }, {
      name: 'concentric',
      impl: ConcentricLayout
    }, {
      name: 'cose',
      impl: CoseLayout
    }, {
      name: 'grid',
      impl: GridLayout
    }, {
      name: 'null',
      impl: NullLayout
    }, {
      name: 'preset',
      impl: PresetLayout
    }, {
      name: 'random',
      impl: RandomLayout
    }];

    function NullRenderer(options) {
      this.options = options;
      this.notifications = 0; // for testing
    }

    var noop$1 = function noop() {};

    var throwImgErr = function throwImgErr() {
      throw new Error('A headless instance can not render images');
    };

    NullRenderer.prototype = {
      recalculateRenderedStyle: noop$1,
      notify: function notify() {
        this.notifications++;
      },
      init: noop$1,
      isHeadless: function isHeadless() {
        return true;
      },
      png: throwImgErr,
      jpg: throwImgErr
    };

    var BRp = {};
    BRp.arrowShapeWidth = 0.3;

    BRp.registerArrowShapes = function () {
      var arrowShapes = this.arrowShapes = {};
      var renderer = this; // Contract for arrow shapes:
      // 0, 0 is arrow tip
      // (0, 1) is direction towards node
      // (1, 0) is right
      //
      // functional api:
      // collide: check x, y in shape
      // roughCollide: called before collide, no false negatives
      // draw: draw
      // spacing: dist(arrowTip, nodeBoundary)
      // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

      var bbCollide = function bbCollide(x, y, size, angle, translation, edgeWidth, padding) {
        var x1 = translation.x - size / 2 - padding;
        var x2 = translation.x + size / 2 + padding;
        var y1 = translation.y - size / 2 - padding;
        var y2 = translation.y + size / 2 + padding;
        var inside = x1 <= x && x <= x2 && y1 <= y && y <= y2;
        return inside;
      };

      var transform = function transform(x, y, size, angle, translation) {
        var xRotated = x * Math.cos(angle) - y * Math.sin(angle);
        var yRotated = x * Math.sin(angle) + y * Math.cos(angle);
        var xScaled = xRotated * size;
        var yScaled = yRotated * size;
        var xTranslated = xScaled + translation.x;
        var yTranslated = yScaled + translation.y;
        return {
          x: xTranslated,
          y: yTranslated
        };
      };

      var transformPoints = function transformPoints(pts, size, angle, translation) {
        var retPts = [];

        for (var i = 0; i < pts.length; i += 2) {
          var x = pts[i];
          var y = pts[i + 1];
          retPts.push(transform(x, y, size, angle, translation));
        }

        return retPts;
      };

      var pointsToArr = function pointsToArr(pts) {
        var ret = [];

        for (var i = 0; i < pts.length; i++) {
          var p = pts[i];
          ret.push(p.x, p.y);
        }

        return ret;
      };

      var standardGap = function standardGap(edge) {
        return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').pfValue * 2;
      };

      var defineArrowShape = function defineArrowShape(name, defn) {
        if (string(defn)) {
          defn = arrowShapes[defn];
        }

        arrowShapes[name] = extend({
          name: name,
          points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],
          collide: function collide(x, y, size, angle, translation, padding) {
            var points = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
            var inside = pointInsidePolygonPoints(x, y, points);
            return inside;
          },
          roughCollide: bbCollide,
          draw: function draw(context, size, angle, translation) {
            var points = transformPoints(this.points, size, angle, translation);
            renderer.arrowShapeImpl('polygon')(context, points);
          },
          spacing: function spacing(edge) {
            return 0;
          },
          gap: standardGap
        }, defn);
      };

      defineArrowShape('none', {
        collide: falsify,
        roughCollide: falsify,
        draw: noop,
        spacing: zeroify,
        gap: zeroify
      });
      defineArrowShape('triangle', {
        points: [-0.15, -0.3, 0, 0, 0.15, -0.3]
      });
      defineArrowShape('arrow', 'triangle');
      defineArrowShape('triangle-backcurve', {
        points: arrowShapes['triangle'].points,
        controlPoint: [0, -0.15],
        roughCollide: bbCollide,
        draw: function draw(context, size, angle, translation, edgeWidth) {
          var ptsTrans = transformPoints(this.points, size, angle, translation);
          var ctrlPt = this.controlPoint;
          var ctrlPtTrans = transform(ctrlPt[0], ctrlPt[1], size, angle, translation);
          renderer.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);
        },
        gap: function gap(edge) {
          return standardGap(edge) * 0.8;
        }
      });
      defineArrowShape('triangle-tee', {
        points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
        pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],
        collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
          var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
          var teePts = pointsToArr(transformPoints(this.pointsTee, size + 2 * padding, angle, translation));
          var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
          return inside;
        },
        draw: function draw(context, size, angle, translation, edgeWidth) {
          var triPts = transformPoints(this.points, size, angle, translation);
          var teePts = transformPoints(this.pointsTee, size, angle, translation);
          renderer.arrowShapeImpl(this.name)(context, triPts, teePts);
        }
      });
      defineArrowShape('circle-triangle', {
        radius: 0.15,
        pointsTr: [0, -0.15, 0.15, -0.45, -0.15, -0.45, 0, -0.15],
        collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
          var t = translation;
          var circleInside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);
          var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
          return pointInsidePolygonPoints(x, y, triPts) || circleInside;
        },
        draw: function draw(context, size, angle, translation, edgeWidth) {
          var triPts = transformPoints(this.pointsTr, size, angle, translation);
          renderer.arrowShapeImpl(this.name)(context, triPts, translation.x, translation.y, this.radius * size);
        },
        spacing: function spacing(edge) {
          return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;
        }
      });
      defineArrowShape('triangle-cross', {
        points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
        baseCrossLinePts: [-0.15, -0.4, // first half of the rectangle
        -0.15, -0.4, 0.15, -0.4, // second half of the rectangle
        0.15, -0.4],
        crossLinePts: function crossLinePts(size, edgeWidth) {
          // shift points so that the distance between the cross points matches edge width
          var p = this.baseCrossLinePts.slice();
          var shiftFactor = edgeWidth / size;
          var y0 = 3;
          var y1 = 5;
          p[y0] = p[y0] - shiftFactor;
          p[y1] = p[y1] - shiftFactor;
          return p;
        },
        collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
          var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
          var teePts = pointsToArr(transformPoints(this.crossLinePts(size, edgeWidth), size + 2 * padding, angle, translation));
          var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
          return inside;
        },
        draw: function draw(context, size, angle, translation, edgeWidth) {
          var triPts = transformPoints(this.points, size, angle, translation);
          var crossLinePts = transformPoints(this.crossLinePts(size, edgeWidth), size, angle, translation);
          renderer.arrowShapeImpl(this.name)(context, triPts, crossLinePts);
        }
      });
      defineArrowShape('vee', {
        points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],
        gap: function gap(edge) {
          return standardGap(edge) * 0.525;
        }
      });
      defineArrowShape('circle', {
        radius: 0.15,
        collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
          var t = translation;
          var inside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);
          return inside;
        },
        draw: function draw(context, size, angle, translation, edgeWidth) {
          renderer.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size);
        },
        spacing: function spacing(edge) {
          return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;
        }
      });
      defineArrowShape('tee', {
        points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],
        spacing: function spacing(edge) {
          return 1;
        },
        gap: function gap(edge) {
          return 1;
        }
      });
      defineArrowShape('square', {
        points: [-0.15, 0.00, 0.15, 0.00, 0.15, -0.3, -0.15, -0.3]
      });
      defineArrowShape('diamond', {
        points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],
        gap: function gap(edge) {
          return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
        }
      });
      defineArrowShape('chevron', {
        points: [0, 0, -0.15, -0.15, -0.1, -0.2, 0, -0.1, 0.1, -0.2, 0.15, -0.15],
        gap: function gap(edge) {
          return 0.95 * edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
        }
      });
    };

    var BRp$1 = {}; // Project mouse

    BRp$1.projectIntoViewport = function (clientX, clientY) {
      var cy = this.cy;
      var offsets = this.findContainerClientCoords();
      var offsetLeft = offsets[0];
      var offsetTop = offsets[1];
      var scale = offsets[4];
      var pan = cy.pan();
      var zoom = cy.zoom();
      var x = ((clientX - offsetLeft) / scale - pan.x) / zoom;
      var y = ((clientY - offsetTop) / scale - pan.y) / zoom;
      return [x, y];
    };

    BRp$1.findContainerClientCoords = function () {
      if (this.containerBB) {
        return this.containerBB;
      }

      var container = this.container;
      var rect = container.getBoundingClientRect();
      var style = window$1.getComputedStyle(container);

      var styleValue = function styleValue(name) {
        return parseFloat(style.getPropertyValue(name));
      };

      var padding = {
        left: styleValue('padding-left'),
        right: styleValue('padding-right'),
        top: styleValue('padding-top'),
        bottom: styleValue('padding-bottom')
      };
      var border = {
        left: styleValue('border-left-width'),
        right: styleValue('border-right-width'),
        top: styleValue('border-top-width'),
        bottom: styleValue('border-bottom-width')
      };
      var clientWidth = container.clientWidth;
      var clientHeight = container.clientHeight;
      var paddingHor = padding.left + padding.right;
      var paddingVer = padding.top + padding.bottom;
      var borderHor = border.left + border.right;
      var scale = rect.width / (clientWidth + borderHor);
      var unscaledW = clientWidth - paddingHor;
      var unscaledH = clientHeight - paddingVer;
      var left = rect.left + padding.left + border.left;
      var top = rect.top + padding.top + border.top;
      return this.containerBB = [left, top, unscaledW, unscaledH, scale];
    };

    BRp$1.invalidateContainerClientCoordsCache = function () {
      this.containerBB = null;
    };

    BRp$1.findNearestElement = function (x, y, interactiveElementsOnly, isTouch) {
      return this.findNearestElements(x, y, interactiveElementsOnly, isTouch)[0];
    };

    BRp$1.findNearestElements = function (x, y, interactiveElementsOnly, isTouch) {
      var self = this;
      var r = this;
      var eles = r.getCachedZSortedEles();
      var near = []; // 1 node max, 1 edge max

      var zoom = r.cy.zoom();
      var hasCompounds = r.cy.hasCompoundNodes();
      var edgeThreshold = (isTouch ? 24 : 8) / zoom;
      var nodeThreshold = (isTouch ? 8 : 2) / zoom;
      var labelThreshold = (isTouch ? 8 : 2) / zoom;
      var minSqDist = Infinity;
      var nearEdge;
      var nearNode;

      if (interactiveElementsOnly) {
        eles = eles.interactive;
      }

      function addEle(ele, sqDist) {
        if (ele.isNode()) {
          if (nearNode) {
            return; // can't replace node
          } else {
            nearNode = ele;
            near.push(ele);
          }
        }

        if (ele.isEdge() && (sqDist == null || sqDist < minSqDist)) {
          if (nearEdge) {
            // then replace existing edge
            // can replace only if same z-index
            if (nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value && nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value) {
              for (var i = 0; i < near.length; i++) {
                if (near[i].isEdge()) {
                  near[i] = ele;
                  nearEdge = ele;
                  minSqDist = sqDist != null ? sqDist : minSqDist;
                  break;
                }
              }
            }
          } else {
            near.push(ele);
            nearEdge = ele;
            minSqDist = sqDist != null ? sqDist : minSqDist;
          }
        }
      }

      function checkNode(node) {
        var width = node.outerWidth() + 2 * nodeThreshold;
        var height = node.outerHeight() + 2 * nodeThreshold;
        var hw = width / 2;
        var hh = height / 2;
        var pos = node.position();

        if (pos.x - hw <= x && x <= pos.x + hw // bb check x
        && pos.y - hh <= y && y <= pos.y + hh // bb check y
        ) {
            var shape = r.nodeShapes[self.getNodeShape(node)];

            if (shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)) {
              addEle(node, 0);
              return true;
            }
          }
      }

      function checkEdge(edge) {
        var _p = edge._private;
        var rs = _p.rscratch;
        var styleWidth = edge.pstyle('width').pfValue;
        var scale = edge.pstyle('arrow-scale').value;
        var width = styleWidth / 2 + edgeThreshold; // more like a distance radius from centre

        var widthSq = width * width;
        var width2 = width * 2;
        var src = _p.source;
        var tgt = _p.target;
        var sqDist;

        if (rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack') {
          var pts = rs.allpts;

          for (var i = 0; i + 3 < pts.length; i += 2) {
            if (inLineVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], width2) && widthSq > (sqDist = sqdistToFiniteLine(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3]))) {
              addEle(edge, sqDist);
              return true;
            }
          }
        } else if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
          var pts = rs.allpts;

          for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
            if (inBezierVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5], width2) && widthSq > (sqDist = sqdistToQuadraticBezier(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5]))) {
              addEle(edge, sqDist);
              return true;
            }
          }
        } // if we're close to the edge but didn't hit it, maybe we hit its arrows


        var src = src || _p.source;
        var tgt = tgt || _p.target;
        var arSize = self.getArrowWidth(styleWidth, scale);
        var arrows = [{
          name: 'source',
          x: rs.arrowStartX,
          y: rs.arrowStartY,
          angle: rs.srcArrowAngle
        }, {
          name: 'target',
          x: rs.arrowEndX,
          y: rs.arrowEndY,
          angle: rs.tgtArrowAngle
        }, {
          name: 'mid-source',
          x: rs.midX,
          y: rs.midY,
          angle: rs.midsrcArrowAngle
        }, {
          name: 'mid-target',
          x: rs.midX,
          y: rs.midY,
          angle: rs.midtgtArrowAngle
        }];

        for (var i = 0; i < arrows.length; i++) {
          var ar = arrows[i];
          var shape = r.arrowShapes[edge.pstyle(ar.name + '-arrow-shape').value];
          var edgeWidth = edge.pstyle('width').pfValue;

          if (shape.roughCollide(x, y, arSize, ar.angle, {
            x: ar.x,
            y: ar.y
          }, edgeWidth, edgeThreshold) && shape.collide(x, y, arSize, ar.angle, {
            x: ar.x,
            y: ar.y
          }, edgeWidth, edgeThreshold)) {
            addEle(edge);
            return true;
          }
        } // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)


        if (hasCompounds && near.length > 0) {
          checkNode(src);
          checkNode(tgt);
        }
      }

      function preprop(obj, name, pre) {
        return getPrefixedProperty(obj, name, pre);
      }

      function checkLabel(ele, prefix) {
        var _p = ele._private;
        var th = labelThreshold;
        var prefixDash;

        if (prefix) {
          prefixDash = prefix + '-';
        } else {
          prefixDash = '';
        }

        ele.boundingBox();
        var bb = _p.labelBounds[prefix || 'main'];
        var text = ele.pstyle(prefixDash + 'label').value;
        var eventsEnabled = ele.pstyle('text-events').strValue === 'yes';

        if (!eventsEnabled || !text) {
          return;
        }

        var lx = preprop(_p.rscratch, 'labelX', prefix);
        var ly = preprop(_p.rscratch, 'labelY', prefix);
        var theta = preprop(_p.rscratch, 'labelAngle', prefix);
        var ox = ele.pstyle(prefixDash + 'text-margin-x').pfValue;
        var oy = ele.pstyle(prefixDash + 'text-margin-y').pfValue;
        var lx1 = bb.x1 - th - ox; // (-ox, -oy) as bb already includes margin

        var lx2 = bb.x2 + th - ox; // and rotation is about (lx, ly)

        var ly1 = bb.y1 - th - oy;
        var ly2 = bb.y2 + th - oy;

        if (theta) {
          var cos = Math.cos(theta);
          var sin = Math.sin(theta);

          var rotate = function rotate(x, y) {
            x = x - lx;
            y = y - ly;
            return {
              x: x * cos - y * sin + lx,
              y: x * sin + y * cos + ly
            };
          };

          var px1y1 = rotate(lx1, ly1);
          var px1y2 = rotate(lx1, ly2);
          var px2y1 = rotate(lx2, ly1);
          var px2y2 = rotate(lx2, ly2);
          var points = [// with the margin added after the rotation is applied
          px1y1.x + ox, px1y1.y + oy, px2y1.x + ox, px2y1.y + oy, px2y2.x + ox, px2y2.y + oy, px1y2.x + ox, px1y2.y + oy];

          if (pointInsidePolygonPoints(x, y, points)) {
            addEle(ele);
            return true;
          }
        } else {
          // do a cheaper bb check
          if (inBoundingBox(bb, x, y)) {
            addEle(ele);
            return true;
          }
        }
      }

      for (var i = eles.length - 1; i >= 0; i--) {
        // reverse order for precedence
        var ele = eles[i];

        if (ele.isNode()) {
          checkNode(ele) || checkLabel(ele);
        } else {
          // then edge
          checkEdge(ele) || checkLabel(ele) || checkLabel(ele, 'source') || checkLabel(ele, 'target');
        }
      }

      return near;
    }; // 'Give me everything from this box'


    BRp$1.getAllInBox = function (x1, y1, x2, y2) {
      var eles = this.getCachedZSortedEles().interactive;
      var box = [];
      var x1c = Math.min(x1, x2);
      var x2c = Math.max(x1, x2);
      var y1c = Math.min(y1, y2);
      var y2c = Math.max(y1, y2);
      x1 = x1c;
      x2 = x2c;
      y1 = y1c;
      y2 = y2c;
      var boxBb = makeBoundingBox({
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2
      });

      for (var e = 0; e < eles.length; e++) {
        var ele = eles[e];

        if (ele.isNode()) {
          var node = ele;
          var nodeBb = node.boundingBox({
            includeNodes: true,
            includeEdges: false,
            includeLabels: false
          });

          if (boundingBoxesIntersect(boxBb, nodeBb) && !boundingBoxInBoundingBox(nodeBb, boxBb)) {
            box.push(node);
          }
        } else {
          var edge = ele;
          var _p = edge._private;
          var rs = _p.rscratch;

          if (rs.startX != null && rs.startY != null && !inBoundingBox(boxBb, rs.startX, rs.startY)) {
            continue;
          }

          if (rs.endX != null && rs.endY != null && !inBoundingBox(boxBb, rs.endX, rs.endY)) {
            continue;
          }

          if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack') {
            var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
            var allInside = true;

            for (var i = 0; i < pts.length; i++) {
              if (!pointInBoundingBox(boxBb, pts[i])) {
                allInside = false;
                break;
              }
            }

            if (allInside) {
              box.push(edge);
            }
          } else if (rs.edgeType === 'haystack' || rs.edgeType === 'straight') {
            box.push(edge);
          }
        }
      }

      return box;
    };

    var BRp$2 = {};

    BRp$2.calculateArrowAngles = function (edge) {
      var rs = edge._private.rscratch;
      var isHaystack = rs.edgeType === 'haystack';
      var isBezier = rs.edgeType === 'bezier';
      var isMultibezier = rs.edgeType === 'multibezier';
      var isSegments = rs.edgeType === 'segments';
      var isCompound = rs.edgeType === 'compound';
      var isSelf = rs.edgeType === 'self'; // Displacement gives direction for arrowhead orientation

      var dispX, dispY;
      var startX, startY, endX, endY, midX, midY;

      if (isHaystack) {
        startX = rs.haystackPts[0];
        startY = rs.haystackPts[1];
        endX = rs.haystackPts[2];
        endY = rs.haystackPts[3];
      } else {
        startX = rs.arrowStartX;
        startY = rs.arrowStartY;
        endX = rs.arrowEndX;
        endY = rs.arrowEndY;
      }

      midX = rs.midX;
      midY = rs.midY; // source
      //

      if (isSegments) {
        dispX = startX - rs.segpts[0];
        dispY = startY - rs.segpts[1];
      } else if (isMultibezier || isCompound || isSelf || isBezier) {
        var pts = rs.allpts;
        var bX = qbezierAt(pts[0], pts[2], pts[4], 0.1);
        var bY = qbezierAt(pts[1], pts[3], pts[5], 0.1);
        dispX = startX - bX;
        dispY = startY - bY;
      } else {
        dispX = startX - midX;
        dispY = startY - midY;
      }

      rs.srcArrowAngle = getAngleFromDisp(dispX, dispY); // mid target
      //

      var midX = rs.midX;
      var midY = rs.midY;

      if (isHaystack) {
        midX = (startX + endX) / 2;
        midY = (startY + endY) / 2;
      }

      dispX = endX - startX;
      dispY = endY - startY;

      if (isSegments) {
        var pts = rs.allpts;

        if (pts.length / 2 % 2 === 0) {
          var i2 = pts.length / 2;
          var i1 = i2 - 2;
          dispX = pts[i2] - pts[i1];
          dispY = pts[i2 + 1] - pts[i1 + 1];
        } else {
          var i2 = pts.length / 2 - 1;
          var i1 = i2 - 2;
          var i3 = i2 + 2;
          dispX = pts[i2] - pts[i1];
          dispY = pts[i2 + 1] - pts[i1 + 1];
        }
      } else if (isMultibezier || isCompound || isSelf) {
        var pts = rs.allpts;
        var cpts = rs.ctrlpts;
        var bp0x, bp0y;
        var bp1x, bp1y;

        if (cpts.length / 2 % 2 === 0) {
          var p0 = pts.length / 2 - 1; // startpt

          var ic = p0 + 2;
          var p1 = ic + 2;
          bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0);
          bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0);
          bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0001);
          bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0001);
        } else {
          var ic = pts.length / 2 - 1; // ctrpt

          var p0 = ic - 2; // startpt

          var p1 = ic + 2; // endpt

          bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.4999);
          bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.4999);
          bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.5);
          bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.5);
        }

        dispX = bp1x - bp0x;
        dispY = bp1y - bp0y;
      }

      rs.midtgtArrowAngle = getAngleFromDisp(dispX, dispY);
      rs.midDispX = dispX;
      rs.midDispY = dispY; // mid source
      //

      dispX *= -1;
      dispY *= -1;

      if (isSegments) {
        var pts = rs.allpts;

        if (pts.length / 2 % 2 === 0) ; else {
          var i2 = pts.length / 2 - 1;
          var i3 = i2 + 2;
          dispX = -(pts[i3] - pts[i2]);
          dispY = -(pts[i3 + 1] - pts[i2 + 1]);
        }
      }

      rs.midsrcArrowAngle = getAngleFromDisp(dispX, dispY); // target
      //

      if (isSegments) {
        dispX = endX - rs.segpts[rs.segpts.length - 2];
        dispY = endY - rs.segpts[rs.segpts.length - 1];
      } else if (isMultibezier || isCompound || isSelf || isBezier) {
        var pts = rs.allpts;
        var l = pts.length;
        var bX = qbezierAt(pts[l - 6], pts[l - 4], pts[l - 2], 0.9);
        var bY = qbezierAt(pts[l - 5], pts[l - 3], pts[l - 1], 0.9);
        dispX = endX - bX;
        dispY = endY - bY;
      } else {
        dispX = endX - midX;
        dispY = endY - midY;
      }

      rs.tgtArrowAngle = getAngleFromDisp(dispX, dispY);
    };

    BRp$2.getArrowWidth = BRp$2.getArrowHeight = function (edgeWidth, scale) {
      var cache = this.arrowWidthCache = this.arrowWidthCache || {};
      var cachedVal = cache[edgeWidth + ', ' + scale];

      if (cachedVal) {
        return cachedVal;
      }

      cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;
      cache[edgeWidth + ', ' + scale] = cachedVal;
      return cachedVal;
    };

    var BRp$3 = {};

    BRp$3.findHaystackPoints = function (edges) {
      for (var i = 0; i < edges.length; i++) {
        var edge = edges[i];
        var _p = edge._private;
        var rs = _p.rscratch;

        if (!rs.haystack) {
          var angle = Math.random() * 2 * Math.PI;
          rs.source = {
            x: Math.cos(angle),
            y: Math.sin(angle)
          };
          angle = Math.random() * 2 * Math.PI;
          rs.target = {
            x: Math.cos(angle),
            y: Math.sin(angle)
          };
        }

        var src = _p.source;
        var tgt = _p.target;
        var srcPos = src.position();
        var tgtPos = tgt.position();
        var srcW = src.width();
        var tgtW = tgt.width();
        var srcH = src.height();
        var tgtH = tgt.height();
        var radius = edge.pstyle('haystack-radius').value;
        var halfRadius = radius / 2; // b/c have to half width/height

        rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];
        rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
        rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2; // always override as haystack in case set to different type previously

        rs.edgeType = 'haystack';
        rs.haystack = true;
        this.storeEdgeProjections(edge);
        this.calculateArrowAngles(edge);
        this.recalculateEdgeLabelProjections(edge);
        this.calculateLabelAngles(edge);
      }
    };

    BRp$3.findSegmentsPoints = function (edge, pairInfo) {
      // Segments (multiple straight lines)
      var rs = edge._private.rscratch;
      var posPts = pairInfo.posPts,
          intersectionPts = pairInfo.intersectionPts,
          vectorNormInverse = pairInfo.vectorNormInverse;
      var edgeDistances = edge.pstyle('edge-distances').value;
      var segmentWs = edge.pstyle('segment-weights');
      var segmentDs = edge.pstyle('segment-distances');
      var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);
      rs.edgeType = 'segments';
      rs.segpts = [];

      for (var s = 0; s < segmentsN; s++) {
        var w = segmentWs.pfValue[s];
        var d = segmentDs.pfValue[s];
        var w1 = 1 - w;
        var w2 = w;
        var midptPts = edgeDistances === 'node-position' ? posPts : intersectionPts;
        var adjustedMidpt = {
          x: midptPts.x1 * w1 + midptPts.x2 * w2,
          y: midptPts.y1 * w1 + midptPts.y2 * w2
        };
        rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d, adjustedMidpt.y + vectorNormInverse.y * d);
      }
    };

    BRp$3.findLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {
      // Self-edge
      var rs = edge._private.rscratch;
      var dirCounts = pairInfo.dirCounts,
          srcPos = pairInfo.srcPos;
      var ctrlptDists = edge.pstyle('control-point-distances');
      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
      var loopDir = edge.pstyle('loop-direction').pfValue;
      var loopSwp = edge.pstyle('loop-sweep').pfValue;
      var stepSize = edge.pstyle('control-point-step-size').pfValue;
      rs.edgeType = 'self';
      var j = i;
      var loopDist = stepSize;

      if (edgeIsUnbundled) {
        j = 0;
        loopDist = ctrlptDist;
      }

      var loopAngle = loopDir - Math.PI / 2;
      var outAngle = loopAngle - loopSwp / 2;
      var inAngle = loopAngle + loopSwp / 2; // increase by step size for overlapping loops, keyed on direction and sweep values

      var dc = String(loopDir + '_' + loopSwp);
      j = dirCounts[dc] === undefined ? dirCounts[dc] = 0 : ++dirCounts[dc];
      rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)];
    };

    BRp$3.findCompoundLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {
      // Compound edge
      var rs = edge._private.rscratch;
      rs.edgeType = 'compound';
      var srcPos = pairInfo.srcPos,
          tgtPos = pairInfo.tgtPos,
          srcW = pairInfo.srcW,
          srcH = pairInfo.srcH,
          tgtW = pairInfo.tgtW,
          tgtH = pairInfo.tgtH;
      var stepSize = edge.pstyle('control-point-step-size').pfValue;
      var ctrlptDists = edge.pstyle('control-point-distances');
      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
      var j = i;
      var loopDist = stepSize;

      if (edgeIsUnbundled) {
        j = 0;
        loopDist = ctrlptDist;
      }

      var loopW = 50;
      var loopaPos = {
        x: srcPos.x - srcW / 2,
        y: srcPos.y - srcH / 2
      };
      var loopbPos = {
        x: tgtPos.x - tgtW / 2,
        y: tgtPos.y - tgtH / 2
      };
      var loopPos = {
        x: Math.min(loopaPos.x, loopbPos.x),
        y: Math.min(loopaPos.y, loopbPos.y)
      }; // avoids cases with impossible beziers

      var minCompoundStretch = 0.5;
      var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));
      var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));
      rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB, loopPos.y];
    };

    BRp$3.findStraightEdgePoints = function (edge) {
      // Straight edge within bundle
      edge._private.rscratch.edgeType = 'straight';
    };

    BRp$3.findBezierPoints = function (edge, pairInfo, i, edgeIsUnbundled, edgeIsSwapped) {
      var rs = edge._private.rscratch;
      var vectorNormInverse = pairInfo.vectorNormInverse,
          posPts = pairInfo.posPts,
          intersectionPts = pairInfo.intersectionPts;
      var edgeDistances = edge.pstyle('edge-distances').value;
      var stepSize = edge.pstyle('control-point-step-size').pfValue;
      var ctrlptDists = edge.pstyle('control-point-distances');
      var ctrlptWs = edge.pstyle('control-point-weights');
      var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;
      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
      var ctrlptWeight = ctrlptWs.value[0]; // (Multi)bezier

      var multi = edgeIsUnbundled;
      rs.edgeType = multi ? 'multibezier' : 'bezier';
      rs.ctrlpts = [];

      for (var b = 0; b < bezierN; b++) {
        var normctrlptDist = (0.5 - pairInfo.eles.length / 2 + i) * stepSize * (edgeIsSwapped ? -1 : 1);
        var manctrlptDist = void 0;
        var sign = signum(normctrlptDist);

        if (multi) {
          ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size

          ctrlptWeight = ctrlptWs.value[b];
        }

        if (edgeIsUnbundled) {
          // multi or single unbundled
          manctrlptDist = ctrlptDist;
        } else {
          manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
        }

        var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;
        var w1 = 1 - ctrlptWeight;
        var w2 = ctrlptWeight;
        var midptPts = edgeDistances === 'node-position' ? posPts : intersectionPts;
        var adjustedMidpt = {
          x: midptPts.x1 * w1 + midptPts.x2 * w2,
          y: midptPts.y1 * w1 + midptPts.y2 * w2
        };
        rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);
      }
    };

    BRp$3.findTaxiPoints = function (edge, pairInfo) {
      // Taxicab geometry with two turns maximum
      var rs = edge._private.rscratch;
      rs.edgeType = 'segments';
      var VERTICAL = 'vertical';
      var HORIZONTAL = 'horizontal';
      var LEFTWARD = 'leftward';
      var RIGHTWARD = 'rightward';
      var DOWNWARD = 'downward';
      var UPWARD = 'upward';
      var AUTO = 'auto';
      var posPts = pairInfo.posPts,
          srcW = pairInfo.srcW,
          srcH = pairInfo.srcH,
          tgtW = pairInfo.tgtW,
          tgtH = pairInfo.tgtH;
      var edgeDistances = edge.pstyle('edge-distances').value;
      var dIncludesNodeBody = edgeDistances !== 'node-position';
      var taxiDir = edge.pstyle('taxi-direction').value;
      var rawTaxiDir = taxiDir; // unprocessed value

      var taxiTurn = edge.pstyle('taxi-turn');
      var turnIsPercent = taxiTurn.units === '%';
      var taxiTurnPfVal = taxiTurn.pfValue;
      var turnIsNegative = taxiTurnPfVal < 0; // i.e. from target side

      var minD = edge.pstyle('taxi-turn-min-distance').pfValue;
      var dw = dIncludesNodeBody ? (srcW + tgtW) / 2 : 0;
      var dh = dIncludesNodeBody ? (srcH + tgtH) / 2 : 0;
      var pdx = posPts.x2 - posPts.x1;
      var pdy = posPts.y2 - posPts.y1; // take away the effective w/h from the magnitude of the delta value

      var subDWH = function subDWH(dxy, dwh) {
        if (dxy > 0) {
          return Math.max(dxy - dwh, 0);
        } else {
          return Math.min(dxy + dwh, 0);
        }
      };

      var dx = subDWH(pdx, dw);
      var dy = subDWH(pdy, dh);
      var isExplicitDir = false;

      if (rawTaxiDir === AUTO) {
        taxiDir = Math.abs(dx) > Math.abs(dy) ? HORIZONTAL : VERTICAL;
      } else if (rawTaxiDir === UPWARD || rawTaxiDir === DOWNWARD) {
        taxiDir = VERTICAL;
        isExplicitDir = true;
      } else if (rawTaxiDir === LEFTWARD || rawTaxiDir === RIGHTWARD) {
        taxiDir = HORIZONTAL;
        isExplicitDir = true;
      }

      var isVert = taxiDir === VERTICAL;
      var l = isVert ? dy : dx;
      var pl = isVert ? pdy : pdx;
      var sgnL = signum(pl);
      var forcedDir = false;

      if (!(isExplicitDir && (turnIsPercent || turnIsNegative)) // forcing in this case would cause weird growing in the opposite direction
      && (rawTaxiDir === DOWNWARD && pl < 0 || rawTaxiDir === UPWARD && pl > 0 || rawTaxiDir === LEFTWARD && pl > 0 || rawTaxiDir === RIGHTWARD && pl < 0)) {
        sgnL *= -1;
        l = sgnL * Math.abs(l);
        forcedDir = true;
      }

      var d;

      if (turnIsPercent) {
        var p = taxiTurnPfVal < 0 ? 1 + taxiTurnPfVal : taxiTurnPfVal;
        d = p * l;
      } else {
        var k = taxiTurnPfVal < 0 ? l : 0;
        d = k + taxiTurnPfVal * sgnL;
      }

      var getIsTooClose = function getIsTooClose(d) {
        return Math.abs(d) < minD || Math.abs(d) >= Math.abs(l);
      };

      var isTooCloseSrc = getIsTooClose(d);
      var isTooCloseTgt = getIsTooClose(Math.abs(l) - Math.abs(d));
      var isTooClose = isTooCloseSrc || isTooCloseTgt;

      if (isTooClose && !forcedDir) {
        // non-ideal routing
        if (isVert) {
          // vertical fallbacks
          var lShapeInsideSrc = Math.abs(pl) <= srcH / 2;
          var lShapeInsideTgt = Math.abs(pdx) <= tgtW / 2;

          if (lShapeInsideSrc) {
            // horizontal Z-shape (direction not respected)
            var x = (posPts.x1 + posPts.x2) / 2;
            var y1 = posPts.y1,
                y2 = posPts.y2;
            rs.segpts = [x, y1, x, y2];
          } else if (lShapeInsideTgt) {
            // vertical Z-shape (distance not respected)
            var y = (posPts.y1 + posPts.y2) / 2;
            var x1 = posPts.x1,
                x2 = posPts.x2;
            rs.segpts = [x1, y, x2, y];
          } else {
            // L-shape fallback (turn distance not respected, but works well with tree siblings)
            rs.segpts = [posPts.x1, posPts.y2];
          }
        } else {
          // horizontal fallbacks
          var _lShapeInsideSrc = Math.abs(pl) <= srcW / 2;

          var _lShapeInsideTgt = Math.abs(pdy) <= tgtH / 2;

          if (_lShapeInsideSrc) {
            // vertical Z-shape (direction not respected)
            var _y = (posPts.y1 + posPts.y2) / 2;

            var _x = posPts.x1,
                _x2 = posPts.x2;
            rs.segpts = [_x, _y, _x2, _y];
          } else if (_lShapeInsideTgt) {
            // horizontal Z-shape (turn distance not respected)
            var _x3 = (posPts.x1 + posPts.x2) / 2;

            var _y2 = posPts.y1,
                _y3 = posPts.y2;
            rs.segpts = [_x3, _y2, _x3, _y3];
          } else {
            // L-shape (turn distance not respected, but works well for tree siblings)
            rs.segpts = [posPts.x2, posPts.y1];
          }
        }
      } else {
        // ideal routing
        if (isVert) {
          var _y4 = posPts.y1 + d + (dIncludesNodeBody ? srcH / 2 * sgnL : 0);

          var _x4 = posPts.x1,
              _x5 = posPts.x2;
          rs.segpts = [_x4, _y4, _x5, _y4];
        } else {
          // horizontal
          var _x6 = posPts.x1 + d + (dIncludesNodeBody ? srcW / 2 * sgnL : 0);

          var _y5 = posPts.y1,
              _y6 = posPts.y2;
          rs.segpts = [_x6, _y5, _x6, _y6];
        }
      }
    };

    BRp$3.tryToCorrectInvalidPoints = function (edge, pairInfo) {
      var rs = edge._private.rscratch; // can only correct beziers for now...

      if (rs.edgeType === 'bezier') {
        var srcPos = pairInfo.srcPos,
            tgtPos = pairInfo.tgtPos,
            srcW = pairInfo.srcW,
            srcH = pairInfo.srcH,
            tgtW = pairInfo.tgtW,
            tgtH = pairInfo.tgtH,
            srcShape = pairInfo.srcShape,
            tgtShape = pairInfo.tgtShape;
        var badStart = !number(rs.startX) || !number(rs.startY);
        var badAStart = !number(rs.arrowStartX) || !number(rs.arrowStartY);
        var badEnd = !number(rs.endX) || !number(rs.endY);
        var badAEnd = !number(rs.arrowEndX) || !number(rs.arrowEndY);
        var minCpADistFactor = 3;
        var arrowW = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
        var minCpADist = minCpADistFactor * arrowW;
        var startACpDist = dist({
          x: rs.ctrlpts[0],
          y: rs.ctrlpts[1]
        }, {
          x: rs.startX,
          y: rs.startY
        });
        var closeStartACp = startACpDist < minCpADist;
        var endACpDist = dist({
          x: rs.ctrlpts[0],
          y: rs.ctrlpts[1]
        }, {
          x: rs.endX,
          y: rs.endY
        });
        var closeEndACp = endACpDist < minCpADist;
        var overlapping = false;

        if (badStart || badAStart || closeStartACp) {
          overlapping = true; // project control point along line from src centre to outside the src shape
          // (otherwise intersection will yield nothing)

          var cpD = {
            // delta
            x: rs.ctrlpts[0] - srcPos.x,
            y: rs.ctrlpts[1] - srcPos.y
          };
          var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line

          var cpM = {
            // normalised delta
            x: cpD.x / cpL,
            y: cpD.y / cpL
          };
          var radius = Math.max(srcW, srcH);
          var cpProj = {
            // *2 radius guarantees outside shape
            x: rs.ctrlpts[0] + cpM.x * 2 * radius,
            y: rs.ctrlpts[1] + cpM.y * 2 * radius
          };
          var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0);

          if (closeStartACp) {
            rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
            rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
          } else {
            rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
            rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
          }
        }

        if (badEnd || badAEnd || closeEndACp) {
          overlapping = true; // project control point along line from tgt centre to outside the tgt shape
          // (otherwise intersection will yield nothing)

          var _cpD = {
            // delta
            x: rs.ctrlpts[0] - tgtPos.x,
            y: rs.ctrlpts[1] - tgtPos.y
          };

          var _cpL = Math.sqrt(_cpD.x * _cpD.x + _cpD.y * _cpD.y); // length of line


          var _cpM = {
            // normalised delta
            x: _cpD.x / _cpL,
            y: _cpD.y / _cpL
          };

          var _radius = Math.max(srcW, srcH);

          var _cpProj = {
            // *2 radius guarantees outside shape
            x: rs.ctrlpts[0] + _cpM.x * 2 * _radius,
            y: rs.ctrlpts[1] + _cpM.y * 2 * _radius
          };
          var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, _cpProj.x, _cpProj.y, 0);

          if (closeEndACp) {
            rs.ctrlpts[0] = rs.ctrlpts[0] + _cpM.x * (minCpADist - endACpDist);
            rs.ctrlpts[1] = rs.ctrlpts[1] + _cpM.y * (minCpADist - endACpDist);
          } else {
            rs.ctrlpts[0] = tgtCtrlPtIntn[0] + _cpM.x * minCpADist;
            rs.ctrlpts[1] = tgtCtrlPtIntn[1] + _cpM.y * minCpADist;
          }
        }

        if (overlapping) {
          // recalc endpts
          this.findEndpoints(edge);
        }
      }
    };

    BRp$3.storeAllpts = function (edge) {
      var rs = edge._private.rscratch;

      if (rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
        rs.allpts = [];
        rs.allpts.push(rs.startX, rs.startY);

        for (var b = 0; b + 1 < rs.ctrlpts.length; b += 2) {
          // ctrl pt itself
          rs.allpts.push(rs.ctrlpts[b], rs.ctrlpts[b + 1]); // the midpt between ctrlpts as intermediate destination pts

          if (b + 3 < rs.ctrlpts.length) {
            rs.allpts.push((rs.ctrlpts[b] + rs.ctrlpts[b + 2]) / 2, (rs.ctrlpts[b + 1] + rs.ctrlpts[b + 3]) / 2);
          }
        }

        rs.allpts.push(rs.endX, rs.endY);
        var m, mt;

        if (rs.ctrlpts.length / 2 % 2 === 0) {
          m = rs.allpts.length / 2 - 1;
          rs.midX = rs.allpts[m];
          rs.midY = rs.allpts[m + 1];
        } else {
          m = rs.allpts.length / 2 - 3;
          mt = 0.5;
          rs.midX = qbezierAt(rs.allpts[m], rs.allpts[m + 2], rs.allpts[m + 4], mt);
          rs.midY = qbezierAt(rs.allpts[m + 1], rs.allpts[m + 3], rs.allpts[m + 5], mt);
        }
      } else if (rs.edgeType === 'straight') {
        // need to calc these after endpts
        rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY]; // default midpt for labels etc

        rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;
        rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;
      } else if (rs.edgeType === 'segments') {
        rs.allpts = [];
        rs.allpts.push(rs.startX, rs.startY);
        rs.allpts.push.apply(rs.allpts, rs.segpts);
        rs.allpts.push(rs.endX, rs.endY);

        if (rs.segpts.length % 4 === 0) {
          var i2 = rs.segpts.length / 2;
          var i1 = i2 - 2;
          rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;
          rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;
        } else {
          var _i = rs.segpts.length / 2 - 1;

          rs.midX = rs.segpts[_i];
          rs.midY = rs.segpts[_i + 1];
        }
      }
    };

    BRp$3.checkForInvalidEdgeWarning = function (edge) {
      var rs = edge[0]._private.rscratch;

      if (rs.nodesOverlap || number(rs.startX) && number(rs.startY) && number(rs.endX) && number(rs.endY)) {
        rs.loggedErr = false;
      } else {
        if (!rs.loggedErr) {
          rs.loggedErr = true;
          warn('Edge `' + edge.id() + '` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.');
        }
      }
    };

    BRp$3.findEdgeControlPoints = function (edges) {
      var _this = this;

      if (!edges || edges.length === 0) {
        return;
      }

      var r = this;
      var cy = r.cy;
      var hasCompounds = cy.hasCompoundNodes();
      var hashTable = {
        map: new Map$1(),
        get: function get(pairId) {
          var map2 = this.map.get(pairId[0]);

          if (map2 != null) {
            return map2.get(pairId[1]);
          } else {
            return null;
          }
        },
        set: function set(pairId, val) {
          var map2 = this.map.get(pairId[0]);

          if (map2 == null) {
            map2 = new Map$1();
            this.map.set(pairId[0], map2);
          }

          map2.set(pairId[1], val);
        }
      };
      var pairIds = [];
      var haystackEdges = []; // create a table of edge (src, tgt) => list of edges between them

      for (var i = 0; i < edges.length; i++) {
        var edge = edges[i];
        var _p = edge._private;
        var curveStyle = edge.pstyle('curve-style').value; // ignore edges who are not to be displayed
        // they shouldn't take up space

        if (edge.removed() || !edge.takesUpSpace()) {
          continue;
        }

        if (curveStyle === 'haystack') {
          haystackEdges.push(edge);
          continue;
        }

        var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments' || curveStyle === 'straight' || curveStyle === 'straight-triangle' || curveStyle === 'taxi';
        var edgeIsBezier = curveStyle === 'unbundled-bezier' || curveStyle === 'bezier';
        var src = _p.source;
        var tgt = _p.target;
        var srcIndex = src.poolIndex();
        var tgtIndex = tgt.poolIndex();
        var pairId = [srcIndex, tgtIndex].sort();
        var tableEntry = hashTable.get(pairId);

        if (tableEntry == null) {
          tableEntry = {
            eles: []
          };
          hashTable.set(pairId, tableEntry);
          pairIds.push(pairId);
        }

        tableEntry.eles.push(edge);

        if (edgeIsUnbundled) {
          tableEntry.hasUnbundled = true;
        }

        if (edgeIsBezier) {
          tableEntry.hasBezier = true;
        }
      } // for each pair (src, tgt), create the ctrl pts
      // Nested for loop is OK; total number of iterations for both loops = edgeCount


      var _loop = function _loop(p) {
        var pairId = pairIds[p];
        var pairInfo = hashTable.get(pairId);
        var swappedpairInfo = void 0;

        if (!pairInfo.hasUnbundled) {
          var pllEdges = pairInfo.eles[0].parallelEdges().filter(function (e) {
            return e.isBundledBezier();
          });
          clearArray(pairInfo.eles);
          pllEdges.forEach(function (edge) {
            return pairInfo.eles.push(edge);
          }); // for each pair id, the edges should be sorted by index

          pairInfo.eles.sort(function (edge1, edge2) {
            return edge1.poolIndex() - edge2.poolIndex();
          });
        }

        var firstEdge = pairInfo.eles[0];
        var src = firstEdge.source();
        var tgt = firstEdge.target(); // make sure src/tgt distinction is consistent w.r.t. pairId

        if (src.poolIndex() > tgt.poolIndex()) {
          var temp = src;
          src = tgt;
          tgt = temp;
        }

        var srcPos = pairInfo.srcPos = src.position();
        var tgtPos = pairInfo.tgtPos = tgt.position();
        var srcW = pairInfo.srcW = src.outerWidth();
        var srcH = pairInfo.srcH = src.outerHeight();
        var tgtW = pairInfo.tgtW = tgt.outerWidth();
        var tgtH = pairInfo.tgtH = tgt.outerHeight();

        var srcShape = pairInfo.srcShape = r.nodeShapes[_this.getNodeShape(src)];

        var tgtShape = pairInfo.tgtShape = r.nodeShapes[_this.getNodeShape(tgt)];

        pairInfo.dirCounts = {
          'north': 0,
          'west': 0,
          'south': 0,
          'east': 0,
          'northwest': 0,
          'southwest': 0,
          'northeast': 0,
          'southeast': 0
        };

        for (var _i2 = 0; _i2 < pairInfo.eles.length; _i2++) {
          var _edge = pairInfo.eles[_i2];
          var rs = _edge[0]._private.rscratch;

          var _curveStyle = _edge.pstyle('curve-style').value;

          var _edgeIsUnbundled = _curveStyle === 'unbundled-bezier' || _curveStyle === 'segments' || _curveStyle === 'taxi'; // whether the normalised pair order is the reverse of the edge's src-tgt order


          var edgeIsSwapped = !src.same(_edge.source());

          if (!pairInfo.calculatedIntersection && src !== tgt && (pairInfo.hasBezier || pairInfo.hasUnbundled)) {
            pairInfo.calculatedIntersection = true; // pt outside src shape to calc distance/displacement from src to tgt

            var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0);
            var srcIntn = pairInfo.srcIntn = srcOutside; // pt outside tgt shape to calc distance/displacement from src to tgt

            var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0);
            var tgtIntn = pairInfo.tgtIntn = tgtOutside;
            var intersectionPts = pairInfo.intersectionPts = {
              x1: srcOutside[0],
              x2: tgtOutside[0],
              y1: srcOutside[1],
              y2: tgtOutside[1]
            };
            var posPts = pairInfo.posPts = {
              x1: srcPos.x,
              x2: tgtPos.x,
              y1: srcPos.y,
              y2: tgtPos.y
            };
            var dy = tgtOutside[1] - srcOutside[1];
            var dx = tgtOutside[0] - srcOutside[0];
            var l = Math.sqrt(dx * dx + dy * dy);
            var vector = pairInfo.vector = {
              x: dx,
              y: dy
            };
            var vectorNorm = pairInfo.vectorNorm = {
              x: vector.x / l,
              y: vector.y / l
            };
            var vectorNormInverse = {
              x: -vectorNorm.y,
              y: vectorNorm.x
            }; // if node shapes overlap, then no ctrl pts to draw

            pairInfo.nodesOverlap = !number(l) || tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y) || srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y);
            pairInfo.vectorNormInverse = vectorNormInverse;
            swappedpairInfo = {
              nodesOverlap: pairInfo.nodesOverlap,
              dirCounts: pairInfo.dirCounts,
              calculatedIntersection: true,
              hasBezier: pairInfo.hasBezier,
              hasUnbundled: pairInfo.hasUnbundled,
              eles: pairInfo.eles,
              srcPos: tgtPos,
              tgtPos: srcPos,
              srcW: tgtW,
              srcH: tgtH,
              tgtW: srcW,
              tgtH: srcH,
              srcIntn: tgtIntn,
              tgtIntn: srcIntn,
              srcShape: tgtShape,
              tgtShape: srcShape,
              posPts: {
                x1: posPts.x2,
                y1: posPts.y2,
                x2: posPts.x1,
                y2: posPts.y1
              },
              intersectionPts: {
                x1: intersectionPts.x2,
                y1: intersectionPts.y2,
                x2: intersectionPts.x1,
                y2: intersectionPts.y1
              },
              vector: {
                x: -vector.x,
                y: -vector.y
              },
              vectorNorm: {
                x: -vectorNorm.x,
                y: -vectorNorm.y
              },
              vectorNormInverse: {
                x: -vectorNormInverse.x,
                y: -vectorNormInverse.y
              }
            };
          }

          var passedPairInfo = edgeIsSwapped ? swappedpairInfo : pairInfo;
          rs.nodesOverlap = passedPairInfo.nodesOverlap;
          rs.srcIntn = passedPairInfo.srcIntn;
          rs.tgtIntn = passedPairInfo.tgtIntn;

          if (hasCompounds && (src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild()) && (src.parents().anySame(tgt) || tgt.parents().anySame(src) || src.same(tgt) && src.isParent())) {
            _this.findCompoundLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
          } else if (src === tgt) {
            _this.findLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
          } else if (_curveStyle === 'segments') {
            _this.findSegmentsPoints(_edge, passedPairInfo);
          } else if (_curveStyle === 'taxi') {
            _this.findTaxiPoints(_edge, passedPairInfo);
          } else if (_curveStyle === 'straight' || !_edgeIsUnbundled && pairInfo.eles.length % 2 === 1 && _i2 === Math.floor(pairInfo.eles.length / 2)) {
            _this.findStraightEdgePoints(_edge);
          } else {
            _this.findBezierPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled, edgeIsSwapped);
          }

          _this.findEndpoints(_edge);

          _this.tryToCorrectInvalidPoints(_edge, passedPairInfo);

          _this.checkForInvalidEdgeWarning(_edge);

          _this.storeAllpts(_edge);

          _this.storeEdgeProjections(_edge);

          _this.calculateArrowAngles(_edge);

          _this.recalculateEdgeLabelProjections(_edge);

          _this.calculateLabelAngles(_edge);
        } // for pair edges

      };

      for (var p = 0; p < pairIds.length; p++) {
        _loop(p);
      } // for pair ids
      // haystacks avoid the expense of pairInfo stuff (intersections etc.)


      this.findHaystackPoints(haystackEdges);
    };

    function getPts(pts) {
      var retPts = [];

      if (pts == null) {
        return;
      }

      for (var i = 0; i < pts.length; i += 2) {
        var x = pts[i];
        var y = pts[i + 1];
        retPts.push({
          x: x,
          y: y
        });
      }

      return retPts;
    }

    BRp$3.getSegmentPoints = function (edge) {
      var rs = edge[0]._private.rscratch;
      var type = rs.edgeType;

      if (type === 'segments') {
        this.recalculateRenderedStyle(edge);
        return getPts(rs.segpts);
      }
    };

    BRp$3.getControlPoints = function (edge) {
      var rs = edge[0]._private.rscratch;
      var type = rs.edgeType;

      if (type === 'bezier' || type === 'multibezier' || type === 'self' || type === 'compound') {
        this.recalculateRenderedStyle(edge);
        return getPts(rs.ctrlpts);
      }
    };

    BRp$3.getEdgeMidpoint = function (edge) {
      var rs = edge[0]._private.rscratch;
      this.recalculateRenderedStyle(edge);
      return {
        x: rs.midX,
        y: rs.midY
      };
    };

    var BRp$4 = {};

    BRp$4.manualEndptToPx = function (node, prop) {
      var r = this;
      var npos = node.position();
      var w = node.outerWidth();
      var h = node.outerHeight();

      if (prop.value.length === 2) {
        var p = [prop.pfValue[0], prop.pfValue[1]];

        if (prop.units[0] === '%') {
          p[0] = p[0] * w;
        }

        if (prop.units[1] === '%') {
          p[1] = p[1] * h;
        }

        p[0] += npos.x;
        p[1] += npos.y;
        return p;
      } else {
        var angle = prop.pfValue[0];
        angle = -Math.PI / 2 + angle; // start at 12 o'clock

        var l = 2 * Math.max(w, h);
        var _p = [npos.x + Math.cos(angle) * l, npos.y + Math.sin(angle) * l];
        return r.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w, h, _p[0], _p[1], 0);
      }
    };

    BRp$4.findEndpoints = function (edge) {
      var r = this;
      var intersect;
      var source = edge.source()[0];
      var target = edge.target()[0];
      var srcPos = source.position();
      var tgtPos = target.position();
      var tgtArShape = edge.pstyle('target-arrow-shape').value;
      var srcArShape = edge.pstyle('source-arrow-shape').value;
      var tgtDist = edge.pstyle('target-distance-from-node').pfValue;
      var srcDist = edge.pstyle('source-distance-from-node').pfValue;
      var curveStyle = edge.pstyle('curve-style').value;
      var rs = edge._private.rscratch;
      var et = rs.edgeType;
      var taxi = curveStyle === 'taxi';
      var self = et === 'self' || et === 'compound';
      var bezier = et === 'bezier' || et === 'multibezier' || self;
      var multi = et !== 'bezier';
      var lines = et === 'straight' || et === 'segments';
      var segments = et === 'segments';
      var hasEndpts = bezier || multi || lines;
      var overrideEndpts = self || taxi;
      var srcManEndpt = edge.pstyle('source-endpoint');
      var srcManEndptVal = overrideEndpts ? 'outside-to-node' : srcManEndpt.value;
      var tgtManEndpt = edge.pstyle('target-endpoint');
      var tgtManEndptVal = overrideEndpts ? 'outside-to-node' : tgtManEndpt.value;
      rs.srcManEndpt = srcManEndpt;
      rs.tgtManEndpt = tgtManEndpt;
      var p1; // last known point of edge on target side

      var p2; // last known point of edge on source side

      var p1_i; // point to intersect with target shape

      var p2_i; // point to intersect with source shape

      if (bezier) {
        var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];
        var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;
        p1 = cpEnd;
        p2 = cpStart;
      } else if (lines) {
        var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);
        var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);
        p1 = tgtArrowFromPt;
        p2 = srcArrowFromPt;
      }

      if (tgtManEndptVal === 'inside-to-node') {
        intersect = [tgtPos.x, tgtPos.y];
      } else if (tgtManEndpt.units) {
        intersect = this.manualEndptToPx(target, tgtManEndpt);
      } else if (tgtManEndptVal === 'outside-to-line') {
        intersect = rs.tgtIntn; // use cached value from ctrlpt calc
      } else {
        if (tgtManEndptVal === 'outside-to-node' || tgtManEndptVal === 'outside-to-node-or-label') {
          p1_i = p1;
        } else if (tgtManEndptVal === 'outside-to-line' || tgtManEndptVal === 'outside-to-line-or-label') {
          p1_i = [srcPos.x, srcPos.y];
        }

        intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0);

        if (tgtManEndptVal === 'outside-to-node-or-label' || tgtManEndptVal === 'outside-to-line-or-label') {
          var trs = target._private.rscratch;
          var lw = trs.labelWidth;
          var lh = trs.labelHeight;
          var lx = trs.labelX;
          var ly = trs.labelY;
          var lw2 = lw / 2;
          var lh2 = lh / 2;
          var va = target.pstyle('text-valign').value;

          if (va === 'top') {
            ly -= lh2;
          } else if (va === 'bottom') {
            ly += lh2;
          }

          var ha = target.pstyle('text-halign').value;

          if (ha === 'left') {
            lx -= lw2;
          } else if (ha === 'right') {
            lx += lw2;
          }

          var labelIntersect = polygonIntersectLine(p1_i[0], p1_i[1], [lx - lw2, ly - lh2, lx + lw2, ly - lh2, lx + lw2, ly + lh2, lx - lw2, ly + lh2], tgtPos.x, tgtPos.y);

          if (labelIntersect.length > 0) {
            var refPt = srcPos;
            var intSqdist = sqdist(refPt, array2point(intersect));
            var labIntSqdist = sqdist(refPt, array2point(labelIntersect));
            var minSqDist = intSqdist;

            if (labIntSqdist < intSqdist) {
              intersect = labelIntersect;
              minSqDist = labIntSqdist;
            }

            if (labelIntersect.length > 2) {
              var labInt2SqDist = sqdist(refPt, {
                x: labelIntersect[2],
                y: labelIntersect[3]
              });

              if (labInt2SqDist < minSqDist) {
                intersect = [labelIntersect[2], labelIntersect[3]];
              }
            }
          }
        }
      }

      var arrowEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].spacing(edge) + tgtDist);
      var edgeEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].gap(edge) + tgtDist);
      rs.endX = edgeEnd[0];
      rs.endY = edgeEnd[1];
      rs.arrowEndX = arrowEnd[0];
      rs.arrowEndY = arrowEnd[1];

      if (srcManEndptVal === 'inside-to-node') {
        intersect = [srcPos.x, srcPos.y];
      } else if (srcManEndpt.units) {
        intersect = this.manualEndptToPx(source, srcManEndpt);
      } else if (srcManEndptVal === 'outside-to-line') {
        intersect = rs.srcIntn; // use cached value from ctrlpt calc
      } else {
        if (srcManEndptVal === 'outside-to-node' || srcManEndptVal === 'outside-to-node-or-label') {
          p2_i = p2;
        } else if (srcManEndptVal === 'outside-to-line' || srcManEndptVal === 'outside-to-line-or-label') {
          p2_i = [tgtPos.x, tgtPos.y];
        }

        intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0);

        if (srcManEndptVal === 'outside-to-node-or-label' || srcManEndptVal === 'outside-to-line-or-label') {
          var srs = source._private.rscratch;
          var _lw = srs.labelWidth;
          var _lh = srs.labelHeight;
          var _lx = srs.labelX;
          var _ly = srs.labelY;

          var _lw2 = _lw / 2;

          var _lh2 = _lh / 2;

          var _va = source.pstyle('text-valign').value;

          if (_va === 'top') {
            _ly -= _lh2;
          } else if (_va === 'bottom') {
            _ly += _lh2;
          }

          var _ha = source.pstyle('text-halign').value;

          if (_ha === 'left') {
            _lx -= _lw2;
          } else if (_ha === 'right') {
            _lx += _lw2;
          }

          var _labelIntersect = polygonIntersectLine(p2_i[0], p2_i[1], [_lx - _lw2, _ly - _lh2, _lx + _lw2, _ly - _lh2, _lx + _lw2, _ly + _lh2, _lx - _lw2, _ly + _lh2], srcPos.x, srcPos.y);

          if (_labelIntersect.length > 0) {
            var _refPt = tgtPos;

            var _intSqdist = sqdist(_refPt, array2point(intersect));

            var _labIntSqdist = sqdist(_refPt, array2point(_labelIntersect));

            var _minSqDist = _intSqdist;

            if (_labIntSqdist < _intSqdist) {
              intersect = [_labelIntersect[0], _labelIntersect[1]];
              _minSqDist = _labIntSqdist;
            }

            if (_labelIntersect.length > 2) {
              var _labInt2SqDist = sqdist(_refPt, {
                x: _labelIntersect[2],
                y: _labelIntersect[3]
              });

              if (_labInt2SqDist < _minSqDist) {
                intersect = [_labelIntersect[2], _labelIntersect[3]];
              }
            }
          }
        }
      }

      var arrowStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].spacing(edge) + srcDist);
      var edgeStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].gap(edge) + srcDist);
      rs.startX = edgeStart[0];
      rs.startY = edgeStart[1];
      rs.arrowStartX = arrowStart[0];
      rs.arrowStartY = arrowStart[1];

      if (hasEndpts) {
        if (!number(rs.startX) || !number(rs.startY) || !number(rs.endX) || !number(rs.endY)) {
          rs.badLine = true;
        } else {
          rs.badLine = false;
        }
      }
    };

    BRp$4.getSourceEndpoint = function (edge) {
      var rs = edge[0]._private.rscratch;
      this.recalculateRenderedStyle(edge);

      switch (rs.edgeType) {
        case 'haystack':
          return {
            x: rs.haystackPts[0],
            y: rs.haystackPts[1]
          };

        default:
          return {
            x: rs.arrowStartX,
            y: rs.arrowStartY
          };
      }
    };

    BRp$4.getTargetEndpoint = function (edge) {
      var rs = edge[0]._private.rscratch;
      this.recalculateRenderedStyle(edge);

      switch (rs.edgeType) {
        case 'haystack':
          return {
            x: rs.haystackPts[2],
            y: rs.haystackPts[3]
          };

        default:
          return {
            x: rs.arrowEndX,
            y: rs.arrowEndY
          };
      }
    };

    var BRp$5 = {};

    function pushBezierPts(r, edge, pts) {
      var qbezierAt$1 = function qbezierAt$1(p1, p2, p3, t) {
        return qbezierAt(p1, p2, p3, t);
      };

      var _p = edge._private;
      var bpts = _p.rstyle.bezierPts;

      for (var i = 0; i < r.bezierProjPcts.length; i++) {
        var p = r.bezierProjPcts[i];
        bpts.push({
          x: qbezierAt$1(pts[0], pts[2], pts[4], p),
          y: qbezierAt$1(pts[1], pts[3], pts[5], p)
        });
      }
    }

    BRp$5.storeEdgeProjections = function (edge) {
      var _p = edge._private;
      var rs = _p.rscratch;
      var et = rs.edgeType; // clear the cached points state

      _p.rstyle.bezierPts = null;
      _p.rstyle.linePts = null;
      _p.rstyle.haystackPts = null;

      if (et === 'multibezier' || et === 'bezier' || et === 'self' || et === 'compound') {
        _p.rstyle.bezierPts = [];

        for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
          pushBezierPts(this, edge, rs.allpts.slice(i, i + 6));
        }
      } else if (et === 'segments') {
        var lpts = _p.rstyle.linePts = [];

        for (var i = 0; i + 1 < rs.allpts.length; i += 2) {
          lpts.push({
            x: rs.allpts[i],
            y: rs.allpts[i + 1]
          });
        }
      } else if (et === 'haystack') {
        var hpts = rs.haystackPts;
        _p.rstyle.haystackPts = [{
          x: hpts[0],
          y: hpts[1]
        }, {
          x: hpts[2],
          y: hpts[3]
        }];
      }

      _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
    };

    BRp$5.recalculateEdgeProjections = function (edges) {
      this.findEdgeControlPoints(edges);
    };

    /* global document */

    var BRp$6 = {};

    BRp$6.recalculateNodeLabelProjection = function (node) {
      var content = node.pstyle('label').strValue;

      if (emptyString(content)) {
        return;
      }

      var textX, textY;
      var _p = node._private;
      var nodeWidth = node.width();
      var nodeHeight = node.height();
      var padding = node.padding();
      var nodePos = node.position();
      var textHalign = node.pstyle('text-halign').strValue;
      var textValign = node.pstyle('text-valign').strValue;
      var rs = _p.rscratch;
      var rstyle = _p.rstyle;

      switch (textHalign) {
        case 'left':
          textX = nodePos.x - nodeWidth / 2 - padding;
          break;

        case 'right':
          textX = nodePos.x + nodeWidth / 2 + padding;
          break;

        default:
          // e.g. center
          textX = nodePos.x;
      }

      switch (textValign) {
        case 'top':
          textY = nodePos.y - nodeHeight / 2 - padding;
          break;

        case 'bottom':
          textY = nodePos.y + nodeHeight / 2 + padding;
          break;

        default:
          // e.g. middle
          textY = nodePos.y;
      }

      rs.labelX = textX;
      rs.labelY = textY;
      rstyle.labelX = textX;
      rstyle.labelY = textY;
      this.calculateLabelAngles(node);
      this.applyLabelDimensions(node);
    };

    var lineAngleFromDelta = function lineAngleFromDelta(dx, dy) {
      var angle = Math.atan(dy / dx);

      if (dx === 0 && angle < 0) {
        angle = angle * -1;
      }

      return angle;
    };

    var lineAngle = function lineAngle(p0, p1) {
      var dx = p1.x - p0.x;
      var dy = p1.y - p0.y;
      return lineAngleFromDelta(dx, dy);
    };

    var bezierAngle = function bezierAngle(p0, p1, p2, t) {
      var t0 = bound(0, t - 0.001, 1);
      var t1 = bound(0, t + 0.001, 1);
      var lp0 = qbezierPtAt(p0, p1, p2, t0);
      var lp1 = qbezierPtAt(p0, p1, p2, t1);
      return lineAngle(lp0, lp1);
    };

    BRp$6.recalculateEdgeLabelProjections = function (edge) {
      var p;
      var _p = edge._private;
      var rs = _p.rscratch;
      var r = this;
      var content = {
        mid: edge.pstyle('label').strValue,
        source: edge.pstyle('source-label').strValue,
        target: edge.pstyle('target-label').strValue
      };

      if (content.mid || content.source || content.target) ; else {
          return; // no labels => no calcs
        } // add center point to style so bounding box calculations can use it
      //


      p = {
        x: rs.midX,
        y: rs.midY
      };

      var setRs = function setRs(propName, prefix, value) {
        setPrefixedProperty(_p.rscratch, propName, prefix, value);
        setPrefixedProperty(_p.rstyle, propName, prefix, value);
      };

      setRs('labelX', null, p.x);
      setRs('labelY', null, p.y);
      var midAngle = lineAngleFromDelta(rs.midDispX, rs.midDispY);
      setRs('labelAutoAngle', null, midAngle);

      var createControlPointInfo = function createControlPointInfo() {
        if (createControlPointInfo.cache) {
          return createControlPointInfo.cache;
        } // use cache so only 1x per edge


        var ctrlpts = []; // store each ctrlpt info init

        for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
          var p0 = {
            x: rs.allpts[i],
            y: rs.allpts[i + 1]
          };
          var p1 = {
            x: rs.allpts[i + 2],
            y: rs.allpts[i + 3]
          }; // ctrlpt

          var p2 = {
            x: rs.allpts[i + 4],
            y: rs.allpts[i + 5]
          };
          ctrlpts.push({
            p0: p0,
            p1: p1,
            p2: p2,
            startDist: 0,
            length: 0,
            segments: []
          });
        }

        var bpts = _p.rstyle.bezierPts;
        var nProjs = r.bezierProjPcts.length;

        function addSegment(cp, p0, p1, t0, t1) {
          var length = dist(p0, p1);
          var prevSegment = cp.segments[cp.segments.length - 1];
          var segment = {
            p0: p0,
            p1: p1,
            t0: t0,
            t1: t1,
            startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
            length: length
          };
          cp.segments.push(segment);
          cp.length += length;
        } // update each ctrlpt with segment info


        for (var _i = 0; _i < ctrlpts.length; _i++) {
          var cp = ctrlpts[_i];
          var prevCp = ctrlpts[_i - 1];

          if (prevCp) {
            cp.startDist = prevCp.startDist + prevCp.length;
          }

          addSegment(cp, cp.p0, bpts[_i * nProjs], 0, r.bezierProjPcts[0]); // first

          for (var j = 0; j < nProjs - 1; j++) {
            addSegment(cp, bpts[_i * nProjs + j], bpts[_i * nProjs + j + 1], r.bezierProjPcts[j], r.bezierProjPcts[j + 1]);
          }

          addSegment(cp, bpts[_i * nProjs + nProjs - 1], cp.p2, r.bezierProjPcts[nProjs - 1], 1); // last
        }

        return createControlPointInfo.cache = ctrlpts;
      };

      var calculateEndProjection = function calculateEndProjection(prefix) {
        var angle;
        var isSrc = prefix === 'source';

        if (!content[prefix]) {
          return;
        }

        var offset = edge.pstyle(prefix + '-text-offset').pfValue;

        switch (rs.edgeType) {
          case 'self':
          case 'compound':
          case 'bezier':
          case 'multibezier':
            {
              var cps = createControlPointInfo();
              var selected;
              var startDist = 0;
              var totalDist = 0; // find the segment we're on

              for (var i = 0; i < cps.length; i++) {
                var _cp = cps[isSrc ? i : cps.length - 1 - i];

                for (var j = 0; j < _cp.segments.length; j++) {
                  var _seg = _cp.segments[isSrc ? j : _cp.segments.length - 1 - j];
                  var lastSeg = i === cps.length - 1 && j === _cp.segments.length - 1;
                  startDist = totalDist;
                  totalDist += _seg.length;

                  if (totalDist >= offset || lastSeg) {
                    selected = {
                      cp: _cp,
                      segment: _seg
                    };
                    break;
                  }
                }

                if (selected) {
                  break;
                }
              }

              var cp = selected.cp;
              var seg = selected.segment;
              var tSegment = (offset - startDist) / seg.length;
              var segDt = seg.t1 - seg.t0;
              var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;
              t = bound(0, t, 1);
              p = qbezierPtAt(cp.p0, cp.p1, cp.p2, t);
              angle = bezierAngle(cp.p0, cp.p1, cp.p2, t);
              break;
            }

          case 'straight':
          case 'segments':
          case 'haystack':
            {
              var d = 0,
                  di,
                  d0;
              var p0, p1;
              var l = rs.allpts.length;

              for (var _i2 = 0; _i2 + 3 < l; _i2 += 2) {
                if (isSrc) {
                  p0 = {
                    x: rs.allpts[_i2],
                    y: rs.allpts[_i2 + 1]
                  };
                  p1 = {
                    x: rs.allpts[_i2 + 2],
                    y: rs.allpts[_i2 + 3]
                  };
                } else {
                  p0 = {
                    x: rs.allpts[l - 2 - _i2],
                    y: rs.allpts[l - 1 - _i2]
                  };
                  p1 = {
                    x: rs.allpts[l - 4 - _i2],
                    y: rs.allpts[l - 3 - _i2]
                  };
                }

                di = dist(p0, p1);
                d0 = d;
                d += di;

                if (d >= offset) {
                  break;
                }
              }

              var pD = offset - d0;

              var _t = pD / di;

              _t = bound(0, _t, 1);
              p = lineAt(p0, p1, _t);
              angle = lineAngle(p0, p1);
              break;
            }
        }

        setRs('labelX', prefix, p.x);
        setRs('labelY', prefix, p.y);
        setRs('labelAutoAngle', prefix, angle);
      };

      calculateEndProjection('source');
      calculateEndProjection('target');
      this.applyLabelDimensions(edge);
    };

    BRp$6.applyLabelDimensions = function (ele) {
      this.applyPrefixedLabelDimensions(ele);

      if (ele.isEdge()) {
        this.applyPrefixedLabelDimensions(ele, 'source');
        this.applyPrefixedLabelDimensions(ele, 'target');
      }
    };

    BRp$6.applyPrefixedLabelDimensions = function (ele, prefix) {
      var _p = ele._private;
      var text = this.getLabelText(ele, prefix);
      var labelDims = this.calculateLabelDimensions(ele, text);
      var lineHeight = ele.pstyle('line-height').pfValue;
      var textWrap = ele.pstyle('text-wrap').strValue;
      var lines = getPrefixedProperty(_p.rscratch, 'labelWrapCachedLines', prefix) || [];
      var numLines = textWrap !== 'wrap' ? 1 : Math.max(lines.length, 1);
      var normPerLineHeight = labelDims.height / numLines;
      var labelLineHeight = normPerLineHeight * lineHeight;
      var width = labelDims.width;
      var height = labelDims.height + (numLines - 1) * (lineHeight - 1) * normPerLineHeight;
      setPrefixedProperty(_p.rstyle, 'labelWidth', prefix, width);
      setPrefixedProperty(_p.rscratch, 'labelWidth', prefix, width);
      setPrefixedProperty(_p.rstyle, 'labelHeight', prefix, height);
      setPrefixedProperty(_p.rscratch, 'labelHeight', prefix, height);
      setPrefixedProperty(_p.rscratch, 'labelLineHeight', prefix, labelLineHeight);
    };

    BRp$6.getLabelText = function (ele, prefix) {
      var _p = ele._private;
      var pfd = prefix ? prefix + '-' : '';
      var text = ele.pstyle(pfd + 'label').strValue;
      var textTransform = ele.pstyle('text-transform').value;

      var rscratch = function rscratch(propName, value) {
        if (value) {
          setPrefixedProperty(_p.rscratch, propName, prefix, value);
          return value;
        } else {
          return getPrefixedProperty(_p.rscratch, propName, prefix);
        }
      }; // for empty text, skip all processing


      if (!text) {
        return '';
      }

      if (textTransform == 'none') ; else if (textTransform == 'uppercase') {
        text = text.toUpperCase();
      } else if (textTransform == 'lowercase') {
        text = text.toLowerCase();
      }

      var wrapStyle = ele.pstyle('text-wrap').value;

      if (wrapStyle === 'wrap') {
        var labelKey = rscratch('labelKey'); // save recalc if the label is the same as before

        if (labelKey != null && rscratch('labelWrapKey') === labelKey) {
          return rscratch('labelWrapCachedText');
        }

        var zwsp = "\u200B";
        var lines = text.split('\n');
        var maxW = ele.pstyle('text-max-width').pfValue;
        var overflow = ele.pstyle('text-overflow-wrap').value;
        var overflowAny = overflow === 'anywhere';
        var wrappedLines = [];
        var wordsRegex = /[\s\u200b]+/;
        var wordSeparator = overflowAny ? '' : ' ';

        for (var l = 0; l < lines.length; l++) {
          var line = lines[l];
          var lineDims = this.calculateLabelDimensions(ele, line);
          var lineW = lineDims.width;

          if (overflowAny) {
            var processedLine = line.split('').join(zwsp);
            line = processedLine;
          }

          if (lineW > maxW) {
            // line is too long
            var words = line.split(wordsRegex);
            var subline = '';

            for (var w = 0; w < words.length; w++) {
              var word = words[w];
              var testLine = subline.length === 0 ? word : subline + wordSeparator + word;
              var testDims = this.calculateLabelDimensions(ele, testLine);
              var testW = testDims.width;

              if (testW <= maxW) {
                // word fits on current line
                subline += word + wordSeparator;
              } else {
                // word starts new line
                if (subline) {
                  wrappedLines.push(subline);
                }

                subline = word + wordSeparator;
              }
            } // if there's remaining text, put it in a wrapped line


            if (!subline.match(/^[\s\u200b]+$/)) {
              wrappedLines.push(subline);
            }
          } else {
            // line is already short enough
            wrappedLines.push(line);
          }
        } // for


        rscratch('labelWrapCachedLines', wrappedLines);
        text = rscratch('labelWrapCachedText', wrappedLines.join('\n'));
        rscratch('labelWrapKey', labelKey);
      } else if (wrapStyle === 'ellipsis') {
        var _maxW = ele.pstyle('text-max-width').pfValue;
        var ellipsized = '';
        var ellipsis = "\u2026";
        var incLastCh = false;

        if (this.calculateLabelDimensions(ele, text).width < _maxW) {
          // the label already fits
          return text;
        }

        for (var i = 0; i < text.length; i++) {
          var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i] + ellipsis).width;

          if (widthWithNextCh > _maxW) {
            break;
          }

          ellipsized += text[i];

          if (i === text.length - 1) {
            incLastCh = true;
          }
        }

        if (!incLastCh) {
          ellipsized += ellipsis;
        }

        return ellipsized;
      } // if ellipsize


      return text;
    };

    BRp$6.getLabelJustification = function (ele) {
      var justification = ele.pstyle('text-justification').strValue;
      var textHalign = ele.pstyle('text-halign').strValue;

      if (justification === 'auto') {
        if (ele.isNode()) {
          switch (textHalign) {
            case 'left':
              return 'right';

            case 'right':
              return 'left';

            default:
              return 'center';
          }
        } else {
          return 'center';
        }
      } else {
        return justification;
      }
    };

    BRp$6.calculateLabelDimensions = function (ele, text) {
      var r = this;
      var cacheKey = hashString(text, ele._private.labelDimsKey);
      var cache = r.labelDimCache || (r.labelDimCache = []);
      var existingVal = cache[cacheKey];

      if (existingVal != null) {
        return existingVal;
      }

      var padding = 0; // add padding around text dims, as the measurement isn't that accurate

      var fStyle = ele.pstyle('font-style').strValue;
      var size = ele.pstyle('font-size').pfValue;
      var family = ele.pstyle('font-family').strValue;
      var weight = ele.pstyle('font-weight').strValue;
      var canvas = this.labelCalcCanvas;
      var c2d = this.labelCalcCanvasContext;

      if (!canvas) {
        canvas = this.labelCalcCanvas = document.createElement('canvas');
        c2d = this.labelCalcCanvasContext = canvas.getContext('2d');
        var ds = canvas.style;
        ds.position = 'absolute';
        ds.left = '-9999px';
        ds.top = '-9999px';
        ds.zIndex = '-1';
        ds.visibility = 'hidden';
        ds.pointerEvents = 'none';
      }

      c2d.font = "".concat(fStyle, " ").concat(weight, " ").concat(size, "px ").concat(family);
      var width = 0;
      var height = 0;
      var lines = text.split('\n');

      for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        var metrics = c2d.measureText(line);
        var w = Math.ceil(metrics.width);
        var h = size;
        width = Math.max(w, width);
        height += h;
      }

      width += padding;
      height += padding;
      return cache[cacheKey] = {
        width: width,
        height: height
      };
    };

    BRp$6.calculateLabelAngle = function (ele, prefix) {
      var _p = ele._private;
      var rs = _p.rscratch;
      var isEdge = ele.isEdge();
      var prefixDash = prefix ? prefix + '-' : '';
      var rot = ele.pstyle(prefixDash + 'text-rotation');
      var rotStr = rot.strValue;

      if (rotStr === 'none') {
        return 0;
      } else if (isEdge && rotStr === 'autorotate') {
        return rs.labelAutoAngle;
      } else if (rotStr === 'autorotate') {
        return 0;
      } else {
        return rot.pfValue;
      }
    };

    BRp$6.calculateLabelAngles = function (ele) {
      var r = this;
      var isEdge = ele.isEdge();
      var _p = ele._private;
      var rs = _p.rscratch;
      rs.labelAngle = r.calculateLabelAngle(ele);

      if (isEdge) {
        rs.sourceLabelAngle = r.calculateLabelAngle(ele, 'source');
        rs.targetLabelAngle = r.calculateLabelAngle(ele, 'target');
      }
    };

    var BRp$7 = {};
    var TOO_SMALL_CUT_RECT = 28;
    var warnedCutRect = false;

    BRp$7.getNodeShape = function (node) {
      var r = this;
      var shape = node.pstyle('shape').value;

      if (shape === 'cutrectangle' && (node.width() < TOO_SMALL_CUT_RECT || node.height() < TOO_SMALL_CUT_RECT)) {
        if (!warnedCutRect) {
          warn('The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead');
          warnedCutRect = true;
        }

        return 'rectangle';
      }

      if (node.isParent()) {
        if (shape === 'rectangle' || shape === 'roundrectangle' || shape === 'round-rectangle' || shape === 'cutrectangle' || shape === 'cut-rectangle' || shape === 'barrel') {
          return shape;
        } else {
          return 'rectangle';
        }
      }

      if (shape === 'polygon') {
        var points = node.pstyle('shape-polygon-points').value;
        return r.nodeShapes.makePolygon(points).name;
      }

      return shape;
    };

    var BRp$8 = {};

    BRp$8.registerCalculationListeners = function () {
      var cy = this.cy;
      var elesToUpdate = cy.collection();
      var r = this;

      var enqueue = function enqueue(eles) {
        var dirtyStyleCaches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        elesToUpdate.merge(eles);

        if (dirtyStyleCaches) {
          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var _p = ele._private;
            var rstyle = _p.rstyle;
            rstyle.clean = false;
            rstyle.cleanConnected = false;
          }
        }
      };

      r.binder(cy).on('bounds.* dirty.*', function onDirtyBounds(e) {
        var ele = e.target;
        enqueue(ele);
      }).on('style.* background.*', function onDirtyStyle(e) {
        var ele = e.target;
        enqueue(ele, false);
      });

      var updateEleCalcs = function updateEleCalcs(willDraw) {
        if (willDraw) {
          var fns = r.onUpdateEleCalcsFns; // because we need to have up-to-date style (e.g. stylesheet mappers)
          // before calculating rendered style (and pstyle might not be called yet)

          elesToUpdate.cleanStyle();

          for (var i = 0; i < elesToUpdate.length; i++) {
            var ele = elesToUpdate[i];
            var rstyle = ele._private.rstyle;

            if (ele.isNode() && !rstyle.cleanConnected) {
              enqueue(ele.connectedEdges());
              rstyle.cleanConnected = true;
            }
          }

          if (fns) {
            for (var _i = 0; _i < fns.length; _i++) {
              var fn = fns[_i];
              fn(willDraw, elesToUpdate);
            }
          }

          r.recalculateRenderedStyle(elesToUpdate);
          elesToUpdate = cy.collection();
        }
      };

      r.flushRenderedStyleQueue = function () {
        updateEleCalcs(true);
      };

      r.beforeRender(updateEleCalcs, r.beforeRenderPriorities.eleCalcs);
    };

    BRp$8.onUpdateEleCalcs = function (fn) {
      var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];
      fns.push(fn);
    };

    BRp$8.recalculateRenderedStyle = function (eles, useCache) {
      var isCleanConnected = function isCleanConnected(ele) {
        return ele._private.rstyle.cleanConnected;
      };

      var edges = [];
      var nodes = []; // the renderer can't be used for calcs when destroyed, e.g. ele.boundingBox()

      if (this.destroyed) {
        return;
      } // use cache by default for perf


      if (useCache === undefined) {
        useCache = true;
      }

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var _p = ele._private;
        var rstyle = _p.rstyle; // an edge may be implicitly dirty b/c of one of its connected nodes
        // (and a request for recalc may come in between frames)

        if (ele.isEdge() && (!isCleanConnected(ele.source()) || !isCleanConnected(ele.target()))) {
          rstyle.clean = false;
        } // only update if dirty and in graph


        if (useCache && rstyle.clean || ele.removed()) {
          continue;
        } // only update if not display: none


        if (ele.pstyle('display').value === 'none') {
          continue;
        }

        if (_p.group === 'nodes') {
          nodes.push(ele);
        } else {
          // edges
          edges.push(ele);
        }

        rstyle.clean = true;
      } // update node data from projections


      for (var _i2 = 0; _i2 < nodes.length; _i2++) {
        var _ele = nodes[_i2];
        var _p2 = _ele._private;
        var _rstyle = _p2.rstyle;

        var pos = _ele.position();

        this.recalculateNodeLabelProjection(_ele);
        _rstyle.nodeX = pos.x;
        _rstyle.nodeY = pos.y;
        _rstyle.nodeW = _ele.pstyle('width').pfValue;
        _rstyle.nodeH = _ele.pstyle('height').pfValue;
      }

      this.recalculateEdgeProjections(edges); // update edge data from projections

      for (var _i3 = 0; _i3 < edges.length; _i3++) {
        var _ele2 = edges[_i3];
        var _p3 = _ele2._private;
        var _rstyle2 = _p3.rstyle;
        var rs = _p3.rscratch; // update rstyle positions

        _rstyle2.srcX = rs.arrowStartX;
        _rstyle2.srcY = rs.arrowStartY;
        _rstyle2.tgtX = rs.arrowEndX;
        _rstyle2.tgtY = rs.arrowEndY;
        _rstyle2.midX = rs.midX;
        _rstyle2.midY = rs.midY;
        _rstyle2.labelAngle = rs.labelAngle;
        _rstyle2.sourceLabelAngle = rs.sourceLabelAngle;
        _rstyle2.targetLabelAngle = rs.targetLabelAngle;
      }
    };

    var BRp$9 = {};

    BRp$9.updateCachedGrabbedEles = function () {
      var eles = this.cachedZSortedEles;

      if (!eles) {
        // just let this be recalculated on the next z sort tick
        return;
      }

      eles.drag = [];
      eles.nondrag = [];
      var grabTargets = [];

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var rs = ele._private.rscratch;

        if (ele.grabbed() && !ele.isParent()) {
          grabTargets.push(ele);
        } else if (rs.inDragLayer) {
          eles.drag.push(ele);
        } else {
          eles.nondrag.push(ele);
        }
      } // put the grab target nodes last so it's on top of its neighbourhood


      for (var i = 0; i < grabTargets.length; i++) {
        var ele = grabTargets[i];
        eles.drag.push(ele);
      }
    };

    BRp$9.invalidateCachedZSortedEles = function () {
      this.cachedZSortedEles = null;
    };

    BRp$9.getCachedZSortedEles = function (forceRecalc) {
      if (forceRecalc || !this.cachedZSortedEles) {
        var eles = this.cy.mutableElements().toArray();
        eles.sort(zIndexSort);
        eles.interactive = eles.filter(function (ele) {
          return ele.interactive();
        });
        this.cachedZSortedEles = eles;
        this.updateCachedGrabbedEles();
      } else {
        eles = this.cachedZSortedEles;
      }

      return eles;
    };

    var BRp$a = {};
    [BRp$1, BRp$2, BRp$3, BRp$4, BRp$5, BRp$6, BRp$7, BRp$8, BRp$9].forEach(function (props) {
      extend(BRp$a, props);
    });

    var BRp$b = {};

    BRp$b.getCachedImage = function (url, crossOrigin, onLoad) {
      var r = this;
      var imageCache = r.imageCache = r.imageCache || {};
      var cache = imageCache[url];

      if (cache) {
        if (!cache.image.complete) {
          cache.image.addEventListener('load', onLoad);
        }

        return cache.image;
      } else {
        cache = imageCache[url] = imageCache[url] || {};
        var image = cache.image = new Image(); // eslint-disable-line no-undef

        image.addEventListener('load', onLoad);
        image.addEventListener('error', function () {
          image.error = true;
        }); // #1582 safari doesn't load data uris with crossOrigin properly
        // https://bugs.webkit.org/show_bug.cgi?id=123978

        var dataUriPrefix = 'data:';
        var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;

        if (!isDataUri) {
          image.crossOrigin = crossOrigin; // prevent tainted canvas
        }

        image.src = url;
        return image;
      }
    };

    var BRp$c = {};
    /* global document, window, ResizeObserver, MutationObserver */

    BRp$c.registerBinding = function (target, event, handler, useCapture) {
      // eslint-disable-line no-unused-vars
      var args = Array.prototype.slice.apply(arguments, [1]); // copy

      var b = this.binder(target);
      return b.on.apply(b, args);
    };

    BRp$c.binder = function (tgt) {
      var r = this;
      var tgtIsDom = tgt === window || tgt === document || tgt === document.body || domElement(tgt);

      if (r.supportsPassiveEvents == null) {
        // from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
        var supportsPassive = false;

        try {
          var opts = Object.defineProperty({}, 'passive', {
            get: function get() {
              supportsPassive = true;
              return true;
            }
          });
          window.addEventListener('test', null, opts);
        } catch (err) {// not supported
        }

        r.supportsPassiveEvents = supportsPassive;
      }

      var on = function on(event, handler, useCapture) {
        var args = Array.prototype.slice.call(arguments);

        if (tgtIsDom && r.supportsPassiveEvents) {
          // replace useCapture w/ opts obj
          args[2] = {
            capture: useCapture != null ? useCapture : false,
            passive: false,
            once: false
          };
        }

        r.bindings.push({
          target: tgt,
          args: args
        });
        (tgt.addEventListener || tgt.on).apply(tgt, args);
        return this;
      };

      return {
        on: on,
        addEventListener: on,
        addListener: on,
        bind: on
      };
    };

    BRp$c.nodeIsDraggable = function (node) {
      return node && node.isNode() && !node.locked() && node.grabbable();
    };

    BRp$c.nodeIsGrabbable = function (node) {
      return this.nodeIsDraggable(node) && node.interactive();
    };

    BRp$c.load = function () {
      var r = this;

      var isSelected = function isSelected(ele) {
        return ele.selected();
      };

      var triggerEvents = function triggerEvents(target, names, e, position) {
        if (target == null) {
          target = r.cy;
        }

        for (var i = 0; i < names.length; i++) {
          var name = names[i];
          target.emit({
            originalEvent: e,
            type: name,
            position: position
          });
        }
      };

      var isMultSelKeyDown = function isMultSelKeyDown(e) {
        return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
      };

      var allowPanningPassthrough = function allowPanningPassthrough(down, downs) {
        var allowPassthrough = true;

        if (r.cy.hasCompoundNodes() && down && down.pannable()) {
          // a grabbable compound node below the ele => no passthrough panning
          for (var i = 0; downs && i < downs.length; i++) {
            var down = downs[i]; //if any parent node in event hierarchy isn't pannable, reject passthrough

            if (down.isNode() && down.isParent() && !down.pannable()) {
              allowPassthrough = false;
              break;
            }
          }
        } else {
          allowPassthrough = true;
        }

        return allowPassthrough;
      };

      var setGrabbed = function setGrabbed(ele) {
        ele[0]._private.grabbed = true;
      };

      var setFreed = function setFreed(ele) {
        ele[0]._private.grabbed = false;
      };

      var setInDragLayer = function setInDragLayer(ele) {
        ele[0]._private.rscratch.inDragLayer = true;
      };

      var setOutDragLayer = function setOutDragLayer(ele) {
        ele[0]._private.rscratch.inDragLayer = false;
      };

      var setGrabTarget = function setGrabTarget(ele) {
        ele[0]._private.rscratch.isGrabTarget = true;
      };

      var removeGrabTarget = function removeGrabTarget(ele) {
        ele[0]._private.rscratch.isGrabTarget = false;
      };

      var addToDragList = function addToDragList(ele, opts) {
        var list = opts.addToList;
        var listHasEle = list.has(ele);

        if (!listHasEle) {
          list.merge(ele);
          setGrabbed(ele);
        }
      }; // helper function to determine which child nodes and inner edges
      // of a compound node to be dragged as well as the grabbed and selected nodes


      var addDescendantsToDrag = function addDescendantsToDrag(node, opts) {
        if (!node.cy().hasCompoundNodes()) {
          return;
        }

        if (opts.inDragLayer == null && opts.addToList == null) {
          return;
        } // nothing to do


        var innerNodes = node.descendants();

        if (opts.inDragLayer) {
          innerNodes.forEach(setInDragLayer);
          innerNodes.connectedEdges().forEach(setInDragLayer);
        }

        if (opts.addToList) {
          opts.addToList.unmerge(innerNodes);
        }
      }; // adds the given nodes and its neighbourhood to the drag layer


      var addNodesToDrag = function addNodesToDrag(nodes, opts) {
        opts = opts || {};
        var hasCompoundNodes = nodes.cy().hasCompoundNodes();

        if (opts.inDragLayer) {
          nodes.forEach(setInDragLayer);
          nodes.neighborhood().stdFilter(function (ele) {
            return !hasCompoundNodes || ele.isEdge();
          }).forEach(setInDragLayer);
        }

        if (opts.addToList) {
          nodes.forEach(function (ele) {
            addToDragList(ele, opts);
          });
        }

        addDescendantsToDrag(nodes, opts); // always add to drag
        // also add nodes and edges related to the topmost ancestor

        updateAncestorsInDragLayer(nodes, {
          inDragLayer: opts.inDragLayer
        });
        r.updateCachedGrabbedEles();
      };

      var addNodeToDrag = addNodesToDrag;

      var freeDraggedElements = function freeDraggedElements(grabbedEles) {
        if (!grabbedEles) {
          return;
        } // just go over all elements rather than doing a bunch of (possibly expensive) traversals


        r.getCachedZSortedEles().forEach(function (ele) {
          setFreed(ele);
          setOutDragLayer(ele);
          removeGrabTarget(ele);
        });
        r.updateCachedGrabbedEles();
      }; // helper function to determine which ancestor nodes and edges should go
      // to the drag layer (or should be removed from drag layer).


      var updateAncestorsInDragLayer = function updateAncestorsInDragLayer(node, opts) {
        if (opts.inDragLayer == null && opts.addToList == null) {
          return;
        } // nothing to do


        if (!node.cy().hasCompoundNodes()) {
          return;
        } // find top-level parent


        var parent = node.ancestors().orphans(); // no parent node: no nodes to add to the drag layer

        if (parent.same(node)) {
          return;
        }

        var nodes = parent.descendants().spawnSelf().merge(parent).unmerge(node).unmerge(node.descendants());
        var edges = nodes.connectedEdges();

        if (opts.inDragLayer) {
          edges.forEach(setInDragLayer);
          nodes.forEach(setInDragLayer);
        }

        if (opts.addToList) {
          nodes.forEach(function (ele) {
            addToDragList(ele, opts);
          });
        }
      };

      var blurActiveDomElement = function blurActiveDomElement() {
        if (document.activeElement != null && document.activeElement.blur != null) {
          document.activeElement.blur();
        }
      };

      var haveMutationsApi = typeof MutationObserver !== 'undefined';
      var haveResizeObserverApi = typeof ResizeObserver !== 'undefined'; // watch for when the cy container is removed from the dom

      if (haveMutationsApi) {
        r.removeObserver = new MutationObserver(function (mutns) {
          // eslint-disable-line no-undef
          for (var i = 0; i < mutns.length; i++) {
            var mutn = mutns[i];
            var rNodes = mutn.removedNodes;

            if (rNodes) {
              for (var j = 0; j < rNodes.length; j++) {
                var rNode = rNodes[j];

                if (rNode === r.container) {
                  r.destroy();
                  break;
                }
              }
            }
          }
        });

        if (r.container.parentNode) {
          r.removeObserver.observe(r.container.parentNode, {
            childList: true
          });
        }
      } else {
        r.registerBinding(r.container, 'DOMNodeRemoved', function (e) {
          // eslint-disable-line no-unused-vars
          r.destroy();
        });
      }

      var onResize = util(function () {
        r.cy.resize();
      }, 100);

      if (haveMutationsApi) {
        r.styleObserver = new MutationObserver(onResize); // eslint-disable-line no-undef

        r.styleObserver.observe(r.container, {
          attributes: true
        });
      } // auto resize


      r.registerBinding(window, 'resize', onResize); // eslint-disable-line no-undef

      if (haveResizeObserverApi) {
        r.resizeObserver = new ResizeObserver(onResize); // eslint-disable-line no-undef

        r.resizeObserver.observe(r.container);
      }

      var forEachUp = function forEachUp(domEle, fn) {
        while (domEle != null) {
          fn(domEle);
          domEle = domEle.parentNode;
        }
      };

      var invalidateCoords = function invalidateCoords() {
        r.invalidateContainerClientCoordsCache();
      };

      forEachUp(r.container, function (domEle) {
        r.registerBinding(domEle, 'transitionend', invalidateCoords);
        r.registerBinding(domEle, 'animationend', invalidateCoords);
        r.registerBinding(domEle, 'scroll', invalidateCoords);
      }); // stop right click menu from appearing on cy

      r.registerBinding(r.container, 'contextmenu', function (e) {
        e.preventDefault();
      });

      var inBoxSelection = function inBoxSelection() {
        return r.selection[4] !== 0;
      };

      var eventInContainer = function eventInContainer(e) {
        // save cycles if mouse events aren't to be captured
        var containerPageCoords = r.findContainerClientCoords();
        var x = containerPageCoords[0];
        var y = containerPageCoords[1];
        var width = containerPageCoords[2];
        var height = containerPageCoords[3];
        var positions = e.touches ? e.touches : [e];
        var atLeastOnePosInside = false;

        for (var i = 0; i < positions.length; i++) {
          var p = positions[i];

          if (x <= p.clientX && p.clientX <= x + width && y <= p.clientY && p.clientY <= y + height) {
            atLeastOnePosInside = true;
            break;
          }
        }

        if (!atLeastOnePosInside) {
          return false;
        }

        var container = r.container;
        var target = e.target;
        var tParent = target.parentNode;
        var containerIsTarget = false;

        while (tParent) {
          if (tParent === container) {
            containerIsTarget = true;
            break;
          }

          tParent = tParent.parentNode;
        }

        if (!containerIsTarget) {
          return false;
        } // if target is outisde cy container, then this event is not for us


        return true;
      }; // Primary key


      r.registerBinding(r.container, 'mousedown', function mousedownHandler(e) {
        if (!eventInContainer(e)) {
          return;
        }

        e.preventDefault();
        blurActiveDomElement();
        r.hoverData.capture = true;
        r.hoverData.which = e.which;
        var cy = r.cy;
        var gpos = [e.clientX, e.clientY];
        var pos = r.projectIntoViewport(gpos[0], gpos[1]);
        var select = r.selection;
        var nears = r.findNearestElements(pos[0], pos[1], true, false);
        var near = nears[0];
        var draggedElements = r.dragData.possibleDragElements;
        r.hoverData.mdownPos = pos;
        r.hoverData.mdownGPos = gpos;

        var checkForTaphold = function checkForTaphold() {
          r.hoverData.tapholdCancelled = false;
          clearTimeout(r.hoverData.tapholdTimeout);
          r.hoverData.tapholdTimeout = setTimeout(function () {
            if (r.hoverData.tapholdCancelled) {
              return;
            } else {
              var ele = r.hoverData.down;

              if (ele) {
                ele.emit({
                  originalEvent: e,
                  type: 'taphold',
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              } else {
                cy.emit({
                  originalEvent: e,
                  type: 'taphold',
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              }
            }
          }, r.tapholdDuration);
        }; // Right click button


        if (e.which == 3) {
          r.hoverData.cxtStarted = true;
          var cxtEvt = {
            originalEvent: e,
            type: 'cxttapstart',
            position: {
              x: pos[0],
              y: pos[1]
            }
          };

          if (near) {
            near.activate();
            near.emit(cxtEvt);
            r.hoverData.down = near;
          } else {
            cy.emit(cxtEvt);
          }

          r.hoverData.downTime = new Date().getTime();
          r.hoverData.cxtDragged = false; // Primary button
        } else if (e.which == 1) {
          if (near) {
            near.activate();
          } // Element dragging


          {
            // If something is under the cursor and it is draggable, prepare to grab it
            if (near != null) {
              if (r.nodeIsGrabbable(near)) {
                var makeEvent = function makeEvent(type) {
                  return {
                    originalEvent: e,
                    type: type,
                    position: {
                      x: pos[0],
                      y: pos[1]
                    }
                  };
                };

                var triggerGrab = function triggerGrab(ele) {
                  ele.emit(makeEvent('grab'));
                };

                setGrabTarget(near);

                if (!near.selected()) {
                  draggedElements = r.dragData.possibleDragElements = cy.collection();
                  addNodeToDrag(near, {
                    addToList: draggedElements
                  });
                  near.emit(makeEvent('grabon')).emit(makeEvent('grab'));
                } else {
                  draggedElements = r.dragData.possibleDragElements = cy.collection();
                  var selectedNodes = cy.$(function (ele) {
                    return ele.isNode() && ele.selected() && r.nodeIsGrabbable(ele);
                  });
                  addNodesToDrag(selectedNodes, {
                    addToList: draggedElements
                  });
                  near.emit(makeEvent('grabon'));
                  selectedNodes.forEach(triggerGrab);
                }

                r.redrawHint('eles', true);
                r.redrawHint('drag', true);
              }
            }

            r.hoverData.down = near;
            r.hoverData.downs = nears;
            r.hoverData.downTime = new Date().getTime();
          }
          triggerEvents(near, ['mousedown', 'tapstart', 'vmousedown'], e, {
            x: pos[0],
            y: pos[1]
          });

          if (near == null) {
            select[4] = 1;
            r.data.bgActivePosistion = {
              x: pos[0],
              y: pos[1]
            };
            r.redrawHint('select', true);
            r.redraw();
          } else if (near.pannable()) {
            select[4] = 1; // for future pan
          }

          checkForTaphold();
        } // Initialize selection box coordinates


        select[0] = select[2] = pos[0];
        select[1] = select[3] = pos[1];
      }, false);
      r.registerBinding(window, 'mousemove', function mousemoveHandler(e) {
        // eslint-disable-line no-undef
        var capture = r.hoverData.capture;

        if (!capture && !eventInContainer(e)) {
          return;
        }

        var preventDefault = false;
        var cy = r.cy;
        var zoom = cy.zoom();
        var gpos = [e.clientX, e.clientY];
        var pos = r.projectIntoViewport(gpos[0], gpos[1]);
        var mdownPos = r.hoverData.mdownPos;
        var mdownGPos = r.hoverData.mdownGPos;
        var select = r.selection;
        var near = null;

        if (!r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting) {
          near = r.findNearestElement(pos[0], pos[1], true, false);
        }

        var last = r.hoverData.last;
        var down = r.hoverData.down;
        var disp = [pos[0] - select[2], pos[1] - select[3]];
        var draggedElements = r.dragData.possibleDragElements;
        var isOverThresholdDrag;

        if (mdownGPos) {
          var dx = gpos[0] - mdownGPos[0];
          var dx2 = dx * dx;
          var dy = gpos[1] - mdownGPos[1];
          var dy2 = dy * dy;
          var dist2 = dx2 + dy2;
          r.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;
        }

        var multSelKeyDown = isMultSelKeyDown(e);

        if (isOverThresholdDrag) {
          r.hoverData.tapholdCancelled = true;
        }

        var updateDragDelta = function updateDragDelta() {
          var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];

          if (dragDelta.length === 0) {
            dragDelta.push(disp[0]);
            dragDelta.push(disp[1]);
          } else {
            dragDelta[0] += disp[0];
            dragDelta[1] += disp[1];
          }
        };

        preventDefault = true;
        triggerEvents(near, ['mousemove', 'vmousemove', 'tapdrag'], e, {
          x: pos[0],
          y: pos[1]
        });

        var goIntoBoxMode = function goIntoBoxMode() {
          r.data.bgActivePosistion = undefined;

          if (!r.hoverData.selecting) {
            cy.emit({
              originalEvent: e,
              type: 'boxstart',
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
          }

          select[4] = 1;
          r.hoverData.selecting = true;
          r.redrawHint('select', true);
          r.redraw();
        }; // trigger context drag if rmouse down


        if (r.hoverData.which === 3) {
          // but only if over threshold
          if (isOverThresholdDrag) {
            var cxtEvt = {
              originalEvent: e,
              type: 'cxtdrag',
              position: {
                x: pos[0],
                y: pos[1]
              }
            };

            if (down) {
              down.emit(cxtEvt);
            } else {
              cy.emit(cxtEvt);
            }

            r.hoverData.cxtDragged = true;

            if (!r.hoverData.cxtOver || near !== r.hoverData.cxtOver) {
              if (r.hoverData.cxtOver) {
                r.hoverData.cxtOver.emit({
                  originalEvent: e,
                  type: 'cxtdragout',
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              }

              r.hoverData.cxtOver = near;

              if (near) {
                near.emit({
                  originalEvent: e,
                  type: 'cxtdragover',
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              }
            }
          } // Check if we are drag panning the entire graph

        } else if (r.hoverData.dragging) {
          preventDefault = true;

          if (cy.panningEnabled() && cy.userPanningEnabled()) {
            var deltaP;

            if (r.hoverData.justStartedPan) {
              var mdPos = r.hoverData.mdownPos;
              deltaP = {
                x: (pos[0] - mdPos[0]) * zoom,
                y: (pos[1] - mdPos[1]) * zoom
              };
              r.hoverData.justStartedPan = false;
            } else {
              deltaP = {
                x: disp[0] * zoom,
                y: disp[1] * zoom
              };
            }

            cy.panBy(deltaP);
            cy.emit('dragpan');
            r.hoverData.dragged = true;
          } // Needs reproject due to pan changing viewport


          pos = r.projectIntoViewport(e.clientX, e.clientY); // Checks primary button down & out of time & mouse not moved much
        } else if (select[4] == 1 && (down == null || down.pannable())) {
          if (isOverThresholdDrag) {
            if (!r.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {
              goIntoBoxMode();
            } else if (!r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {
              var allowPassthrough = allowPanningPassthrough(down, r.hoverData.downs);

              if (allowPassthrough) {
                r.hoverData.dragging = true;
                r.hoverData.justStartedPan = true;
                select[4] = 0;
                r.data.bgActivePosistion = array2point(mdownPos);
                r.redrawHint('select', true);
                r.redraw();
              }
            }

            if (down && down.pannable() && down.active()) {
              down.unactivate();
            }
          }
        } else {
          if (down && down.pannable() && down.active()) {
            down.unactivate();
          }

          if ((!down || !down.grabbed()) && near != last) {
            if (last) {
              triggerEvents(last, ['mouseout', 'tapdragout'], e, {
                x: pos[0],
                y: pos[1]
              });
            }

            if (near) {
              triggerEvents(near, ['mouseover', 'tapdragover'], e, {
                x: pos[0],
                y: pos[1]
              });
            }

            r.hoverData.last = near;
          }

          if (down) {
            if (isOverThresholdDrag) {
              // then we can take action
              if (cy.boxSelectionEnabled() && multSelKeyDown) {
                // then selection overrides
                if (down && down.grabbed()) {
                  freeDraggedElements(draggedElements);
                  down.emit('freeon');
                  draggedElements.emit('free');

                  if (r.dragData.didDrag) {
                    down.emit('dragfreeon');
                    draggedElements.emit('dragfree');
                  }
                }

                goIntoBoxMode();
              } else if (down && down.grabbed() && r.nodeIsDraggable(down)) {
                // drag node
                var justStartedDrag = !r.dragData.didDrag;

                if (justStartedDrag) {
                  r.redrawHint('eles', true);
                }

                r.dragData.didDrag = true; // indicate that we actually did drag the node

                var toTrigger = cy.collection(); // now, add the elements to the drag layer if not done already

                if (!r.hoverData.draggingEles) {
                  addNodesToDrag(draggedElements, {
                    inDragLayer: true
                  });
                }

                var totalShift = {
                  x: 0,
                  y: 0
                };

                if (number(disp[0]) && number(disp[1])) {
                  totalShift.x += disp[0];
                  totalShift.y += disp[1];

                  if (justStartedDrag) {
                    var dragDelta = r.hoverData.dragDelta;

                    if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
                      totalShift.x += dragDelta[0];
                      totalShift.y += dragDelta[1];
                    }
                  }
                }

                for (var i = 0; i < draggedElements.length; i++) {
                  var dEle = draggedElements[i];

                  if (r.nodeIsDraggable(dEle) && dEle.grabbed()) {
                    toTrigger.push(dEle);
                  }
                }

                r.hoverData.draggingEles = true;
                toTrigger.silentShift(totalShift).emit('position drag');
                r.redrawHint('drag', true);
                r.redraw();
              }
            } else {
              // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
              updateDragDelta();
            }
          } // prevent the dragging from triggering text selection on the page


          preventDefault = true;
        }

        select[2] = pos[0];
        select[3] = pos[1];

        if (preventDefault) {
          if (e.stopPropagation) e.stopPropagation();
          if (e.preventDefault) e.preventDefault();
          return false;
        }
      }, false);
      var clickTimeout, didDoubleClick, prevClickTimeStamp;
      r.registerBinding(window, 'mouseup', function mouseupHandler(e) {
        // eslint-disable-line no-undef
        var capture = r.hoverData.capture;

        if (!capture) {
          return;
        }

        r.hoverData.capture = false;
        var cy = r.cy;
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        var select = r.selection;
        var near = r.findNearestElement(pos[0], pos[1], true, false);
        var draggedElements = r.dragData.possibleDragElements;
        var down = r.hoverData.down;
        var multSelKeyDown = isMultSelKeyDown(e);

        if (r.data.bgActivePosistion) {
          r.redrawHint('select', true);
          r.redraw();
        }

        r.hoverData.tapholdCancelled = true;
        r.data.bgActivePosistion = undefined; // not active bg now

        if (down) {
          down.unactivate();
        }

        if (r.hoverData.which === 3) {
          var cxtEvt = {
            originalEvent: e,
            type: 'cxttapend',
            position: {
              x: pos[0],
              y: pos[1]
            }
          };

          if (down) {
            down.emit(cxtEvt);
          } else {
            cy.emit(cxtEvt);
          }

          if (!r.hoverData.cxtDragged) {
            var cxtTap = {
              originalEvent: e,
              type: 'cxttap',
              position: {
                x: pos[0],
                y: pos[1]
              }
            };

            if (down) {
              down.emit(cxtTap);
            } else {
              cy.emit(cxtTap);
            }
          }

          r.hoverData.cxtDragged = false;
          r.hoverData.which = null;
        } else if (r.hoverData.which === 1) {
          triggerEvents(near, ['mouseup', 'tapend', 'vmouseup'], e, {
            x: pos[0],
            y: pos[1]
          });

          if (!r.dragData.didDrag && // didn't move a node around
          !r.hoverData.dragged && // didn't pan
          !r.hoverData.selecting && // not box selection
          !r.hoverData.isOverThresholdDrag // didn't move too much
          ) {
              triggerEvents(down, ["click", "tap", "vclick"], e, {
                x: pos[0],
                y: pos[1]
              });
              didDoubleClick = false;

              if (e.timeStamp - prevClickTimeStamp <= cy.multiClickDebounceTime()) {
                clickTimeout && clearTimeout(clickTimeout);
                didDoubleClick = true;
                prevClickTimeStamp = null;
                triggerEvents(down, ["dblclick", "dbltap", "vdblclick"], e, {
                  x: pos[0],
                  y: pos[1]
                });
              } else {
                clickTimeout = setTimeout(function () {
                  if (didDoubleClick) return;
                  triggerEvents(down, ["oneclick", "onetap", "voneclick"], e, {
                    x: pos[0],
                    y: pos[1]
                  });
                }, cy.multiClickDebounceTime());
                prevClickTimeStamp = e.timeStamp;
              }
            } // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something


          if (down == null && // not mousedown on node
          !r.dragData.didDrag // didn't move the node around
          && !r.hoverData.selecting // not box selection
          && !r.hoverData.dragged // didn't pan
          && !isMultSelKeyDown(e)) {
            cy.$(isSelected).unselect(['tapunselect']);

            if (draggedElements.length > 0) {
              r.redrawHint('eles', true);
            }

            r.dragData.possibleDragElements = draggedElements = cy.collection();
          } // Single selection


          if (near == down && !r.dragData.didDrag && !r.hoverData.selecting) {
            if (near != null && near._private.selectable) {
              if (r.hoverData.dragging) ; else if (cy.selectionType() === 'additive' || multSelKeyDown) {
                if (near.selected()) {
                  near.unselect(['tapunselect']);
                } else {
                  near.select(['tapselect']);
                }
              } else {
                if (!multSelKeyDown) {
                  cy.$(isSelected).unmerge(near).unselect(['tapunselect']);
                  near.select(['tapselect']);
                }
              }

              r.redrawHint('eles', true);
            }
          }

          if (r.hoverData.selecting) {
            var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
            r.redrawHint('select', true);

            if (box.length > 0) {
              r.redrawHint('eles', true);
            }

            cy.emit({
              type: 'boxend',
              originalEvent: e,
              position: {
                x: pos[0],
                y: pos[1]
              }
            });

            var eleWouldBeSelected = function eleWouldBeSelected(ele) {
              return ele.selectable() && !ele.selected();
            };

            if (cy.selectionType() === 'additive') {
              box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
            } else {
              if (!multSelKeyDown) {
                cy.$(isSelected).unmerge(box).unselect();
              }

              box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
            } // always need redraw in case eles unselectable


            r.redraw();
          } // Cancel drag pan


          if (r.hoverData.dragging) {
            r.hoverData.dragging = false;
            r.redrawHint('select', true);
            r.redrawHint('eles', true);
            r.redraw();
          }

          if (!select[4]) {
            r.redrawHint('drag', true);
            r.redrawHint('eles', true);
            var downWasGrabbed = down && down.grabbed();
            freeDraggedElements(draggedElements);

            if (downWasGrabbed) {
              down.emit('freeon');
              draggedElements.emit('free');

              if (r.dragData.didDrag) {
                down.emit('dragfreeon');
                draggedElements.emit('dragfree');
              }
            }
          }
        } // else not right mouse


        select[4] = 0;
        r.hoverData.down = null;
        r.hoverData.cxtStarted = false;
        r.hoverData.draggingEles = false;
        r.hoverData.selecting = false;
        r.hoverData.isOverThresholdDrag = false;
        r.dragData.didDrag = false;
        r.hoverData.dragged = false;
        r.hoverData.dragDelta = [];
        r.hoverData.mdownPos = null;
        r.hoverData.mdownGPos = null;
      }, false);

      var wheelHandler = function wheelHandler(e) {
        if (r.scrollingPage) {
          return;
        } // while scrolling, ignore wheel-to-zoom


        var cy = r.cy;
        var zoom = cy.zoom();
        var pan = cy.pan();
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        var rpos = [pos[0] * zoom + pan.x, pos[1] * zoom + pan.y];

        if (r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection()) {
          // if pan dragging or cxt dragging, wheel movements make no zoom
          e.preventDefault();
          return;
        }

        if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {
          e.preventDefault();
          r.data.wheelZooming = true;
          clearTimeout(r.data.wheelTimeout);
          r.data.wheelTimeout = setTimeout(function () {
            r.data.wheelZooming = false;
            r.redrawHint('eles', true);
            r.redraw();
          }, 150);
          var diff;

          if (e.deltaY != null) {
            diff = e.deltaY / -250;
          } else if (e.wheelDeltaY != null) {
            diff = e.wheelDeltaY / 1000;
          } else {
            diff = e.wheelDelta / 1000;
          }

          diff = diff * r.wheelSensitivity;
          var needsWheelFix = e.deltaMode === 1;

          if (needsWheelFix) {
            // fixes slow wheel events on ff/linux and ff/windows
            diff *= 33;
          }

          var newZoom = cy.zoom() * Math.pow(10, diff);

          if (e.type === 'gesturechange') {
            newZoom = r.gestureStartZoom * e.scale;
          }

          cy.zoom({
            level: newZoom,
            renderedPosition: {
              x: rpos[0],
              y: rpos[1]
            }
          });
          cy.emit(e.type === 'gesturechange' ? 'pinchzoom' : 'scrollzoom');
        }
      }; // Functions to help with whether mouse wheel should trigger zooming
      // --


      r.registerBinding(r.container, 'wheel', wheelHandler, true); // disable nonstandard wheel events
      // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
      // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
      // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

      r.registerBinding(window, 'scroll', function scrollHandler(e) {
        // eslint-disable-line no-unused-vars
        r.scrollingPage = true;
        clearTimeout(r.scrollingPageTimeout);
        r.scrollingPageTimeout = setTimeout(function () {
          r.scrollingPage = false;
        }, 250);
      }, true); // desktop safari pinch to zoom start

      r.registerBinding(r.container, 'gesturestart', function gestureStartHandler(e) {
        r.gestureStartZoom = r.cy.zoom();

        if (!r.hasTouchStarted) {
          // don't affect touch devices like iphone
          e.preventDefault();
        }
      }, true);
      r.registerBinding(r.container, 'gesturechange', function (e) {
        if (!r.hasTouchStarted) {
          // don't affect touch devices like iphone
          wheelHandler(e);
        }
      }, true); // Functions to help with handling mouseout/mouseover on the Cytoscape container
      // Handle mouseout on Cytoscape container

      r.registerBinding(r.container, 'mouseout', function mouseOutHandler(e) {
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        r.cy.emit({
          originalEvent: e,
          type: 'mouseout',
          position: {
            x: pos[0],
            y: pos[1]
          }
        });
      }, false);
      r.registerBinding(r.container, 'mouseover', function mouseOverHandler(e) {
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        r.cy.emit({
          originalEvent: e,
          type: 'mouseover',
          position: {
            x: pos[0],
            y: pos[1]
          }
        });
      }, false);
      var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom

      var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom

      var center1, modelCenter1; // center point on start pinch to zoom

      var offsetLeft, offsetTop;
      var containerWidth, containerHeight;
      var twoFingersStartInside;

      var distance = function distance(x1, y1, x2, y2) {
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      };

      var distanceSq = function distanceSq(x1, y1, x2, y2) {
        return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
      };

      var touchstartHandler;
      r.registerBinding(r.container, 'touchstart', touchstartHandler = function touchstartHandler(e) {
        r.hasTouchStarted = true;

        if (!eventInContainer(e)) {
          return;
        }

        blurActiveDomElement();
        r.touchData.capture = true;
        r.data.bgActivePosistion = undefined;
        var cy = r.cy;
        var now = r.touchData.now;
        var earlier = r.touchData.earlier;

        if (e.touches[0]) {
          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
          now[0] = pos[0];
          now[1] = pos[1];
        }

        if (e.touches[1]) {
          var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
          now[2] = pos[0];
          now[3] = pos[1];
        }

        if (e.touches[2]) {
          var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
          now[4] = pos[0];
          now[5] = pos[1];
        } // record starting points for pinch-to-zoom


        if (e.touches[1]) {
          r.touchData.singleTouchMoved = true;
          freeDraggedElements(r.dragData.touchDragEles);
          var offsets = r.findContainerClientCoords();
          offsetLeft = offsets[0];
          offsetTop = offsets[1];
          containerWidth = offsets[2];
          containerHeight = offsets[3];
          f1x1 = e.touches[0].clientX - offsetLeft;
          f1y1 = e.touches[0].clientY - offsetTop;
          f2x1 = e.touches[1].clientX - offsetLeft;
          f2y1 = e.touches[1].clientY - offsetTop;
          twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;
          var pan = cy.pan();
          var zoom = cy.zoom();
          distance1 = distance(f1x1, f1y1, f2x1, f2y1);
          distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);
          center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];
          modelCenter1 = [(center1[0] - pan.x) / zoom, (center1[1] - pan.y) / zoom]; // consider context tap

          var cxtDistThreshold = 200;
          var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;

          if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {
            var near1 = r.findNearestElement(now[0], now[1], true, true);
            var near2 = r.findNearestElement(now[2], now[3], true, true);

            if (near1 && near1.isNode()) {
              near1.activate().emit({
                originalEvent: e,
                type: 'cxttapstart',
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
              r.touchData.start = near1;
            } else if (near2 && near2.isNode()) {
              near2.activate().emit({
                originalEvent: e,
                type: 'cxttapstart',
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
              r.touchData.start = near2;
            } else {
              cy.emit({
                originalEvent: e,
                type: 'cxttapstart',
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
            }

            if (r.touchData.start) {
              r.touchData.start._private.grabbed = false;
            }

            r.touchData.cxt = true;
            r.touchData.cxtDragged = false;
            r.data.bgActivePosistion = undefined;
            r.redraw();
            return;
          }
        }

        if (e.touches[2]) {
          // ignore
          // safari on ios pans the page otherwise (normally you should be able to preventdefault on touchmove...)
          if (cy.boxSelectionEnabled()) {
            e.preventDefault();
          }
        } else if (e.touches[1]) ; else if (e.touches[0]) {
          var nears = r.findNearestElements(now[0], now[1], true, true);
          var near = nears[0];

          if (near != null) {
            near.activate();
            r.touchData.start = near;
            r.touchData.starts = nears;

            if (r.nodeIsGrabbable(near)) {
              var draggedEles = r.dragData.touchDragEles = cy.collection();
              var selectedNodes = null;
              r.redrawHint('eles', true);
              r.redrawHint('drag', true);

              if (near.selected()) {
                // reset drag elements, since near will be added again
                selectedNodes = cy.$(function (ele) {
                  return ele.selected() && r.nodeIsGrabbable(ele);
                });
                addNodesToDrag(selectedNodes, {
                  addToList: draggedEles
                });
              } else {
                addNodeToDrag(near, {
                  addToList: draggedEles
                });
              }

              setGrabTarget(near);

              var makeEvent = function makeEvent(type) {
                return {
                  originalEvent: e,
                  type: type,
                  position: {
                    x: now[0],
                    y: now[1]
                  }
                };
              };

              near.emit(makeEvent('grabon'));

              if (selectedNodes) {
                selectedNodes.forEach(function (n) {
                  n.emit(makeEvent('grab'));
                });
              } else {
                near.emit(makeEvent('grab'));
              }
            }
          }

          triggerEvents(near, ['touchstart', 'tapstart', 'vmousedown'], e, {
            x: now[0],
            y: now[1]
          });

          if (near == null) {
            r.data.bgActivePosistion = {
              x: pos[0],
              y: pos[1]
            };
            r.redrawHint('select', true);
            r.redraw();
          } // Tap, taphold
          // -----


          r.touchData.singleTouchMoved = false;
          r.touchData.singleTouchStartTime = +new Date();
          clearTimeout(r.touchData.tapholdTimeout);
          r.touchData.tapholdTimeout = setTimeout(function () {
            if (r.touchData.singleTouchMoved === false && !r.pinching // if pinching, then taphold unselect shouldn't take effect
            && !r.touchData.selecting // box selection shouldn't allow taphold through
            ) {
                triggerEvents(r.touchData.start, ['taphold'], e, {
                  x: now[0],
                  y: now[1]
                });
              }
          }, r.tapholdDuration);
        }

        if (e.touches.length >= 1) {
          var sPos = r.touchData.startPosition = [];

          for (var i = 0; i < now.length; i++) {
            sPos[i] = earlier[i] = now[i];
          }

          var touch0 = e.touches[0];
          r.touchData.startGPosition = [touch0.clientX, touch0.clientY];
        }
      }, false);
      var touchmoveHandler;
      r.registerBinding(window, 'touchmove', touchmoveHandler = function touchmoveHandler(e) {
        // eslint-disable-line no-undef
        var capture = r.touchData.capture;

        if (!capture && !eventInContainer(e)) {
          return;
        }

        var select = r.selection;
        var cy = r.cy;
        var now = r.touchData.now;
        var earlier = r.touchData.earlier;
        var zoom = cy.zoom();

        if (e.touches[0]) {
          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
          now[0] = pos[0];
          now[1] = pos[1];
        }

        if (e.touches[1]) {
          var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
          now[2] = pos[0];
          now[3] = pos[1];
        }

        if (e.touches[2]) {
          var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
          now[4] = pos[0];
          now[5] = pos[1];
        }

        var startGPos = r.touchData.startGPosition;
        var isOverThresholdDrag;

        if (capture && e.touches[0] && startGPos) {
          var disp = [];

          for (var j = 0; j < now.length; j++) {
            disp[j] = now[j] - earlier[j];
          }

          var dx = e.touches[0].clientX - startGPos[0];
          var dx2 = dx * dx;
          var dy = e.touches[0].clientY - startGPos[1];
          var dy2 = dy * dy;
          var dist2 = dx2 + dy2;
          isOverThresholdDrag = dist2 >= r.touchTapThreshold2;
        } // context swipe cancelling


        if (capture && r.touchData.cxt) {
          e.preventDefault();
          var f1x2 = e.touches[0].clientX - offsetLeft,
              f1y2 = e.touches[0].clientY - offsetTop;
          var f2x2 = e.touches[1].clientX - offsetLeft,
              f2y2 = e.touches[1].clientY - offsetTop; // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );

          var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);
          var factorSq = distance2Sq / distance1Sq;
          var distThreshold = 150;
          var distThresholdSq = distThreshold * distThreshold;
          var factorThreshold = 1.5;
          var factorThresholdSq = factorThreshold * factorThreshold; // cancel ctx gestures if the distance b/t the fingers increases

          if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {
            r.touchData.cxt = false;
            r.data.bgActivePosistion = undefined;
            r.redrawHint('select', true);
            var cxtEvt = {
              originalEvent: e,
              type: 'cxttapend',
              position: {
                x: now[0],
                y: now[1]
              }
            };

            if (r.touchData.start) {
              r.touchData.start.unactivate().emit(cxtEvt);
              r.touchData.start = null;
            } else {
              cy.emit(cxtEvt);
            }
          }
        } // context swipe


        if (capture && r.touchData.cxt) {
          var cxtEvt = {
            originalEvent: e,
            type: 'cxtdrag',
            position: {
              x: now[0],
              y: now[1]
            }
          };
          r.data.bgActivePosistion = undefined;
          r.redrawHint('select', true);

          if (r.touchData.start) {
            r.touchData.start.emit(cxtEvt);
          } else {
            cy.emit(cxtEvt);
          }

          if (r.touchData.start) {
            r.touchData.start._private.grabbed = false;
          }

          r.touchData.cxtDragged = true;
          var near = r.findNearestElement(now[0], now[1], true, true);

          if (!r.touchData.cxtOver || near !== r.touchData.cxtOver) {
            if (r.touchData.cxtOver) {
              r.touchData.cxtOver.emit({
                originalEvent: e,
                type: 'cxtdragout',
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
            }

            r.touchData.cxtOver = near;

            if (near) {
              near.emit({
                originalEvent: e,
                type: 'cxtdragover',
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
            }
          } // box selection

        } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {
          e.preventDefault();
          r.data.bgActivePosistion = undefined;
          this.lastThreeTouch = +new Date();

          if (!r.touchData.selecting) {
            cy.emit({
              originalEvent: e,
              type: 'boxstart',
              position: {
                x: now[0],
                y: now[1]
              }
            });
          }

          r.touchData.selecting = true;
          r.touchData.didSelect = true;
          select[4] = 1;

          if (!select || select.length === 0 || select[0] === undefined) {
            select[0] = (now[0] + now[2] + now[4]) / 3;
            select[1] = (now[1] + now[3] + now[5]) / 3;
            select[2] = (now[0] + now[2] + now[4]) / 3 + 1;
            select[3] = (now[1] + now[3] + now[5]) / 3 + 1;
          } else {
            select[2] = (now[0] + now[2] + now[4]) / 3;
            select[3] = (now[1] + now[3] + now[5]) / 3;
          }

          r.redrawHint('select', true);
          r.redraw(); // pinch to zoom
        } else if (capture && e.touches[1] && !r.touchData.didSelect // don't allow box selection to degrade to pinch-to-zoom
        && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {
          // two fingers => pinch to zoom
          e.preventDefault();
          r.data.bgActivePosistion = undefined;
          r.redrawHint('select', true);
          var draggedEles = r.dragData.touchDragEles;

          if (draggedEles) {
            r.redrawHint('drag', true);

            for (var i = 0; i < draggedEles.length; i++) {
              var de_p = draggedEles[i]._private;
              de_p.grabbed = false;
              de_p.rscratch.inDragLayer = false;
            }
          }

          var _start = r.touchData.start; // (x2, y2) for fingers 1 and 2

          var f1x2 = e.touches[0].clientX - offsetLeft,
              f1y2 = e.touches[0].clientY - offsetTop;
          var f2x2 = e.touches[1].clientX - offsetLeft,
              f2y2 = e.touches[1].clientY - offsetTop;
          var distance2 = distance(f1x2, f1y2, f2x2, f2y2); // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
          // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );

          var factor = distance2 / distance1;

          if (twoFingersStartInside) {
            // delta finger1
            var df1x = f1x2 - f1x1;
            var df1y = f1y2 - f1y1; // delta finger 2

            var df2x = f2x2 - f2x1;
            var df2y = f2y2 - f2y1; // translation is the normalised vector of the two fingers movement
            // i.e. so pinching cancels out and moving together pans

            var tx = (df1x + df2x) / 2;
            var ty = (df1y + df2y) / 2; // now calculate the zoom

            var zoom1 = cy.zoom();
            var zoom2 = zoom1 * factor;
            var pan1 = cy.pan(); // the model center point converted to the current rendered pos

            var ctrx = modelCenter1[0] * zoom1 + pan1.x;
            var ctry = modelCenter1[1] * zoom1 + pan1.y;
            var pan2 = {
              x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
              y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry
            }; // remove dragged eles

            if (_start && _start.active()) {
              var draggedEles = r.dragData.touchDragEles;
              freeDraggedElements(draggedEles);
              r.redrawHint('drag', true);
              r.redrawHint('eles', true);

              _start.unactivate().emit('freeon');

              draggedEles.emit('free');

              if (r.dragData.didDrag) {
                _start.emit('dragfreeon');

                draggedEles.emit('dragfree');
              }
            }

            cy.viewport({
              zoom: zoom2,
              pan: pan2,
              cancelOnFailedZoom: true
            });
            cy.emit('pinchzoom');
            distance1 = distance2;
            f1x1 = f1x2;
            f1y1 = f1y2;
            f2x1 = f2x2;
            f2y1 = f2y2;
            r.pinching = true;
          } // Re-project


          if (e.touches[0]) {
            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
            now[0] = pos[0];
            now[1] = pos[1];
          }

          if (e.touches[1]) {
            var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
            now[2] = pos[0];
            now[3] = pos[1];
          }

          if (e.touches[2]) {
            var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
            now[4] = pos[0];
            now[5] = pos[1];
          }
        } else if (e.touches[0] && !r.touchData.didSelect // don't allow box selection to degrade to single finger events like panning
        ) {
            var start = r.touchData.start;
            var last = r.touchData.last;
            var near;

            if (!r.hoverData.draggingEles && !r.swipePanning) {
              near = r.findNearestElement(now[0], now[1], true, true);
            }

            if (capture && start != null) {
              e.preventDefault();
            } // dragging nodes


            if (capture && start != null && r.nodeIsDraggable(start)) {
              if (isOverThresholdDrag) {
                // then dragging can happen
                var draggedEles = r.dragData.touchDragEles;
                var justStartedDrag = !r.dragData.didDrag;

                if (justStartedDrag) {
                  addNodesToDrag(draggedEles, {
                    inDragLayer: true
                  });
                }

                r.dragData.didDrag = true;
                var totalShift = {
                  x: 0,
                  y: 0
                };

                if (number(disp[0]) && number(disp[1])) {
                  totalShift.x += disp[0];
                  totalShift.y += disp[1];

                  if (justStartedDrag) {
                    r.redrawHint('eles', true);
                    var dragDelta = r.touchData.dragDelta;

                    if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
                      totalShift.x += dragDelta[0];
                      totalShift.y += dragDelta[1];
                    }
                  }
                }

                r.hoverData.draggingEles = true;
                draggedEles.silentShift(totalShift).emit('position drag');
                r.redrawHint('drag', true);

                if (r.touchData.startPosition[0] == earlier[0] && r.touchData.startPosition[1] == earlier[1]) {
                  r.redrawHint('eles', true);
                }

                r.redraw();
              } else {
                // otherise keep track of drag delta for later
                var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];

                if (dragDelta.length === 0) {
                  dragDelta.push(disp[0]);
                  dragDelta.push(disp[1]);
                } else {
                  dragDelta[0] += disp[0];
                  dragDelta[1] += disp[1];
                }
              }
            } // touchmove


            {
              triggerEvents(start || near, ['touchmove', 'tapdrag', 'vmousemove'], e, {
                x: now[0],
                y: now[1]
              });

              if ((!start || !start.grabbed()) && near != last) {
                if (last) {
                  last.emit({
                    originalEvent: e,
                    type: 'tapdragout',
                    position: {
                      x: now[0],
                      y: now[1]
                    }
                  });
                }

                if (near) {
                  near.emit({
                    originalEvent: e,
                    type: 'tapdragover',
                    position: {
                      x: now[0],
                      y: now[1]
                    }
                  });
                }
              }

              r.touchData.last = near;
            } // check to cancel taphold

            if (capture) {
              for (var i = 0; i < now.length; i++) {
                if (now[i] && r.touchData.startPosition[i] && isOverThresholdDrag) {
                  r.touchData.singleTouchMoved = true;
                }
              }
            } // panning


            if (capture && (start == null || start.pannable()) && cy.panningEnabled() && cy.userPanningEnabled()) {
              var allowPassthrough = allowPanningPassthrough(start, r.touchData.starts);

              if (allowPassthrough) {
                e.preventDefault();

                if (!r.data.bgActivePosistion) {
                  r.data.bgActivePosistion = array2point(r.touchData.startPosition);
                }

                if (r.swipePanning) {
                  cy.panBy({
                    x: disp[0] * zoom,
                    y: disp[1] * zoom
                  });
                  cy.emit('dragpan');
                } else if (isOverThresholdDrag) {
                  r.swipePanning = true;
                  cy.panBy({
                    x: dx * zoom,
                    y: dy * zoom
                  });
                  cy.emit('dragpan');

                  if (start) {
                    start.unactivate();
                    r.redrawHint('select', true);
                    r.touchData.start = null;
                  }
                }
              } // Re-project


              var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
              now[0] = pos[0];
              now[1] = pos[1];
            }
          }

        for (var j = 0; j < now.length; j++) {
          earlier[j] = now[j];
        } // the active bg indicator should be removed when making a swipe that is neither for dragging nodes or panning


        if (capture && e.touches.length > 0 && !r.hoverData.draggingEles && !r.swipePanning && r.data.bgActivePosistion != null) {
          r.data.bgActivePosistion = undefined;
          r.redrawHint('select', true);
          r.redraw();
        }
      }, false);
      var touchcancelHandler;
      r.registerBinding(window, 'touchcancel', touchcancelHandler = function touchcancelHandler(e) {
        // eslint-disable-line no-unused-vars
        var start = r.touchData.start;
        r.touchData.capture = false;

        if (start) {
          start.unactivate();
        }
      });
      var touchendHandler, didDoubleTouch, touchTimeout, prevTouchTimeStamp;
      r.registerBinding(window, 'touchend', touchendHandler = function touchendHandler(e) {
        // eslint-disable-line no-unused-vars
        var start = r.touchData.start;
        var capture = r.touchData.capture;

        if (capture) {
          if (e.touches.length === 0) {
            r.touchData.capture = false;
          }

          e.preventDefault();
        } else {
          return;
        }

        var select = r.selection;
        r.swipePanning = false;
        r.hoverData.draggingEles = false;
        var cy = r.cy;
        var zoom = cy.zoom();
        var now = r.touchData.now;
        var earlier = r.touchData.earlier;

        if (e.touches[0]) {
          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
          now[0] = pos[0];
          now[1] = pos[1];
        }

        if (e.touches[1]) {
          var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
          now[2] = pos[0];
          now[3] = pos[1];
        }

        if (e.touches[2]) {
          var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
          now[4] = pos[0];
          now[5] = pos[1];
        }

        if (start) {
          start.unactivate();
        }

        var ctxTapend;

        if (r.touchData.cxt) {
          ctxTapend = {
            originalEvent: e,
            type: 'cxttapend',
            position: {
              x: now[0],
              y: now[1]
            }
          };

          if (start) {
            start.emit(ctxTapend);
          } else {
            cy.emit(ctxTapend);
          }

          if (!r.touchData.cxtDragged) {
            var ctxTap = {
              originalEvent: e,
              type: 'cxttap',
              position: {
                x: now[0],
                y: now[1]
              }
            };

            if (start) {
              start.emit(ctxTap);
            } else {
              cy.emit(ctxTap);
            }
          }

          if (r.touchData.start) {
            r.touchData.start._private.grabbed = false;
          }

          r.touchData.cxt = false;
          r.touchData.start = null;
          r.redraw();
          return;
        } // no more box selection if we don't have three fingers


        if (!e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting) {
          r.touchData.selecting = false;
          var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
          select[0] = undefined;
          select[1] = undefined;
          select[2] = undefined;
          select[3] = undefined;
          select[4] = 0;
          r.redrawHint('select', true);
          cy.emit({
            type: 'boxend',
            originalEvent: e,
            position: {
              x: now[0],
              y: now[1]
            }
          });

          var eleWouldBeSelected = function eleWouldBeSelected(ele) {
            return ele.selectable() && !ele.selected();
          };

          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');

          if (box.nonempty()) {
            r.redrawHint('eles', true);
          }

          r.redraw();
        }

        if (start != null) {
          start.unactivate();
        }

        if (e.touches[2]) {
          r.data.bgActivePosistion = undefined;
          r.redrawHint('select', true);
        } else if (e.touches[1]) ; else if (e.touches[0]) ; else if (!e.touches[0]) {
          r.data.bgActivePosistion = undefined;
          r.redrawHint('select', true);
          var draggedEles = r.dragData.touchDragEles;

          if (start != null) {
            var startWasGrabbed = start._private.grabbed;
            freeDraggedElements(draggedEles);
            r.redrawHint('drag', true);
            r.redrawHint('eles', true);

            if (startWasGrabbed) {
              start.emit('freeon');
              draggedEles.emit('free');

              if (r.dragData.didDrag) {
                start.emit('dragfreeon');
                draggedEles.emit('dragfree');
              }
            }

            triggerEvents(start, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
              x: now[0],
              y: now[1]
            });
            start.unactivate();
            r.touchData.start = null;
          } else {
            var near = r.findNearestElement(now[0], now[1], true, true);
            triggerEvents(near, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
              x: now[0],
              y: now[1]
            });
          }

          var dx = r.touchData.startPosition[0] - now[0];
          var dx2 = dx * dx;
          var dy = r.touchData.startPosition[1] - now[1];
          var dy2 = dy * dy;
          var dist2 = dx2 + dy2;
          var rdist2 = dist2 * zoom * zoom; // Tap event, roughly same as mouse click event for touch

          if (!r.touchData.singleTouchMoved) {
            if (!start) {
              cy.$(':selected').unselect(['tapunselect']);
            }

            triggerEvents(start, ['tap', 'vclick'], e, {
              x: now[0],
              y: now[1]
            });
            didDoubleTouch = false;

            if (e.timeStamp - prevTouchTimeStamp <= cy.multiClickDebounceTime()) {
              touchTimeout && clearTimeout(touchTimeout);
              didDoubleTouch = true;
              prevTouchTimeStamp = null;
              triggerEvents(start, ['dbltap', 'vdblclick'], e, {
                x: now[0],
                y: now[1]
              });
            } else {
              touchTimeout = setTimeout(function () {
                if (didDoubleTouch) return;
                triggerEvents(start, ['onetap', 'voneclick'], e, {
                  x: now[0],
                  y: now[1]
                });
              }, cy.multiClickDebounceTime());
              prevTouchTimeStamp = e.timeStamp;
            }
          } // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance


          if (start != null && !r.dragData.didDrag // didn't drag nodes around
          && start._private.selectable && rdist2 < r.touchTapThreshold2 && !r.pinching // pinch to zoom should not affect selection
          ) {
              if (cy.selectionType() === 'single') {
                cy.$(isSelected).unmerge(start).unselect(['tapunselect']);
                start.select(['tapselect']);
              } else {
                if (start.selected()) {
                  start.unselect(['tapunselect']);
                } else {
                  start.select(['tapselect']);
                }
              }

              r.redrawHint('eles', true);
            }

          r.touchData.singleTouchMoved = true;
        }

        for (var j = 0; j < now.length; j++) {
          earlier[j] = now[j];
        }

        r.dragData.didDrag = false; // reset for next touchstart

        if (e.touches.length === 0) {
          r.touchData.dragDelta = [];
          r.touchData.startPosition = null;
          r.touchData.startGPosition = null;
          r.touchData.didSelect = false;
        }

        if (e.touches.length < 2) {
          if (e.touches.length === 1) {
            // the old start global pos'n may not be the same finger that remains
            r.touchData.startGPosition = [e.touches[0].clientX, e.touches[0].clientY];
          }

          r.pinching = false;
          r.redrawHint('eles', true);
          r.redraw();
        } //r.redraw();

      }, false); // fallback compatibility layer for ms pointer events

      if (typeof TouchEvent === 'undefined') {
        var pointers = [];

        var makeTouch = function makeTouch(e) {
          return {
            clientX: e.clientX,
            clientY: e.clientY,
            force: 1,
            identifier: e.pointerId,
            pageX: e.pageX,
            pageY: e.pageY,
            radiusX: e.width / 2,
            radiusY: e.height / 2,
            screenX: e.screenX,
            screenY: e.screenY,
            target: e.target
          };
        };

        var makePointer = function makePointer(e) {
          return {
            event: e,
            touch: makeTouch(e)
          };
        };

        var addPointer = function addPointer(e) {
          pointers.push(makePointer(e));
        };

        var removePointer = function removePointer(e) {
          for (var i = 0; i < pointers.length; i++) {
            var p = pointers[i];

            if (p.event.pointerId === e.pointerId) {
              pointers.splice(i, 1);
              return;
            }
          }
        };

        var updatePointer = function updatePointer(e) {
          var p = pointers.filter(function (p) {
            return p.event.pointerId === e.pointerId;
          })[0];
          p.event = e;
          p.touch = makeTouch(e);
        };

        var addTouchesToEvent = function addTouchesToEvent(e) {
          e.touches = pointers.map(function (p) {
            return p.touch;
          });
        };

        var pointerIsMouse = function pointerIsMouse(e) {
          return e.pointerType === 'mouse' || e.pointerType === 4;
        };

        r.registerBinding(r.container, 'pointerdown', function (e) {
          if (pointerIsMouse(e)) {
            return;
          } // mouse already handled


          e.preventDefault();
          addPointer(e);
          addTouchesToEvent(e);
          touchstartHandler(e);
        });
        r.registerBinding(r.container, 'pointerup', function (e) {
          if (pointerIsMouse(e)) {
            return;
          } // mouse already handled


          removePointer(e);
          addTouchesToEvent(e);
          touchendHandler(e);
        });
        r.registerBinding(r.container, 'pointercancel', function (e) {
          if (pointerIsMouse(e)) {
            return;
          } // mouse already handled


          removePointer(e);
          addTouchesToEvent(e);
          touchcancelHandler(e);
        });
        r.registerBinding(r.container, 'pointermove', function (e) {
          if (pointerIsMouse(e)) {
            return;
          } // mouse already handled


          e.preventDefault();
          updatePointer(e);
          addTouchesToEvent(e);
          touchmoveHandler(e);
        });
      }
    };

    var BRp$d = {};

    BRp$d.generatePolygon = function (name, points) {
      return this.nodeShapes[name] = {
        renderer: this,
        name: name,
        points: points,
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl('polygon', context, centerX, centerY, width, height, this.points);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          return polygonIntersectLine(x, y, this.points, nodeX, nodeY, width / 2, height / 2, padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          return pointInsidePolygon(x, y, this.points, centerX, centerY, width, height, [0, -1], padding);
        }
      };
    };

    BRp$d.generateEllipse = function () {
      return this.nodeShapes['ellipse'] = {
        renderer: this,
        name: 'ellipse',
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          return intersectLineEllipse(x, y, nodeX, nodeY, width / 2 + padding, height / 2 + padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          return checkInEllipse(x, y, width, height, centerX, centerY, padding);
        }
      };
    };

    BRp$d.generateRoundPolygon = function (name, points) {
      // Pre-compute control points
      // Since these points depend on the radius length (which in turns depend on the width/height of the node) we will only pre-compute
      // the unit vectors.
      // For simplicity the layout will be:
      // [ p0, UnitVectorP0P1, p1, UniVectorP1P2, ..., pn, UnitVectorPnP0 ]
      var allPoints = new Array(points.length * 2);

      for (var i = 0; i < points.length / 2; i++) {
        var sourceIndex = i * 2;
        var destIndex = void 0;

        if (i < points.length / 2 - 1) {
          destIndex = (i + 1) * 2;
        } else {
          destIndex = 0;
        }

        allPoints[i * 4] = points[sourceIndex];
        allPoints[i * 4 + 1] = points[sourceIndex + 1];
        var xDest = points[destIndex] - points[sourceIndex];
        var yDest = points[destIndex + 1] - points[sourceIndex + 1];
        var norm = Math.sqrt(xDest * xDest + yDest * yDest);
        allPoints[i * 4 + 2] = xDest / norm;
        allPoints[i * 4 + 3] = yDest / norm;
      }

      return this.nodeShapes[name] = {
        renderer: this,
        name: name,
        points: allPoints,
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl('round-polygon', context, centerX, centerY, width, height, this.points);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          return roundPolygonIntersectLine(x, y, this.points, nodeX, nodeY, width, height);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          return pointInsideRoundPolygon(x, y, this.points, centerX, centerY, width, height);
        }
      };
    };

    BRp$d.generateRoundRectangle = function () {
      return this.nodeShapes['round-rectangle'] = this.nodeShapes['roundrectangle'] = {
        renderer: this,
        name: 'round-rectangle',
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          var cornerRadius = getRoundRectangleRadius(width, height);
          var diam = cornerRadius * 2; // Check hBox

          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
            return true;
          } // Check vBox


          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
            return true;
          } // Check top left quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
            return true;
          } // Check top right quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
            return true;
          } // Check bottom right quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          } // Check bottom left quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          }

          return false;
        }
      };
    };

    BRp$d.generateCutRectangle = function () {
      return this.nodeShapes['cut-rectangle'] = this.nodeShapes['cutrectangle'] = {
        renderer: this,
        name: 'cut-rectangle',
        cornerLength: getCutRectangleCornerLength(),
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        generateCutTrianglePts: function generateCutTrianglePts(width, height, centerX, centerY) {
          var cl = this.cornerLength;
          var hh = height / 2;
          var hw = width / 2;
          var xBegin = centerX - hw;
          var xEnd = centerX + hw;
          var yBegin = centerY - hh;
          var yEnd = centerY + hh; // points are in clockwise order, inner (imaginary) triangle pt on [4, 5]

          return {
            topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],
            topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],
            bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],
            bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]
          };
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          var cPts = this.generateCutTrianglePts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);
          var pts = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);
          return polygonIntersectLine(x, y, pts, nodeX, nodeY);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          // Check hBox
          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * this.cornerLength, [0, -1], padding)) {
            return true;
          } // Check vBox


          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * this.cornerLength, height, [0, -1], padding)) {
            return true;
          }

          var cutTrianglePts = this.generateCutTrianglePts(width, height, centerX, centerY);
          return pointInsidePolygonPoints(x, y, cutTrianglePts.topLeft) || pointInsidePolygonPoints(x, y, cutTrianglePts.topRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomLeft);
        }
      };
    };

    BRp$d.generateBarrel = function () {
      return this.nodeShapes['barrel'] = {
        renderer: this,
        name: 'barrel',
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          // use two fixed t values for the bezier curve approximation
          var t0 = 0.15;
          var t1 = 0.5;
          var t2 = 0.85;
          var bPts = this.generateBarrelBezierPts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);

          var approximateBarrelCurvePts = function approximateBarrelCurvePts(pts) {
            // approximate curve pts based on the two t values
            var m0 = qbezierPtAt({
              x: pts[0],
              y: pts[1]
            }, {
              x: pts[2],
              y: pts[3]
            }, {
              x: pts[4],
              y: pts[5]
            }, t0);
            var m1 = qbezierPtAt({
              x: pts[0],
              y: pts[1]
            }, {
              x: pts[2],
              y: pts[3]
            }, {
              x: pts[4],
              y: pts[5]
            }, t1);
            var m2 = qbezierPtAt({
              x: pts[0],
              y: pts[1]
            }, {
              x: pts[2],
              y: pts[3]
            }, {
              x: pts[4],
              y: pts[5]
            }, t2);
            return [pts[0], pts[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts[4], pts[5]];
          };

          var pts = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));
          return polygonIntersectLine(x, y, pts, nodeX, nodeY);
        },
        generateBarrelBezierPts: function generateBarrelBezierPts(width, height, centerX, centerY) {
          var hh = height / 2;
          var hw = width / 2;
          var xBegin = centerX - hw;
          var xEnd = centerX + hw;
          var yBegin = centerY - hh;
          var yEnd = centerY + hh;
          var curveConstants = getBarrelCurveConstants(width, height);
          var hOffset = curveConstants.heightOffset;
          var wOffset = curveConstants.widthOffset;
          var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width; // points are in clockwise order, inner (imaginary) control pt on [4, 5]

          var pts = {
            topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],
            topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],
            bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],
            bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]
          };
          pts.topLeft.isTop = true;
          pts.topRight.isTop = true;
          pts.bottomLeft.isBottom = true;
          pts.bottomRight.isBottom = true;
          return pts;
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          var curveConstants = getBarrelCurveConstants(width, height);
          var hOffset = curveConstants.heightOffset;
          var wOffset = curveConstants.widthOffset; // Check hBox

          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * hOffset, [0, -1], padding)) {
            return true;
          } // Check vBox


          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * wOffset, height, [0, -1], padding)) {
            return true;
          }

          var barrelCurvePts = this.generateBarrelBezierPts(width, height, centerX, centerY);

          var getCurveT = function getCurveT(x, y, curvePts) {
            var x0 = curvePts[4];
            var x1 = curvePts[2];
            var x2 = curvePts[0];
            var y0 = curvePts[5]; // var y1 = curvePts[ 3 ];

            var y2 = curvePts[1];
            var xMin = Math.min(x0, x2);
            var xMax = Math.max(x0, x2);
            var yMin = Math.min(y0, y2);
            var yMax = Math.max(y0, y2);

            if (xMin <= x && x <= xMax && yMin <= y && y <= yMax) {
              var coeff = bezierPtsToQuadCoeff(x0, x1, x2);
              var roots = solveQuadratic(coeff[0], coeff[1], coeff[2], x);
              var validRoots = roots.filter(function (r) {
                return 0 <= r && r <= 1;
              });

              if (validRoots.length > 0) {
                return validRoots[0];
              }
            }

            return null;
          };

          var curveRegions = Object.keys(barrelCurvePts);

          for (var i = 0; i < curveRegions.length; i++) {
            var corner = curveRegions[i];
            var cornerPts = barrelCurvePts[corner];
            var t = getCurveT(x, y, cornerPts);

            if (t == null) {
              continue;
            }

            var y0 = cornerPts[5];
            var y1 = cornerPts[3];
            var y2 = cornerPts[1];
            var bezY = qbezierAt(y0, y1, y2, t);

            if (cornerPts.isTop && bezY <= y) {
              return true;
            }

            if (cornerPts.isBottom && y <= bezY) {
              return true;
            }
          }

          return false;
        }
      };
    };

    BRp$d.generateBottomRoundrectangle = function () {
      return this.nodeShapes['bottom-round-rectangle'] = this.nodeShapes['bottomroundrectangle'] = {
        renderer: this,
        name: 'bottom-round-rectangle',
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          var topStartX = nodeX - (width / 2 + padding);
          var topStartY = nodeY - (height / 2 + padding);
          var topEndY = topStartY;
          var topEndX = nodeX + (width / 2 + padding);
          var topIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

          if (topIntersections.length > 0) {
            return topIntersections;
          }

          return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          var cornerRadius = getRoundRectangleRadius(width, height);
          var diam = 2 * cornerRadius; // Check hBox

          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
            return true;
          } // Check vBox


          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
            return true;
          } // check non-rounded top side


          var outerWidth = width / 2 + 2 * padding;
          var outerHeight = height / 2 + 2 * padding;
          var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];

          if (pointInsidePolygonPoints(x, y, points)) {
            return true;
          } // Check bottom right quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          } // Check bottom left quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          }

          return false;
        }
      };
    };

    BRp$d.registerNodeShapes = function () {
      var nodeShapes = this.nodeShapes = {};
      var renderer = this;
      this.generateEllipse();
      this.generatePolygon('triangle', generateUnitNgonPointsFitToSquare(3, 0));
      this.generateRoundPolygon('round-triangle', generateUnitNgonPointsFitToSquare(3, 0));
      this.generatePolygon('rectangle', generateUnitNgonPointsFitToSquare(4, 0));
      nodeShapes['square'] = nodeShapes['rectangle'];
      this.generateRoundRectangle();
      this.generateCutRectangle();
      this.generateBarrel();
      this.generateBottomRoundrectangle();
      {
        var diamondPoints = [0, 1, 1, 0, 0, -1, -1, 0];
        this.generatePolygon('diamond', diamondPoints);
        this.generateRoundPolygon('round-diamond', diamondPoints);
      }
      this.generatePolygon('pentagon', generateUnitNgonPointsFitToSquare(5, 0));
      this.generateRoundPolygon('round-pentagon', generateUnitNgonPointsFitToSquare(5, 0));
      this.generatePolygon('hexagon', generateUnitNgonPointsFitToSquare(6, 0));
      this.generateRoundPolygon('round-hexagon', generateUnitNgonPointsFitToSquare(6, 0));
      this.generatePolygon('heptagon', generateUnitNgonPointsFitToSquare(7, 0));
      this.generateRoundPolygon('round-heptagon', generateUnitNgonPointsFitToSquare(7, 0));
      this.generatePolygon('octagon', generateUnitNgonPointsFitToSquare(8, 0));
      this.generateRoundPolygon('round-octagon', generateUnitNgonPointsFitToSquare(8, 0));
      var star5Points = new Array(20);
      {
        var outerPoints = generateUnitNgonPoints(5, 0);
        var innerPoints = generateUnitNgonPoints(5, Math.PI / 5); // Outer radius is 1; inner radius of star is smaller

        var innerRadius = 0.5 * (3 - Math.sqrt(5));
        innerRadius *= 1.57;

        for (var i = 0; i < innerPoints.length / 2; i++) {
          innerPoints[i * 2] *= innerRadius;
          innerPoints[i * 2 + 1] *= innerRadius;
        }

        for (var i = 0; i < 20 / 4; i++) {
          star5Points[i * 4] = outerPoints[i * 2];
          star5Points[i * 4 + 1] = outerPoints[i * 2 + 1];
          star5Points[i * 4 + 2] = innerPoints[i * 2];
          star5Points[i * 4 + 3] = innerPoints[i * 2 + 1];
        }
      }
      star5Points = fitPolygonToSquare(star5Points);
      this.generatePolygon('star', star5Points);
      this.generatePolygon('vee', [-1, -1, 0, -0.333, 1, -1, 0, 1]);
      this.generatePolygon('rhomboid', [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);
      this.nodeShapes['concavehexagon'] = this.generatePolygon('concave-hexagon', [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);
      {
        var tagPoints = [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1];
        this.generatePolygon('tag', tagPoints);
        this.generateRoundPolygon('round-tag', tagPoints);
      }

      nodeShapes.makePolygon = function (points) {
        // use caching on user-specified polygons so they are as fast as native shapes
        var key = points.join('$');
        var name = 'polygon-' + key;
        var shape;

        if (shape = this[name]) {
          // got cached shape
          return shape;
        } // create and cache new shape


        return renderer.generatePolygon(name, points);
      };
    };

    var BRp$e = {};

    BRp$e.timeToRender = function () {
      return this.redrawTotalTime / this.redrawCount;
    };

    BRp$e.redraw = function (options) {
      options = options || staticEmptyObject();
      var r = this;

      if (r.averageRedrawTime === undefined) {
        r.averageRedrawTime = 0;
      }

      if (r.lastRedrawTime === undefined) {
        r.lastRedrawTime = 0;
      }

      if (r.lastDrawTime === undefined) {
        r.lastDrawTime = 0;
      }

      r.requestedFrame = true;
      r.renderOptions = options;
    };

    BRp$e.beforeRender = function (fn, priority) {
      // the renderer can't add tick callbacks when destroyed
      if (this.destroyed) {
        return;
      }

      if (priority == null) {
        error('Priority is not optional for beforeRender');
      }

      var cbs = this.beforeRenderCallbacks;
      cbs.push({
        fn: fn,
        priority: priority
      }); // higher priority callbacks executed first

      cbs.sort(function (a, b) {
        return b.priority - a.priority;
      });
    };

    var beforeRenderCallbacks = function beforeRenderCallbacks(r, willDraw, startTime) {
      var cbs = r.beforeRenderCallbacks;

      for (var i = 0; i < cbs.length; i++) {
        cbs[i].fn(willDraw, startTime);
      }
    };

    BRp$e.startRenderLoop = function () {
      var r = this;
      var cy = r.cy;

      if (r.renderLoopStarted) {
        return;
      } else {
        r.renderLoopStarted = true;
      }

      var renderFn = function renderFn(requestTime) {
        if (r.destroyed) {
          return;
        }

        if (cy.batching()) ; else if (r.requestedFrame && !r.skipFrame) {
          beforeRenderCallbacks(r, true, requestTime);
          var startTime = performanceNow();
          r.render(r.renderOptions);
          var endTime = r.lastDrawTime = performanceNow();

          if (r.averageRedrawTime === undefined) {
            r.averageRedrawTime = endTime - startTime;
          }

          if (r.redrawCount === undefined) {
            r.redrawCount = 0;
          }

          r.redrawCount++;

          if (r.redrawTotalTime === undefined) {
            r.redrawTotalTime = 0;
          }

          var duration = endTime - startTime;
          r.redrawTotalTime += duration;
          r.lastRedrawTime = duration; // use a weighted average with a bias from the previous average so we don't spike so easily

          r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;
          r.requestedFrame = false;
        } else {
          beforeRenderCallbacks(r, false, requestTime);
        }

        r.skipFrame = false;
        requestAnimationFrame$1(renderFn);
      };

      requestAnimationFrame$1(renderFn);
    };

    var BaseRenderer = function BaseRenderer(options) {
      this.init(options);
    };

    var BR = BaseRenderer;
    var BRp$f = BR.prototype;
    BRp$f.clientFunctions = ['redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl'];

    BRp$f.init = function (options) {
      var r = this;
      r.options = options;
      r.cy = options.cy;
      var ctr = r.container = options.cy.container(); // prepend a stylesheet in the head such that

      if (window$1) {
        var document = window$1.document;
        var head = document.head;
        var stylesheetId = '__________cytoscape_stylesheet';
        var className = '__________cytoscape_container';
        var stylesheetAlreadyExists = document.getElementById(stylesheetId) != null;

        if (ctr.className.indexOf(className) < 0) {
          ctr.className = (ctr.className || '') + ' ' + className;
        }

        if (!stylesheetAlreadyExists) {
          var stylesheet = document.createElement('style');
          stylesheet.id = stylesheetId;
          stylesheet.innerHTML = '.' + className + ' { position: relative; }';
          head.insertBefore(stylesheet, head.children[0]); // first so lowest priority
        }

        var computedStyle = window$1.getComputedStyle(ctr);
        var position = computedStyle.getPropertyValue('position');

        if (position === 'static') {
          warn('A Cytoscape container has style position:static and so can not use UI extensions properly');
        }
      }

      r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

      r.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95]; //--Pointer-related data

      r.hoverData = {
        down: null,
        last: null,
        downTime: null,
        triggerMode: null,
        dragging: false,
        initialPan: [null, null],
        capture: false
      };
      r.dragData = {
        possibleDragElements: []
      };
      r.touchData = {
        start: null,
        capture: false,
        // These 3 fields related to tap, taphold events
        startPosition: [null, null, null, null, null, null],
        singleTouchStartTime: null,
        singleTouchMoved: true,
        now: [null, null, null, null, null, null],
        earlier: [null, null, null, null, null, null]
      };
      r.redraws = 0;
      r.showFps = options.showFps;
      r.debug = options.debug;
      r.hideEdgesOnViewport = options.hideEdgesOnViewport;
      r.textureOnViewport = options.textureOnViewport;
      r.wheelSensitivity = options.wheelSensitivity;
      r.motionBlurEnabled = options.motionBlur; // on by default

      r.forcedPixelRatio = number(options.pixelRatio) ? options.pixelRatio : null;
      r.motionBlur = options.motionBlur; // for initial kick off

      r.motionBlurOpacity = options.motionBlurOpacity;
      r.motionBlurTransparency = 1 - r.motionBlurOpacity;
      r.motionBlurPxRatio = 1;
      r.mbPxRBlurry = 1; //0.8;

      r.minMbLowQualFrames = 4;
      r.fullQualityMb = false;
      r.clearedForMotionBlur = [];
      r.desktopTapThreshold = options.desktopTapThreshold;
      r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
      r.touchTapThreshold = options.touchTapThreshold;
      r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
      r.tapholdDuration = 500;
      r.bindings = [];
      r.beforeRenderCallbacks = [];
      r.beforeRenderPriorities = {
        // higher priority execs before lower one
        animations: 400,
        eleCalcs: 300,
        eleTxrDeq: 200,
        lyrTxrDeq: 150,
        lyrTxrSkip: 100
      };
      r.registerNodeShapes();
      r.registerArrowShapes();
      r.registerCalculationListeners();
    };

    BRp$f.notify = function (eventName, eles) {
      var r = this;
      var cy = r.cy; // the renderer can't be notified after it's destroyed

      if (this.destroyed) {
        return;
      }

      if (eventName === 'init') {
        r.load();
        return;
      }

      if (eventName === 'destroy') {
        r.destroy();
        return;
      }

      if (eventName === 'add' || eventName === 'remove' || eventName === 'move' && cy.hasCompoundNodes() || eventName === 'load' || eventName === 'zorder' || eventName === 'mount') {
        r.invalidateCachedZSortedEles();
      }

      if (eventName === 'viewport') {
        r.redrawHint('select', true);
      }

      if (eventName === 'load' || eventName === 'resize' || eventName === 'mount') {
        r.invalidateContainerClientCoordsCache();
        r.matchCanvasSize(r.container);
      }

      r.redrawHint('eles', true);
      r.redrawHint('drag', true);
      this.startRenderLoop();
      this.redraw();
    };

    BRp$f.destroy = function () {
      var r = this;
      r.destroyed = true;
      r.cy.stopAnimationLoop();

      for (var i = 0; i < r.bindings.length; i++) {
        var binding = r.bindings[i];
        var b = binding;
        var tgt = b.target;
        (tgt.off || tgt.removeEventListener).apply(tgt, b.args);
      }

      r.bindings = [];
      r.beforeRenderCallbacks = [];
      r.onUpdateEleCalcsFns = [];

      if (r.removeObserver) {
        r.removeObserver.disconnect();
      }

      if (r.styleObserver) {
        r.styleObserver.disconnect();
      }

      if (r.resizeObserver) {
        r.resizeObserver.disconnect();
      }

      if (r.labelCalcDiv) {
        try {
          document.body.removeChild(r.labelCalcDiv); // eslint-disable-line no-undef
        } catch (e) {// ie10 issue #1014
        }
      }
    };

    BRp$f.isHeadless = function () {
      return false;
    };

    [BRp, BRp$a, BRp$b, BRp$c, BRp$d, BRp$e].forEach(function (props) {
      extend(BRp$f, props);
    });

    var fullFpsTime = 1000 / 60; // assume 60 frames per second

    var defs = {
      setupDequeueing: function setupDequeueing(opts) {
        return function setupDequeueingImpl() {
          var self = this;
          var r = this.renderer;

          if (self.dequeueingSetup) {
            return;
          } else {
            self.dequeueingSetup = true;
          }

          var queueRedraw = util(function () {
            r.redrawHint('eles', true);
            r.redrawHint('drag', true);
            r.redraw();
          }, opts.deqRedrawThreshold);

          var dequeue = function dequeue(willDraw, frameStartTime) {
            var startTime = performanceNow();
            var avgRenderTime = r.averageRedrawTime;
            var renderTime = r.lastRedrawTime;
            var deqd = [];
            var extent = r.cy.extent();
            var pixelRatio = r.getPixelRatio(); // if we aren't in a tick that causes a draw, then the rendered style
            // queue won't automatically be flushed before dequeueing starts

            if (!willDraw) {
              r.flushRenderedStyleQueue();
            }

            while (true) {
              // eslint-disable-line no-constant-condition
              var now = performanceNow();
              var duration = now - startTime;
              var frameDuration = now - frameStartTime;

              if (renderTime < fullFpsTime) {
                // if we're rendering faster than the ideal fps, then do dequeueing
                // during all of the remaining frame time
                var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);

                if (frameDuration >= opts.deqFastCost * timeAvailable) {
                  break;
                }
              } else {
                if (willDraw) {
                  if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {
                    break;
                  }
                } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {
                  break;
                }
              }

              var thisDeqd = opts.deq(self, pixelRatio, extent);

              if (thisDeqd.length > 0) {
                for (var i = 0; i < thisDeqd.length; i++) {
                  deqd.push(thisDeqd[i]);
                }
              } else {
                break;
              }
            } // callbacks on dequeue


            if (deqd.length > 0) {
              opts.onDeqd(self, deqd);

              if (!willDraw && opts.shouldRedraw(self, deqd, pixelRatio, extent)) {
                queueRedraw();
              }
            }
          };

          var priority = opts.priority || noop;
          r.beforeRender(dequeue, priority(self));
        };
      }
    };

    // Uses keys so elements may share the same cache.

    var ElementTextureCacheLookup =
    /*#__PURE__*/
    function () {
      function ElementTextureCacheLookup(getKey) {
        var doesEleInvalidateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : falsify;

        _classCallCheck(this, ElementTextureCacheLookup);

        this.idsByKey = new Map$1();
        this.keyForId = new Map$1();
        this.cachesByLvl = new Map$1();
        this.lvls = [];
        this.getKey = getKey;
        this.doesEleInvalidateKey = doesEleInvalidateKey;
      }

      _createClass(ElementTextureCacheLookup, [{
        key: "getIdsFor",
        value: function getIdsFor(key) {
          if (key == null) {
            error("Can not get id list for null key");
          }

          var idsByKey = this.idsByKey;
          var ids = this.idsByKey.get(key);

          if (!ids) {
            ids = new Set$1();
            idsByKey.set(key, ids);
          }

          return ids;
        }
      }, {
        key: "addIdForKey",
        value: function addIdForKey(key, id) {
          if (key != null) {
            this.getIdsFor(key).add(id);
          }
        }
      }, {
        key: "deleteIdForKey",
        value: function deleteIdForKey(key, id) {
          if (key != null) {
            this.getIdsFor(key)["delete"](id);
          }
        }
      }, {
        key: "getNumberOfIdsForKey",
        value: function getNumberOfIdsForKey(key) {
          if (key == null) {
            return 0;
          } else {
            return this.getIdsFor(key).size;
          }
        }
      }, {
        key: "updateKeyMappingFor",
        value: function updateKeyMappingFor(ele) {
          var id = ele.id();
          var prevKey = this.keyForId.get(id);
          var currKey = this.getKey(ele);
          this.deleteIdForKey(prevKey, id);
          this.addIdForKey(currKey, id);
          this.keyForId.set(id, currKey);
        }
      }, {
        key: "deleteKeyMappingFor",
        value: function deleteKeyMappingFor(ele) {
          var id = ele.id();
          var prevKey = this.keyForId.get(id);
          this.deleteIdForKey(prevKey, id);
          this.keyForId["delete"](id);
        }
      }, {
        key: "keyHasChangedFor",
        value: function keyHasChangedFor(ele) {
          var id = ele.id();
          var prevKey = this.keyForId.get(id);
          var newKey = this.getKey(ele);
          return prevKey !== newKey;
        }
      }, {
        key: "isInvalid",
        value: function isInvalid(ele) {
          return this.keyHasChangedFor(ele) || this.doesEleInvalidateKey(ele);
        }
      }, {
        key: "getCachesAt",
        value: function getCachesAt(lvl) {
          var cachesByLvl = this.cachesByLvl,
              lvls = this.lvls;
          var caches = cachesByLvl.get(lvl);

          if (!caches) {
            caches = new Map$1();
            cachesByLvl.set(lvl, caches);
            lvls.push(lvl);
          }

          return caches;
        }
      }, {
        key: "getCache",
        value: function getCache(key, lvl) {
          return this.getCachesAt(lvl).get(key);
        }
      }, {
        key: "get",
        value: function get(ele, lvl) {
          var key = this.getKey(ele);
          var cache = this.getCache(key, lvl); // getting for an element may need to add to the id list b/c eles can share keys

          if (cache != null) {
            this.updateKeyMappingFor(ele);
          }

          return cache;
        }
      }, {
        key: "getForCachedKey",
        value: function getForCachedKey(ele, lvl) {
          var key = this.keyForId.get(ele.id()); // n.b. use cached key, not newly computed key

          var cache = this.getCache(key, lvl);
          return cache;
        }
      }, {
        key: "hasCache",
        value: function hasCache(key, lvl) {
          return this.getCachesAt(lvl).has(key);
        }
      }, {
        key: "has",
        value: function has(ele, lvl) {
          var key = this.getKey(ele);
          return this.hasCache(key, lvl);
        }
      }, {
        key: "setCache",
        value: function setCache(key, lvl, cache) {
          cache.key = key;
          this.getCachesAt(lvl).set(key, cache);
        }
      }, {
        key: "set",
        value: function set(ele, lvl, cache) {
          var key = this.getKey(ele);
          this.setCache(key, lvl, cache);
          this.updateKeyMappingFor(ele);
        }
      }, {
        key: "deleteCache",
        value: function deleteCache(key, lvl) {
          this.getCachesAt(lvl)["delete"](key);
        }
      }, {
        key: "delete",
        value: function _delete(ele, lvl) {
          var key = this.getKey(ele);
          this.deleteCache(key, lvl);
        }
      }, {
        key: "invalidateKey",
        value: function invalidateKey(key) {
          var _this = this;

          this.lvls.forEach(function (lvl) {
            return _this.deleteCache(key, lvl);
          });
        } // returns true if no other eles reference the invalidated cache (n.b. other eles may need the cache with the same key)

      }, {
        key: "invalidate",
        value: function invalidate(ele) {
          var id = ele.id();
          var key = this.keyForId.get(id); // n.b. use stored key rather than current (potential key)

          this.deleteKeyMappingFor(ele);
          var entireKeyInvalidated = this.doesEleInvalidateKey(ele);

          if (entireKeyInvalidated) {
            // clear mapping for current key
            this.invalidateKey(key);
          }

          return entireKeyInvalidated || this.getNumberOfIdsForKey(key) === 0;
        }
      }]);

      return ElementTextureCacheLookup;
    }();

    var minTxrH = 25; // the size of the texture cache for small height eles (special case)

    var txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up

    var minLvl = -4; // when scaling smaller than that we don't need to re-render

    var maxLvl = 3; // when larger than this scale just render directly (caching is not helpful)

    var maxZoom = 7.99; // beyond this zoom level, layered textures are not used

    var eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps

    var defTxrWidth = 1024; // default/minimum texture width

    var maxTxrW = 1024; // the maximum width of a texture

    var maxTxrH = 1024; // the maximum height of a texture

    var minUtility = 0.2; // if usage of texture is less than this, it is retired

    var maxFullness = 0.8; // fullness of texture after which queue removal is checked

    var maxFullnessChecks = 10; // dequeued after this many checks

    var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame

    var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time

    var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing

    var deqFastCost = 0.9; // % of frame time to be used when >60fps

    var deqRedrawThreshold = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile

    var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch

    var getTxrReasons = {
      dequeue: 'dequeue',
      downscale: 'downscale',
      highQuality: 'highQuality'
    };
    var initDefaults = defaults({
      getKey: null,
      doesEleInvalidateKey: falsify,
      drawElement: null,
      getBoundingBox: null,
      getRotationPoint: null,
      getRotationOffset: null,
      isVisible: trueify,
      allowEdgeTxrCaching: true,
      allowParentTxrCaching: true
    });

    var ElementTextureCache = function ElementTextureCache(renderer, initOptions) {
      var self = this;
      self.renderer = renderer;
      self.onDequeues = [];
      var opts = initDefaults(initOptions);
      extend(self, opts);
      self.lookup = new ElementTextureCacheLookup(opts.getKey, opts.doesEleInvalidateKey);
      self.setupDequeueing();
    };

    var ETCp = ElementTextureCache.prototype;
    ETCp.reasons = getTxrReasons; // the list of textures in which new subtextures for elements can be placed

    ETCp.getTextureQueue = function (txrH) {
      var self = this;
      self.eleImgCaches = self.eleImgCaches || {};
      return self.eleImgCaches[txrH] = self.eleImgCaches[txrH] || [];
    }; // the list of usused textures which can be recycled (in use in texture queue)


    ETCp.getRetiredTextureQueue = function (txrH) {
      var self = this;
      var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};
      var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];
      return rtxtrQ;
    }; // queue of element draw requests at different scale levels


    ETCp.getElementQueue = function () {
      var self = this;
      var q = self.eleCacheQueue = self.eleCacheQueue || new Heap(function (a, b) {
        return b.reqs - a.reqs;
      });
      return q;
    }; // queue of element draw requests at different scale levels (element id lookup)


    ETCp.getElementKeyToQueue = function () {
      var self = this;
      var k2q = self.eleKeyToCacheQueue = self.eleKeyToCacheQueue || {};
      return k2q;
    };

    ETCp.getElement = function (ele, bb, pxRatio, lvl, reason) {
      var self = this;
      var r = this.renderer;
      var zoom = r.cy.zoom();
      var lookup = this.lookup;

      if (!bb || bb.w === 0 || bb.h === 0 || isNaN(bb.w) || isNaN(bb.h) || !ele.visible() || ele.removed()) {
        return null;
      }

      if (!self.allowEdgeTxrCaching && ele.isEdge() || !self.allowParentTxrCaching && ele.isParent()) {
        return null;
      }

      if (lvl == null) {
        lvl = Math.ceil(log2(zoom * pxRatio));
      }

      if (lvl < minLvl) {
        lvl = minLvl;
      } else if (zoom >= maxZoom || lvl > maxLvl) {
        return null;
      }

      var scale = Math.pow(2, lvl);
      var eleScaledH = bb.h * scale;
      var eleScaledW = bb.w * scale;
      var scaledLabelShown = r.eleTextBiggerThanMin(ele, scale);

      if (!this.isVisible(ele, scaledLabelShown)) {
        return null;
      }

      var eleCache = lookup.get(ele, lvl); // if this get was on an unused/invalidated cache, then restore the texture usage metric

      if (eleCache && eleCache.invalidated) {
        eleCache.invalidated = false;
        eleCache.texture.invalidatedWidth -= eleCache.width;
      }

      if (eleCache) {
        return eleCache;
      }

      var txrH; // which texture height this ele belongs to

      if (eleScaledH <= minTxrH) {
        txrH = minTxrH;
      } else if (eleScaledH <= txrStepH) {
        txrH = txrStepH;
      } else {
        txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;
      }

      if (eleScaledH > maxTxrH || eleScaledW > maxTxrW) {
        return null; // caching large elements is not efficient
      }

      var txrQ = self.getTextureQueue(txrH); // first try the second last one in case it has space at the end

      var txr = txrQ[txrQ.length - 2];

      var addNewTxr = function addNewTxr() {
        return self.recycleTexture(txrH, eleScaledW) || self.addTexture(txrH, eleScaledW);
      }; // try the last one if there is no second last one


      if (!txr) {
        txr = txrQ[txrQ.length - 1];
      } // if the last one doesn't exist, we need a first one


      if (!txr) {
        txr = addNewTxr();
      } // if there's no room in the current texture, we need a new one


      if (txr.width - txr.usedWidth < eleScaledW) {
        txr = addNewTxr();
      }

      var scalableFrom = function scalableFrom(otherCache) {
        return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
      };

      var deqing = reason && reason === getTxrReasons.dequeue;
      var highQualityReq = reason && reason === getTxrReasons.highQuality;
      var downscaleReq = reason && reason === getTxrReasons.downscale;
      var higherCache; // the nearest cache with a higher level

      for (var l = lvl + 1; l <= maxLvl; l++) {
        var c = lookup.get(ele, l);

        if (c) {
          higherCache = c;
          break;
        }
      }

      var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;

      var downscale = function downscale() {
        txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);
      }; // reset ele area in texture


      txr.context.setTransform(1, 0, 0, 1, 0, 0);
      txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);

      if (scalableFrom(oneUpCache)) {
        // then we can relatively cheaply rescale the existing image w/o rerendering
        downscale();
      } else if (scalableFrom(higherCache)) {
        // then use the higher cache for now and queue the next level down
        // to cheaply scale towards the smaller level
        if (highQualityReq) {
          for (var _l = higherCache.level; _l > lvl; _l--) {
            oneUpCache = self.getElement(ele, bb, pxRatio, _l, getTxrReasons.downscale);
          }

          downscale();
        } else {
          self.queueElement(ele, higherCache.level - 1);
          return higherCache;
        }
      } else {
        var lowerCache; // the nearest cache with a lower level

        if (!deqing && !highQualityReq && !downscaleReq) {
          for (var _l2 = lvl - 1; _l2 >= minLvl; _l2--) {
            var _c = lookup.get(ele, _l2);

            if (_c) {
              lowerCache = _c;
              break;
            }
          }
        }

        if (scalableFrom(lowerCache)) {
          // then use the lower quality cache for now and queue the better one for later
          self.queueElement(ele, lvl);
          return lowerCache;
        }

        txr.context.translate(txr.usedWidth, 0);
        txr.context.scale(scale, scale);
        this.drawElement(txr.context, ele, bb, scaledLabelShown, false);
        txr.context.scale(1 / scale, 1 / scale);
        txr.context.translate(-txr.usedWidth, 0);
      }

      eleCache = {
        x: txr.usedWidth,
        texture: txr,
        level: lvl,
        scale: scale,
        width: eleScaledW,
        height: eleScaledH,
        scaledLabelShown: scaledLabelShown
      };
      txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);
      txr.eleCaches.push(eleCache);
      lookup.set(ele, lvl, eleCache);
      self.checkTextureFullness(txr);
      return eleCache;
    };

    ETCp.invalidateElements = function (eles) {
      for (var i = 0; i < eles.length; i++) {
        this.invalidateElement(eles[i]);
      }
    };

    ETCp.invalidateElement = function (ele) {
      var self = this;
      var lookup = self.lookup;
      var caches = [];
      var invalid = lookup.isInvalid(ele);

      if (!invalid) {
        return; // override the invalidation request if the element key has not changed
      }

      for (var lvl = minLvl; lvl <= maxLvl; lvl++) {
        var cache = lookup.getForCachedKey(ele, lvl);

        if (cache) {
          caches.push(cache);
        }
      }

      var noOtherElesUseCache = lookup.invalidate(ele);

      if (noOtherElesUseCache) {
        for (var i = 0; i < caches.length; i++) {
          var _cache = caches[i];
          var txr = _cache.texture; // remove space from the texture it belongs to

          txr.invalidatedWidth += _cache.width; // mark the cache as invalidated

          _cache.invalidated = true; // retire the texture if its utility is low

          self.checkTextureUtility(txr);
        }
      } // remove from queue since the old req was for the old state


      self.removeFromQueue(ele);
    };

    ETCp.checkTextureUtility = function (txr) {
      // invalidate all entries in the cache if the cache size is small
      if (txr.invalidatedWidth >= minUtility * txr.width) {
        this.retireTexture(txr);
      }
    };

    ETCp.checkTextureFullness = function (txr) {
      // if texture has been mostly filled and passed over several times, remove
      // it from the queue so we don't need to waste time looking at it to put new things
      var self = this;
      var txrQ = self.getTextureQueue(txr.height);

      if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {
        removeFromArray(txrQ, txr);
      } else {
        txr.fullnessChecks++;
      }
    };

    ETCp.retireTexture = function (txr) {
      var self = this;
      var txrH = txr.height;
      var txrQ = self.getTextureQueue(txrH);
      var lookup = this.lookup; // retire the texture from the active / searchable queue:

      removeFromArray(txrQ, txr);
      txr.retired = true; // remove the refs from the eles to the caches:

      var eleCaches = txr.eleCaches;

      for (var i = 0; i < eleCaches.length; i++) {
        var eleCache = eleCaches[i];
        lookup.deleteCache(eleCache.key, eleCache.level);
      }

      clearArray(eleCaches); // add the texture to a retired queue so it can be recycled in future:

      var rtxtrQ = self.getRetiredTextureQueue(txrH);
      rtxtrQ.push(txr);
    };

    ETCp.addTexture = function (txrH, minW) {
      var self = this;
      var txrQ = self.getTextureQueue(txrH);
      var txr = {};
      txrQ.push(txr);
      txr.eleCaches = [];
      txr.height = txrH;
      txr.width = Math.max(defTxrWidth, minW);
      txr.usedWidth = 0;
      txr.invalidatedWidth = 0;
      txr.fullnessChecks = 0;
      txr.canvas = self.renderer.makeOffscreenCanvas(txr.width, txr.height);
      txr.context = txr.canvas.getContext('2d');
      return txr;
    };

    ETCp.recycleTexture = function (txrH, minW) {
      var self = this;
      var txrQ = self.getTextureQueue(txrH);
      var rtxtrQ = self.getRetiredTextureQueue(txrH);

      for (var i = 0; i < rtxtrQ.length; i++) {
        var txr = rtxtrQ[i];

        if (txr.width >= minW) {
          txr.retired = false;
          txr.usedWidth = 0;
          txr.invalidatedWidth = 0;
          txr.fullnessChecks = 0;
          clearArray(txr.eleCaches);
          txr.context.setTransform(1, 0, 0, 1, 0, 0);
          txr.context.clearRect(0, 0, txr.width, txr.height);
          removeFromArray(rtxtrQ, txr);
          txrQ.push(txr);
          return txr;
        }
      }
    };

    ETCp.queueElement = function (ele, lvl) {
      var self = this;
      var q = self.getElementQueue();
      var k2q = self.getElementKeyToQueue();
      var key = this.getKey(ele);
      var existingReq = k2q[key];

      if (existingReq) {
        // use the max lvl b/c in between lvls are cheap to make
        existingReq.level = Math.max(existingReq.level, lvl);
        existingReq.eles.merge(ele);
        existingReq.reqs++;
        q.updateItem(existingReq);
      } else {
        var req = {
          eles: ele.spawn().merge(ele),
          level: lvl,
          reqs: 1,
          key: key
        };
        q.push(req);
        k2q[key] = req;
      }
    };

    ETCp.dequeue = function (pxRatio
    /*, extent*/
    ) {
      var self = this;
      var q = self.getElementQueue();
      var k2q = self.getElementKeyToQueue();
      var dequeued = [];
      var lookup = self.lookup;

      for (var i = 0; i < maxDeqSize; i++) {
        if (q.size() > 0) {
          var req = q.pop();
          var key = req.key;
          var ele = req.eles[0]; // all eles have the same key

          var cacheExists = lookup.hasCache(ele, req.level); // clear out the key to req lookup

          k2q[key] = null; // dequeueing isn't necessary with an existing cache

          if (cacheExists) {
            continue;
          }

          dequeued.push(req);
          var bb = self.getBoundingBox(ele);
          self.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);
        } else {
          break;
        }
      }

      return dequeued;
    };

    ETCp.removeFromQueue = function (ele) {
      var self = this;
      var q = self.getElementQueue();
      var k2q = self.getElementKeyToQueue();
      var key = this.getKey(ele);
      var req = k2q[key];

      if (req != null) {
        if (req.eles.length === 1) {
          // remove if last ele in the req
          // bring to front of queue
          req.reqs = MAX_INT;
          q.updateItem(req);
          q.pop(); // remove from queue

          k2q[key] = null; // remove from lookup map
        } else {
          // otherwise just remove ele from req
          req.eles.unmerge(ele);
        }
      }
    };

    ETCp.onDequeue = function (fn) {
      this.onDequeues.push(fn);
    };

    ETCp.offDequeue = function (fn) {
      removeFromArray(this.onDequeues, fn);
    };

    ETCp.setupDequeueing = defs.setupDequeueing({
      deqRedrawThreshold: deqRedrawThreshold,
      deqCost: deqCost,
      deqAvgCost: deqAvgCost,
      deqNoDrawCost: deqNoDrawCost,
      deqFastCost: deqFastCost,
      deq: function deq(self, pxRatio, extent) {
        return self.dequeue(pxRatio, extent);
      },
      onDeqd: function onDeqd(self, deqd) {
        for (var i = 0; i < self.onDequeues.length; i++) {
          var fn = self.onDequeues[i];
          fn(deqd);
        }
      },
      shouldRedraw: function shouldRedraw(self, deqd, pxRatio, extent) {
        for (var i = 0; i < deqd.length; i++) {
          var eles = deqd[i].eles;

          for (var j = 0; j < eles.length; j++) {
            var bb = eles[j].boundingBox();

            if (boundingBoxesIntersect(bb, extent)) {
              return true;
            }
          }
        }

        return false;
      },
      priority: function priority(self) {
        return self.renderer.beforeRenderPriorities.eleTxrDeq;
      }
    });

    var defNumLayers = 1; // default number of layers to use

    var minLvl$1 = -4; // when scaling smaller than that we don't need to re-render

    var maxLvl$1 = 2; // when larger than this scale just render directly (caching is not helpful)

    var maxZoom$1 = 3.99; // beyond this zoom level, layered textures are not used

    var deqRedrawThreshold$1 = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile

    var refineEleDebounceTime = 50; // time to debounce sharper ele texture updates

    var deqCost$1 = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame

    var deqAvgCost$1 = 0.1; // % of add'l rendering cost compared to average overall redraw time

    var deqNoDrawCost$1 = 0.9; // % of avg frame time that can be used for dequeueing when not drawing

    var deqFastCost$1 = 0.9; // % of frame time to be used when >60fps

    var maxDeqSize$1 = 1; // number of eles to dequeue and render at higher texture in each batch

    var invalidThreshold = 250; // time threshold for disabling b/c of invalidations

    var maxLayerArea = 4000 * 4000; // layers can't be bigger than this

    var useHighQualityEleTxrReqs = true; // whether to use high quality ele txr requests (generally faster and cheaper in the longterm)
    // var log = function(){ console.log.apply( console, arguments ); };

    var LayeredTextureCache = function LayeredTextureCache(renderer) {
      var self = this;
      var r = self.renderer = renderer;
      var cy = r.cy;
      self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]

      self.firstGet = true;
      self.lastInvalidationTime = performanceNow() - 2 * invalidThreshold;
      self.skipping = false;
      self.eleTxrDeqs = cy.collection();
      self.scheduleElementRefinement = util(function () {
        self.refineElementTextures(self.eleTxrDeqs);
        self.eleTxrDeqs.unmerge(self.eleTxrDeqs);
      }, refineEleDebounceTime);
      r.beforeRender(function (willDraw, now) {
        if (now - self.lastInvalidationTime <= invalidThreshold) {
          self.skipping = true;
        } else {
          self.skipping = false;
        }
      }, r.beforeRenderPriorities.lyrTxrSkip);

      var qSort = function qSort(a, b) {
        return b.reqs - a.reqs;
      };

      self.layersQueue = new Heap(qSort);
      self.setupDequeueing();
    };

    var LTCp = LayeredTextureCache.prototype;
    var layerIdPool = 0;
    var MAX_INT$1 = Math.pow(2, 53) - 1;

    LTCp.makeLayer = function (bb, lvl) {
      var scale = Math.pow(2, lvl);
      var w = Math.ceil(bb.w * scale);
      var h = Math.ceil(bb.h * scale);
      var canvas = this.renderer.makeOffscreenCanvas(w, h);
      var layer = {
        id: layerIdPool = ++layerIdPool % MAX_INT$1,
        bb: bb,
        level: lvl,
        width: w,
        height: h,
        canvas: canvas,
        context: canvas.getContext('2d'),
        eles: [],
        elesQueue: [],
        reqs: 0
      }; // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);

      var cxt = layer.context;
      var dx = -layer.bb.x1;
      var dy = -layer.bb.y1; // do the transform on creation to save cycles (it's the same for all eles)

      cxt.scale(scale, scale);
      cxt.translate(dx, dy);
      return layer;
    };

    LTCp.getLayers = function (eles, pxRatio, lvl) {
      var self = this;
      var r = self.renderer;
      var cy = r.cy;
      var zoom = cy.zoom();
      var firstGet = self.firstGet;
      self.firstGet = false; // log('--\nget layers with %s eles', eles.length);
      //log eles.map(function(ele){ return ele.id() }) );

      if (lvl == null) {
        lvl = Math.ceil(log2(zoom * pxRatio));

        if (lvl < minLvl$1) {
          lvl = minLvl$1;
        } else if (zoom >= maxZoom$1 || lvl > maxLvl$1) {
          return null;
        }
      }

      self.validateLayersElesOrdering(lvl, eles);
      var layersByLvl = self.layersByLevel;
      var scale = Math.pow(2, lvl);
      var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];
      var bb;
      var lvlComplete = self.levelIsComplete(lvl, eles);
      var tmpLayers;

      var checkTempLevels = function checkTempLevels() {
        var canUseAsTmpLvl = function canUseAsTmpLvl(l) {
          self.validateLayersElesOrdering(l, eles);

          if (self.levelIsComplete(l, eles)) {
            tmpLayers = layersByLvl[l];
            return true;
          }
        };

        var checkLvls = function checkLvls(dir) {
          if (tmpLayers) {
            return;
          }

          for (var l = lvl + dir; minLvl$1 <= l && l <= maxLvl$1; l += dir) {
            if (canUseAsTmpLvl(l)) {
              break;
            }
          }
        };

        checkLvls(+1);
        checkLvls(-1); // remove the invalid layers; they will be replaced as needed later in this function

        for (var i = layers.length - 1; i >= 0; i--) {
          var layer = layers[i];

          if (layer.invalid) {
            removeFromArray(layers, layer);
          }
        }
      };

      if (!lvlComplete) {
        // if the current level is incomplete, then use the closest, best quality layerset temporarily
        // and later queue the current layerset so we can get the proper quality level soon
        checkTempLevels();
      } else {
        // log('level complete, using existing layers\n--');
        return layers;
      }

      var getBb = function getBb() {
        if (!bb) {
          bb = makeBoundingBox();

          for (var i = 0; i < eles.length; i++) {
            updateBoundingBox(bb, eles[i].boundingBox());
          }
        }

        return bb;
      };

      var makeLayer = function makeLayer(opts) {
        opts = opts || {};
        var after = opts.after;
        getBb();
        var area = bb.w * scale * (bb.h * scale);

        if (area > maxLayerArea) {
          return null;
        }

        var layer = self.makeLayer(bb, lvl);

        if (after != null) {
          var index = layers.indexOf(after) + 1;
          layers.splice(index, 0, layer);
        } else if (opts.insert === undefined || opts.insert) {
          // no after specified => first layer made so put at start
          layers.unshift(layer);
        } // if( tmpLayers ){
        //self.queueLayer( layer );
        // }


        return layer;
      };

      if (self.skipping && !firstGet) {
        // log('skip layers');
        return null;
      } // log('do layers');


      var layer = null;
      var maxElesPerLayer = eles.length / defNumLayers;
      var allowLazyQueueing =  !firstGet;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var rs = ele._private.rscratch;
        var caches = rs.imgLayerCaches = rs.imgLayerCaches || {}; // log('look at ele', ele.id());

        var existingLayer = caches[lvl];

        if (existingLayer) {
          // reuse layer for later eles
          // log('reuse layer for', ele.id());
          layer = existingLayer;
          continue;
        }

        if (!layer || layer.eles.length >= maxElesPerLayer || !boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {
          // log('make new layer for ele %s', ele.id());
          layer = makeLayer({
            insert: true,
            after: layer
          }); // if now layer can be built then we can't use layers at this level

          if (!layer) {
            return null;
          } // log('new layer with id %s', layer.id);

        }

        if (tmpLayers || allowLazyQueueing) {
          // log('queue ele %s in layer %s', ele.id(), layer.id);
          self.queueLayer(layer, ele);
        } else {
          // log('draw ele %s in layer %s', ele.id(), layer.id);
          self.drawEleInLayer(layer, ele, lvl, pxRatio);
        }

        layer.eles.push(ele);
        caches[lvl] = layer;
      } // log('--');


      if (tmpLayers) {
        // then we only queued the current layerset and can't draw it yet
        return tmpLayers;
      }

      if (allowLazyQueueing) {
        // log('lazy queue level', lvl);
        return null;
      }

      return layers;
    }; // a layer may want to use an ele cache of a higher level to avoid blurriness
    // so the layer level might not equal the ele level


    LTCp.getEleLevelForLayerLevel = function (lvl, pxRatio) {
      return lvl;
    };

    LTCp.drawEleInLayer = function (layer, ele, lvl, pxRatio) {
      var self = this;
      var r = this.renderer;
      var context = layer.context;
      var bb = ele.boundingBox();

      if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
        return;
      }

      lvl = self.getEleLevelForLayerLevel(lvl, pxRatio);

      {
        r.setImgSmoothing(context, false);
      }

      {
        r.drawCachedElement(context, ele, null, null, lvl, useHighQualityEleTxrReqs);
      }

      {
        r.setImgSmoothing(context, true);
      }
    };

    LTCp.levelIsComplete = function (lvl, eles) {
      var self = this;
      var layers = self.layersByLevel[lvl];

      if (!layers || layers.length === 0) {
        return false;
      }

      var numElesInLayers = 0;

      for (var i = 0; i < layers.length; i++) {
        var layer = layers[i]; // if there are any eles needed to be drawn yet, the level is not complete

        if (layer.reqs > 0) {
          return false;
        } // if the layer is invalid, the level is not complete


        if (layer.invalid) {
          return false;
        }

        numElesInLayers += layer.eles.length;
      } // we should have exactly the number of eles passed in to be complete


      if (numElesInLayers !== eles.length) {
        return false;
      }

      return true;
    };

    LTCp.validateLayersElesOrdering = function (lvl, eles) {
      var layers = this.layersByLevel[lvl];

      if (!layers) {
        return;
      } // if in a layer the eles are not in the same order, then the layer is invalid
      // (i.e. there is an ele in between the eles in the layer)


      for (var i = 0; i < layers.length; i++) {
        var layer = layers[i];
        var offset = -1; // find the offset

        for (var j = 0; j < eles.length; j++) {
          if (layer.eles[0] === eles[j]) {
            offset = j;
            break;
          }
        }

        if (offset < 0) {
          // then the layer has nonexistant elements and is invalid
          this.invalidateLayer(layer);
          continue;
        } // the eles in the layer must be in the same continuous order, else the layer is invalid


        var o = offset;

        for (var j = 0; j < layer.eles.length; j++) {
          if (layer.eles[j] !== eles[o + j]) {
            // log('invalidate based on ordering', layer.id);
            this.invalidateLayer(layer);
            break;
          }
        }
      }
    };

    LTCp.updateElementsInLayers = function (eles, update) {
      var self = this;
      var isEles = element(eles[0]); // collect udpated elements (cascaded from the layers) and update each
      // layer itself along the way

      for (var i = 0; i < eles.length; i++) {
        var req = isEles ? null : eles[i];
        var ele = isEles ? eles[i] : eles[i].ele;
        var rs = ele._private.rscratch;
        var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

        for (var l = minLvl$1; l <= maxLvl$1; l++) {
          var layer = caches[l];

          if (!layer) {
            continue;
          } // if update is a request from the ele cache, then it affects only
          // the matching level


          if (req && self.getEleLevelForLayerLevel(layer.level) !== req.level) {
            continue;
          }

          update(layer, ele, req);
        }
      }
    };

    LTCp.haveLayers = function () {
      var self = this;
      var haveLayers = false;

      for (var l = minLvl$1; l <= maxLvl$1; l++) {
        var layers = self.layersByLevel[l];

        if (layers && layers.length > 0) {
          haveLayers = true;
          break;
        }
      }

      return haveLayers;
    };

    LTCp.invalidateElements = function (eles) {
      var self = this;

      if (eles.length === 0) {
        return;
      }

      self.lastInvalidationTime = performanceNow(); // log('update invalidate layer time from eles');

      if (eles.length === 0 || !self.haveLayers()) {
        return;
      }

      self.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {
        self.invalidateLayer(layer);
      });
    };

    LTCp.invalidateLayer = function (layer) {
      // log('update invalidate layer time');
      this.lastInvalidationTime = performanceNow();

      if (layer.invalid) {
        return;
      } // save cycles


      var lvl = layer.level;
      var eles = layer.eles;
      var layers = this.layersByLevel[lvl]; // log('invalidate layer', layer.id );

      removeFromArray(layers, layer); // layer.eles = [];

      layer.elesQueue = [];
      layer.invalid = true;

      if (layer.replacement) {
        layer.replacement.invalid = true;
      }

      for (var i = 0; i < eles.length; i++) {
        var caches = eles[i]._private.rscratch.imgLayerCaches;

        if (caches) {
          caches[lvl] = null;
        }
      }
    };

    LTCp.refineElementTextures = function (eles) {
      var self = this; // log('refine', eles.length);

      self.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {
        var rLyr = layer.replacement;

        if (!rLyr) {
          rLyr = layer.replacement = self.makeLayer(layer.bb, layer.level);
          rLyr.replaces = layer;
          rLyr.eles = layer.eles; // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);
        }

        if (!rLyr.reqs) {
          for (var i = 0; i < rLyr.eles.length; i++) {
            self.queueLayer(rLyr, rLyr.eles[i]);
          } // log('queue replacement layer refinement', rLyr.id);

        }
      });
    };

    LTCp.enqueueElementRefinement = function (ele) {

      this.eleTxrDeqs.merge(ele);
      this.scheduleElementRefinement();
    };

    LTCp.queueLayer = function (layer, ele) {
      var self = this;
      var q = self.layersQueue;
      var elesQ = layer.elesQueue;
      var hasId = elesQ.hasId = elesQ.hasId || {}; // if a layer is going to be replaced, queuing is a waste of time

      if (layer.replacement) {
        return;
      }

      if (ele) {
        if (hasId[ele.id()]) {
          return;
        }

        elesQ.push(ele);
        hasId[ele.id()] = true;
      }

      if (layer.reqs) {
        layer.reqs++;
        q.updateItem(layer);
      } else {
        layer.reqs = 1;
        q.push(layer);
      }
    };

    LTCp.dequeue = function (pxRatio) {
      var self = this;
      var q = self.layersQueue;
      var deqd = [];
      var eleDeqs = 0;

      while (eleDeqs < maxDeqSize$1) {
        if (q.size() === 0) {
          break;
        }

        var layer = q.peek(); // if a layer has been or will be replaced, then don't waste time with it

        if (layer.replacement) {
          // log('layer %s in queue skipped b/c it already has a replacement', layer.id);
          q.pop();
          continue;
        } // if this is a replacement layer that has been superceded, then forget it


        if (layer.replaces && layer !== layer.replaces.replacement) {
          // log('layer is no longer the most uptodate replacement; dequeued', layer.id)
          q.pop();
          continue;
        }

        if (layer.invalid) {
          // log('replacement layer %s is invalid; dequeued', layer.id);
          q.pop();
          continue;
        }

        var ele = layer.elesQueue.shift();

        if (ele) {
          // log('dequeue layer %s', layer.id);
          self.drawEleInLayer(layer, ele, layer.level, pxRatio);
          eleDeqs++;
        }

        if (deqd.length === 0) {
          // we need only one entry in deqd to queue redrawing etc
          deqd.push(true);
        } // if the layer has all its eles done, then remove from the queue


        if (layer.elesQueue.length === 0) {
          q.pop();
          layer.reqs = 0; // log('dequeue of layer %s complete', layer.id);
          // when a replacement layer is dequeued, it replaces the old layer in the level

          if (layer.replaces) {
            self.applyLayerReplacement(layer);
          }

          self.requestRedraw();
        }
      }

      return deqd;
    };

    LTCp.applyLayerReplacement = function (layer) {
      var self = this;
      var layersInLevel = self.layersByLevel[layer.level];
      var replaced = layer.replaces;
      var index = layersInLevel.indexOf(replaced); // if the replaced layer is not in the active list for the level, then replacing
      // refs would be a mistake (i.e. overwriting the true active layer)

      if (index < 0 || replaced.invalid) {
        // log('replacement layer would have no effect', layer.id);
        return;
      }

      layersInLevel[index] = layer; // replace level ref
      // replace refs in eles

      for (var i = 0; i < layer.eles.length; i++) {
        var _p = layer.eles[i]._private;
        var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};

        if (cache) {
          cache[layer.level] = layer;
        }
      } // log('apply replacement layer %s over %s', layer.id, replaced.id);


      self.requestRedraw();
    };

    LTCp.requestRedraw = util(function () {
      var r = this.renderer;
      r.redrawHint('eles', true);
      r.redrawHint('drag', true);
      r.redraw();
    }, 100);
    LTCp.setupDequeueing = defs.setupDequeueing({
      deqRedrawThreshold: deqRedrawThreshold$1,
      deqCost: deqCost$1,
      deqAvgCost: deqAvgCost$1,
      deqNoDrawCost: deqNoDrawCost$1,
      deqFastCost: deqFastCost$1,
      deq: function deq(self, pxRatio) {
        return self.dequeue(pxRatio);
      },
      onDeqd: noop,
      shouldRedraw: trueify,
      priority: function priority(self) {
        return self.renderer.beforeRenderPriorities.lyrTxrDeq;
      }
    });

    var CRp = {};
    var impl;

    function polygon(context, points) {
      for (var i = 0; i < points.length; i++) {
        var pt = points[i];
        context.lineTo(pt.x, pt.y);
      }
    }

    function triangleBackcurve(context, points, controlPoint) {
      var firstPt;

      for (var i = 0; i < points.length; i++) {
        var pt = points[i];

        if (i === 0) {
          firstPt = pt;
        }

        context.lineTo(pt.x, pt.y);
      }

      context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);
    }

    function triangleTee(context, trianglePoints, teePoints) {
      if (context.beginPath) {
        context.beginPath();
      }

      var triPts = trianglePoints;

      for (var i = 0; i < triPts.length; i++) {
        var pt = triPts[i];
        context.lineTo(pt.x, pt.y);
      }

      var teePts = teePoints;
      var firstTeePt = teePoints[0];
      context.moveTo(firstTeePt.x, firstTeePt.y);

      for (var i = 1; i < teePts.length; i++) {
        var pt = teePts[i];
        context.lineTo(pt.x, pt.y);
      }

      if (context.closePath) {
        context.closePath();
      }
    }

    function circleTriangle(context, trianglePoints, rx, ry, r) {
      if (context.beginPath) {
        context.beginPath();
      }

      context.arc(rx, ry, r, 0, Math.PI * 2, false);
      var triPts = trianglePoints;
      var firstTrPt = triPts[0];
      context.moveTo(firstTrPt.x, firstTrPt.y);

      for (var i = 0; i < triPts.length; i++) {
        var pt = triPts[i];
        context.lineTo(pt.x, pt.y);
      }

      if (context.closePath) {
        context.closePath();
      }
    }

    function circle(context, rx, ry, r) {
      context.arc(rx, ry, r, 0, Math.PI * 2, false);
    }

    CRp.arrowShapeImpl = function (name) {
      return (impl || (impl = {
        'polygon': polygon,
        'triangle-backcurve': triangleBackcurve,
        'triangle-tee': triangleTee,
        'circle-triangle': circleTriangle,
        'triangle-cross': triangleTee,
        'circle': circle
      }))[name];
    };

    var CRp$1 = {};

    CRp$1.drawElement = function (context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity) {
      var r = this;

      if (ele.isNode()) {
        r.drawNode(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
      } else {
        r.drawEdge(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
      }
    };

    CRp$1.drawElementOverlay = function (context, ele) {
      var r = this;

      if (ele.isNode()) {
        r.drawNodeOverlay(context, ele);
      } else {
        r.drawEdgeOverlay(context, ele);
      }
    };

    CRp$1.drawElementUnderlay = function (context, ele) {
      var r = this;

      if (ele.isNode()) {
        r.drawNodeUnderlay(context, ele);
      } else {
        r.drawEdgeUnderlay(context, ele);
      }
    };

    CRp$1.drawCachedElementPortion = function (context, ele, eleTxrCache, pxRatio, lvl, reason, getRotation, getOpacity) {
      var r = this;
      var bb = eleTxrCache.getBoundingBox(ele);

      if (bb.w === 0 || bb.h === 0) {
        return;
      } // ignore zero size case


      var eleCache = eleTxrCache.getElement(ele, bb, pxRatio, lvl, reason);

      if (eleCache != null) {
        var opacity = getOpacity(r, ele);

        if (opacity === 0) {
          return;
        }

        var theta = getRotation(r, ele);
        var x1 = bb.x1,
            y1 = bb.y1,
            w = bb.w,
            h = bb.h;
        var x, y, sx, sy, smooth;

        if (theta !== 0) {
          var rotPt = eleTxrCache.getRotationPoint(ele);
          sx = rotPt.x;
          sy = rotPt.y;
          context.translate(sx, sy);
          context.rotate(theta);
          smooth = r.getImgSmoothing(context);

          if (!smooth) {
            r.setImgSmoothing(context, true);
          }

          var off = eleTxrCache.getRotationOffset(ele);
          x = off.x;
          y = off.y;
        } else {
          x = x1;
          y = y1;
        }

        var oldGlobalAlpha;

        if (opacity !== 1) {
          oldGlobalAlpha = context.globalAlpha;
          context.globalAlpha = oldGlobalAlpha * opacity;
        }

        context.drawImage(eleCache.texture.canvas, eleCache.x, 0, eleCache.width, eleCache.height, x, y, w, h);

        if (opacity !== 1) {
          context.globalAlpha = oldGlobalAlpha;
        }

        if (theta !== 0) {
          context.rotate(-theta);
          context.translate(-sx, -sy);

          if (!smooth) {
            r.setImgSmoothing(context, false);
          }
        }
      } else {
        eleTxrCache.drawElement(context, ele); // direct draw fallback
      }
    };

    var getZeroRotation = function getZeroRotation() {
      return 0;
    };

    var getLabelRotation = function getLabelRotation(r, ele) {
      return r.getTextAngle(ele, null);
    };

    var getSourceLabelRotation = function getSourceLabelRotation(r, ele) {
      return r.getTextAngle(ele, 'source');
    };

    var getTargetLabelRotation = function getTargetLabelRotation(r, ele) {
      return r.getTextAngle(ele, 'target');
    };

    var getOpacity = function getOpacity(r, ele) {
      return ele.effectiveOpacity();
    };

    var getTextOpacity = function getTextOpacity(e, ele) {
      return ele.pstyle('text-opacity').pfValue * ele.effectiveOpacity();
    };

    CRp$1.drawCachedElement = function (context, ele, pxRatio, extent, lvl, requestHighQuality) {
      var r = this;
      var _r$data = r.data,
          eleTxrCache = _r$data.eleTxrCache,
          lblTxrCache = _r$data.lblTxrCache,
          slbTxrCache = _r$data.slbTxrCache,
          tlbTxrCache = _r$data.tlbTxrCache;
      var bb = ele.boundingBox();
      var reason = requestHighQuality === true ? eleTxrCache.reasons.highQuality : null;

      if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
        return;
      }

      if (!extent || boundingBoxesIntersect(bb, extent)) {
        var isEdge = ele.isEdge();

        var badLine = ele.element()._private.rscratch.badLine;

        r.drawElementUnderlay(context, ele);
        r.drawCachedElementPortion(context, ele, eleTxrCache, pxRatio, lvl, reason, getZeroRotation, getOpacity);

        if (!isEdge || !badLine) {
          r.drawCachedElementPortion(context, ele, lblTxrCache, pxRatio, lvl, reason, getLabelRotation, getTextOpacity);
        }

        if (isEdge && !badLine) {
          r.drawCachedElementPortion(context, ele, slbTxrCache, pxRatio, lvl, reason, getSourceLabelRotation, getTextOpacity);
          r.drawCachedElementPortion(context, ele, tlbTxrCache, pxRatio, lvl, reason, getTargetLabelRotation, getTextOpacity);
        }

        r.drawElementOverlay(context, ele);
      }
    };

    CRp$1.drawElements = function (context, eles) {
      var r = this;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        r.drawElement(context, ele);
      }
    };

    CRp$1.drawCachedElements = function (context, eles, pxRatio, extent) {
      var r = this;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        r.drawCachedElement(context, ele, pxRatio, extent);
      }
    };

    CRp$1.drawCachedNodes = function (context, eles, pxRatio, extent) {
      var r = this;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];

        if (!ele.isNode()) {
          continue;
        }

        r.drawCachedElement(context, ele, pxRatio, extent);
      }
    };

    CRp$1.drawLayeredElements = function (context, eles, pxRatio, extent) {
      var r = this;
      var layers = r.data.lyrTxrCache.getLayers(eles, pxRatio);

      if (layers) {
        for (var i = 0; i < layers.length; i++) {
          var layer = layers[i];
          var bb = layer.bb;

          if (bb.w === 0 || bb.h === 0) {
            continue;
          }

          context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);
        }
      } else {
        // fall back on plain caching if no layers
        r.drawCachedElements(context, eles, pxRatio, extent);
      }
    };

    /* global Path2D */
    var CRp$2 = {};

    CRp$2.drawEdge = function (context, edge, shiftToOriginWithBb) {
      var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
      var r = this;
      var rs = edge._private.rscratch;

      if (shouldDrawOpacity && !edge.visible()) {
        return;
      } // if bezier ctrl pts can not be calculated, then die


      if (rs.badLine || rs.allpts == null || isNaN(rs.allpts[0])) {
        // isNaN in case edge is impossible and browser bugs (e.g. safari)
        return;
      }

      var bb;

      if (shiftToOriginWithBb) {
        bb = shiftToOriginWithBb;
        context.translate(-bb.x1, -bb.y1);
      }

      var opacity = shouldDrawOpacity ? edge.pstyle('opacity').value : 1;
      var lineOpacity = shouldDrawOpacity ? edge.pstyle('line-opacity').value : 1;
      var curveStyle = edge.pstyle('curve-style').value;
      var lineStyle = edge.pstyle('line-style').value;
      var edgeWidth = edge.pstyle('width').pfValue;
      var lineCap = edge.pstyle('line-cap').value;
      var effectiveLineOpacity = opacity * lineOpacity; // separate arrow opacity would require arrow-opacity property

      var effectiveArrowOpacity = opacity * lineOpacity;

      var drawLine = function drawLine() {
        var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : effectiveLineOpacity;

        if (curveStyle === 'straight-triangle') {
          r.eleStrokeStyle(context, edge, strokeOpacity);
          r.drawEdgeTrianglePath(edge, context, rs.allpts);
        } else {
          context.lineWidth = edgeWidth;
          context.lineCap = lineCap;
          r.eleStrokeStyle(context, edge, strokeOpacity);
          r.drawEdgePath(edge, context, rs.allpts, lineStyle);
          context.lineCap = 'butt'; // reset for other drawing functions
        }
      };

      var drawOverlay = function drawOverlay() {
        if (!shouldDrawOverlay) {
          return;
        }

        r.drawEdgeOverlay(context, edge);
      };

      var drawUnderlay = function drawUnderlay() {
        if (!shouldDrawOverlay) {
          return;
        }

        r.drawEdgeUnderlay(context, edge);
      };

      var drawArrows = function drawArrows() {
        var arrowOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : effectiveArrowOpacity;
        r.drawArrowheads(context, edge, arrowOpacity);
      };

      var drawText = function drawText() {
        r.drawElementText(context, edge, null, drawLabel);
      };

      context.lineJoin = 'round';
      var ghost = edge.pstyle('ghost').value === 'yes';

      if (ghost) {
        var gx = edge.pstyle('ghost-offset-x').pfValue;
        var gy = edge.pstyle('ghost-offset-y').pfValue;
        var ghostOpacity = edge.pstyle('ghost-opacity').value;
        var effectiveGhostOpacity = effectiveLineOpacity * ghostOpacity;
        context.translate(gx, gy);
        drawLine(effectiveGhostOpacity);
        drawArrows(effectiveGhostOpacity);
        context.translate(-gx, -gy);
      }

      drawUnderlay();
      drawLine();
      drawArrows();
      drawOverlay();
      drawText();

      if (shiftToOriginWithBb) {
        context.translate(bb.x1, bb.y1);
      }
    };

    var drawEdgeOverlayUnderlay = function drawEdgeOverlayUnderlay(overlayOrUnderlay) {
      if (!['overlay', 'underlay'].includes(overlayOrUnderlay)) {
        throw new Error('Invalid state');
      }

      return function (context, edge) {
        if (!edge.visible()) {
          return;
        }

        var opacity = edge.pstyle("".concat(overlayOrUnderlay, "-opacity")).value;

        if (opacity === 0) {
          return;
        }

        var r = this;
        var usePaths = r.usePaths();
        var rs = edge._private.rscratch;
        var padding = edge.pstyle("".concat(overlayOrUnderlay, "-padding")).pfValue;
        var width = 2 * padding;
        var color = edge.pstyle("".concat(overlayOrUnderlay, "-color")).value;
        context.lineWidth = width;

        if (rs.edgeType === 'self' && !usePaths) {
          context.lineCap = 'butt';
        } else {
          context.lineCap = 'round';
        }

        r.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
        r.drawEdgePath(edge, context, rs.allpts, 'solid');
      };
    };

    CRp$2.drawEdgeOverlay = drawEdgeOverlayUnderlay('overlay');
    CRp$2.drawEdgeUnderlay = drawEdgeOverlayUnderlay('underlay');

    CRp$2.drawEdgePath = function (edge, context, pts, type) {
      var rs = edge._private.rscratch;
      var canvasCxt = context;
      var path;
      var pathCacheHit = false;
      var usePaths = this.usePaths();
      var lineDashPattern = edge.pstyle('line-dash-pattern').pfValue;
      var lineDashOffset = edge.pstyle('line-dash-offset').pfValue;

      if (usePaths) {
        var pathCacheKey = pts.join('$');
        var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;

        if (keyMatches) {
          path = context = rs.pathCache;
          pathCacheHit = true;
        } else {
          path = context = new Path2D();
          rs.pathCacheKey = pathCacheKey;
          rs.pathCache = path;
        }
      }

      if (canvasCxt.setLineDash) {
        // for very outofdate browsers
        switch (type) {
          case 'dotted':
            canvasCxt.setLineDash([1, 1]);
            break;

          case 'dashed':
            canvasCxt.setLineDash(lineDashPattern);
            canvasCxt.lineDashOffset = lineDashOffset;
            break;

          case 'solid':
            canvasCxt.setLineDash([]);
            break;
        }
      }

      if (!pathCacheHit && !rs.badLine) {
        if (context.beginPath) {
          context.beginPath();
        }

        context.moveTo(pts[0], pts[1]);

        switch (rs.edgeType) {
          case 'bezier':
          case 'self':
          case 'compound':
          case 'multibezier':
            for (var i = 2; i + 3 < pts.length; i += 4) {
              context.quadraticCurveTo(pts[i], pts[i + 1], pts[i + 2], pts[i + 3]);
            }

            break;

          case 'straight':
          case 'segments':
          case 'haystack':
            for (var _i = 2; _i + 1 < pts.length; _i += 2) {
              context.lineTo(pts[_i], pts[_i + 1]);
            }

            break;
        }
      }

      context = canvasCxt;

      if (usePaths) {
        context.stroke(path);
      } else {
        context.stroke();
      } // reset any line dashes


      if (context.setLineDash) {
        // for very outofdate browsers
        context.setLineDash([]);
      }
    };

    CRp$2.drawEdgeTrianglePath = function (edge, context, pts) {
      // use line stroke style for triangle fill style
      context.fillStyle = context.strokeStyle;
      var edgeWidth = edge.pstyle('width').pfValue;

      for (var i = 0; i + 1 < pts.length; i += 2) {
        var vector = [pts[i + 2] - pts[i], pts[i + 3] - pts[i + 1]];
        var length = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);
        var normal = [vector[1] / length, -vector[0] / length];
        var triangleHead = [normal[0] * edgeWidth / 2, normal[1] * edgeWidth / 2];
        context.beginPath();
        context.moveTo(pts[i] - triangleHead[0], pts[i + 1] - triangleHead[1]);
        context.lineTo(pts[i] + triangleHead[0], pts[i + 1] + triangleHead[1]);
        context.lineTo(pts[i + 2], pts[i + 3]);
        context.closePath();
        context.fill();
      }
    };

    CRp$2.drawArrowheads = function (context, edge, opacity) {
      var rs = edge._private.rscratch;
      var isHaystack = rs.edgeType === 'haystack';

      if (!isHaystack) {
        this.drawArrowhead(context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);
      }

      this.drawArrowhead(context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);
      this.drawArrowhead(context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);

      if (!isHaystack) {
        this.drawArrowhead(context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);
      }
    };

    CRp$2.drawArrowhead = function (context, edge, prefix, x, y, angle, opacity) {
      if (isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null) {
        return;
      }

      var self = this;
      var arrowShape = edge.pstyle(prefix + '-arrow-shape').value;

      if (arrowShape === 'none') {
        return;
      }

      var arrowClearFill = edge.pstyle(prefix + '-arrow-fill').value === 'hollow' ? 'both' : 'filled';
      var arrowFill = edge.pstyle(prefix + '-arrow-fill').value;
      var edgeWidth = edge.pstyle('width').pfValue;
      var edgeOpacity = edge.pstyle('opacity').value;

      if (opacity === undefined) {
        opacity = edgeOpacity;
      }

      var gco = context.globalCompositeOperation;

      if (opacity !== 1 || arrowFill === 'hollow') {
        // then extra clear is needed
        context.globalCompositeOperation = 'destination-out';
        self.colorFillStyle(context, 255, 255, 255, 1);
        self.colorStrokeStyle(context, 255, 255, 255, 1);
        self.drawArrowShape(edge, context, arrowClearFill, edgeWidth, arrowShape, x, y, angle);
        context.globalCompositeOperation = gco;
      } // otherwise, the opaque arrow clears it for free :)


      var color = edge.pstyle(prefix + '-arrow-color').value;
      self.colorFillStyle(context, color[0], color[1], color[2], opacity);
      self.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
      self.drawArrowShape(edge, context, arrowFill, edgeWidth, arrowShape, x, y, angle);
    };

    CRp$2.drawArrowShape = function (edge, context, fill, edgeWidth, shape, x, y, angle) {
      var r = this;
      var usePaths = this.usePaths() && shape !== 'triangle-cross';
      var pathCacheHit = false;
      var path;
      var canvasContext = context;
      var translation = {
        x: x,
        y: y
      };
      var scale = edge.pstyle('arrow-scale').value;
      var size = this.getArrowWidth(edgeWidth, scale);
      var shapeImpl = r.arrowShapes[shape];

      if (usePaths) {
        var cache = r.arrowPathCache = r.arrowPathCache || [];
        var key = hashString(shape);
        var cachedPath = cache[key];

        if (cachedPath != null) {
          path = context = cachedPath;
          pathCacheHit = true;
        } else {
          path = context = new Path2D();
          cache[key] = path;
        }
      }

      if (!pathCacheHit) {
        if (context.beginPath) {
          context.beginPath();
        }

        if (usePaths) {
          // store in the path cache with values easily manipulated later
          shapeImpl.draw(context, 1, 0, {
            x: 0,
            y: 0
          }, 1);
        } else {
          shapeImpl.draw(context, size, angle, translation, edgeWidth);
        }

        if (context.closePath) {
          context.closePath();
        }
      }

      context = canvasContext;

      if (usePaths) {
        // set transform to arrow position/orientation
        context.translate(x, y);
        context.rotate(angle);
        context.scale(size, size);
      }

      if (fill === 'filled' || fill === 'both') {
        if (usePaths) {
          context.fill(path);
        } else {
          context.fill();
        }
      }

      if (fill === 'hollow' || fill === 'both') {
        context.lineWidth = (shapeImpl.matchEdgeWidth ? edgeWidth : 1) / (usePaths ? size : 1);
        context.lineJoin = 'miter';

        if (usePaths) {
          context.stroke(path);
        } else {
          context.stroke();
        }
      }

      if (usePaths) {
        // reset transform by applying inverse
        context.scale(1 / size, 1 / size);
        context.rotate(-angle);
        context.translate(-x, -y);
      }
    };

    var CRp$3 = {};

    CRp$3.safeDrawImage = function (context, img, ix, iy, iw, ih, x, y, w, h) {
      // detect problematic cases for old browsers with bad images (cheaper than try-catch)
      if (iw <= 0 || ih <= 0 || w <= 0 || h <= 0) {
        return;
      }

      context.drawImage(img, ix, iy, iw, ih, x, y, w, h);
    };

    CRp$3.drawInscribedImage = function (context, img, node, index, nodeOpacity) {
      var r = this;
      var pos = node.position();
      var nodeX = pos.x;
      var nodeY = pos.y;
      var styleObj = node.cy().style();
      var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);
      var fit = getIndexedStyle(node, 'background-fit', 'value', index);
      var repeat = getIndexedStyle(node, 'background-repeat', 'value', index);
      var nodeW = node.width();
      var nodeH = node.height();
      var paddingX2 = node.padding() * 2;
      var nodeTW = nodeW + (getIndexedStyle(node, 'background-width-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
      var nodeTH = nodeH + (getIndexedStyle(node, 'background-height-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
      var rs = node._private.rscratch;
      var clip = getIndexedStyle(node, 'background-clip', 'value', index);
      var shouldClip = clip === 'node';
      var imgOpacity = getIndexedStyle(node, 'background-image-opacity', 'value', index) * nodeOpacity;
      var smooth = getIndexedStyle(node, 'background-image-smoothing', 'value', index);
      var imgW = img.width || img.cachedW;
      var imgH = img.height || img.cachedH; // workaround for broken browsers like ie

      if (null == imgW || null == imgH) {
        document.body.appendChild(img); // eslint-disable-line no-undef

        imgW = img.cachedW = img.width || img.offsetWidth;
        imgH = img.cachedH = img.height || img.offsetHeight;
        document.body.removeChild(img); // eslint-disable-line no-undef
      }

      var w = imgW;
      var h = imgH;

      if (getIndexedStyle(node, 'background-width', 'value', index) !== 'auto') {
        if (getIndexedStyle(node, 'background-width', 'units', index) === '%') {
          w = getIndexedStyle(node, 'background-width', 'pfValue', index) * nodeTW;
        } else {
          w = getIndexedStyle(node, 'background-width', 'pfValue', index);
        }
      }

      if (getIndexedStyle(node, 'background-height', 'value', index) !== 'auto') {
        if (getIndexedStyle(node, 'background-height', 'units', index) === '%') {
          h = getIndexedStyle(node, 'background-height', 'pfValue', index) * nodeTH;
        } else {
          h = getIndexedStyle(node, 'background-height', 'pfValue', index);
        }
      }

      if (w === 0 || h === 0) {
        return; // no point in drawing empty image (and chrome is broken in this case)
      }

      if (fit === 'contain') {
        var scale = Math.min(nodeTW / w, nodeTH / h);
        w *= scale;
        h *= scale;
      } else if (fit === 'cover') {
        var scale = Math.max(nodeTW / w, nodeTH / h);
        w *= scale;
        h *= scale;
      }

      var x = nodeX - nodeTW / 2; // left

      var posXUnits = getIndexedStyle(node, 'background-position-x', 'units', index);
      var posXPfVal = getIndexedStyle(node, 'background-position-x', 'pfValue', index);

      if (posXUnits === '%') {
        x += (nodeTW - w) * posXPfVal;
      } else {
        x += posXPfVal;
      }

      var offXUnits = getIndexedStyle(node, 'background-offset-x', 'units', index);
      var offXPfVal = getIndexedStyle(node, 'background-offset-x', 'pfValue', index);

      if (offXUnits === '%') {
        x += (nodeTW - w) * offXPfVal;
      } else {
        x += offXPfVal;
      }

      var y = nodeY - nodeTH / 2; // top

      var posYUnits = getIndexedStyle(node, 'background-position-y', 'units', index);
      var posYPfVal = getIndexedStyle(node, 'background-position-y', 'pfValue', index);

      if (posYUnits === '%') {
        y += (nodeTH - h) * posYPfVal;
      } else {
        y += posYPfVal;
      }

      var offYUnits = getIndexedStyle(node, 'background-offset-y', 'units', index);
      var offYPfVal = getIndexedStyle(node, 'background-offset-y', 'pfValue', index);

      if (offYUnits === '%') {
        y += (nodeTH - h) * offYPfVal;
      } else {
        y += offYPfVal;
      }

      if (rs.pathCache) {
        x -= nodeX;
        y -= nodeY;
        nodeX = 0;
        nodeY = 0;
      }

      var gAlpha = context.globalAlpha;
      context.globalAlpha = imgOpacity;
      var smoothingEnabled = r.getImgSmoothing(context);
      var isSmoothingSwitched = false;

      if (smooth === 'no' && smoothingEnabled) {
        r.setImgSmoothing(context, false);
        isSmoothingSwitched = true;
      } else if (smooth === 'yes' && !smoothingEnabled) {
        r.setImgSmoothing(context, true);
        isSmoothingSwitched = true;
      }

      if (repeat === 'no-repeat') {
        if (shouldClip) {
          context.save();

          if (rs.pathCache) {
            context.clip(rs.pathCache);
          } else {
            r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
            context.clip();
          }
        }

        r.safeDrawImage(context, img, 0, 0, imgW, imgH, x, y, w, h);

        if (shouldClip) {
          context.restore();
        }
      } else {
        var pattern = context.createPattern(img, repeat);
        context.fillStyle = pattern;
        r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
        context.translate(x, y);
        context.fill();
        context.translate(-x, -y);
      }

      context.globalAlpha = gAlpha;

      if (isSmoothingSwitched) {
        r.setImgSmoothing(context, smoothingEnabled);
      }
    };

    var CRp$4 = {};

    CRp$4.eleTextBiggerThanMin = function (ele, scale) {
      if (!scale) {
        var zoom = ele.cy().zoom();
        var pxRatio = this.getPixelRatio();
        var lvl = Math.ceil(log2(zoom * pxRatio)); // the effective texture level

        scale = Math.pow(2, lvl);
      }

      var computedSize = ele.pstyle('font-size').pfValue * scale;
      var minSize = ele.pstyle('min-zoomed-font-size').pfValue;

      if (computedSize < minSize) {
        return false;
      }

      return true;
    };

    CRp$4.drawElementText = function (context, ele, shiftToOriginWithBb, force, prefix) {
      var useEleOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
      var r = this;

      if (force == null) {
        if (useEleOpacity && !r.eleTextBiggerThanMin(ele)) {
          return;
        }
      } else if (force === false) {
        return;
      }

      if (ele.isNode()) {
        var label = ele.pstyle('label');

        if (!label || !label.value) {
          return;
        }

        var justification = r.getLabelJustification(ele);
        context.textAlign = justification;
        context.textBaseline = 'bottom';
      } else {
        var badLine = ele.element()._private.rscratch.badLine;

        var _label = ele.pstyle('label');

        var srcLabel = ele.pstyle('source-label');
        var tgtLabel = ele.pstyle('target-label');

        if (badLine || (!_label || !_label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {
          return;
        }

        context.textAlign = 'center';
        context.textBaseline = 'bottom';
      }

      var applyRotation = !shiftToOriginWithBb;
      var bb;

      if (shiftToOriginWithBb) {
        bb = shiftToOriginWithBb;
        context.translate(-bb.x1, -bb.y1);
      }

      if (prefix == null) {
        r.drawText(context, ele, null, applyRotation, useEleOpacity);

        if (ele.isEdge()) {
          r.drawText(context, ele, 'source', applyRotation, useEleOpacity);
          r.drawText(context, ele, 'target', applyRotation, useEleOpacity);
        }
      } else {
        r.drawText(context, ele, prefix, applyRotation, useEleOpacity);
      }

      if (shiftToOriginWithBb) {
        context.translate(bb.x1, bb.y1);
      }
    };

    CRp$4.getFontCache = function (context) {
      var cache;
      this.fontCaches = this.fontCaches || [];

      for (var i = 0; i < this.fontCaches.length; i++) {
        cache = this.fontCaches[i];

        if (cache.context === context) {
          return cache;
        }
      }

      cache = {
        context: context
      };
      this.fontCaches.push(cache);
      return cache;
    }; // set up canvas context with font
    // returns transformed text string


    CRp$4.setupTextStyle = function (context, ele) {
      var useEleOpacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      // Font style
      var labelStyle = ele.pstyle('font-style').strValue;
      var labelSize = ele.pstyle('font-size').pfValue + 'px';
      var labelFamily = ele.pstyle('font-family').strValue;
      var labelWeight = ele.pstyle('font-weight').strValue;
      var opacity = useEleOpacity ? ele.effectiveOpacity() * ele.pstyle('text-opacity').value : 1;
      var outlineOpacity = ele.pstyle('text-outline-opacity').value * opacity;
      var color = ele.pstyle('color').value;
      var outlineColor = ele.pstyle('text-outline-color').value;
      context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;
      context.lineJoin = 'round'; // so text outlines aren't jagged

      this.colorFillStyle(context, color[0], color[1], color[2], opacity);
      this.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);
    }; // TODO ensure re-used


    function roundRect(ctx, x, y, width, height) {
      var radius = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 5;
      ctx.beginPath();
      ctx.moveTo(x + radius, y);
      ctx.lineTo(x + width - radius, y);
      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
      ctx.lineTo(x + width, y + height - radius);
      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
      ctx.lineTo(x + radius, y + height);
      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
      ctx.lineTo(x, y + radius);
      ctx.quadraticCurveTo(x, y, x + radius, y);
      ctx.closePath();
      ctx.fill();
    }

    CRp$4.getTextAngle = function (ele, prefix) {
      var theta;
      var _p = ele._private;
      var rscratch = _p.rscratch;
      var pdash = prefix ? prefix + '-' : '';
      var rotation = ele.pstyle(pdash + 'text-rotation');
      var textAngle = getPrefixedProperty(rscratch, 'labelAngle', prefix);

      if (rotation.strValue === 'autorotate') {
        theta = ele.isEdge() ? textAngle : 0;
      } else if (rotation.strValue === 'none') {
        theta = 0;
      } else {
        theta = rotation.pfValue;
      }

      return theta;
    };

    CRp$4.drawText = function (context, ele, prefix) {
      var applyRotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var useEleOpacity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      var _p = ele._private;
      var rscratch = _p.rscratch;
      var parentOpacity = useEleOpacity ? ele.effectiveOpacity() : 1;

      if (useEleOpacity && (parentOpacity === 0 || ele.pstyle('text-opacity').value === 0)) {
        return;
      } // use 'main' as an alias for the main label (i.e. null prefix)


      if (prefix === 'main') {
        prefix = null;
      }

      var textX = getPrefixedProperty(rscratch, 'labelX', prefix);
      var textY = getPrefixedProperty(rscratch, 'labelY', prefix);
      var orgTextX, orgTextY; // used for rotation

      var text = this.getLabelText(ele, prefix);

      if (text != null && text !== '' && !isNaN(textX) && !isNaN(textY)) {
        this.setupTextStyle(context, ele, useEleOpacity);
        var pdash = prefix ? prefix + '-' : '';
        var textW = getPrefixedProperty(rscratch, 'labelWidth', prefix);
        var textH = getPrefixedProperty(rscratch, 'labelHeight', prefix);
        var marginX = ele.pstyle(pdash + 'text-margin-x').pfValue;
        var marginY = ele.pstyle(pdash + 'text-margin-y').pfValue;
        var isEdge = ele.isEdge();
        var halign = ele.pstyle('text-halign').value;
        var valign = ele.pstyle('text-valign').value;

        if (isEdge) {
          halign = 'center';
          valign = 'center';
        }

        textX += marginX;
        textY += marginY;
        var theta;

        if (!applyRotation) {
          theta = 0;
        } else {
          theta = this.getTextAngle(ele, prefix);
        }

        if (theta !== 0) {
          orgTextX = textX;
          orgTextY = textY;
          context.translate(orgTextX, orgTextY);
          context.rotate(theta);
          textX = 0;
          textY = 0;
        }

        switch (valign) {
          case 'top':
            break;

          case 'center':
            textY += textH / 2;
            break;

          case 'bottom':
            textY += textH;
            break;
        }

        var backgroundOpacity = ele.pstyle('text-background-opacity').value;
        var borderOpacity = ele.pstyle('text-border-opacity').value;
        var textBorderWidth = ele.pstyle('text-border-width').pfValue;
        var backgroundPadding = ele.pstyle('text-background-padding').pfValue;

        if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {
          var bgX = textX - backgroundPadding;

          switch (halign) {
            case 'left':
              bgX -= textW;
              break;

            case 'center':
              bgX -= textW / 2;
              break;
          }

          var bgY = textY - textH - backgroundPadding;
          var bgW = textW + 2 * backgroundPadding;
          var bgH = textH + 2 * backgroundPadding;

          if (backgroundOpacity > 0) {
            var textFill = context.fillStyle;
            var textBackgroundColor = ele.pstyle('text-background-color').value;
            context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';
            var styleShape = ele.pstyle('text-background-shape').strValue;

            if (styleShape.indexOf('round') === 0) {
              roundRect(context, bgX, bgY, bgW, bgH, 2);
            } else {
              context.fillRect(bgX, bgY, bgW, bgH);
            }

            context.fillStyle = textFill;
          }

          if (textBorderWidth > 0 && borderOpacity > 0) {
            var textStroke = context.strokeStyle;
            var textLineWidth = context.lineWidth;
            var textBorderColor = ele.pstyle('text-border-color').value;
            var textBorderStyle = ele.pstyle('text-border-style').value;
            context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';
            context.lineWidth = textBorderWidth;

            if (context.setLineDash) {
              // for very outofdate browsers
              switch (textBorderStyle) {
                case 'dotted':
                  context.setLineDash([1, 1]);
                  break;

                case 'dashed':
                  context.setLineDash([4, 2]);
                  break;

                case 'double':
                  context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders

                  context.setLineDash([]);
                  break;

                case 'solid':
                  context.setLineDash([]);
                  break;
              }
            }

            context.strokeRect(bgX, bgY, bgW, bgH);

            if (textBorderStyle === 'double') {
              var whiteWidth = textBorderWidth / 2;
              context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);
            }

            if (context.setLineDash) {
              // for very outofdate browsers
              context.setLineDash([]);
            }

            context.lineWidth = textLineWidth;
            context.strokeStyle = textStroke;
          }
        }

        var lineWidth = 2 * ele.pstyle('text-outline-width').pfValue; // *2 b/c the stroke is drawn centred on the middle

        if (lineWidth > 0) {
          context.lineWidth = lineWidth;
        }

        if (ele.pstyle('text-wrap').value === 'wrap') {
          var lines = getPrefixedProperty(rscratch, 'labelWrapCachedLines', prefix);
          var lineHeight = getPrefixedProperty(rscratch, 'labelLineHeight', prefix);
          var halfTextW = textW / 2;
          var justification = this.getLabelJustification(ele);

          if (justification === 'auto') ; else if (halign === 'left') {
            // auto justification : right
            if (justification === 'left') {
              textX += -textW;
            } else if (justification === 'center') {
              textX += -halfTextW;
            } // else same as auto

          } else if (halign === 'center') {
            // auto justfication : center
            if (justification === 'left') {
              textX += -halfTextW;
            } else if (justification === 'right') {
              textX += halfTextW;
            } // else same as auto

          } else if (halign === 'right') {
            // auto justification : left
            if (justification === 'center') {
              textX += halfTextW;
            } else if (justification === 'right') {
              textX += textW;
            } // else same as auto

          }

          switch (valign) {
            case 'top':
              textY -= (lines.length - 1) * lineHeight;
              break;

            case 'center':
            case 'bottom':
              textY -= (lines.length - 1) * lineHeight;
              break;
          }

          for (var l = 0; l < lines.length; l++) {
            if (lineWidth > 0) {
              context.strokeText(lines[l], textX, textY);
            }

            context.fillText(lines[l], textX, textY);
            textY += lineHeight;
          }
        } else {
          if (lineWidth > 0) {
            context.strokeText(text, textX, textY);
          }

          context.fillText(text, textX, textY);
        }

        if (theta !== 0) {
          context.rotate(-theta);
          context.translate(-orgTextX, -orgTextY);
        }
      }
    };

    /* global Path2D */
    var CRp$5 = {};

    CRp$5.drawNode = function (context, node, shiftToOriginWithBb) {
      var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
      var r = this;
      var nodeWidth, nodeHeight;
      var _p = node._private;
      var rs = _p.rscratch;
      var pos = node.position();

      if (!number(pos.x) || !number(pos.y)) {
        return; // can't draw node with undefined position
      }

      if (shouldDrawOpacity && !node.visible()) {
        return;
      }

      var eleOpacity = shouldDrawOpacity ? node.effectiveOpacity() : 1;
      var usePaths = r.usePaths();
      var path;
      var pathCacheHit = false;
      var padding = node.padding();
      nodeWidth = node.width() + 2 * padding;
      nodeHeight = node.height() + 2 * padding; //
      // setup shift

      var bb;

      if (shiftToOriginWithBb) {
        bb = shiftToOriginWithBb;
        context.translate(-bb.x1, -bb.y1);
      } //
      // load bg image


      var bgImgProp = node.pstyle('background-image');
      var urls = bgImgProp.value;
      var urlDefined = new Array(urls.length);
      var image = new Array(urls.length);
      var numImages = 0;

      for (var i = 0; i < urls.length; i++) {
        var url = urls[i];
        var defd = urlDefined[i] = url != null && url !== 'none';

        if (defd) {
          var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, 'background-image-crossorigin', 'value', i);
          numImages++; // get image, and if not loaded then ask to redraw when later loaded

          image[i] = r.getCachedImage(url, bgImgCrossOrigin, function () {
            _p.backgroundTimestamp = Date.now();
            node.emitAndNotify('background');
          });
        }
      } //
      // setup styles


      var darkness = node.pstyle('background-blacken').value;
      var borderWidth = node.pstyle('border-width').pfValue;
      var bgOpacity = node.pstyle('background-opacity').value * eleOpacity;
      var borderColor = node.pstyle('border-color').value;
      var borderStyle = node.pstyle('border-style').value;
      var borderOpacity = node.pstyle('border-opacity').value * eleOpacity;
      context.lineJoin = 'miter'; // so borders are square with the node shape

      var setupShapeColor = function setupShapeColor() {
        var bgOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bgOpacity;
        r.eleFillStyle(context, node, bgOpy);
      };

      var setupBorderColor = function setupBorderColor() {
        var bdrOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : borderOpacity;
        r.colorStrokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);
      }; //
      // setup shape


      var styleShape = node.pstyle('shape').strValue;
      var shapePts = node.pstyle('shape-polygon-points').pfValue;

      if (usePaths) {
        context.translate(pos.x, pos.y);
        var pathCache = r.nodePathCache = r.nodePathCache || [];
        var key = hashStrings(styleShape === 'polygon' ? styleShape + ',' + shapePts.join(',') : styleShape, '' + nodeHeight, '' + nodeWidth);
        var cachedPath = pathCache[key];

        if (cachedPath != null) {
          path = cachedPath;
          pathCacheHit = true;
          rs.pathCache = path;
        } else {
          path = new Path2D();
          pathCache[key] = rs.pathCache = path;
        }
      }

      var drawShape = function drawShape() {
        if (!pathCacheHit) {
          var npos = pos;

          if (usePaths) {
            npos = {
              x: 0,
              y: 0
            };
          }

          r.nodeShapes[r.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight);
        }

        if (usePaths) {
          context.fill(path);
        } else {
          context.fill();
        }
      };

      var drawImages = function drawImages() {
        var nodeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
        var inside = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var prevBging = _p.backgrounding;
        var totalCompleted = 0;

        for (var _i = 0; _i < image.length; _i++) {
          var bgContainment = node.cy().style().getIndexedStyle(node, 'background-image-containment', 'value', _i);

          if (inside && bgContainment === 'over' || !inside && bgContainment === 'inside') {
            totalCompleted++;
            continue;
          }

          if (urlDefined[_i] && image[_i].complete && !image[_i].error) {
            totalCompleted++;
            r.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);
          }
        }

        _p.backgrounding = !(totalCompleted === numImages);

        if (prevBging !== _p.backgrounding) {
          // update style b/c :backgrounding state changed
          node.updateStyle(false);
        }
      };

      var drawPie = function drawPie() {
        var redrawShape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var pieOpacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : eleOpacity;

        if (r.hasPie(node)) {
          r.drawPie(context, node, pieOpacity); // redraw/restore path if steps after pie need it

          if (redrawShape) {
            if (!usePaths) {
              r.nodeShapes[r.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight);
            }
          }
        }
      };

      var darken = function darken() {
        var darkenOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
        var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;
        var c = darkness > 0 ? 0 : 255;

        if (darkness !== 0) {
          r.colorFillStyle(context, c, c, c, opacity);

          if (usePaths) {
            context.fill(path);
          } else {
            context.fill();
          }
        }
      };

      var drawBorder = function drawBorder() {
        if (borderWidth > 0) {
          context.lineWidth = borderWidth;
          context.lineCap = 'butt';

          if (context.setLineDash) {
            // for very outofdate browsers
            switch (borderStyle) {
              case 'dotted':
                context.setLineDash([1, 1]);
                break;

              case 'dashed':
                context.setLineDash([4, 2]);
                break;

              case 'solid':
              case 'double':
                context.setLineDash([]);
                break;
            }
          }

          if (usePaths) {
            context.stroke(path);
          } else {
            context.stroke();
          }

          if (borderStyle === 'double') {
            context.lineWidth = borderWidth / 3;
            var gco = context.globalCompositeOperation;
            context.globalCompositeOperation = 'destination-out';

            if (usePaths) {
              context.stroke(path);
            } else {
              context.stroke();
            }

            context.globalCompositeOperation = gco;
          } // reset in case we changed the border style


          if (context.setLineDash) {
            // for very outofdate browsers
            context.setLineDash([]);
          }
        }
      };

      var drawOverlay = function drawOverlay() {
        if (shouldDrawOverlay) {
          r.drawNodeOverlay(context, node, pos, nodeWidth, nodeHeight);
        }
      };

      var drawUnderlay = function drawUnderlay() {
        if (shouldDrawOverlay) {
          r.drawNodeUnderlay(context, node, pos, nodeWidth, nodeHeight);
        }
      };

      var drawText = function drawText() {
        r.drawElementText(context, node, null, drawLabel);
      };

      var ghost = node.pstyle('ghost').value === 'yes';

      if (ghost) {
        var gx = node.pstyle('ghost-offset-x').pfValue;
        var gy = node.pstyle('ghost-offset-y').pfValue;
        var ghostOpacity = node.pstyle('ghost-opacity').value;
        var effGhostOpacity = ghostOpacity * eleOpacity;
        context.translate(gx, gy);
        setupShapeColor(ghostOpacity * bgOpacity);
        drawShape();
        drawImages(effGhostOpacity, true);
        setupBorderColor(ghostOpacity * borderOpacity);
        drawBorder();
        drawPie(darkness !== 0 || borderWidth !== 0);
        drawImages(effGhostOpacity, false);
        darken(effGhostOpacity);
        context.translate(-gx, -gy);
      }

      if (usePaths) {
        context.translate(-pos.x, -pos.y);
      }

      drawUnderlay();

      if (usePaths) {
        context.translate(pos.x, pos.y);
      }

      setupShapeColor();
      drawShape();
      drawImages(eleOpacity, true);
      setupBorderColor();
      drawBorder();
      drawPie(darkness !== 0 || borderWidth !== 0);
      drawImages(eleOpacity, false);
      darken();

      if (usePaths) {
        context.translate(-pos.x, -pos.y);
      }

      drawText();
      drawOverlay(); //
      // clean up shift

      if (shiftToOriginWithBb) {
        context.translate(bb.x1, bb.y1);
      }
    };

    var drawNodeOverlayUnderlay = function drawNodeOverlayUnderlay(overlayOrUnderlay) {
      if (!['overlay', 'underlay'].includes(overlayOrUnderlay)) {
        throw new Error('Invalid state');
      }

      return function (context, node, pos, nodeWidth, nodeHeight) {
        var r = this;

        if (!node.visible()) {
          return;
        }

        var padding = node.pstyle("".concat(overlayOrUnderlay, "-padding")).pfValue;
        var opacity = node.pstyle("".concat(overlayOrUnderlay, "-opacity")).value;
        var color = node.pstyle("".concat(overlayOrUnderlay, "-color")).value;
        var shape = node.pstyle("".concat(overlayOrUnderlay, "-shape")).value;

        if (opacity > 0) {
          pos = pos || node.position();

          if (nodeWidth == null || nodeHeight == null) {
            var _padding = node.padding();

            nodeWidth = node.width() + 2 * _padding;
            nodeHeight = node.height() + 2 * _padding;
          }

          r.colorFillStyle(context, color[0], color[1], color[2], opacity);
          r.nodeShapes[shape].draw(context, pos.x, pos.y, nodeWidth + padding * 2, nodeHeight + padding * 2);
          context.fill();
        }
      };
    };

    CRp$5.drawNodeOverlay = drawNodeOverlayUnderlay('overlay');
    CRp$5.drawNodeUnderlay = drawNodeOverlayUnderlay('underlay'); // does the node have at least one pie piece?

    CRp$5.hasPie = function (node) {
      node = node[0]; // ensure ele ref

      return node._private.hasPie;
    };

    CRp$5.drawPie = function (context, node, nodeOpacity, pos) {
      node = node[0]; // ensure ele ref

      pos = pos || node.position();
      var cyStyle = node.cy().style();
      var pieSize = node.pstyle('pie-size');
      var x = pos.x;
      var y = pos.y;
      var nodeW = node.width();
      var nodeH = node.height();
      var radius = Math.min(nodeW, nodeH) / 2; // must fit in node

      var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]

      var usePaths = this.usePaths();

      if (usePaths) {
        x = 0;
        y = 0;
      }

      if (pieSize.units === '%') {
        radius = radius * pieSize.pfValue;
      } else if (pieSize.pfValue !== undefined) {
        radius = pieSize.pfValue / 2;
      }

      for (var i = 1; i <= cyStyle.pieBackgroundN; i++) {
        // 1..N
        var size = node.pstyle('pie-' + i + '-background-size').value;
        var color = node.pstyle('pie-' + i + '-background-color').value;
        var opacity = node.pstyle('pie-' + i + '-background-opacity').value * nodeOpacity;
        var percent = size / 100; // map integer range [0, 100] to [0, 1]
        // percent can't push beyond 1

        if (percent + lastPercent > 1) {
          percent = 1 - lastPercent;
        }

        var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise

        var angleDelta = 2 * Math.PI * percent;
        var angleEnd = angleStart + angleDelta; // ignore if
        // - zero size
        // - we're already beyond the full circle
        // - adding the current slice would go beyond the full circle

        if (size === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
          continue;
        }

        context.beginPath();
        context.moveTo(x, y);
        context.arc(x, y, radius, angleStart, angleEnd);
        context.closePath();
        this.colorFillStyle(context, color[0], color[1], color[2], opacity);
        context.fill();
        lastPercent += percent;
      }
    };

    var CRp$6 = {};
    var motionBlurDelay = 100; // var isFirefox = typeof InstallTrigger !== 'undefined';

    CRp$6.getPixelRatio = function () {
      var context = this.data.contexts[0];

      if (this.forcedPixelRatio != null) {
        return this.forcedPixelRatio;
      }

      var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
      return (window.devicePixelRatio || 1) / backingStore; // eslint-disable-line no-undef
    };

    CRp$6.paintCache = function (context) {
      var caches = this.paintCaches = this.paintCaches || [];
      var needToCreateCache = true;
      var cache;

      for (var i = 0; i < caches.length; i++) {
        cache = caches[i];

        if (cache.context === context) {
          needToCreateCache = false;
          break;
        }
      }

      if (needToCreateCache) {
        cache = {
          context: context
        };
        caches.push(cache);
      }

      return cache;
    };

    CRp$6.createGradientStyleFor = function (context, shapeStyleName, ele, fill, opacity) {
      var gradientStyle;
      var usePaths = this.usePaths();
      var colors = ele.pstyle(shapeStyleName + '-gradient-stop-colors').value,
          positions = ele.pstyle(shapeStyleName + '-gradient-stop-positions').pfValue;

      if (fill === 'radial-gradient') {
        if (ele.isEdge()) {
          var start = ele.sourceEndpoint(),
              end = ele.targetEndpoint(),
              mid = ele.midpoint();
          var d1 = dist(start, mid);
          var d2 = dist(end, mid);
          gradientStyle = context.createRadialGradient(mid.x, mid.y, 0, mid.x, mid.y, Math.max(d1, d2));
        } else {
          var pos = usePaths ? {
            x: 0,
            y: 0
          } : ele.position(),
              width = ele.paddedWidth(),
              height = ele.paddedHeight();
          gradientStyle = context.createRadialGradient(pos.x, pos.y, 0, pos.x, pos.y, Math.max(width, height));
        }
      } else {
        if (ele.isEdge()) {
          var _start = ele.sourceEndpoint(),
              _end = ele.targetEndpoint();

          gradientStyle = context.createLinearGradient(_start.x, _start.y, _end.x, _end.y);
        } else {
          var _pos = usePaths ? {
            x: 0,
            y: 0
          } : ele.position(),
              _width = ele.paddedWidth(),
              _height = ele.paddedHeight(),
              halfWidth = _width / 2,
              halfHeight = _height / 2;

          var direction = ele.pstyle('background-gradient-direction').value;

          switch (direction) {
            case 'to-bottom':
              gradientStyle = context.createLinearGradient(_pos.x, _pos.y - halfHeight, _pos.x, _pos.y + halfHeight);
              break;

            case 'to-top':
              gradientStyle = context.createLinearGradient(_pos.x, _pos.y + halfHeight, _pos.x, _pos.y - halfHeight);
              break;

            case 'to-left':
              gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y, _pos.x - halfWidth, _pos.y);
              break;

            case 'to-right':
              gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y, _pos.x + halfWidth, _pos.y);
              break;

            case 'to-bottom-right':
            case 'to-right-bottom':
              gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y - halfHeight, _pos.x + halfWidth, _pos.y + halfHeight);
              break;

            case 'to-top-right':
            case 'to-right-top':
              gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y + halfHeight, _pos.x + halfWidth, _pos.y - halfHeight);
              break;

            case 'to-bottom-left':
            case 'to-left-bottom':
              gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y - halfHeight, _pos.x - halfWidth, _pos.y + halfHeight);
              break;

            case 'to-top-left':
            case 'to-left-top':
              gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y + halfHeight, _pos.x - halfWidth, _pos.y - halfHeight);
              break;
          }
        }
      }

      if (!gradientStyle) return null; // invalid gradient style

      var hasPositions = positions.length === colors.length;
      var length = colors.length;

      for (var i = 0; i < length; i++) {
        gradientStyle.addColorStop(hasPositions ? positions[i] : i / (length - 1), 'rgba(' + colors[i][0] + ',' + colors[i][1] + ',' + colors[i][2] + ',' + opacity + ')');
      }

      return gradientStyle;
    };

    CRp$6.gradientFillStyle = function (context, ele, fill, opacity) {
      var gradientStyle = this.createGradientStyleFor(context, 'background', ele, fill, opacity);
      if (!gradientStyle) return null; // error

      context.fillStyle = gradientStyle;
    };

    CRp$6.colorFillStyle = function (context, r, g, b, a) {
      context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching
      // var cache = this.paintCache(context);
      // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
      // if( cache.fillStyle !== fillStyle ){
      //   context.fillStyle = cache.fillStyle = fillStyle;
      // }
    };

    CRp$6.eleFillStyle = function (context, ele, opacity) {
      var backgroundFill = ele.pstyle('background-fill').value;

      if (backgroundFill === 'linear-gradient' || backgroundFill === 'radial-gradient') {
        this.gradientFillStyle(context, ele, backgroundFill, opacity);
      } else {
        var backgroundColor = ele.pstyle('background-color').value;
        this.colorFillStyle(context, backgroundColor[0], backgroundColor[1], backgroundColor[2], opacity);
      }
    };

    CRp$6.gradientStrokeStyle = function (context, ele, fill, opacity) {
      var gradientStyle = this.createGradientStyleFor(context, 'line', ele, fill, opacity);
      if (!gradientStyle) return null; // error

      context.strokeStyle = gradientStyle;
    };

    CRp$6.colorStrokeStyle = function (context, r, g, b, a) {
      context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching
      // var cache = this.paintCache(context);
      // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
      // if( cache.strokeStyle !== strokeStyle ){
      //   context.strokeStyle = cache.strokeStyle = strokeStyle;
      // }
    };

    CRp$6.eleStrokeStyle = function (context, ele, opacity) {
      var lineFill = ele.pstyle('line-fill').value;

      if (lineFill === 'linear-gradient' || lineFill === 'radial-gradient') {
        this.gradientStrokeStyle(context, ele, lineFill, opacity);
      } else {
        var lineColor = ele.pstyle('line-color').value;
        this.colorStrokeStyle(context, lineColor[0], lineColor[1], lineColor[2], opacity);
      }
    }; // Resize canvas


    CRp$6.matchCanvasSize = function (container) {
      var r = this;
      var data = r.data;
      var bb = r.findContainerClientCoords();
      var width = bb[2];
      var height = bb[3];
      var pixelRatio = r.getPixelRatio();
      var mbPxRatio = r.motionBlurPxRatio;

      if (container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] || container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]) {
        pixelRatio = mbPxRatio;
      }

      var canvasWidth = width * pixelRatio;
      var canvasHeight = height * pixelRatio;
      var canvas;

      if (canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight) {
        return; // save cycles if same
      }

      r.fontCaches = null; // resizing resets the style

      var canvasContainer = data.canvasContainer;
      canvasContainer.style.width = width + 'px';
      canvasContainer.style.height = height + 'px';

      for (var i = 0; i < r.CANVAS_LAYERS; i++) {
        canvas = data.canvases[i];
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;
        canvas.style.width = width + 'px';
        canvas.style.height = height + 'px';
      }

      for (var i = 0; i < r.BUFFER_COUNT; i++) {
        canvas = data.bufferCanvases[i];
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;
        canvas.style.width = width + 'px';
        canvas.style.height = height + 'px';
      }

      r.textureMult = 1;

      if (pixelRatio <= 1) {
        canvas = data.bufferCanvases[r.TEXTURE_BUFFER];
        r.textureMult = 2;
        canvas.width = canvasWidth * r.textureMult;
        canvas.height = canvasHeight * r.textureMult;
      }

      r.canvasWidth = canvasWidth;
      r.canvasHeight = canvasHeight;
    };

    CRp$6.renderTo = function (cxt, zoom, pan, pxRatio) {
      this.render({
        forcedContext: cxt,
        forcedZoom: zoom,
        forcedPan: pan,
        drawAllLayers: true,
        forcedPxRatio: pxRatio
      });
    };

    CRp$6.render = function (options) {
      options = options || staticEmptyObject();
      var forcedContext = options.forcedContext;
      var drawAllLayers = options.drawAllLayers;
      var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
      var forcedZoom = options.forcedZoom;
      var forcedPan = options.forcedPan;
      var r = this;
      var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
      var cy = r.cy;
      var data = r.data;
      var needDraw = data.canvasNeedsRedraw;
      var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
      var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
      var mbPxRatio = r.motionBlurPxRatio;
      var hasCompoundNodes = cy.hasCompoundNodes();
      var inNodeDragGesture = r.hoverData.draggingEles;
      var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
      motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
      var motionBlurFadeEffect = motionBlur;

      if (!forcedContext) {
        if (r.prevPxRatio !== pixelRatio) {
          r.invalidateContainerClientCoordsCache();
          r.matchCanvasSize(r.container);
          r.redrawHint('eles', true);
          r.redrawHint('drag', true);
        }

        r.prevPxRatio = pixelRatio;
      }

      if (!forcedContext && r.motionBlurTimeout) {
        clearTimeout(r.motionBlurTimeout);
      }

      if (motionBlur) {
        if (r.mbFrames == null) {
          r.mbFrames = 0;
        }

        r.mbFrames++;

        if (r.mbFrames < 3) {
          // need several frames before even high quality motionblur
          motionBlurFadeEffect = false;
        } // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)


        if (r.mbFrames > r.minMbLowQualFrames) {
          //r.fullQualityMb = false;
          r.motionBlurPxRatio = r.mbPxRBlurry;
        }
      }

      if (r.clearingMotionBlur) {
        r.motionBlurPxRatio = 1;
      } // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
      // because a rogue async texture frame would clear needDraw


      if (r.textureDrawLastFrame && !textureDraw) {
        needDraw[r.NODE] = true;
        needDraw[r.SELECT_BOX] = true;
      }

      var style = cy.style();
      var zoom = cy.zoom();
      var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
      var pan = cy.pan();
      var effectivePan = {
        x: pan.x,
        y: pan.y
      };
      var vp = {
        zoom: zoom,
        pan: {
          x: pan.x,
          y: pan.y
        }
      };
      var prevVp = r.prevViewport;
      var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y; // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)

      if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes)) {
        r.motionBlurPxRatio = 1;
      }

      if (forcedPan) {
        effectivePan = forcedPan;
      } // apply pixel ratio


      effectiveZoom *= pixelRatio;
      effectivePan.x *= pixelRatio;
      effectivePan.y *= pixelRatio;
      var eles = r.getCachedZSortedEles();

      function mbclear(context, x, y, w, h) {
        var gco = context.globalCompositeOperation;
        context.globalCompositeOperation = 'destination-out';
        r.colorFillStyle(context, 255, 255, 255, r.motionBlurTransparency);
        context.fillRect(x, y, w, h);
        context.globalCompositeOperation = gco;
      }

      function setContextTransform(context, clear) {
        var ePan, eZoom, w, h;

        if (!r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG])) {
          ePan = {
            x: pan.x * mbPxRatio,
            y: pan.y * mbPxRatio
          };
          eZoom = zoom * mbPxRatio;
          w = r.canvasWidth * mbPxRatio;
          h = r.canvasHeight * mbPxRatio;
        } else {
          ePan = effectivePan;
          eZoom = effectiveZoom;
          w = r.canvasWidth;
          h = r.canvasHeight;
        }

        context.setTransform(1, 0, 0, 1, 0, 0);

        if (clear === 'motionBlur') {
          mbclear(context, 0, 0, w, h);
        } else if (!forcedContext && (clear === undefined || clear)) {
          context.clearRect(0, 0, w, h);
        }

        if (!drawAllLayers) {
          context.translate(ePan.x, ePan.y);
          context.scale(eZoom, eZoom);
        }

        if (forcedPan) {
          context.translate(forcedPan.x, forcedPan.y);
        }

        if (forcedZoom) {
          context.scale(forcedZoom, forcedZoom);
        }
      }

      if (!textureDraw) {
        r.textureDrawLastFrame = false;
      }

      if (textureDraw) {
        r.textureDrawLastFrame = true;

        if (!r.textureCache) {
          r.textureCache = {};
          r.textureCache.bb = cy.mutableElements().boundingBox();
          r.textureCache.texture = r.data.bufferCanvases[r.TEXTURE_BUFFER];
          var cxt = r.data.bufferContexts[r.TEXTURE_BUFFER];
          cxt.setTransform(1, 0, 0, 1, 0, 0);
          cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);
          r.render({
            forcedContext: cxt,
            drawOnlyNodeLayer: true,
            forcedPxRatio: pixelRatio * r.textureMult
          });
          var vp = r.textureCache.viewport = {
            zoom: cy.zoom(),
            pan: cy.pan(),
            width: r.canvasWidth,
            height: r.canvasHeight
          };
          vp.mpan = {
            x: (0 - vp.pan.x) / vp.zoom,
            y: (0 - vp.pan.y) / vp.zoom
          };
        }

        needDraw[r.DRAG] = false;
        needDraw[r.NODE] = false;
        var context = data.contexts[r.NODE];
        var texture = r.textureCache.texture;
        var vp = r.textureCache.viewport;
        context.setTransform(1, 0, 0, 1, 0, 0);

        if (motionBlur) {
          mbclear(context, 0, 0, vp.width, vp.height);
        } else {
          context.clearRect(0, 0, vp.width, vp.height);
        }

        var outsideBgColor = style.core('outside-texture-bg-color').value;
        var outsideBgOpacity = style.core('outside-texture-bg-opacity').value;
        r.colorFillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);
        context.fillRect(0, 0, vp.width, vp.height);
        var zoom = cy.zoom();
        setContextTransform(context, false);
        context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
        context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
      } else if (r.textureOnViewport && !forcedContext) {
        // clear the cache since we don't need it
        r.textureCache = null;
      }

      var extent = cy.extent();
      var vpManip = r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles || r.cy.animated();
      var hideEdges = r.hideEdgesOnViewport && vpManip;
      var needMbClear = [];
      needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;

      if (needMbClear[r.NODE]) {
        r.clearedForMotionBlur[r.NODE] = true;
      }

      needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;

      if (needMbClear[r.DRAG]) {
        r.clearedForMotionBlur[r.DRAG] = true;
      }

      if (needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE]) {
        var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;
        var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] : data.contexts[r.NODE]);
        var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;
        setContextTransform(context, clear);

        if (hideEdges) {
          r.drawCachedNodes(context, eles.nondrag, pixelRatio, extent);
        } else {
          r.drawLayeredElements(context, eles.nondrag, pixelRatio, extent);
        }

        if (r.debug) {
          r.drawDebugPoints(context, eles.nondrag);
        }

        if (!drawAllLayers && !motionBlur) {
          needDraw[r.NODE] = false;
        }
      }

      if (!drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG])) {
        var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;
        var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG] : data.contexts[r.DRAG]);
        setContextTransform(context, motionBlur && !useBuffer ? 'motionBlur' : undefined);

        if (hideEdges) {
          r.drawCachedNodes(context, eles.drag, pixelRatio, extent);
        } else {
          r.drawCachedElements(context, eles.drag, pixelRatio, extent);
        }

        if (r.debug) {
          r.drawDebugPoints(context, eles.drag);
        }

        if (!drawAllLayers && !motionBlur) {
          needDraw[r.DRAG] = false;
        }
      }

      if (r.showFps || !drawOnlyNodeLayer && needDraw[r.SELECT_BOX] && !drawAllLayers) {
        var context = forcedContext || data.contexts[r.SELECT_BOX];
        setContextTransform(context);

        if (r.selection[4] == 1 && (r.hoverData.selecting || r.touchData.selecting)) {
          var zoom = r.cy.zoom();
          var borderWidth = style.core('selection-box-border-width').value / zoom;
          context.lineWidth = borderWidth;
          context.fillStyle = 'rgba(' + style.core('selection-box-color').value[0] + ',' + style.core('selection-box-color').value[1] + ',' + style.core('selection-box-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
          context.fillRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);

          if (borderWidth > 0) {
            context.strokeStyle = 'rgba(' + style.core('selection-box-border-color').value[0] + ',' + style.core('selection-box-border-color').value[1] + ',' + style.core('selection-box-border-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
            context.strokeRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);
          }
        }

        if (data.bgActivePosistion && !r.hoverData.selecting) {
          var zoom = r.cy.zoom();
          var pos = data.bgActivePosistion;
          context.fillStyle = 'rgba(' + style.core('active-bg-color').value[0] + ',' + style.core('active-bg-color').value[1] + ',' + style.core('active-bg-color').value[2] + ',' + style.core('active-bg-opacity').value + ')';
          context.beginPath();
          context.arc(pos.x, pos.y, style.core('active-bg-size').pfValue / zoom, 0, 2 * Math.PI);
          context.fill();
        }

        var timeToRender = r.lastRedrawTime;

        if (r.showFps && timeToRender) {
          timeToRender = Math.round(timeToRender);
          var fps = Math.round(1000 / timeToRender);
          context.setTransform(1, 0, 0, 1, 0, 0);
          context.fillStyle = 'rgba(255, 0, 0, 0.75)';
          context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
          context.lineWidth = 1;
          context.fillText('1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);
          var maxFps = 60;
          context.strokeRect(0, 30, 250, 20);
          context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);
        }

        if (!drawAllLayers) {
          needDraw[r.SELECT_BOX] = false;
        }
      } // motionblur: blit rendered blurry frames


      if (motionBlur && mbPxRatio !== 1) {
        var cxtNode = data.contexts[r.NODE];
        var txtNode = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE];
        var cxtDrag = data.contexts[r.DRAG];
        var txtDrag = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG];

        var drawMotionBlur = function drawMotionBlur(cxt, txt, needClear) {
          cxt.setTransform(1, 0, 0, 1, 0, 0);

          if (needClear || !motionBlurFadeEffect) {
            cxt.clearRect(0, 0, r.canvasWidth, r.canvasHeight);
          } else {
            mbclear(cxt, 0, 0, r.canvasWidth, r.canvasHeight);
          }

          var pxr = mbPxRatio;
          cxt.drawImage(txt, // img
          0, 0, // sx, sy
          r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh
          0, 0, // x, y
          r.canvasWidth, r.canvasHeight // w, h
          );
        };

        if (needDraw[r.NODE] || needMbClear[r.NODE]) {
          drawMotionBlur(cxtNode, txtNode, needMbClear[r.NODE]);
          needDraw[r.NODE] = false;
        }

        if (needDraw[r.DRAG] || needMbClear[r.DRAG]) {
          drawMotionBlur(cxtDrag, txtDrag, needMbClear[r.DRAG]);
          needDraw[r.DRAG] = false;
        }
      }

      r.prevViewport = vp;

      if (r.clearingMotionBlur) {
        r.clearingMotionBlur = false;
        r.motionBlurCleared = true;
        r.motionBlur = true;
      }

      if (motionBlur) {
        r.motionBlurTimeout = setTimeout(function () {
          r.motionBlurTimeout = null;
          r.clearedForMotionBlur[r.NODE] = false;
          r.clearedForMotionBlur[r.DRAG] = false;
          r.motionBlur = false;
          r.clearingMotionBlur = !textureDraw;
          r.mbFrames = 0;
          needDraw[r.NODE] = true;
          needDraw[r.DRAG] = true;
          r.redraw();
        }, motionBlurDelay);
      }

      if (!forcedContext) {
        cy.emit('render');
      }
    };

    var CRp$7 = {}; // @O Polygon drawing

    CRp$7.drawPolygonPath = function (context, x, y, width, height, points) {
      var halfW = width / 2;
      var halfH = height / 2;

      if (context.beginPath) {
        context.beginPath();
      }

      context.moveTo(x + halfW * points[0], y + halfH * points[1]);

      for (var i = 1; i < points.length / 2; i++) {
        context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);
      }

      context.closePath();
    };

    CRp$7.drawRoundPolygonPath = function (context, x, y, width, height, points) {
      var halfW = width / 2;
      var halfH = height / 2;
      var cornerRadius = getRoundPolygonRadius(width, height);

      if (context.beginPath) {
        context.beginPath();
      }

      for (var _i = 0; _i < points.length / 4; _i++) {
        var sourceUv = void 0,
            destUv = void 0;

        if (_i === 0) {
          sourceUv = points.length - 2;
        } else {
          sourceUv = _i * 4 - 2;
        }

        destUv = _i * 4 + 2;
        var px = x + halfW * points[_i * 4];
        var py = y + halfH * points[_i * 4 + 1];
        var cosTheta = -points[sourceUv] * points[destUv] - points[sourceUv + 1] * points[destUv + 1];
        var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
        var cp0x = px - offset * points[sourceUv];
        var cp0y = py - offset * points[sourceUv + 1];
        var cp1x = px + offset * points[destUv];
        var cp1y = py + offset * points[destUv + 1];

        if (_i === 0) {
          context.moveTo(cp0x, cp0y);
        } else {
          context.lineTo(cp0x, cp0y);
        }

        context.arcTo(px, py, cp1x, cp1y, cornerRadius);
      }

      context.closePath();
    }; // Round rectangle drawing


    CRp$7.drawRoundRectanglePath = function (context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var cornerRadius = getRoundRectangleRadius(width, height);

      if (context.beginPath) {
        context.beginPath();
      } // Start at top middle


      context.moveTo(x, y - halfHeight); // Arc from middle top to right side

      context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom

      context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side

      context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder

      context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line

      context.lineTo(x, y - halfHeight);
      context.closePath();
    };

    CRp$7.drawBottomRoundRectanglePath = function (context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var cornerRadius = getRoundRectangleRadius(width, height);

      if (context.beginPath) {
        context.beginPath();
      } // Start at top middle


      context.moveTo(x, y - halfHeight);
      context.lineTo(x + halfWidth, y - halfHeight);
      context.lineTo(x + halfWidth, y);
      context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
      context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
      context.lineTo(x - halfWidth, y - halfHeight);
      context.lineTo(x, y - halfHeight);
      context.closePath();
    };

    CRp$7.drawCutRectanglePath = function (context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var cornerLength = getCutRectangleCornerLength();

      if (context.beginPath) {
        context.beginPath();
      }

      context.moveTo(x - halfWidth + cornerLength, y - halfHeight);
      context.lineTo(x + halfWidth - cornerLength, y - halfHeight);
      context.lineTo(x + halfWidth, y - halfHeight + cornerLength);
      context.lineTo(x + halfWidth, y + halfHeight - cornerLength);
      context.lineTo(x + halfWidth - cornerLength, y + halfHeight);
      context.lineTo(x - halfWidth + cornerLength, y + halfHeight);
      context.lineTo(x - halfWidth, y + halfHeight - cornerLength);
      context.lineTo(x - halfWidth, y - halfHeight + cornerLength);
      context.closePath();
    };

    CRp$7.drawBarrelPath = function (context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var xBegin = x - halfWidth;
      var xEnd = x + halfWidth;
      var yBegin = y - halfHeight;
      var yEnd = y + halfHeight;
      var barrelCurveConstants = getBarrelCurveConstants(width, height);
      var wOffset = barrelCurveConstants.widthOffset;
      var hOffset = barrelCurveConstants.heightOffset;
      var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;

      if (context.beginPath) {
        context.beginPath();
      }

      context.moveTo(xBegin, yBegin + hOffset);
      context.lineTo(xBegin, yEnd - hOffset);
      context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);
      context.lineTo(xEnd - wOffset, yEnd);
      context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);
      context.lineTo(xEnd, yBegin + hOffset);
      context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);
      context.lineTo(xBegin + wOffset, yBegin);
      context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);
      context.closePath();
    };

    var sin0 = Math.sin(0);
    var cos0 = Math.cos(0);
    var sin = {};
    var cos = {};
    var ellipseStepSize = Math.PI / 40;

    for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
      sin[i] = Math.sin(i);
      cos[i] = Math.cos(i);
    }

    CRp$7.drawEllipsePath = function (context, centerX, centerY, width, height) {
      if (context.beginPath) {
        context.beginPath();
      }

      if (context.ellipse) {
        context.ellipse(centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI);
      } else {
        var xPos, yPos;
        var rw = width / 2;
        var rh = height / 2;

        for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
          xPos = centerX - rw * sin[i] * sin0 + rw * cos[i] * cos0;
          yPos = centerY + rh * cos[i] * sin0 + rh * sin[i] * cos0;

          if (i === 0) {
            context.moveTo(xPos, yPos);
          } else {
            context.lineTo(xPos, yPos);
          }
        }
      }

      context.closePath();
    };

    /* global atob, ArrayBuffer, Uint8Array, Blob */
    var CRp$8 = {};

    CRp$8.createBuffer = function (w, h) {
      var buffer = document.createElement('canvas'); // eslint-disable-line no-undef

      buffer.width = w;
      buffer.height = h;
      return [buffer, buffer.getContext('2d')];
    };

    CRp$8.bufferCanvasImage = function (options) {
      var cy = this.cy;
      var eles = cy.mutableElements();
      var bb = eles.boundingBox();
      var ctrRect = this.findContainerClientCoords();
      var width = options.full ? Math.ceil(bb.w) : ctrRect[2];
      var height = options.full ? Math.ceil(bb.h) : ctrRect[3];
      var specdMaxDims = number(options.maxWidth) || number(options.maxHeight);
      var pxRatio = this.getPixelRatio();
      var scale = 1;

      if (options.scale !== undefined) {
        width *= options.scale;
        height *= options.scale;
        scale = options.scale;
      } else if (specdMaxDims) {
        var maxScaleW = Infinity;
        var maxScaleH = Infinity;

        if (number(options.maxWidth)) {
          maxScaleW = scale * options.maxWidth / width;
        }

        if (number(options.maxHeight)) {
          maxScaleH = scale * options.maxHeight / height;
        }

        scale = Math.min(maxScaleW, maxScaleH);
        width *= scale;
        height *= scale;
      }

      if (!specdMaxDims) {
        width *= pxRatio;
        height *= pxRatio;
        scale *= pxRatio;
      }

      var buffCanvas = document.createElement('canvas'); // eslint-disable-line no-undef

      buffCanvas.width = width;
      buffCanvas.height = height;
      buffCanvas.style.width = width + 'px';
      buffCanvas.style.height = height + 'px';
      var buffCxt = buffCanvas.getContext('2d'); // Rasterize the layers, but only if container has nonzero size

      if (width > 0 && height > 0) {
        buffCxt.clearRect(0, 0, width, height);
        buffCxt.globalCompositeOperation = 'source-over';
        var zsortedEles = this.getCachedZSortedEles();

        if (options.full) {
          // draw the full bounds of the graph
          buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);
          buffCxt.scale(scale, scale);
          this.drawElements(buffCxt, zsortedEles);
          buffCxt.scale(1 / scale, 1 / scale);
          buffCxt.translate(bb.x1 * scale, bb.y1 * scale);
        } else {
          // draw the current view
          var pan = cy.pan();
          var translation = {
            x: pan.x * scale,
            y: pan.y * scale
          };
          scale *= cy.zoom();
          buffCxt.translate(translation.x, translation.y);
          buffCxt.scale(scale, scale);
          this.drawElements(buffCxt, zsortedEles);
          buffCxt.scale(1 / scale, 1 / scale);
          buffCxt.translate(-translation.x, -translation.y);
        } // need to fill bg at end like this in order to fill cleared transparent pixels in jpgs


        if (options.bg) {
          buffCxt.globalCompositeOperation = 'destination-over';
          buffCxt.fillStyle = options.bg;
          buffCxt.rect(0, 0, width, height);
          buffCxt.fill();
        }
      }

      return buffCanvas;
    };

    function b64ToBlob(b64, mimeType) {
      var bytes = atob(b64);
      var buff = new ArrayBuffer(bytes.length);
      var buffUint8 = new Uint8Array(buff);

      for (var i = 0; i < bytes.length; i++) {
        buffUint8[i] = bytes.charCodeAt(i);
      }

      return new Blob([buff], {
        type: mimeType
      });
    }

    function b64UriToB64(b64uri) {
      var i = b64uri.indexOf(',');
      return b64uri.substr(i + 1);
    }

    function output(options, canvas, mimeType) {
      var getB64Uri = function getB64Uri() {
        return canvas.toDataURL(mimeType, options.quality);
      };

      switch (options.output) {
        case 'blob-promise':
          return new Promise$1(function (resolve, reject) {
            try {
              canvas.toBlob(function (blob) {
                if (blob != null) {
                  resolve(blob);
                } else {
                  reject(new Error('`canvas.toBlob()` sent a null value in its callback'));
                }
              }, mimeType, options.quality);
            } catch (err) {
              reject(err);
            }
          });

        case 'blob':
          return b64ToBlob(b64UriToB64(getB64Uri()), mimeType);

        case 'base64':
          return b64UriToB64(getB64Uri());

        case 'base64uri':
        default:
          return getB64Uri();
      }
    }

    CRp$8.png = function (options) {
      return output(options, this.bufferCanvasImage(options), 'image/png');
    };

    CRp$8.jpg = function (options) {
      return output(options, this.bufferCanvasImage(options), 'image/jpeg');
    };

    var CRp$9 = {};

    CRp$9.nodeShapeImpl = function (name, context, centerX, centerY, width, height, points) {
      switch (name) {
        case 'ellipse':
          return this.drawEllipsePath(context, centerX, centerY, width, height);

        case 'polygon':
          return this.drawPolygonPath(context, centerX, centerY, width, height, points);

        case 'round-polygon':
          return this.drawRoundPolygonPath(context, centerX, centerY, width, height, points);

        case 'roundrectangle':
        case 'round-rectangle':
          return this.drawRoundRectanglePath(context, centerX, centerY, width, height);

        case 'cutrectangle':
        case 'cut-rectangle':
          return this.drawCutRectanglePath(context, centerX, centerY, width, height);

        case 'bottomroundrectangle':
        case 'bottom-round-rectangle':
          return this.drawBottomRoundRectanglePath(context, centerX, centerY, width, height);

        case 'barrel':
          return this.drawBarrelPath(context, centerX, centerY, width, height);
      }
    };

    var CR = CanvasRenderer;
    var CRp$a = CanvasRenderer.prototype;
    CRp$a.CANVAS_LAYERS = 3; //

    CRp$a.SELECT_BOX = 0;
    CRp$a.DRAG = 1;
    CRp$a.NODE = 2;
    CRp$a.BUFFER_COUNT = 3; //

    CRp$a.TEXTURE_BUFFER = 0;
    CRp$a.MOTIONBLUR_BUFFER_NODE = 1;
    CRp$a.MOTIONBLUR_BUFFER_DRAG = 2;

    function CanvasRenderer(options) {
      var r = this;
      r.data = {
        canvases: new Array(CRp$a.CANVAS_LAYERS),
        contexts: new Array(CRp$a.CANVAS_LAYERS),
        canvasNeedsRedraw: new Array(CRp$a.CANVAS_LAYERS),
        bufferCanvases: new Array(CRp$a.BUFFER_COUNT),
        bufferContexts: new Array(CRp$a.CANVAS_LAYERS)
      };
      var tapHlOffAttr = '-webkit-tap-highlight-color';
      var tapHlOffStyle = 'rgba(0,0,0,0)';
      r.data.canvasContainer = document.createElement('div'); // eslint-disable-line no-undef

      var containerStyle = r.data.canvasContainer.style;
      r.data.canvasContainer.style[tapHlOffAttr] = tapHlOffStyle;
      containerStyle.position = 'relative';
      containerStyle.zIndex = '0';
      containerStyle.overflow = 'hidden';
      var container = options.cy.container();
      container.appendChild(r.data.canvasContainer);
      container.style[tapHlOffAttr] = tapHlOffStyle;
      var styleMap = {
        '-webkit-user-select': 'none',
        '-moz-user-select': '-moz-none',
        'user-select': 'none',
        '-webkit-tap-highlight-color': 'rgba(0,0,0,0)',
        'outline-style': 'none'
      };

      if (ms()) {
        styleMap['-ms-touch-action'] = 'none';
        styleMap['touch-action'] = 'none';
      }

      for (var i = 0; i < CRp$a.CANVAS_LAYERS; i++) {
        var canvas = r.data.canvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef

        r.data.contexts[i] = canvas.getContext('2d');
        Object.keys(styleMap).forEach(function (k) {
          canvas.style[k] = styleMap[k];
        });
        canvas.style.position = 'absolute';
        canvas.setAttribute('data-id', 'layer' + i);
        canvas.style.zIndex = String(CRp$a.CANVAS_LAYERS - i);
        r.data.canvasContainer.appendChild(canvas);
        r.data.canvasNeedsRedraw[i] = false;
      }

      r.data.topCanvas = r.data.canvases[0];
      r.data.canvases[CRp$a.NODE].setAttribute('data-id', 'layer' + CRp$a.NODE + '-node');
      r.data.canvases[CRp$a.SELECT_BOX].setAttribute('data-id', 'layer' + CRp$a.SELECT_BOX + '-selectbox');
      r.data.canvases[CRp$a.DRAG].setAttribute('data-id', 'layer' + CRp$a.DRAG + '-drag');

      for (var i = 0; i < CRp$a.BUFFER_COUNT; i++) {
        r.data.bufferCanvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef

        r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');
        r.data.bufferCanvases[i].style.position = 'absolute';
        r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);
        r.data.bufferCanvases[i].style.zIndex = String(-i - 1);
        r.data.bufferCanvases[i].style.visibility = 'hidden'; //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
      }

      r.pathsEnabled = true;
      var emptyBb = makeBoundingBox();

      var getBoxCenter = function getBoxCenter(bb) {
        return {
          x: (bb.x1 + bb.x2) / 2,
          y: (bb.y1 + bb.y2) / 2
        };
      };

      var getCenterOffset = function getCenterOffset(bb) {
        return {
          x: -bb.w / 2,
          y: -bb.h / 2
        };
      };

      var backgroundTimestampHasChanged = function backgroundTimestampHasChanged(ele) {
        var _p = ele[0]._private;
        var same = _p.oldBackgroundTimestamp === _p.backgroundTimestamp;
        return !same;
      };

      var getStyleKey = function getStyleKey(ele) {
        return ele[0]._private.nodeKey;
      };

      var getLabelKey = function getLabelKey(ele) {
        return ele[0]._private.labelStyleKey;
      };

      var getSourceLabelKey = function getSourceLabelKey(ele) {
        return ele[0]._private.sourceLabelStyleKey;
      };

      var getTargetLabelKey = function getTargetLabelKey(ele) {
        return ele[0]._private.targetLabelStyleKey;
      };

      var drawElement = function drawElement(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElement(context, ele, bb, false, false, useEleOpacity);
      };

      var drawLabel = function drawLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElementText(context, ele, bb, scaledLabelShown, 'main', useEleOpacity);
      };

      var drawSourceLabel = function drawSourceLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElementText(context, ele, bb, scaledLabelShown, 'source', useEleOpacity);
      };

      var drawTargetLabel = function drawTargetLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElementText(context, ele, bb, scaledLabelShown, 'target', useEleOpacity);
      };

      var getElementBox = function getElementBox(ele) {
        ele.boundingBox();
        return ele[0]._private.bodyBounds;
      };

      var getLabelBox = function getLabelBox(ele) {
        ele.boundingBox();
        return ele[0]._private.labelBounds.main || emptyBb;
      };

      var getSourceLabelBox = function getSourceLabelBox(ele) {
        ele.boundingBox();
        return ele[0]._private.labelBounds.source || emptyBb;
      };

      var getTargetLabelBox = function getTargetLabelBox(ele) {
        ele.boundingBox();
        return ele[0]._private.labelBounds.target || emptyBb;
      };

      var isLabelVisibleAtScale = function isLabelVisibleAtScale(ele, scaledLabelShown) {
        return scaledLabelShown;
      };

      var getElementRotationPoint = function getElementRotationPoint(ele) {
        return getBoxCenter(getElementBox(ele));
      };

      var addTextMargin = function addTextMargin(prefix, pt, ele) {
        var pre = prefix ? prefix + '-' : '';
        return {
          x: pt.x + ele.pstyle(pre + 'text-margin-x').pfValue,
          y: pt.y + ele.pstyle(pre + 'text-margin-y').pfValue
        };
      };

      var getRsPt = function getRsPt(ele, x, y) {
        var rs = ele[0]._private.rscratch;
        return {
          x: rs[x],
          y: rs[y]
        };
      };

      var getLabelRotationPoint = function getLabelRotationPoint(ele) {
        return addTextMargin('', getRsPt(ele, 'labelX', 'labelY'), ele);
      };

      var getSourceLabelRotationPoint = function getSourceLabelRotationPoint(ele) {
        return addTextMargin('source', getRsPt(ele, 'sourceLabelX', 'sourceLabelY'), ele);
      };

      var getTargetLabelRotationPoint = function getTargetLabelRotationPoint(ele) {
        return addTextMargin('target', getRsPt(ele, 'targetLabelX', 'targetLabelY'), ele);
      };

      var getElementRotationOffset = function getElementRotationOffset(ele) {
        return getCenterOffset(getElementBox(ele));
      };

      var getSourceLabelRotationOffset = function getSourceLabelRotationOffset(ele) {
        return getCenterOffset(getSourceLabelBox(ele));
      };

      var getTargetLabelRotationOffset = function getTargetLabelRotationOffset(ele) {
        return getCenterOffset(getTargetLabelBox(ele));
      };

      var getLabelRotationOffset = function getLabelRotationOffset(ele) {
        var bb = getLabelBox(ele);
        var p = getCenterOffset(getLabelBox(ele));

        if (ele.isNode()) {
          switch (ele.pstyle('text-halign').value) {
            case 'left':
              p.x = -bb.w;
              break;

            case 'right':
              p.x = 0;
              break;
          }

          switch (ele.pstyle('text-valign').value) {
            case 'top':
              p.y = -bb.h;
              break;

            case 'bottom':
              p.y = 0;
              break;
          }
        }

        return p;
      };

      var eleTxrCache = r.data.eleTxrCache = new ElementTextureCache(r, {
        getKey: getStyleKey,
        doesEleInvalidateKey: backgroundTimestampHasChanged,
        drawElement: drawElement,
        getBoundingBox: getElementBox,
        getRotationPoint: getElementRotationPoint,
        getRotationOffset: getElementRotationOffset,
        allowEdgeTxrCaching: false,
        allowParentTxrCaching: false
      });
      var lblTxrCache = r.data.lblTxrCache = new ElementTextureCache(r, {
        getKey: getLabelKey,
        drawElement: drawLabel,
        getBoundingBox: getLabelBox,
        getRotationPoint: getLabelRotationPoint,
        getRotationOffset: getLabelRotationOffset,
        isVisible: isLabelVisibleAtScale
      });
      var slbTxrCache = r.data.slbTxrCache = new ElementTextureCache(r, {
        getKey: getSourceLabelKey,
        drawElement: drawSourceLabel,
        getBoundingBox: getSourceLabelBox,
        getRotationPoint: getSourceLabelRotationPoint,
        getRotationOffset: getSourceLabelRotationOffset,
        isVisible: isLabelVisibleAtScale
      });
      var tlbTxrCache = r.data.tlbTxrCache = new ElementTextureCache(r, {
        getKey: getTargetLabelKey,
        drawElement: drawTargetLabel,
        getBoundingBox: getTargetLabelBox,
        getRotationPoint: getTargetLabelRotationPoint,
        getRotationOffset: getTargetLabelRotationOffset,
        isVisible: isLabelVisibleAtScale
      });
      var lyrTxrCache = r.data.lyrTxrCache = new LayeredTextureCache(r);
      r.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {
        // each cache should check for sub-key diff to see that the update affects that cache particularly
        eleTxrCache.invalidateElements(eles);
        lblTxrCache.invalidateElements(eles);
        slbTxrCache.invalidateElements(eles);
        tlbTxrCache.invalidateElements(eles); // any change invalidates the layers

        lyrTxrCache.invalidateElements(eles); // update the old bg timestamp so diffs can be done in the ele txr caches

        for (var _i = 0; _i < eles.length; _i++) {
          var _p = eles[_i]._private;
          _p.oldBackgroundTimestamp = _p.backgroundTimestamp;
        }
      });

      var refineInLayers = function refineInLayers(reqs) {
        for (var i = 0; i < reqs.length; i++) {
          lyrTxrCache.enqueueElementRefinement(reqs[i].ele);
        }
      };

      eleTxrCache.onDequeue(refineInLayers);
      lblTxrCache.onDequeue(refineInLayers);
      slbTxrCache.onDequeue(refineInLayers);
      tlbTxrCache.onDequeue(refineInLayers);
    }

    CRp$a.redrawHint = function (group, bool) {
      var r = this;

      switch (group) {
        case 'eles':
          r.data.canvasNeedsRedraw[CRp$a.NODE] = bool;
          break;

        case 'drag':
          r.data.canvasNeedsRedraw[CRp$a.DRAG] = bool;
          break;

        case 'select':
          r.data.canvasNeedsRedraw[CRp$a.SELECT_BOX] = bool;
          break;
      }
    }; // whether to use Path2D caching for drawing


    var pathsImpld = typeof Path2D !== 'undefined';

    CRp$a.path2dEnabled = function (on) {
      if (on === undefined) {
        return this.pathsEnabled;
      }

      this.pathsEnabled = on ? true : false;
    };

    CRp$a.usePaths = function () {
      return pathsImpld && this.pathsEnabled;
    };

    CRp$a.setImgSmoothing = function (context, bool) {
      if (context.imageSmoothingEnabled != null) {
        context.imageSmoothingEnabled = bool;
      } else {
        context.webkitImageSmoothingEnabled = bool;
        context.mozImageSmoothingEnabled = bool;
        context.msImageSmoothingEnabled = bool;
      }
    };

    CRp$a.getImgSmoothing = function (context) {
      if (context.imageSmoothingEnabled != null) {
        return context.imageSmoothingEnabled;
      } else {
        return context.webkitImageSmoothingEnabled || context.mozImageSmoothingEnabled || context.msImageSmoothingEnabled;
      }
    };

    CRp$a.makeOffscreenCanvas = function (width, height) {
      var canvas;

      if ((typeof OffscreenCanvas === "undefined" ? "undefined" : _typeof(OffscreenCanvas)) !== ( "undefined" )) {
        canvas = new OffscreenCanvas(width, height);
      } else {
        canvas = document.createElement('canvas'); // eslint-disable-line no-undef

        canvas.width = width;
        canvas.height = height;
      }

      return canvas;
    };

    [CRp, CRp$1, CRp$2, CRp$3, CRp$4, CRp$5, CRp$6, CRp$7, CRp$8, CRp$9].forEach(function (props) {
      extend(CRp$a, props);
    });

    var renderer = [{
      name: 'null',
      impl: NullRenderer
    }, {
      name: 'base',
      impl: BR
    }, {
      name: 'canvas',
      impl: CR
    }];

    var incExts = [{
      type: 'layout',
      extensions: layout
    }, {
      type: 'renderer',
      extensions: renderer
    }];

    var extensions = {}; // registered modules for extensions, indexed by name

    var modules = {};

    function setExtension(type, name, registrant) {
      var ext = registrant;

      var overrideErr = function overrideErr(field) {
        warn('Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden');
      };

      if (type === 'core') {
        if (Core.prototype[name]) {
          return overrideErr(name);
        } else {
          Core.prototype[name] = registrant;
        }
      } else if (type === 'collection') {
        if (Collection.prototype[name]) {
          return overrideErr(name);
        } else {
          Collection.prototype[name] = registrant;
        }
      } else if (type === 'layout') {
        // fill in missing layout functions in the prototype
        var Layout = function Layout(options) {
          this.options = options;
          registrant.call(this, options); // make sure layout has _private for use w/ std apis like .on()

          if (!plainObject(this._private)) {
            this._private = {};
          }

          this._private.cy = options.cy;
          this._private.listeners = [];
          this.createEmitter();
        };

        var layoutProto = Layout.prototype = Object.create(registrant.prototype);
        var optLayoutFns = [];

        for (var i = 0; i < optLayoutFns.length; i++) {
          var fnName = optLayoutFns[i];

          layoutProto[fnName] = layoutProto[fnName] || function () {
            return this;
          };
        } // either .start() or .run() is defined, so autogen the other


        if (layoutProto.start && !layoutProto.run) {
          layoutProto.run = function () {
            this.start();
            return this;
          };
        } else if (!layoutProto.start && layoutProto.run) {
          layoutProto.start = function () {
            this.run();
            return this;
          };
        }

        var regStop = registrant.prototype.stop;

        layoutProto.stop = function () {
          var opts = this.options;

          if (opts && opts.animate) {
            var anis = this.animations;

            if (anis) {
              for (var _i = 0; _i < anis.length; _i++) {
                anis[_i].stop();
              }
            }
          }

          if (regStop) {
            regStop.call(this);
          } else {
            this.emit('layoutstop');
          }

          return this;
        };

        if (!layoutProto.destroy) {
          layoutProto.destroy = function () {
            return this;
          };
        }

        layoutProto.cy = function () {
          return this._private.cy;
        };

        var getCy = function getCy(layout) {
          return layout._private.cy;
        };

        var emitterOpts = {
          addEventFields: function addEventFields(layout, evt) {
            evt.layout = layout;
            evt.cy = getCy(layout);
            evt.target = layout;
          },
          bubble: function bubble() {
            return true;
          },
          parent: function parent(layout) {
            return getCy(layout);
          }
        };
        extend(layoutProto, {
          createEmitter: function createEmitter() {
            this._private.emitter = new Emitter(emitterOpts, this);
            return this;
          },
          emitter: function emitter() {
            return this._private.emitter;
          },
          on: function on(evt, cb) {
            this.emitter().on(evt, cb);
            return this;
          },
          one: function one(evt, cb) {
            this.emitter().one(evt, cb);
            return this;
          },
          once: function once(evt, cb) {
            this.emitter().one(evt, cb);
            return this;
          },
          removeListener: function removeListener(evt, cb) {
            this.emitter().removeListener(evt, cb);
            return this;
          },
          removeAllListeners: function removeAllListeners() {
            this.emitter().removeAllListeners();
            return this;
          },
          emit: function emit(evt, params) {
            this.emitter().emit(evt, params);
            return this;
          }
        });
        define$3.eventAliasesOn(layoutProto);
        ext = Layout; // replace with our wrapped layout
      } else if (type === 'renderer' && name !== 'null' && name !== 'base') {
        // user registered renderers inherit from base
        var BaseRenderer = getExtension('renderer', 'base');
        var bProto = BaseRenderer.prototype;
        var RegistrantRenderer = registrant;
        var rProto = registrant.prototype;

        var Renderer = function Renderer() {
          BaseRenderer.apply(this, arguments);
          RegistrantRenderer.apply(this, arguments);
        };

        var proto = Renderer.prototype;

        for (var pName in bProto) {
          var pVal = bProto[pName];
          var existsInR = rProto[pName] != null;

          if (existsInR) {
            return overrideErr(pName);
          }

          proto[pName] = pVal; // take impl from base
        }

        for (var _pName in rProto) {
          proto[_pName] = rProto[_pName]; // take impl from registrant
        }

        bProto.clientFunctions.forEach(function (name) {
          proto[name] = proto[name] || function () {
            error('Renderer does not implement `renderer.' + name + '()` on its prototype');
          };
        });
        ext = Renderer;
      }

      return setMap({
        map: extensions,
        keys: [type, name],
        value: ext
      });
    }

    function getExtension(type, name) {
      return getMap({
        map: extensions,
        keys: [type, name]
      });
    }

    function setModule(type, name, moduleType, moduleName, registrant) {
      return setMap({
        map: modules,
        keys: [type, name, moduleType, moduleName],
        value: registrant
      });
    }

    function getModule(type, name, moduleType, moduleName) {
      return getMap({
        map: modules,
        keys: [type, name, moduleType, moduleName]
      });
    }

    var extension = function extension() {
      // e.g. extension('renderer', 'svg')
      if (arguments.length === 2) {
        return getExtension.apply(null, arguments);
      } // e.g. extension('renderer', 'svg', { ... })
      else if (arguments.length === 3) {
          return setExtension.apply(null, arguments);
        } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
        else if (arguments.length === 4) {
            return getModule.apply(null, arguments);
          } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
          else if (arguments.length === 5) {
              return setModule.apply(null, arguments);
            } else {
              error('Invalid extension access syntax');
            }
    }; // allows a core instance to access extensions internally


    Core.prototype.extension = extension; // included extensions

    incExts.forEach(function (group) {
      group.extensions.forEach(function (ext) {
        setExtension(group.type, ext.name, ext.impl);
      });
    });

    // (useful for init)

    var Stylesheet = function Stylesheet() {
      if (!(this instanceof Stylesheet)) {
        return new Stylesheet();
      }

      this.length = 0;
    };

    var sheetfn = Stylesheet.prototype;

    sheetfn.instanceString = function () {
      return 'stylesheet';
    }; // just store the selector to be parsed later


    sheetfn.selector = function (selector) {
      var i = this.length++;
      this[i] = {
        selector: selector,
        properties: []
      };
      return this; // chaining
    }; // just store the property to be parsed later


    sheetfn.css = function (name, value) {
      var i = this.length - 1;

      if (string(name)) {
        this[i].properties.push({
          name: name,
          value: value
        });
      } else if (plainObject(name)) {
        var map = name;
        var propNames = Object.keys(map);

        for (var j = 0; j < propNames.length; j++) {
          var key = propNames[j];
          var mapVal = map[key];

          if (mapVal == null) {
            continue;
          }

          var prop = Style.properties[key] || Style.properties[dash2camel(key)];

          if (prop == null) {
            continue;
          }

          var _name = prop.name;
          var _value = mapVal;
          this[i].properties.push({
            name: _name,
            value: _value
          });
        }
      }

      return this; // chaining
    };

    sheetfn.style = sheetfn.css; // generate a real style object from the dummy stylesheet

    sheetfn.generateStyle = function (cy) {
      var style = new Style(cy);
      return this.appendToStyle(style);
    }; // append a dummy stylesheet object on a real style object


    sheetfn.appendToStyle = function (style) {
      for (var i = 0; i < this.length; i++) {
        var context = this[i];
        var selector = context.selector;
        var props = context.properties;
        style.selector(selector); // apply selector

        for (var j = 0; j < props.length; j++) {
          var prop = props[j];
          style.css(prop.name, prop.value); // apply property
        }
      }

      return style;
    };

    var version = "3.20.0";

    var cytoscape$1 = function cytoscape(options) {
      // if no options specified, use default
      if (options === undefined) {
        options = {};
      } // create instance


      if (plainObject(options)) {
        return new Core(options);
      } // allow for registration of extensions
      else if (string(options)) {
          return extension.apply(extension, arguments);
        }
    }; // e.g. cytoscape.use( require('cytoscape-foo'), bar )


    cytoscape$1.use = function (ext) {
      var args = Array.prototype.slice.call(arguments, 1); // args to pass to ext

      args.unshift(cytoscape$1); // cytoscape is first arg to ext

      ext.apply(null, args);
      return this;
    };

    cytoscape$1.warnings = function (bool) {
      return warnings(bool);
    }; // replaced by build system


    cytoscape$1.version = version; // expose public apis (mostly for extensions)

    cytoscape$1.stylesheet = cytoscape$1.Stylesheet = Stylesheet;

    var cytoscape_cjs = cytoscape$1;

    var cytoscapeKlay = {exports: {}};

    var klay$1 = {exports: {}};

    /** klay.js version 0.4.1 build 201604131004 */

    (function (module) {
    (function(){
    var $wnd;if(typeof(window) !== 'undefined'){ $wnd = window; }
    else { $wnd = { Array: function(){} }; }
    function kI(){}
    function iI(){}
    function pb(){}
    function Ab(){}
    function Tt(){}
    function Jt(){}
    function Jq(){}
    function Vq(){}
    function Vs(){}
    function yl(){}
    function Yl(){}
    function gm(){}
    function Cu(){}
    function tJ(){}
    function NJ(){}
    function PJ(){}
    function PS(){}
    function sS(){}
    function yS(){}
    function AS(){}
    function MS(){}
    function RS(){}
    function TS(){}
    function lR(){}
    function HR(){}
    function IR(){}
    function KR(){}
    function WR(){}
    function AT(){}
    function FT(){}
    function HT(){}
    function JT(){}
    function LT(){}
    function NT(){}
    function sU(){}
    function uV(){}
    function xV(){}
    function EV(){}
    function HW(){}
    function UX(){}
    function XX(){}
    function ZX(){}
    function _X(){}
    function bY(){}
    function dY(){}
    function wY(){}
    function zY(){}
    function SY(){}
    function VY(){}
    function qZ(){}
    function tZ(){}
    function wZ(){}
    function AZ(){}
    function d$(){}
    function g$(){}
    function j$(){}
    function w$(){}
    function z$(){}
    function C$(){}
    function F$(){}
    function I$(){}
    function L$(){}
    function N$(){}
    function R$(){}
    function X$(){}
    function _$(){}
    function k0(){}
    function m0(){}
    function s0(){}
    function w0(){}
    function A0(){}
    function C0(){}
    function E0(){}
    function G0(){}
    function V0(){}
    function Z0(){}
    function _0(){}
    function _1(){}
    function b1(){}
    function e1(){}
    function k1(){}
    function q1(){}
    function u1(){}
    function R1(){}
    function X1(){}
    function Z1(){}
    function c2(){}
    function f2(){}
    function h2(){}
    function k2(){}
    function n2(){}
    function q2(){}
    function x2(){}
    function A2(){}
    function H2(){}
    function H4(){}
    function z4(){}
    function B4(){}
    function D4(){}
    function U4(){}
    function i3(){}
    function l3(){}
    function u3(){}
    function C3(){}
    function I3(){}
    function $5(){}
    function d7(){}
    function V7(){}
    function q8(){}
    function smb(){}
    function Wbb(){}
    function rcb(){}
    function Mcb(){}
    function Vdb(){}
    function hkb(){}
    function Kpb(){}
    function Spb(){}
    function aqb(){}
    function iqb(){}
    function pqb(){}
    function isb(){}
    function mvb(){}
    function zwb(){}
    function _t(){Wt();}
    function lI(){GP();}
    function J8(){G8();}
    function m8(){k8();}
    function CQ(){zQ();}
    function CV(){AV();}
    function q0(){p0();}
    function S0(){J0();}
    function y9(){w9();}
    function Bab(){zab();}
    function Qab(){Hab();}
    function cbb(){abb();}
    function sbb(){rbb();}
    function Ycb(){Xcb();}
    function Wfb(){Mfb();}
    function ft(){_s(this);}
    function uP(){}
    function GU(){tU(this);}
    function ZW(){}
    function ic(a){this.a=a;}
    function sc(a){this.a=a;}
    function $c(a){this.a=a;}
    function sf(a){this.a=a;}
    function Qg(a){this.a=a;}
    function qh(a){this.a=a;}
    function Vj(a){this.a=a;}
    function Nk(a){this.a=a;}
    function km(a){this.a=a;}
    function dm(a){this.b=a;}
    function En(a){this.a=a;}
    function Hn(a){this.a=a;}
    function Yp(a){this.a=a;}
    function bq(a){this.a=a;}
    function eq(a){this.a=a;}
    function tq(a){this.a=a;}
    function wq(a){this.a=a;}
    function ku(a){this.a=a;}
    function uu(a){this.a=a;}
    function Gu(a){this.a=a;}
    function Uu(a){this.a=a;}
    function WJ(a){this.a=a;}
    function rP(a){this.a=a;}
    function $V(a){this.a=a;}
    function tW(a){this.a=a;}
    function yW(a){this.e=a;}
    function fY(a){this.a=a;}
    function hY(a){this.a=a;}
    function lY(a){this.a=a;}
    function nY(a){this.a=a;}
    function CY(a){this.a=a;}
    function JY(a){this.a=a;}
    function SZ(a){this.a=a;}
    function Z$(a){this.a=a;}
    function b_(a){this.a=a;}
    function d_(a){this.a=a;}
    function f_(a){this.a=a;}
    function w1(a){this.a=a;}
    function y1(a){this.a=a;}
    function E3(a){this.a=a;}
    function q4(a){this.a=a;}
    function x4(a){this.a=a;}
    function F4(a){this.a=a;}
    function $8(a){this.a=a;}
    function a9(a){this.a=a;}
    function l9(a){this.a=a;}
    function C9(a){this.a=a;}
    function k9(a){this.c=a;}
    function wlb(a){this.a=a;}
    function nxb(a){this.a=a;}
    function wcb(a){this.a=a;}
    function tdb(a){this.a=a;}
    function ydb(a){this.a=a;}
    function Ddb(a){this.a=a;}
    function lkb(a){this.a=a;}
    function klb(a){this.a=a;}
    function llb(a){this.a=a;}
    function inb(a){this.a=a;}
    function wnb(a){this.d=a;}
    function Snb(a){this.a=a;}
    function Ynb(a){this.a=a;}
    function aob(a){this.a=a;}
    function fob(a){this.a=a;}
    function Bob(a){this.b=a;}
    function Gob(a){this.a=a;}
    function Mob(a){this.a=a;}
    function Tob(a){this.c=a;}
    function opb(a){this.a=a;}
    function Ipb(a){this.a=a;}
    function rqb(a){this.a=a;}
    function zqb(a){this.b=a;}
    function Nqb(a){this.b=a;}
    function mrb(a){this.c=a;}
    function Trb(a){this.a=a;}
    function Xrb(a){this.a=a;}
    function Fsb(a){this.a=a;}
    function ju(){this.a=[];}
    function ytb(a){this.a=a;}
    function Lub(a){this.a=a;}
    function u5(a){a.b=a.a;}
    function vg(a){a.c=a.d.d;}
    function sX(a,b){a.g=b;}
    function bfb(a,b){a.k=b;}
    function qfb(a,b){a.a=b;}
    function rfb(a,b){a.b=b;}
    function qW(a,b){a.e.k=b;}
    function qu(a){return a.a}
    function yu(a){return a.a}
    function Mu(a){return a.a}
    function $u(a){return a.a}
    function rv(a){return a.a}
    function jv(){return null}
    function Fu(){return null}
    function Rh(){this.c=this;}
    function tkb(){_s(this);}
    function ntb(){Ymb(this);}
    function b5(a){a5(this,a);}
    function GO(a){IO();$O(a);}
    function mI(a){a.a=new aJ;}
    function IZ(a,b){a.a=b-a.a;}
    function KZ(a,b){a.b=b-a.b;}
    function Dq(){Dq=iI;}
    function nW(){nW=iI;}
    function ni(){throw new Hmb}
    function ii(){throw new Hmb}
    function ji(){throw new Hmb}
    function li(){throw new Hmb}
    function mi(){throw new Hmb}
    function dd(){throw new Hmb}
    function pj(){throw new Hmb}
    function Wn(){throw new Hmb}
    function $n(){throw new Hmb}
    function qT(){this.a=new GU;}
    function fU(){this.a=new GU;}
    function cV(){this.a=new GU;}
    function pV(){this.a=new GU;}
    function l7(){this.a=new GU;}
    function k7(){this.a=new d7;}
    function A7(){this.a=new n7;}
    function t8(){this.b=new GU;}
    function jJ(){aJ.call(this);}
    function ZN(){UN.call(this);}
    function AP(){uP.call(this);}
    function DP(){uP.call(this);}
    function q7(){GU.call(this);}
    function alb(){ft.call(this);}
    function rlb(){ft.call(this);}
    function nkb(){ft.call(this);}
    function qkb(){ft.call(this);}
    function tlb(){ft.call(this);}
    function Vlb(){ft.call(this);}
    function Hmb(){ft.call(this);}
    function Wab(){this.f=new GU;}
    function Ybb(){this.d=new GU;}
    function jV(){this.a=new vtb;}
    function vqb(){throw new Hmb}
    function wqb(){throw new Hmb}
    function xqb(){throw new Hmb}
    function yqb(){throw new Hmb}
    function Mqb(){throw new Hmb}
    function Uvb(){this.a=new GU;}
    function it(){it=iI;ht=new pb;}
    function bmb(){bmb=iI;}
    function zb(){zb=iI;yb=new Ab;}
    function Tq(){Tq=iI;Sq=new Vq;}
    function dr(){dr=iI;cr=new er;}
    function Gt(){Gt=iI;Ft=new Jt;}
    function Bu(){Bu=iI;Au=new Cu;}
    function fR(){fR=iI;eR=new lR;}
    function VR(){VR=iI;UR=new WR;}
    function jS(a){dS(a);return a}
    function jl(a){Gi();this.a=a;}
    function vi(a){hi();this.a=a;}
    function Uk(a){hi();this.a=a;}
    function Zk(a){hi();this.a=a;}
    function ds(a,b){a.i=b;b.f=a;}
    function ycb(a,b){stb(a.b,b);}
    function nsb(){ft.call(this);}
    function osb(){ft.call(this);}
    function nvb(){ft.call(this);}
    function Ccb(){Bcb.call(this);}
    function Jcb(){Bcb.call(this);}
    function pkb(){nkb.call(this);}
    function Xlb(){rlb.call(this);}
    function gt(a){et.call(this,a);}
    function Vd(a){Md.call(this,a);}
    function uh(a){Md.call(this,a);}
    function Bk(a){Hj.call(this,a);}
    function Jk(a){dk.call(this,a);}
    function Lm(a){Em.call(this,a);}
    function nq(a){vm.call(this,a);}
    function ap(a){Ro.call(this,a);}
    function ir(a){Hj.call(this,a);}
    function Op(a,b){a.a.W().nb(b);}
    function emb(a,b){return a===b}
    function Zr(a){return !a?0:a.a}
    function Rs(a){return !a?0:a.d}
    function Ts(a){return !a?0:a.j}
    function zu(a){gt.call(this,a);}
    function $J(a){gt.call(this,a);}
    function _J(a){gt.call(this,a);}
    function EQ(a){_J.call(this,a);}
    function Tu(){Uu.call(this,{});}
    function y5(a){b5.call(this,a);}
    function H5(a){b5.call(this,a);}
    function WP(a,b,c){XP(a,b.b,c);}
    function a7(a,b,c){f6(a.c,b,c);}
    function qV(a,b,c){a.b.Fc(b,c);}
    function M9(a){$8.call(this,a);}
    function P9(a){$8.call(this,a);}
    function YY(){this.a=(sK(),qK);}
    function cZ(){this.a=(sK(),qK);}
    function vtb(){this.a=new ntb;}
    function Vwb(){this.a=new iwb;}
    function vT(){vT=iI;uT=new AT;}
    function AV(){AV=iI;zV=new EV;}
    function p0(){p0=iI;o0=new s0;}
    function Ckb(a){xkb();return a}
    function Ixb(a){Dxb(a);return a}
    function ikb(a){et.call(this,a);}
    function okb(a){gt.call(this,a);}
    function slb(a){gt.call(this,a);}
    function Kb(a){this.c=$v(_b(a));}
    function FI(){this.a=0;this.b=0;}
    function aJ(){OI(this);_I(this);}
    function cI(){aI==null&&(aI=[]);}
    function Vvb(a){a.b=null;a.c=0;}
    function mS(a,b){a.b=b;return a}
    function nS(a,b){a.c=b;return a}
    function oS(a,b){a.f=b;return a}
    function pS(a,b){a.g=b;return a}
    function S7(a,b){a.a=b;return a}
    function T7(a,b){a.f=b;return a}
    function U7(a,b){a.k=b;return a}
    function xc(a,b){return a.e-b.e}
    function H3(a,b){return a.d-b.d}
    function Klb(a){return a<0?-a:a}
    function hlb(a){return isNaN(a)}
    function gv(a){return new Gu(a)}
    function iv(a){return new lv(a)}
    function rkb(a){gt.call(this,a);}
    function ulb(a){gt.call(this,a);}
    function Ulb(a){gt.call(this,a);}
    function Wlb(a){gt.call(this,a);}
    function Imb(a){gt.call(this,a);}
    function et(a){this.f=a;_s(this);}
    function _2(){this.b=0;this.a=0;}
    function Ws(){Ws=iI;}
    function Ytb(){Ytb=iI;Xtb=$tb();}
    function Vtb(c,a,b){c.set(a,b);}
    function Wtb(c,a,b){c.set(a,b);}
    function Ot(a,b){Nt();Mt.dc(a,b);}
    function tv(a,b){return Skb(a,b)}
    function zm(a,b){return a.a.B(b)}
    function aP(a,b){return a.g[b.e]}
    function bP(a,b){return a.i[b.e]}
    function cP(a,b){return a.j[b.e]}
    function dP(a,b){return a.n[b.e]}
    function eP(a,b){return a.o[b.e]}
    function Ou(b,a){return a in b.a}
    function Tab(a,b){return a.b-b.b}
    function ndb(a,b){return a.d-b.d}
    function jgb(a,b){return a.i-b.i}
    function Nlb(a,b){return a>b?a:b}
    function Olb(a,b){return a>b?a:b}
    function Plb(a,b){return a>b?a:b}
    function Qlb(a,b){return a<b?a:b}
    function Rlb(a,b){return a<b?a:b}
    function Slb(a,b){return a<b?a:b}
    function awb(a){return !!a&&a.b}
    function $ob(a){_ob(a,a.length);}
    function bpb(a){apb(a,a.length);}
    function dpb(a){cpb(a,a.length);}
    function Cmb(a){okb.call(this,a);}
    function Bmb(a){lkb.call(this,a);}
    function oxb(a){nxb.call(this,a);}
    function Ylb(a){slb.call(this,a);}
    function Frb(a){zqb.call(this,a);}
    function Nrb(a){Frb.call(this,a);}
    function csb(a){Rqb.call(this,a);}
    function zmb(){lkb.call(this,'');}
    function Amb(){lkb.call(this,'');}
    function Ikb(a){Gkb(a);return a.n}
    function Jkb(a){Gkb(a);return a.j}
    function Hkb(a){return a.e&&a.e()}
    function Lk(a,b){return a.a.sb(b)}
    function Sb(a,b){return a?a:_b(b)}
    function vW(a,b){return rJ(a.a,b)}
    function w4(a,b){return t4(a.a,b)}
    function VH(a,b){return RH(a,b)<0}
    function Dlb(a){return bmb(),''+a}
    function qe(a){return !a?null:a.d}
    function Gr(a){hi();this.a=_b(a);}
    function I9(){F9();this.g=new Um;}
    function J0(){J0=iI;I0=(kP(),hP);}
    function Et(){ut!=0&&(ut=0);wt=-1;}
    function bS(a){cS(a,a.d);return a}
    function i7(a,b){a.a.d=b;return a}
    function g7(a,b){a.a.a=b;return a}
    function h7(a,b){a.a.c=b;return a}
    function j7(a,b){a.a.f=b;return a}
    function z7(a,b){a.a.f=b;return a}
    function y7(a,b){a.a.b=b;return a}
    function hxb(a,b,c){a.splice(b,c);}
    function oqb(a,b){return Akb(b,a)}
    function Drb(a,b){return a.b.t(b)}
    function jrb(a,b){return a.c.t(b)}
    function ttb(a,b){return a.a.R(b)}
    function Ttb(b,a){return b.get(a)}
    function Utb(b,a){return b.get(a)}
    function elb(a,b){return a.test(b)}
    function Jlb(a){return a<=0?0-a:a}
    function ilb(a){return bmb(),''+a}
    function qlb(a){return bmb(),''+a}
    function wtb(a){this.a=new otb(a);}
    function Wwb(a){this.a=new jwb(a);}
    function nc(a){this.a=Wv(_b(a),19);}
    function Bf(a){this.b=Wv(_b(a),57);}
    function Ch(a){this.d=Wv(_b(a),56);}
    function Ac(a,b){this.d=a;this.e=b;}
    function Ie(a,b){this.b=a;this.a=b;}
    function tm(a,b){this.b=a;this.a=b;}
    function Pf(a,b){this.b=a;this.c=b;}
    function Fk(a,b){this.a=a;this.b=b;}
    function Bn(a,b){this.a=a;this.b=b;}
    function Sn(a,b){this.a=a;this.f=b;}
    function Mc(a,b){Ac.call(this,a,b);}
    function Hh(a,b){Ac.call(this,a,b);}
    function yp(a,b){Ac.call(this,a,b);}
    function bp(a,b){this.b=a;this.c=b;}
    function Oq(a,b){this.e=a;this.c=b;}
    function Yq(a,b){this.a=a;this.b=b;}
    function fs(a,b){this.a=a;this.b=b;}
    function rs(a,b){Ac.call(this,a,b);}
    function _u(a,b){this.a=a;this.b=b;}
    function Mo(a){this.a=Wv(_b(a),20);}
    function Ro(a){this.a=Wv(_b(a),20);}
    function Fp(a){this.a=Wv(_b(a),57);}
    function vm(a){this.b=Wv(_b(a),35);}
    function HI(a,b){this.a=a;this.b=b;}
    function RJ(a,b){this.a=a;this.b=b;}
    function jK(a,b){Ac.call(this,a,b);}
    function Qm(a,b){return Qmb(a.b,b)}
    function fv(a){return tu(),a?su:ru}
    function tK(a){return a==oK||a==pK}
    function uK(a){return a==rK||a==nK}
    function RI(a,b){TI(a,b,a.a,a.a.a);}
    function SI(a,b){TI(a,b,a.c.b,a.c);}
    function wK(a,b){Ac.call(this,a,b);}
    function FK(a,b){Ac.call(this,a,b);}
    function OK(a,b){Ac.call(this,a,b);}
    function ZK(a,b){Ac.call(this,a,b);}
    function fL(a,b){Ac.call(this,a,b);}
    function pM(a,b){Ac.call(this,a,b);}
    function AM(a,b){Ac.call(this,a,b);}
    function NM(a,b){Ac.call(this,a,b);}
    function VM(a,b){Ac.call(this,a,b);}
    function uN(a,b){Ac.call(this,a,b);}
    function EN(a,b){Ac.call(this,a,b);}
    function NN(a,b){Ac.call(this,a,b);}
    function EO(a,b){Ac.call(this,a,b);}
    function lP(a,b){Ac.call(this,a,b);}
    function OS(a,b){this.b=a;this.a=b;}
    function VS(a,b){this.c=a;this.d=b;}
    function wW(a,b){this.a=a;this.c=b;}
    function BW(a,b){this.e=a;this.c=b;}
    function FW(a,b){this.e=a;this.d=b;}
    function fT(a,b){Ac.call(this,a,b);}
    function DX(a,b){Ac.call(this,a,b);}
    function MY(a,b){this.a=a;this.b=b;}
    function PY(a,b){this.a=a;this.b=b;}
    function YZ(a,b){Ac.call(this,a,b);}
    function f0(a,b){Ac.call(this,a,b);}
    function J1(a,b){Ac.call(this,a,b);}
    function Y3(a,b){Ac.call(this,a,b);}
    function h4(a,b){Ac.call(this,a,b);}
    function $7(a,b){Ac.call(this,a,b);}
    function y8(a,b){Ac.call(this,a,b);}
    function q9(a,b){Ac.call(this,a,b);}
    function MR(a,b){return Zsb(a.c,b)}
    function Bnb(a){return a.b<a.d.Y()}
    function Zmb(a){return a.d.c+a.e.c}
    function hrb(a,b){return a.c.ab(b)}
    function Brb(a,b){return a.b.kb(b)}
    function Crb(a,b){return a.b.lb(b)}
    function Erb(a,b){return a.b.pb(b)}
    function Irb(a,b){return a.b.kb(b)}
    function Jrb(a,b){return a.b.lb(b)}
    function dT(a){return a==$S||a==bT}
    function eT(a){return a==$S||a==_S}
    function MM(a){return a!=IM&&a!=JM}
    function lg(a){return Yf(a),a.d.Y()}
    function jtb(a){this.c=a;gtb(this);}
    function otb(a){$mb.call(this,a,0);}
    function iwb(){jwb.call(this,null);}
    function xk(){uh.call(this,new ntb);}
    function Ap(){yp.call(this,'KEY',0);}
    function lr(a){kr();dk.call(this,a);}
    function Dt(a){$wnd.clearTimeout(a);}
    function um(a){return a.Vb(a.b.H())}
    function Pp(a){this.a=Wv(_b(a),144);}
    function Um(){this.b=(mp(),new ntb);}
    function hsb(){hsb=iI;gsb=new isb;}
    function Rpb(){Rpb=iI;Qpb=new Spb;}
    function nqb(){nqb=iI;mqb=new pqb;}
    function hc(){hc=iI;gc=new Kb(',');}
    function nJ(){nJ=iI;}
    function UN(){VN.call(this,0,0,0,0);}
    function wab(a,b){Ac.call(this,a,b);}
    function lbb(a,b){Ac.call(this,a,b);}
    function Hbb(a,b){Ac.call(this,a,b);}
    function Mbb(a,b){Ac.call(this,a,b);}
    function xQ(a){wJ();CJ.call(this,a);}
    function mcb(a,b){Ac.call(this,a,b);}
    function gab(a,b){this.c=a;this.b=b;}
    function Qbb(a,b){this.a=a;this.b=b;}
    function Fcb(a,b){this.b=a;this.d=b;}
    function ggb(a,b){Ac.call(this,a,b);}
    function Agb(a,b){Ac.call(this,a,b);}
    function Igb(a,b){Ac.call(this,a,b);}
    function Rgb(a,b){Ac.call(this,a,b);}
    function ahb(a,b){Ac.call(this,a,b);}
    function phb(a,b){Ac.call(this,a,b);}
    function Ihb(a,b){Ac.call(this,a,b);}
    function Nhb(a,b){Ac.call(this,a,b);}
    function Yib(a,b){Ac.call(this,a,b);}
    function ejb(a,b){Ac.call(this,a,b);}
    function Rjb(a,b){Ac.call(this,a,b);}
    function dkb(a,b){Ac.call(this,a,b);}
    function fxb(a,b,c){a.splice(b,0,c);}
    function Yjb(a,b,c){a.g[b.e][b.e]=c;}
    function D6(a,b){a.a=b;a.g=0;a.f=0;}
    function BI(a){a.a=0;a.b=0;return a}
    function rY(a){return zU(a.b.c,a,0)}
    function Llb(a){return Math.ceil(a)}
    function Tlb(a){return Math.sqrt(a)}
    function cub(a,b){return Utb(a.a,b)}
    function vob(a,b){return !!Wvb(a,b)}
    function Yob(a,b){Zob(a,a.length,b);}
    function Gwb(a,b){Ac.call(this,a,b);}
    function Psb(a,b){this.b=a;this.a=b;}
    function qob(a,b){this.d=a;this.e=b;}
    function dcb(){$bb();this.c=new vtb;}
    function Rdb(){Ndb();this.a=new vtb;}
    function aub(){Ytb();return new Xtb}
    function Xb(a){if(!a){throw new rlb}}
    function dc(a){if(!a){throw new tlb}}
    function Vm(a){if(!a){throw new nvb}}
    function SV(){this.b=(mp(),new ntb);}
    function Q4(){this.b=(mp(),new ntb);}
    function II(a){this.a=a.a;this.b=a.b;}
    function gw(a){return a==null?null:a}
    function re(a){return !a?null:a.zb()}
    function $i(a,b){return a.Nb().sb(b)}
    function aq(a,b){return a.a.a.a.U(b)}
    function nl(a,b){return Ll(a.mb(),b)}
    function B3(a,b){return glb(b.b,a.b)}
    function h3(a,b){return glb(b.k,a.k)}
    function Mlb(a){return Math.floor(a)}
    function vmb(a,b){return a.a+=''+b,a}
    function xmb(a,b){a.a+=''+b;return a}
    function ymb(a,b){a.a+=''+b;return a}
    function iw(a){Hxb(a==null);return a}
    function T2(a){a.d&&Z2(a);return a.a}
    function U2(a){a.d&&Z2(a);return a.b}
    function V2(a){a.d&&Z2(a);return a.c}
    function Tvb(a,b){vU(a.a,b);return b}
    function ptb(a){Ymb(this);he(this,a);}
    function _4(a){this.c=a;this.e=false;}
    function Jh(){Hh.call(this,'OPEN',0);}
    function ts(){rs.call(this,'SIZE',0);}
    function qxb(){nxb.call(this,'UTF-8');}
    function Nxb(){Nxb=iI;Kxb={};Mxb={};}
    function IO(){IO=iI;HO=new DJ(yzb,0);}
    function Sh(a){_b(a);return new Vh(a)}
    function pmb(a){bmb();return a.length}
    function Jmb(a,b){return cmb(a.a,b.a)}
    function vlb(a,b){return xlb(a.a,b.a)}
    function Ys(a,b){return a==b?0:a?1:-1}
    function Cs(a){return Rs(a.e)-Rs(a.g)}
    function xI(a){return new HI(a.a,a.b)}
    function RN(a){return new HI(a.d,a.e)}
    function tU(a){a.c=xv(UF,syb,1,0,4,1);}
    function Cp(){yp.call(this,'VALUE',1);}
    function dX(a){cX.call(this);this.a=a;}
    function Q2(a){this.a=new $2;this.b=a;}
    function Vh(a){this.a=a;Rh.call(this);}
    function vl(a){this.a=a;Rh.call(this);}
    function U8(){P8();this.d=(ckb(),bkb);}
    function zxb(a){if(!a){throw new qkb}}
    function uxb(a){if(!a){throw new tlb}}
    function vxb(a){if(!a){throw new rlb}}
    function Hxb(a){if(!a){throw new alb}}
    function Bxb(a){if(!a){throw new nvb}}
    function Wub(){ytb.call(this,new wub);}
    function Kh(){Hh.call(this,'CLOSED',1);}
    function Im(a){Em.call(this,new Lm(a));}
    function p7(a,b){++a.d;return BU(a,b)}
    function kkb(a,b){return gmb(a.a,0,b)}
    function jlb(a,b){return glb(a.a,b.a)}
    function Al(a){return Pl(a.b.mb(),a.a)}
    function Dl(a){return Wl(a.a.mb(),a.b)}
    function q6(a,b){return b==a.c?a.d:a.c}
    function Zs(a,b){return a<b?-1:a>b?1:0}
    function xlb(a,b){return a<b?-1:a>b?1:0}
    function pvb(a){return a!=null?vb(a):0}
    function Ntb(a){this.a=aub();this.b=a;}
    function fub(a){this.a=aub();this.b=a;}
    function Cg(a){this.a=a;xg.call(this,a);}
    function o4(){n4();this.b=new q4(this);}
    function Oh(){Oh=iI;Nh=Jb(new Kb(', '));}
    function Gh(){Gh=iI;Fh=new Jh;Eh=new Kh;}
    function Il(){Il=iI;Gl=new Yl;Hl=new gm;}
    function xp(){xp=iI;vp=new Ap;wp=new Cp;}
    function qs(){qs=iI;ps=new ts;os=new ws;}
    function wJ(){wJ=iI;uJ=new NJ;vJ=new PJ;}
    function Teb(a){a.g=new GU;a.b=new GU;}
    function OI(a){a.a=new mvb;a.c=new mvb;}
    function n4(){n4=iI;m4=new U4;l4=new u4;}
    function Uc(){Mc.call(this,'IS_NULL',2);}
    function Kwb(){Gwb.call(this,'Head',1);}
    function Pwb(){Gwb.call(this,'Tail',3);}
    function pR(a,b){qR.call(this,a,b,null);}
    function lpb(a,b){ipb(a,0,a.length,b);}
    function x7(a,b){vU(b.a,a.a);return a.a}
    function CI(a,b){a.a*=b;a.b*=b;return a}
    function gl(a,b){Gi();this.a=a;this.b=b;}
    function i9(a,b){return a.a[b.d.k][b.k]}
    function W9(a,b){return a.a[b.d.k][b.k]}
    function xJ(a,b){return kmb(a.b,b.mc())}
    function Swb(a,b){return qe(Xvb(a.a,b))}
    function Twb(a,b){return qe(Yvb(a.a,b))}
    function $T(a,b){return Wv(Dd(a.a,b),20)}
    function aw(a,b){return a!=null&&Vv(a,b)}
    function Qob(a){return a.a<a.c.c.length}
    function htb(a){return a.a<a.c.a.length}
    function y$(a,b){return glb(a.i.a,b.i.a)}
    function S$(a,b){return a.i.b=(Dxb(b),b)}
    function T$(a,b){return a.i.b=(Dxb(b),b)}
    function utb(a,b){return a.a.eb(b)!=null}
    function Vjb(a,b,c){return a.g[b.e][c.e]}
    function Bkb(a){xkb();return bmb(),''+a}
    function Mwb(){Gwb.call(this,'Range',2);}
    function ws(){rs.call(this,'DISTINCT',1);}
    function Xc(){Mc.call(this,'NOT_NULL',3);}
    function mp(){mp=iI;lp=new Rb((Oh(),Nh));}
    function Hj(a){this.d=(ypb(),new mrb(a));}
    function Hb(a,b){return Gb(a,new zmb,b).a}
    function Mb(a,b){return b==null?a.b:Ib(b)}
    function mt(a){return a==null?null:a.name}
    function cw(a){return typeof a==='number'}
    function ew(a){return typeof a==='string'}
    function Hi(a,b){return new Mk(a,a.Y(),b)}
    function An(a,b){return new no(a.a,a.b,b)}
    function Jb(a){_b(Wxb);return new Nb(a,a)}
    function Do(a){Mh(a,Vyb);return new HU(a)}
    function Am(a,b){this.a=b;vm.call(this,a);}
    function tp(a,b){this.a=b;vm.call(this,a);}
    function If(a,b){this.a=a;Bf.call(this,b);}
    function ks(a){this.c=a;this.a=Qr(this.c);}
    function MZ(a){var b;b=a.a;a.a=a.b;a.b=b;}
    function pW(a,b){a.e.j.a=b.a;a.e.j.b=b.b;}
    function xvb(a,b,c){a.a=b^1502;a.b=c^_Ab;}
    function uI(a,b,c){a.a+=b;a.b+=c;return a}
    function DI(a,b,c){a.a-=b;a.b-=c;return a}
    function zI(a){a.a=-a.a;a.b=-a.b;return a}
    function UI(a){Bxb(a.b!=0);return a.a.a.c}
    function VI(a){Bxb(a.b!=0);return a.c.b.c}
    function uub(a,b){if(a.a){Hub(b);Gub(b);}}
    function rn(a,b,c){var d;d=a.ub(b);d.J(c);}
    function Iq(a,b){return Zs(b.Yb(),a.Yb())}
    function o5(a){return Wv(yU(a.a,a.b),128)}
    function EU(a){return cxb(a.c,a.c.length)}
    function Fv(a){return a.l+a.m*czb+a.h*dzb}
    function LM(a){return a==EM||a==GM||a==FM}
    function UH(a){return typeof a==='number'}
    function Zsb(a,b){return !!b&&a.b[b.e]==b}
    function lsb(a,b){var c;c=a[WAb];b[WAb]=c;}
    function FQ(a,b){_J.call(this,a);this.b=b;}
    function Rqb(a){zqb.call(this,a);this.a=a;}
    function arb(a){Nqb.call(this,a);this.a=a;}
    function dsb(a){Frb.call(this,a);this.a=a;}
    function Xub(a){ytb.call(this,new xub(a));}
    function wwb(a){this.a=a;Bob.call(this,a);}
    function v5(a){this.c=a;this.a=1;this.b=1;}
    function Rb(a){this.a=a;this.b=$v(_b('='));}
    function B5(){this.a=new aJ;this.e=new aJ;}
    function tV(){this.a=new fU;this.c=new uV;}
    function cX(){this.i=new FI;this.j=new FI;}
    function Md(a){Xb(a.d.c+a.e.c==0);this.b=a;}
    function _s(a){a.g=null;Ot(a,a.f);return a}
    function Nl(a){Il();_b(a);return new om(a)}
    function St(a){Nt();return parseInt(a)||-1}
    function Uwb(a,b){return cwb(a.a,b)!=null}
    function ok(a,b){return !rk(a,b)&&!qk(a,b)}
    function txb(a){return a.$H||(a.$H=++sxb)}
    function yc(a){return a.d!=null?a.d:''+a.e}
    function zc(a){return a.d!=null?a.d:''+a.e}
    function pwb(a){return a.b=Wv(Cnb(a.a),21)}
    function bw(a){return typeof a==='boolean'}
    function pub(a){a.b=new Iub(a);a.c=new ntb;}
    function oab(){this.a=new GU;this.d=new GU;}
    function Iub(a){Jub.call(this,a,null,null);}
    function ug(a,b,c,d){mg.call(this,a,b,c,d);}
    function BP(a,b,c,d){vP.call(this,a,b,c,d);}
    function EP(a,b,c,d){vP.call(this,a,b,c,d);}
    function Kg(a,b,c){_f.call(this,a,b,c,null);}
    function Lg(a,b,c){_f.call(this,a,b,c,null);}
    function es(a,b,c){a.i=b;b.f=a;b.i=c;c.f=b;}
    function tI(a,b){mI(this);this.e=a;this.f=b;}
    function yg(a,b){this.d=a;vg(this);this.b=b;}
    function kJ(a){OI(this);_I(this);Ue(this,a);}
    function Xv(a){Hxb(a==null||bw(a));return a}
    function Yv(a){Hxb(a==null||cw(a));return a}
    function $v(a){Hxb(a==null||ew(a));return a}
    function vI(a,b){a.a+=b.a;a.b+=b.b;return a}
    function EI(a,b){a.a-=b.a;a.b-=b.b;return a}
    function U$(a,b){return a.i.a=(Dxb(b),b)+10}
    function V$(a,b){return a.i.a=(Dxb(b),b)+10}
    function h6(a,b){return Wv(Smb(a.k,b),24).a}
    function Bj(a,b){return Lh(a,b),new zr(a,b)}
    function Web(a,b){return Wv(a.b.sb(b),92).a}
    function WX(a){return Wv(a,7).b.c.length!=0}
    function TX(a){return Wv(a,7).e.c.length!=0}
    function jX(a){return !a.d?-1:zU(a.d.a,a,0)}
    function lt(a){return a==null?null:a.message}
    function Gkb(a){if(a.n!=null){return}Wkb(a);}
    function wmb(a,b,c,d){jkb(a,b,c,d);return a}
    function mmb(a,b){bmb();return a.indexOf(b)}
    function QX(a,b){if(!b){throw new Vlb}a.g=b;}
    function Mn(a){if(a.e.c!=a.b){throw new nsb}}
    function Xn(a){if(a.f.c!=a.b){throw new nsb}}
    function Uq(a,b){_b(a);_b(b);return Akb(a,b)}
    function U6(a,b){this.a=a;this.c=b;this.b=2;}
    function sI(){mI(this);this.e=-1;this.f=true;}
    function Dh(){Vd.call(this,new ntb);this.a=3;}
    function CP(a){vP.call(this,a.d,a.b,a.a,a.c);}
    function FP(a){vP.call(this,a.d,a.b,a.a,a.c);}
    function r6(a){k6.call(this,a);this.c=new GU;}
    function Oc(){Mc.call(this,'ALWAYS_TRUE',0);}
    function Rc(){Mc.call(this,'ALWAYS_FALSE',1);}
    function _T(a){XT();this.a=new Dh;YT(this,a);}
    function Y9(a){!a.e&&(a.e=new GU);return a.e}
    function W7(a){var b;b=new V7;b.e=a;return b}
    function msb(a){var b;b=a[WAb]|0;a[WAb]=b+1;}
    function Anb(a,b){a.a.rb(a.b,b);++a.b;a.c=-1;}
    function Enb(a,b){uxb(a.c!=-1);a.a.wb(a.c,b);}
    function zkb(a,b){xkb();return a==b?0:a?1:-1}
    function Wjb(a,b,c){return a.g[b.e][c.e]*a.d}
    function xt(a,b,c){return a.apply(b,c);}
    function ssb(a,b,c){return rsb(a,Wv(b,17),c)}
    function m5(a,b){return b==(sN(),rN)?a.c:a.d}
    function Zi(a,b){return b!=null&&a.Nb().kb(b)}
    function skb(a,b){this.e=b;this.f=a;_s(this);}
    function om(a){this.b=a;this.a=(Il(),Il(),Hl);}
    function dk(a){hi();this.a=(ypb(),new Frb(a));}
    function hi(){hi=iI;new vi((ypb(),ypb(),vpb));}
    function e8(){e8=iI;d8=PQ(new WQ,(d0(),X_));}
    function rwb(a){swb.call(this,a,(Fwb(),Bwb));}
    function IU(a){tU(this);gxb(this.c,0,a.ob());}
    function tr(a,b,c){this.b=a;this.a=b;this.c=c;}
    function WS(a,b,c){VS.call(this,a,b);this.b=c;}
    function XV(a,b,c){this.b=a;this.a=b;this.c=c;}
    function job(a,b){var c;c=a.e;a.e=b;return c}
    function qub(a){Ymb(a.c);a.b.b=a.b;a.b.a=a.b;}
    function Vf(a){a.b?Vf(a.b):Umb(a.f.b,a.e,a.d);}
    function YI(a){Bxb(a.b!=0);return $I(a,a.a.a)}
    function ZI(a){Bxb(a.b!=0);return $I(a,a.c.b)}
    function Wl(a,b){Il();_b(b);return new Am(a,b)}
    function np(a,b){mp();return new tp(a.mb(),b)}
    function jmb(a,b){bmb();return a.charCodeAt(b)}
    function imb(a,b,c){bmb();return a.substr(b,c)}
    function qmb(a){bmb();return a==null?Wxb:xb(a)}
    function Xjb(a,b,c){return Vjb(a,b.g,c.g)*a.d}
    function Ev(a,b,c){return {'l':a,'m':b,'h':c}}
    function YU(a,b){return ZU(a,new VS(b.a,b.b))}
    function SN(a,b,c,d,e){a.d=b;a.e=c;a.c=d;a.b=e;}
    function wS(a,b,c,d,e){a.b=b;a.c=c;a.d=d;a.a=e;}
    function QI(a,b){TI(a,b,a.c.b,a.c);return true}
    function vU(a,b){a.c[a.c.length]=b;return true}
    function DJ(a,b){wJ();CJ.call(this,a);this.a=b;}
    function g8(){e8();this.e=new aJ;this.d=new aJ;}
    function Fmb(){Fmb=iI;Dmb=new hkb;Emb=new hkb;}
    function zab(){zab=iI;yab=VQ(new WQ,(d0(),v_));}
    function abb(){abb=iI;_ab=VQ(new WQ,(d0(),v_));}
    function rbb(){rbb=iI;qbb=VQ(new WQ,(d0(),v_));}
    function $bb(){$bb=iI;Zbb=VQ(new WQ,(d0(),v_));}
    function Wt(){Wt=iI;Error.stackTraceLimit=64;}
    function xS(){wS(this,false,false,false,false);}
    function Bo(a){var b;b=new GU;Jl(b,a);return b}
    function Eo(a){var b;b=new aJ;ml(b,a);return b}
    function XQ(a){var b;b=new WQ;QQ(b,a);return b}
    function Ocb(a){var b;b=new Mcb;b.a=a;return b}
    function Wv(a,b){Hxb(a==null||Vv(a,b));return a}
    function Dvb(a,b){if(a<0||a>=b){throw new pkb}}
    function pl(a,b){_b(a);_b(b);return new Bl(a,b)}
    function ul(a,b){_b(a);_b(b);return new El(a,b)}
    function nmb(a,b){bmb();return a.lastIndexOf(b)}
    function rgb(a,b,c){return a<b?c<=a:a<=c||a==b}
    function cvb(a,b,c){this.d=a;this.b=c;this.a=b;}
    function atb(a,b,c){this.a=a;this.b=b;this.c=c;}
    function lub(a,b,c){this.a=a;this.b=b;this.c=c;}
    function Nb(a,b){this.a=a;this.b=Wxb;this.c=b.c;}
    function z3(a){this.c=a.c;this.a=a.e;this.b=a.b;}
    function xg(a){this.d=a;vg(this);this.b=Ed(a.d);}
    function u4(){FS.call(this);this.a=new x4(this);}
    function FS(){this.c=new PS;this.d=new KS(this);}
    function qr(a){var b;b=new vtb;Jl(b,a);return b}
    function qwb(a){vnb(a.a);dwb(a.c,a.b);a.b=null;}
    function n5(a){return a.c-Wv(yU(a.a,a.b),128).b}
    function t5(a,b){return a.c<b.c?-1:a.c==b.c?0:1}
    function t4(a,b){return tK(a.b.d)?b.xc():b.wc()}
    function gmb(a,b,c){return bmb(),a.substr(b,c-b)}
    function gxb(a,b,c){dxb(c,0,a,b,c.length,false);}
    function Jub(a,b,c){this.c=a;qob.call(this,b,c);}
    function Bl(a,b){this.b=a;this.a=b;Rh.call(this);}
    function El(a,b){this.a=a;this.b=b;Rh.call(this);}
    function Lq(a,b){this.b=a;this.a=b;Mh(b,'count');}
    function dl(a){this.b=a;this.a=nj(this.b.a).Kb();}
    function CJ(a){wJ();this.c=uJ;this.d=vJ;this.b=a;}
    function iab(a,b,c){gab.call(this,a,b);this.a=c;}
    function mab(a,b,c){gab.call(this,a,b);this.a=c;}
    function yU(a,b){Cxb(b,a.c.length);return a.c[b]}
    function PQ(a,b){Wv(yU(a.a,5),18).ib(b);return a}
    function RQ(a,b){Wv(yU(a.a,0),18).ib(b);return a}
    function SQ(a,b){Wv(yU(a.a,1),18).ib(b);return a}
    function TQ(a,b){Wv(yU(a.a,2),18).ib(b);return a}
    function UQ(a,b){Wv(yU(a.a,3),18).ib(b);return a}
    function VQ(a,b){Wv(yU(a.a,4),18).ib(b);return a}
    function iS(a){gS(a,(sK(),oK));a.e=true;return a}
    function Pt(a){Nt();var b;b=Mt.ec(a);return Qt(b)}
    function Pkb(a,b){var c;c=Mkb(a,b);c.g=2;return c}
    function _ob(a,b){var c;for(c=0;c<b;++c){a[c]=0;}}
    function YW(a,b){a.b=b.b;a.c=b.c;a.d=b.d;a.a=b.a;}
    function Hub(a){a.a.b=a.b;a.b.a=a.a;a.a=a.b=null;}
    function NX(a){return a.b.c.length+a.e.c.length}
    function zv(a){return Array.isArray(a)&&a.ad===kI}
    function ol(a,b){return Il(),Tl(new Tob(a),b)!=-1}
    function vv(a,b,c,d,e,f){return wv(a,b,c,d,e,0,f)}
    function BJ(a,b,c){wJ();FJ.call(this,a.b,b,c,a.d);}
    function AJ(a,b){wJ();FJ.call(this,a.b,b,a.c,a.d);}
    function uU(a,b,c){Fxb(b,a.c.length);fxb(a.c,b,c);}
    function mpb(a,b){Cxb(b,a.a.length);return a.a[b]}
    function kpb(c){c.sort(function(a,b){return a-b});}
    function _b(a){if(a==null){throw new Vlb}return a}
    function lv(a){if(a==null){throw new Vlb}this.a=a;}
    function Us(a,b,c){if(a.a!=b){throw new nsb}a.a=c;}
    function wxb(a,b){if(!a){throw new slb((bmb(),b))}}
    function Axb(a,b){if(!a){throw new rkb((bmb(),b))}}
    function Dxb(a){if(a==null){throw new Vlb}return a}
    function Yub(a){ytb.call(this,new wub);Ue(this,a);}
    function xtb(a){this.a=new otb(a.Y());Ue(this,a);}
    function Lsb(a){this.c=a;this.a=new jtb(this.c.a);}
    function Er(a){Gi();this.a=(ypb(),new rqb(_b(a)));}
    function xkb(){xkb=iI;vkb=(xkb(),false);wkb=true;}
    function Glb(){Glb=iI;Flb=xv(PF,Txb,24,256,0,1);}
    function k8(){k8=iI;j8=PQ(RQ(new WQ,(d0(),z_)),X_);}
    function aS(){aS=iI;ZR=new yS;_R=new FS;$R=new AS;}
    function dw(a){return a!=null&&fw(a)&&!(a.ad===kI)}
    function _v(a){return !Array.isArray(a)&&a.ad===kI}
    function Wmb(a,b){return ew(b)?Xmb(a,b):Mtb(a.d,b)}
    function Ysb(a,b){return aw(b,17)&&Zsb(a,Wv(b,17))}
    function $sb(a,b){return aw(b,17)&&_sb(a,Wv(b,17))}
    function bub(a,b){return !(Utb(a.a,b)===undefined)}
    function Vsb(a,b){var c;c=Usb(a);zpb(c,b);return c}
    function Kt(a,b){!a&&(a=[]);a[a.length]=b;return a}
    function rsb(a,b,c){Wsb(a.a,b);return usb(a,b.e,c)}
    function omb(a,b,c){bmb();return a.lastIndexOf(b,c)}
    function xxb(a,b,c){if(!a){throw new slb(Jxb(b,c))}}
    function Zob(a,b,c){var d;for(d=0;d<b;++d){a[d]=c;}}
    function Qo(a,b){var c;c=a.a.Y();bc(b,c);return c-b}
    function ud(a){var b;b=a.i;return !b?(a.i=a.T()):b}
    function Ae(a){var b;b=a.c;return !b?(a.c=a.gb()):b}
    function ki(a){var b;b=a.c;return !b?(a.c=a.Jb()):b}
    function nj(a){if(a.e){return a.e}return a.e=a.Ob()}
    function oj(a){if(a.f){return a.f}return a.f=a.Pb()}
    function Hv(a,b){return Ev(a.l&b.l,a.m&b.m,a.h&b.h)}
    function flb(a,b){return glb((Dxb(a),a),(Dxb(b),b))}
    function Ed(a){return aw(a,20)?Wv(a,20).tb():a.mb()}
    function Ml(a){Il();_b(a);while(a.G()){a.H();a.I();}}
    function Uab(a){var b;b=a;while(b.g){b=b.g;}return b}
    function LY(a){a.b.i.a+=a.a.f*(a.a.a-1);return null}
    function Sob(a){uxb(a.b!=-1);a.c.vb(a.a=a.b);a.b=-1;}
    function Dnb(a){Bxb(a.b>0);return a.a.sb(a.c=--a.b)}
    function $f(a){a.b?$f(a.b):a.d.V()&&Wmb(a.f.b,a.e);}
    function wg(a){Yf(a.d);if(a.d.d!=a.c){throw new nsb}}
    function ksb(a,b){if(b[WAb]!=a[WAb]){throw new nsb}}
    function Pl(a,b){Il();_b(a);_b(b);return new tm(a,b)}
    function Zq(a,b){Gi();Yq.call(this,a,Yi(new opb(b)));}
    function mg(a,b,c,d){this.a=a;_f.call(this,a,b,c,d);}
    function GI(a){this.a=Math.cos(a);this.b=Math.sin(a);}
    function GQ(a,b,c){_J.call(this,a);this.b=b;this.a=c;}
    function NR(a){this.b=new GU;this.a=new GU;this.c=a;}
    function sY(a){this.c=new FI;this.a=new GU;this.b=a;}
    function tu(){tu=iI;ru=new uu(false);su=new uu(true);}
    function o7(a,b){++a.d;return a.c[a.c.length]=b,true}
    function $ub(a,b){TI(a.d,b,a.b.b,a.b);++a.a;a.c=null;}
    function stb(a,b){var c;c=a.a.db(b,a);return c==null}
    function cxb(a,b){var c;c=a.slice(0,b);return Cv(c,a)}
    function exb(a,b){var c;c=new Array(b);return Cv(c,a)}
    function usb(a,b,c){var d;d=a.b[b];a.b[b]=c;return d}
    function apb(a,b){var c;for(c=0;c<b;++c){a[c]=null;}}
    function cpb(a,b){var c;for(c=0;c<b;++c){a[c]=false;}}
    function r1(a,b){return xkb(),Wv(b.b,24).a<a?wkb:vkb}
    function s1(a,b){return xkb(),Wv(b.a,24).a<a?wkb:vkb}
    function Tk(a,b){return Wv(ki(nj(a.a)).sb(b),21).yb()}
    function dq(a){return mp(),Wl(Rm(a.a).mb(),(xp(),vp))}
    function Uh(a){return Il(),new Im(Dl(ul(a.a,new yl)))}
    function fw(a){return typeof a===Sxb||typeof a===Zxb}
    function Ct(a){$wnd.setTimeout(function(){throw a},0);}
    function oI(a,b){return a>0?new tI(a-1,b):new tI(a,b)}
    function Ib(a){_b(a);return aw(a,345)?Wv(a,345):xb(a)}
    function Rwb(a,b){return bwb(a.a,b,(xkb(),vkb))==null}
    function Po(a,b){var c;c=a.a.Y();$b(b,c);return c-1-b}
    function hu(a,b,c){var d;d=gu(a,b);iu(a,b,c);return d}
    function Nkb(a,b,c){var d;d=Mkb(a,b);$kb(c,d);return d}
    function Mkb(a,b){var c;c=new Kkb;c.i=a;c.d=b;return c}
    function Mk(a,b,c){this.a=a;bc(c,b);this.c=b;this.b=c;}
    function Av(a,b,c){zxb(c==null||sv(a,c));return a[b]=c}
    function Pm(a){a.a=null;a.e=null;Ymb(a.b);a.d=0;++a.c;}
    function Pmb(a){slb.call(this,(bmb(),a==null?Wxb:a));}
    function Omb(a){slb.call(this,(bmb(),a==null?Wxb:a));}
    function Om(a){var b;return b=a.f,!b?(a.f=new Pp(a)):b}
    function Jd(a){var b;return b=a.k,!b?(a.k=new Qg(a)):b}
    function Be(a){var b;b=a.e;return !b?(a.e=new Fp(a)):b}
    function Vg(a){var b;b=a.e;!b&&(a.e=b=a.gb());return b}
    function d6(a){var b,c;b=a.c.f.d;c=a.d.f.d;return b==c}
    function Gfb(a,b){var c;c=new Dfb(a);Afb(c,b);return c}
    function umb(a,b){a.a+=String.fromCharCode(b);return a}
    function hX(a){if(!a.a&&!!a.d){return a.d.b}return a.a}
    function _H(a){if(UH(a)){return a|0}return a.l|a.m<<22}
    function xo(a){Mh(a,Uyb);return $s(PH(PH(5,a),a/10|0))}
    function Smb(a,b){return ew(b)?Tmb(a,b):re(Ktb(a.d,b))}
    function tl(a){return aw(a,19)?Wv(a,19).Y():Ul(a.mb())}
    function pr(a){return a?new xtb((Oh(),a)):qr(null.mb())}
    function Tb(a,b){return gw(a)===gw(b)||a!=null&&rb(a,b)}
    function zT(a,b){return vT(),glb(Ixb(Yv(a)),Ixb(Yv(b)))}
    function Ep(a){return mp(),Wl(a.a.bb().mb(),(xp(),wp))}
    function Gi(){Gi=iI;hi();Fi=new gr((ypb(),ypb(),vpb));}
    function kr(){kr=iI;hi();jr=new lr((ypb(),ypb(),xpb));}
    function Exb(a,b){if(a==null){throw new Wlb((bmb(),b))}}
    function Zfb(a,b){Mfb();return (a-b<=0?0-(a-b):a-b)<0.2}
    function U0(a,b){return a.i.b<b.i.b?-1:a.i.b==b.i.b?0:1}
    function Zjb(a,b,c,d){a.g[b.e][c.e]=d;a.g[c.e][b.e]=d;}
    function vnb(a){uxb(a.c!=-1);a.d.vb(a.c);a.b=a.c;a.c=-1;}
    function Sub(a){this.c=a;this.b=a.a.b.a;lsb(a.a.c,this);}
    function ufb(a){efb.call(this,new opb(a));this.a=new FI;}
    function er(){Bk.call(this,new ir(new ntb));this.a=this;}
    function OQ(){JQ();this.b=(mp(),new ntb);this.a=new ntb;}
    function zp(){xp();return Bv(tv(jy,1),uyb,188,0,[vp,wp])}
    function Ih(){Gh();return Bv(tv(dx,1),uyb,159,0,[Fh,Eh])}
    function ss(){qs();return Bv(tv(Ty,1),uyb,205,0,[ps,os])}
    function psb(a){We(a.a);a.b=xv(UF,syb,1,a.b.length,4,1);}
    function krb(a){!a.b&&(a.b=new Frb(a.c.W()));return a.b}
    function cwb(a,b){var c;c=new zwb;ewb(a,b,c);return c.d}
    function Qkb(a,b){var c;c=Mkb('',a);c.k=b;c.g=1;return c}
    function We(a){var b;for(b=a.mb();b.G();){b.H();b.I();}}
    function yJ(a,b){return aw(b,79)&&emb(a.b,Wv(b,79).mc())}
    function Z3(){X3();return Bv(tv(iD,1),uyb,175,0,[V3,W3])}
    function a8(){Z7();return Bv(tv(WD,1),uyb,193,0,[X7,Y7])}
    function s9(){p9();return Bv(tv(hE,1),uyb,192,0,[o9,n9])}
    function Umb(a,b,c){return ew(b)?Vmb(a,b,c):Ltb(a.d,b,c)}
    function h5(a,b,c){a.i=0;a.e=0;if(b==c){return}d5(a,b,c);}
    function g5(a,b,c){a.i=0;a.e=0;if(b==c){return}c5(a,b,c);}
    function t6(a,b,c,d){this.d=a;this.b=b;this.a=c;this.c=d;}
    function VN(a,b,c,d){this.d=a;this.e=b;this.c=c;this.b=d;}
    function E5(a,b,c,d){this.a=a;this.c=b;this.b=c;this.d=d;}
    function vO(a,b,c,d){Ac.call(this,a,b);this.a=c;this.b=d;}
    function Jtb(a,b){var c;c=Ttb(a.a,b);return c==null?[]:c}
    function kmb(a,b){bmb();if(a==b){return 0}return a<b?-1:1}
    function CR(a,b){var c;c=hR(a.f,b);return vI(zI(c),a.f.d)}
    function qsb(a,b){return Ysb(a.a,b)?a.b[Wv(b,17).e]:null}
    function ovb(a,b){return gw(a)===gw(b)||a!=null&&rb(a,b)}
    function Pu(a,b){if(b==null){throw new Vlb}return Qu(a,b)}
    function Zv(a){Hxb(a==null||fw(a)&&!(a.ad===kI));return a}
    function irb(a){!a.a&&(a.a=new Nrb(a.c.bb()));return a.a}
    function lrb(a){!a.d&&(a.d=new zqb(a.c.fb()));return a.d}
    function _I(a){a.a.a=a.c;a.c.b=a.a;a.a.b=a.c.a=null;a.b=0;}
    function Cnb(a){return Bxb(a.b<a.d.Y()),a.d.sb(a.c=a.b++)}
    function Xmb(a,b){return b==null?Mtb(a.d,null):eub(a.e,b)}
    function $9(a,b){this.g=a;this.d=Bv(tv(qB,1),Nzb,9,0,[b]);}
    function KS(a){this.c=a;this.b=new Wwb(Wv(_b(new MS),56));}
    function hW(){this.a=new jJ;this.b=(Mh(3,Vyb),new HU(3));}
    function Dg(a,b){this.a=a;yg.call(this,a,Wv(a.d,20).ub(b));}
    function rab(a,b,c,d){this.a=a;this.c=b;this.b=c;this.d=d;}
    function Zlb(a,b,c){this.a=Yxb;this.d=a;this.b=b;this.c=c;}
    function $W(){this.d=0;this.b=0;this.a=0;this.c=0;}
    function Bcb(){this.b=new vtb;this.d=new aJ;this.e=new Uvb;}
    function ypb(){ypb=iI;vpb=new Kpb;wpb=new aqb;xpb=new iqb;}
    function Lc(){Lc=iI;Ic=new Oc;Hc=new Rc;Jc=new Uc;Kc=new Xc;}
    function Z7(){Z7=iI;X7=new $7('GREEDY',0);Y7=new $7(zAb,1);}
    function zQ(){zQ=iI;yQ=new AJ((eM(),EL),(xkb(),xkb(),wkb));}
    function w9(){w9=iI;v9=PQ(UQ(TQ(new WQ,(d0(),N_)),B_),M_);}
    function N6(a,b){var c;c=M6(b);return Wv(Smb(a.c,c),24).a}
    function PR(a,b){var c;c=utb(a.a,b);c&&(b.f=null);return c}
    function Krb(a){var b;b=a.b.ob();Mrb(b,b.length);return b}
    function NP(a){if(a<0){return -1}if(a>0){return 1}return 0}
    function mP(){kP();return Bv(tv(Rz,1),uyb,171,0,[jP,gP,hP])}
    function gL(){eL();return Bv(tv(Fz,1),uyb,166,0,[cL,bL,dL])}
    function WM(){UM();return Bv(tv(Jz,1),uyb,149,0,[TM,SM,RM])}
    function FO(){DO();return Bv(tv(Pz,1),uyb,225,0,[BO,AO,CO])}
    function ZZ(){XZ();return Bv(tv(VB,1),uyb,221,0,[VZ,WZ,UZ])}
    function A8(){x8();return Bv(tv(_D,1),uyb,173,0,[w8,v8,u8])}
    function QH(a,b){return SH(Hv(UH(a)?YH(a):a,UH(b)?YH(b):b))}
    function XI(a){return a.b==0?null:(Bxb(a.b!=0),$I(a,a.a.a))}
    function zfb(a){a.d=a.d-15;a.b=a.b-15;a.c=a.c+15;a.a=a.a+15;}
    function Rn(a){this.b=a;this.c=a;a.e=null;a.c=null;this.a=1;}
    function nZ(a,b,c){this.d=a;this.b=new GU;this.c=b;this.a=c;}
    function sfb(a,b){qfb(this,new HI(a.a,a.b));rfb(this,Eo(b));}
    function Xf(a,b){if(b===a){return true}Yf(a);return a.d.t(b)}
    function Oeb(a){if(a==neb||a==keb){return true}return false}
    function VO(a){if(!Qob(new Tob(zW(a.e)))){return}OO(a);QO(a);}
    function Y2(a,b){var c;c=Wv(vub(a.e,b),116);!!c&&(a.d=true);}
    function Lrb(a,b){var c;c=a.b.pb(b);Mrb(c,a.b.Y());return c}
    function a6(a){var b;b=e6(a,(sN(),rN));b+=e6(a,ZM);return b}
    function f6(a,b,c){j6(a,b,c,(sN(),ZM),a.f);j6(a,b,c,rN,a.n);}
    function PX(a,b){!!a.f&&BU(a.f.f,a);a.f=b;!!a.f&&vU(a.f.f,a);}
    function rX(a,b){!!a.d&&BU(a.d.a,a);a.d=b;!!a.d&&vU(a.d.a,a);}
    function eW(a,b){!!a.d&&BU(a.d.b,a);a.d=b;!!a.d&&vU(a.d.b,a);}
    function dW(a,b){!!a.c&&BU(a.c.e,a);a.c=b;!!a.c&&vU(a.c.e,a);}
    function Zdb(a){var b;b=Eo(a.b);Ue(b,a.c);Ue(b,a.i);return b}
    function Qxb(){if(Lxb==256){Kxb=Mxb;Mxb={};Lxb=0;}++Lxb;}
    function Gbb(){Gbb=iI;Fbb=new Hbb(pzb,0);Ebb=new Hbb(ozb,1);}
    function fgb(){fgb=iI;dgb=new ggb(ozb,0);egb=new ggb(pzb,1);}
    function hgb(){fgb();return Bv(tv(fF,1),uyb,223,0,[dgb,egb])}
    function xab(){vab();return Bv(tv(rE,1),uyb,242,0,[uab,tab])}
    function Ibb(){Gbb();return Bv(tv(BE,1),uyb,248,0,[Fbb,Ebb])}
    function Nbb(){Lbb();return Bv(tv(CE,1),uyb,247,0,[Jbb,Kbb])}
    function ncb(){lcb();return Bv(tv(JE,1),uyb,194,0,[jcb,kcb])}
    function Ohb(){Mhb();return Bv(tv(pF,1),uyb,174,0,[Khb,Lhb])}
    function Hpb(a){ypb();return aw(a,63)?new csb(a):new Rqb(a)}
    function Rm(a){var b;return b=a.g,Wv(!b?(a.g=new En(a)):b,20)}
    function Ktb(a,b){return Itb(a,b,Jtb(a,b==null?0:a.b.Vc(b)))}
    function tX(a){var b;return b=lX(a),'n_'+(b==null?Dlb(a.k):b)}
    function ob(a){return Ikb(tb(a))+'@'+(vb(a)>>>0).toString(16)}
    function ykb(a,b){return zkb(Ckb((Dxb(a),a)),Ckb((Dxb(b),b)))}
    function Tmb(a,b){return b==null?re(Ktb(a.d,null)):cub(a.e,b)}
    function Rr(a,b,c){return new Ur(a.c,pk(a.b,wk(a.d,b,c)),a.a)}
    function hw(a){return Math.max(Math.min(a,$xb),-2147483648)|0}
    function Ptb(a){this.e=a;this.b=this.e.a.entries();this.a=[];}
    function xf(a){this.c=a;this.b=new rnb((new inb(this.c.a)).a);}
    function Em(a){this.b=(Il(),Il(),Il(),Gl);this.a=Wv(_b(a),35);}
    function EJ(a,b,c){wJ();DJ.call(this,a,b);c!=null&&(this.c=c);}
    function cc(a,b,c){if(a<0||b<a||b>c){throw new okb(Wb(a,b,c))}}
    function $b(a,b){if(a<0||a>=b){throw new okb(Ub(a,b))}return a}
    function ac(a,b){if(a==null){throw new Wlb((bmb(),b))}return a}
    function Dm(a){if(!Cm(a)){throw new nvb}a.c=a.b;return a.b.H()}
    function jI(a){function b(){}
    b.prototype=a||{};return new b}
    function rr(a){var b;b=new wtb(op(a.length));zpb(b,a);return b}
    function Gub(a){var b;b=a.c.b.b;a.b=b;a.a=a.c.b;b.a=a.c.b.b=a;}
    function jwb(a){this.b=null;!a&&(a=(hsb(),hsb(),gsb));this.a=a;}
    function W6(a){this.b=a;this.a=new Fnb(this.b,this.b.c.length);}
    function Li(a){Gi();_b(a);return a?Ki(a):Ki(Bo(new Tob(null)))}
    function rt(a,b){var c=qt[a.charCodeAt(0)];return c==null?a:c}
    function Skb(a,b){var c=a.a=a.a||[];return c[b]||(c[b]=a.Oc(b))}
    function CU(a,b,c){var d;Gxb(b,c,a.c.length);d=c-b;hxb(a.c,b,d);}
    function Ur(a,b,c){Ch.call(this,b.a);this.c=a;this.b=b;this.a=c;}
    function ko(a){Vm(a.c);a.e=a.a=a.c;a.c=a.c.c;++a.d;return a.a.f}
    function lo(a){Vm(a.e);a.c=a.a=a.e;a.e=a.e.e;--a.d;return a.a.f}
    function MX(a){return MI(Bv(tv(qz,1),Fzb,10,0,[a.f.i,a.i,a.a]))}
    function GK(){EK();return Bv(tv(Cz,1),uyb,107,0,[DK,AK,BK,CK])}
    function PK(){NK();return Bv(tv(Dz,1),uyb,122,0,[MK,KK,JK,LK])}
    function ON(){MN();return Bv(tv(Mz,1),uyb,139,0,[KN,LN,JN,IN])}
    function FN(){DN();return Bv(tv(Lz,1),uyb,150,0,[BN,CN,AN,zN])}
    function Nc(){Lc();return Bv(tv(Bw,1),uyb,136,0,[Ic,Hc,Jc,Kc])}
    function iT(){cT();return Bv(tv(yA,1),uyb,201,0,[$S,bT,_S,aT])}
    function wN(){sN();return Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN])}
    function xK(){sK();return Bv(tv(Bz,1),uyb,59,0,[qK,pK,oK,nK,rK])}
    function c8(){c8=iI;b8=Cc((Z7(),Bv(tv(WD,1),uyb,193,0,[X7,Y7])));}
    function _3(){_3=iI;$3=Cc((X3(),Bv(tv(iD,1),uyb,175,0,[V3,W3])));}
    function u9(){u9=iI;t9=Cc((p9(),Bv(tv(hE,1),uyb,192,0,[o9,n9])));}
    function Jhb(){Hhb();return Bv(tv(oF,1),uyb,140,0,[Fhb,Ghb,Ehb])}
    function Jgb(){Hgb();return Bv(tv(jF,1),uyb,218,0,[Fgb,Egb,Ggb])}
    function fjb(){djb();return Bv(tv(rF,1),uyb,219,0,[cjb,ajb,bjb])}
    function Sjb(){Qjb();return Bv(tv(sF,1),uyb,153,0,[Njb,Pjb,Ojb])}
    function ekb(){ckb();return Bv(tv(uF,1),uyb,172,0,[_jb,akb,bkb])}
    function Vmb(a,b,c){return b==null?Ltb(a.d,null,c):dub(a.e,b,c)}
    function wk(a,b,c){return new sk(a,false,null,(Gh(),Fh),true,b,c)}
    function tsb(a,b){return $sb(a.a,b)?usb(a,Wv(b,17).e,null):null}
    function ql(a){_b(a);return Ql((Il(),new Im(Dl(ul(a.a,new yl)))))}
    function Epb(a){ypb();if(!a){return nqb(),mqb}return new Ipb(a)}
    function Oo(a,b){var c,d;d=Qo(a,b);c=a.a.ub(d);return new bp(a,c)}
    function Cpb(a,b){var c,d;d=a.Y();for(c=0;c<d;c++){a.wb(c,b[c]);}}
    function Xbb(a,b,c){var d;d=new Wbb;d.b=b;d.a=c;++b.b;vU(a.d,d);}
    function fW(a,b,c){!!a.d&&BU(a.d.b,a);a.d=b;!!a.d&&uU(a.d.b,c,a);}
    function Mnb(a,b,c){Gxb(b,c,a.Y());this.c=a;this.a=b;this.b=c-b;}
    function vP(a,b,c,d){this.d=a;this.b=b;this.a=c;this.c=d;}
    function zr(a,b){Bk.call(this,Fpb(_b(a),_b(b)));this.b=a;this.c=b;}
    function Fnb(a,b){this.a=a;wnb.call(this,a);Fxb(b,a.Y());this.b=b;}
    function FJ(a,b,c,d){wJ();EJ.call(this,a,b,c);d!=null&&(this.d=d);}
    function e5(a,b,c){a.i=0;a.e=0;if(b==c){return}d5(a,b,c);c5(a,b,c);}
    function Rob(a){Bxb(a.a<a.c.c.length);a.b=a.a++;return a.c.c[a.b]}
    function avb(a){Bxb(a.b.b!=a.d.a);a.c=a.b=a.b.b;--a.a;return a.c.c}
    function gwb(a,b){var c;c=1-b;a.a[c]=hwb(a.a[c],c);return hwb(a,b)}
    function S2(a){var b;b=(Ieb(),Ieb(),heb);a.d&&Z2(a);ni();return b}
    function ZH(a){var b;if(UH(a)){b=a;return b==-0.?0:b}return Nv(a)}
    function Ii(a){var b;b=(_b(a),new IU((Oh(),a)));Dpb(b);return Yi(b)}
    function Rl(a){Il();var b;while(true){b=a.H();if(!a.G()){return b}}}
    function Yn(a){Xn(a);Vm(a.c);a.e=a.a=a.c;a.c=a.c.b;++a.d;return a.a}
    function Zn(a){Xn(a);Vm(a.e);a.c=a.a=a.e;a.e=a.e.d;--a.d;return a.a}
    function Wf(a){var b;b=a.Y();if(b==0){return}a.d.Q();a.f.c-=b;$f(a);}
    function At(a,b,c){var d;d=yt();try{return xt(a,b,c)}finally{Bt(d);}}
    function zt(b){return function(){return At(b,this,arguments);}}
    function sl(a){if(aw(a,19)){return Wv(a,19).V()}return !a.mb().G()}
    function gr(a){Gi();this.a=(ypb(),aw(a,63)?new csb(a):new Rqb(a));}
    function Mhb(){Mhb=iI;Khb=new Nhb(qzb,0);Lhb=new Nhb('TOP_LEFT',1);}
    function Lbb(){Lbb=iI;Jbb=new Mbb('DOWN',0);Kbb=new Mbb('UP',1);}
    function p9(){p9=iI;o9=new q9('LAYER_SWEEP',0);n9=new q9(zAb,1);}
    function vab(){vab=iI;uab=new wab('UPPER',0);tab=new wab('LOWER',1);}
    function yxb(a){if(a<0){throw new Ulb('Negative array size: '+a)}}
    function hnb(a,b){if(aw(b,21)){return ee(a.a,Wv(b,21))}return false}
    function Esb(a,b){if(aw(b,21)){return ee(a.a,Wv(b,21))}return false}
    function Kub(a,b){if(aw(b,21)){return ee(a.a,Wv(b,21))}return false}
    function IV(a){var b;b=new hW;qJ(b,a);sJ(b,(eM(),CL),null);return b}
    function je(a,b){return b===a?'(this Map)':(bmb(),b==null?Wxb:xb(b))}
    function Ld(a,b,c,d){return aw(c,63)?new ug(a,b,c,d):new mg(a,b,c,d)}
    function BM(){zM();return Bv(tv(Hz,1),uyb,100,0,[yM,xM,uM,vM,wM])}
    function OM(){KM();return Bv(tv(Iz,1),uyb,28,0,[JM,IM,HM,EM,GM,FM])}
    function kK(){iK();return Bv(tv(Az,1),uyb,103,0,[cK,fK,gK,hK,dK,eK])}
    function $K(){YK();return Bv(tv(Ez,1),uyb,133,0,[WK,UK,XK,SK,VK,TK])}
    function YM(){YM=iI;XM=Cc((UM(),Bv(tv(Jz,1),uyb,149,0,[TM,SM,RM])));}
    function iL(){iL=iI;hL=Cc((eL(),Bv(tv(Fz,1),uyb,166,0,[cL,bL,dL])));}
    function C8(){C8=iI;B8=Cc((x8(),Bv(tv(_D,1),uyb,173,0,[w8,v8,u8])));}
    function EX(){CX();return Bv(tv(pB,1),uyb,132,0,[AX,zX,xX,BX,yX,wX])}
    function i4(){g4();return Bv(tv(jD,1),uyb,125,0,[e4,b4,f4,d4,c4,a4])}
    function Vl(a){Il();return umb(Gb((Oh(),Nh),umb(new zmb,91),a),93).a}
    function Gpb(a,b){ypb();var c;c=a.ob();ipb(c,0,c.length,b);Cpb(a,c);}
    function G3(a,b,c,d,e){this.c=a;this.e=b;this.d=c;this.b=d;this.a=e;}
    function Peb(a,b,c,d,e){Ac.call(this,a,b);this.a=c;this.b=d;this.c=e;}
    function Ahb(a,b,c,d,e){Ac.call(this,a,b);this.a=c;this.b=d;this.c=e;}
    function QT(a,b,c){this.a=b;this.c=a;this.b=(_b(c),new IU((Oh(),c)));}
    function $U(){tU(this);this.b=new HI(Uzb,Uzb);this.a=new HI(Vzb,Vzb);}
    function X3(){X3=iI;V3=new Y3('QUADRATIC',0);W3=new Y3('SCANLINE',1);}
    function Te(){throw new Imb('Add not supported on this collection')}
    function pq(a){var b,c;c=qmb(a.Zb());b=a.Yb();return b==1?c:c+' x '+b}
    function _ub(a){Bxb(a.b!=a.d.c);a.c=a.b;a.b=a.b.a;++a.a;return a.c.c}
    function Ukb(a){if(a.Tc()){return null}var b=a.k;var c=fI[b];return c}
    function bc(a,b){if(a<0||a>b){throw new okb(Vb(a,b,'index'))}return a}
    function Zf(a,b){var c;Yf(a);c=a.d.nb(b);if(c){--a.f.c;$f(a);}return c}
    function RT(a,b,c){var d;d=(_b(a),new IU((Oh(),a)));PT(new QT(d,b,c));}
    function cmb(a,b){return kmb((bmb(),a.toLowerCase()),b.toLowerCase())}
    function rmb(a,b){return kmb((bmb(),a.toLowerCase()),b.toLowerCase())}
    function Jwb(){Fwb();return Bv(tv(DH,1),uyb,138,0,[Bwb,Cwb,Dwb,Ewb])}
    function bxb(a,b,c,d){Array.prototype.splice.apply(a,[b,c].concat(d));}
    function TI(a,b,c,d){var e;e=new mvb;e.c=b;e.b=c;e.a=d;d.b=c.a=e;++a.b;}
    function Sm(a,b){var c;c=Hpb(Bo(new mo(a,b)));Ml(new mo(a,b));return c}
    function Su(d,a,b){if(b){var c=b.gc();d.a[a]=c(b);}else {delete d.a[a];}}
    function iu(d,a,b){if(b){var c=b.gc();b=c(b);}else {b=undefined;}d.a[a]=b;}
    function Dfb(a){this.d=a.d;this.c=a.c;this.a=a.a;this.b=a.b;}
    function n7(){this.g=new q7;this.c=new q7;this.a=new GU;this.k=new GU;}
    function dR(){this.d=new OQ;this.a=new tV;this.c=new SV;this.b=new CV;}
    function oR(){this.i=new GU;this.g=new FI;this.n=new xS;this.q=new xS;}
    function _Y(a,b,c,d){this.e=a;this.b=new GU;this.d=b;this.a=c;this.c=d;}
    function oT(){oT=iI;lT=new FT;mT=new HT;jT=new JT;kT=new LT;nT=new NT;}
    function DO(){DO=iI;BO=new EO(ozb,0);AO=new EO(qzb,1);CO=new EO(pzb,2);}
    function IK(){IK=iI;HK=Cc((EK(),Bv(tv(Cz,1),uyb,107,0,[DK,AK,BK,CK])));}
    function RK(){RK=iI;QK=Cc((NK(),Bv(tv(Dz,1),uyb,122,0,[MK,KK,JK,LK])));}
    function QN(){QN=iI;PN=Cc((MN(),Bv(tv(Mz,1),uyb,139,0,[KN,LN,JN,IN])));}
    function HN(){HN=iI;GN=Cc((DN(),Bv(tv(Lz,1),uyb,150,0,[BN,CN,AN,zN])));}
    function pcb(){pcb=iI;ocb=Cc((lcb(),Bv(tv(JE,1),uyb,194,0,[jcb,kcb])));}
    function Qhb(){Qhb=iI;Phb=Cc((Mhb(),Bv(tv(pF,1),uyb,174,0,[Khb,Lhb])));}
    function Ao(a){_b(a);return aw(a,19)?new IU((Oh(),Wv(a,19))):Bo(a.mb())}
    function yY(a){return Ckb(Ixb(Xv(rJ(a,(Rib(),Vhb)))))&&rJ(a,uib)!=null}
    function UY(a){return Ckb(Ixb(Xv(rJ(a,(Rib(),Vhb)))))&&rJ(a,uib)!=null}
    function jkb(a,b,c,d){b==null&&(b=Wxb);a.a+=''+(bmb(),b.substr(c,d-c));}
    function Mrb(a,b){var c;for(c=0;c<b;++c){Av(a,c,new Xrb(Wv(a[c],21)));}}
    function Hd(a,b){var c,d;c=Wv(sp(a.b,b),19);if(c){d=c.Y();c.Q();a.c-=d;}}
    function DU(a,b,c){var d;d=(Cxb(b,a.c.length),a.c[b]);a.c[b]=c;return d}
    function itb(a){Bxb(a.a<a.c.a.length);a.b=a.a;gtb(a);return a.c.b[a.b]}
    function Ul(a){Il();var b;b=0;while(a.G()){a.H();b=PH(b,1);}return $s(b)}
    function hub(a){this.d=a;this.b=this.d.a.entries();this.a=this.b.next();}
    function DT(a){this.g=a;this.f=new GU;this.a=Qlb(this.g.c.c,this.g.d.c);}
    function kt(a){it();this.e=null;this.f=null;this.a='';this.b=a;this.a='';}
    function wub(){ntb.call(this);pub(this);this.b.b=this.b;this.b.a=this.b;}
    function Bt(a){a&&It((Gt(),Ft));--ut;if(a){if(wt!=-1){Dt(wt);wt=-1;}}}
    function bW(a){if(!a.c||!a.d){return false}return !!a.c.f&&a.c.f==a.d.f}
    function pt(){if(Date.now){return Date.now()}return (new Date).getTime()}
    function lX(a){if(a.c.c.length!=0){return Wv(yU(a.c,0),33).a}return null}
    function OX(a){if(a.c.c.length!=0){return Wv(yU(a.c,0),33).a}return null}
    function qd(a){a.d=3;a.c=sm(a);if(a.d!=2){a.d=0;return true}return false}
    function bgb(a,b,c){this.a=a;this.b=b;this.c=c;vU(a.j,this);vU(b.d,this);}
    function VP(a,b,c,d){var e;a.c?(e=new Gu(hw(d))):(e=new Gu(d));Ru(b,c,e);}
    function Co(a){var b,c;_b(a);b=xo(a.length);c=new HU(b);zpb(c,a);return c}
    function Dv(a){var b,c,d;b=a&azb;c=a>>22&azb;d=a<0?bzb:0;return Ev(b,c,d)}
    function nbb(){kbb();return Bv(tv(zE,1),uyb,141,0,[jbb,gbb,hbb,fbb,ibb])}
    function Sgb(){Pgb();return Bv(tv(kF,1),uyb,115,0,[Lgb,Kgb,Ngb,Mgb,Ogb])}
    function Zib(){Xib();return Bv(tv(qF,1),uyb,85,0,[Wib,Sib,Tib,Uib,Vib])}
    function zK(){zK=iI;yK=Cc((sK(),Bv(tv(Bz,1),uyb,59,0,[qK,pK,oK,nK,rK])));}
    function yN(){yN=iI;xN=Cc((sN(),Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN])));}
    function DM(){DM=iI;CM=Cc((zM(),Bv(tv(Hz,1),uyb,100,0,[yM,xM,uM,vM,wM])));}
    function F9(){F9=iI;E9=PQ(UQ(UQ(UQ(TQ(new WQ,(d0(),N_)),U_),r_),B_),M_);}
    function TT(a,b){var c,d;for(d=b.mb();d.G();){c=Wv(d.H(),55);ST(a,c,0,0);}}
    function VT(a,b,c){var d,e;for(e=a.mb();e.G();){d=Wv(e.H(),55);UT(d,b,c);}}
    function X8(a,b,c){var d,e;d=0;for(e=0;e<b.length;e++){d+=a.Hc(b[e],d,c);}}
    function AU(a,b){var c;c=(Cxb(b,a.c.length),a.c[b]);hxb(a.c,b,1);return c}
    function Kl(a){var b;_b(a);Yb(true);for(b=0;b<0&&Cm(a);b++){Dm(a);}return b}
    function Ymb(a){var b;a.d=new Ntb(a);a.e=new fub(a);b=a[WAb]|0;a[WAb]=b+1;}
    function igb(a){a.g=new vtb;a.o=new vtb;a.c=new vtb;a.j=new GU;a.d=new GU;}
    function Fxb(a,b){if(a<0||a>b){throw new okb('Index: '+a+', Size: '+b)}}
    function Cxb(a,b){if(a<0||a>=b){throw new okb('Index: '+a+', Size: '+b)}}
    function uob(a,b){var c,d;c=b.yb();d=Wvb(a,c);return !!d&&ovb(d.e,b.zb())}
    function zbb(a,b){var c;c=a.d;if(b>0){return Wv(yU(c.a,b-1),9)}return null}
    function xv(a,b,c,d,e,f){var g;g=yv(e,d);e!=9&&Bv(tv(a,f),b,c,e,g);return g}
    function pd(a){var b;if(!od(a)){throw new nvb}a.d=1;b=a.c;a.c=null;return b}
    function _f(a,b,c,d){this.f=a;this.e=b;this.d=c;this.b=d;this.c=!d?null:d.d;}
    function MH(b,c){if(b&&typeof b==Sxb){try{b.__gwt$exception=c;}catch(a){}}}
    function wT(a,b){if(a.a.$b(b.d,a.b)>0){vU(a.c,new WS(b.c,b.d,a.d));a.b=b.d;}}
    function W4(a,b){var c;c=glb(a.j,b.j);if(c==0){return glb(a.k,b.k)}return c}
    function C6(a){var b,c;c=Wv(yU(a.f,0),7);b=Wv(rJ(c,(Rib(),uib)),7);return b}
    function M6(a){var b,c;c=Wv(yU(a.f,0),7);b=Wv(rJ(c,(Rib(),uib)),7);return b}
    function B$(a,b){return glb(Ixb(Yv(rJ(a,(Rib(),Cib)))),Ixb(Yv(rJ(b,Cib))))}
    function Ujb(){Ujb=iI;Tjb=Cc((Qjb(),Bv(tv(sF,1),uyb,153,0,[Njb,Pjb,Ojb])));}
    function gkb(){gkb=iI;fkb=Cc((ckb(),Bv(tv(uF,1),uyb,172,0,[_jb,akb,bkb])));}
    function mK(){mK=iI;lK=Cc((iK(),Bv(tv(Az,1),uyb,103,0,[cK,fK,gK,hK,dK,eK])));}
    function aL(){aL=iI;_K=Cc((YK(),Bv(tv(Ez,1),uyb,133,0,[WK,UK,XK,SK,VK,TK])));}
    function QM(){QM=iI;PM=Cc((KM(),Bv(tv(Iz,1),uyb,28,0,[JM,IM,HM,EM,GM,FM])));}
    function k4(){k4=iI;j4=Cc((g4(),Bv(tv(jD,1),uyb,125,0,[e4,b4,f4,d4,c4,a4])));}
    function K1(){I1();return Bv(tv(GC,1),uyb,109,0,[G1,B1,E1,C1,D1,A1,F1,H1])}
    function qM(){oM();return Bv(tv(Gz,1),uyb,41,0,[gM,fM,iM,nM,mM,lM,jM,kM,hM])}
    function Bgb(){zgb();return Bv(tv(iF,1),uyb,123,0,[ygb,xgb,wgb,ugb,tgb,vgb])}
    function bhb(){_gb();return Bv(tv(lF,1),uyb,124,0,[Ygb,Xgb,$gb,Wgb,Zgb,Vgb])}
    function bK(){bK=iI;aK=new DJ('de.cau.cs.kieler.labels.labelManager',null);}
    function ixb(){if(Date.now){return Date.now()}return (new Date).getTime()}
    function Xsb(a){var b;b=Wv(cxb(a.b,a.b.length),11);return new atb(a.a,b,a.c)}
    function dmb(a,b){var c;c=(bmb(),b.length);return emb(imb(a,a.length-c,c),b)}
    function dwb(a,b){var c;c=new zwb;c.c=true;c.d=b.zb();return ewb(a,b.yb(),c)}
    function He(a,b){var c;c=b.yb();return mp(),new Fk(c,Kd(a.b,c,Wv(b.zb(),19)))}
    function BU(a,b){var c;c=zU(a,b,0);if(c==-1){return false}a.vb(c);return true}
    function Cv(a,b){uv(b)!=9&&Bv(tb(b),b._c,b.__elementTypeId$,uv(b),a);return a}
    function Rub(a){ksb(a.c.a.c,a);Bxb(a.b!=a.c.a.b);a.a=a.b;a.b=a.b.a;return a.a}
    function qnb(a){uxb(!!a.c);ksb(a.e,a);a.c.I();a.c=null;a.b=onb(a);lsb(a.e,a);}
    function Acb(a,b,c){a.a=b;a.c=c;a.b.a.Q();_I(a.d);a.e.a.c=xv(UF,syb,1,0,4,1);}
    function Ar(a,b,c){Bk.call(this,Fpb(_b(a),_b(b)));this.b=a;this.c=b;this.a=c;}
    function j9(a,b,c,d){this.b=new l9(this);this.a=a;this.c=b;this.e=c;this.d=d;}
    function xub(a){$mb.call(this,a,0);pub(this);this.b.b=this.b;this.b.a=this.b;}
    function ywb(a,b){qob.call(this,a,b);this.a=xv(yH,syb,183,2,0,1);this.b=true;}
    function Qmb(a,b){return ew(b)?b==null?!!Ktb(a.d,null):bub(a.e,b):!!Ktb(a.d,b)}
    function RR(a,b){return Ws(),(a-b>0?a-b:-(a-b))<=$yb||a==b||isNaN(a)&&isNaN(b)}
    function Xs(a,b){Ws();return (a-b>0?a-b:-(a-b))<=$yb||a==b||isNaN(a)&&isNaN(b)}
    function Z5(a){var b,c;b=true;do{b?(c=W5(a)):(c=U5(a));b=!b;}while(c);S5(a,a.d);}
    function Ru(a,b,c){var d;if(b==null){throw new Vlb}d=Pu(a,b);Su(a,b,c);return d}
    function sJ(a,b,c){!a.n&&(a.n=new ntb);c==null?Wmb(a.n,b):Umb(a.n,b,c);return a}
    function zU(a,b,c){for(;c<a.c.length;++c){if(ovb(b,a.c[c])){return c}}return -1}
    function b2(a,b){while(b>=a.a.c.length){vU(a.a,new aJ);}return Wv(yU(a.a,b),20)}
    function Fe(a,b){var c;c=Wv(rp(a.a,b),19);if(!c){return null}return Kd(a.b,b,c)}
    function XP(a,b,c){var d;d=Pu(a,Gzb);if(!d){d=new Tu;Ru(a,Gzb,d);}Ru(d.kc(),b,c);}
    function Okb(a,b,c,d,e){var f;f=Mkb(a,b);$kb(c,f);f.g=e?8:0;f.f=d;f.e=e;return f}
    function mo(a,b){var c;this.f=a;this.b=b;c=Wv(Smb(a.b,b),126);this.c=!c?null:c.b;}
    function fJ(a,b){var c,d,e;for(d=0,e=b.length;d<e;++d){c=b[d];TI(a,c,a.c.b,a.c);}}
    function GV(a,b,c,d,e,f){var g;g=IV(d);dW(g,e);eW(g,f);Fd(a.a,d,new XV(g,b,c.f));}
    function bab(a,b,c){var d;d=0;a.c[c]>0&&(d+=dab(b));a.b[c]&&(d+=eab(b));return d}
    function vub(a,b){var c;c=Wv(Wmb(a.c,b),176);if(c){Hub(c);return c.e}return null}
    function $s(a){if(RH(a,$xb)>0){return $xb}if(RH(a,eyb)<0){return eyb}return _H(a)}
    function Ph(a){Oh();Mh(a,'size');return _H(VH(WH(a,8),Nyb)?WH(a,8):Nyb),new Amb}
    function ukb(a){skb.call(this,(bmb(),a==null?Wxb:xb(a)),aw(a,46)?Wv(a,46):null);}
    function HU(a){tU(this);wxb(a>=0,'Initial capacity must not be negative');}
    function JQ(){JQ=iI;HQ=VQ(UQ(UQ(new WQ,(d0(),O_)),C_),J_);IQ=TQ(new WQ,G_);}
    function LX(){LX=iI;IX=new UX;GX=new XX;HX=new ZX;FX=new _X;JX=new bY;KX=new dY;}
    function Fwb(){Fwb=iI;Bwb=new Gwb('All',0);Cwb=new Kwb;Dwb=new Mwb;Ewb=new Pwb;}
    function x8(){x8=iI;w8=new y8(DAb,0);v8=new y8('LONGEST_PATH',1);u8=new y8(zAb,2);}
    function Rv(){Rv=iI;Ov=Ev(azb,azb,524287);Pv=Ev(0,0,524288);Dv(1);Dv(2);Qv=Dv(0);}
    function M1(){M1=iI;L1=Cc((I1(),Bv(tv(GC,1),uyb,109,0,[G1,B1,E1,C1,D1,A1,F1,H1])));}
    function pbb(){pbb=iI;obb=Cc((kbb(),Bv(tv(zE,1),uyb,141,0,[jbb,gbb,hbb,fbb,ibb])));}
    function Ugb(){Ugb=iI;Tgb=Cc((Pgb(),Bv(tv(kF,1),uyb,115,0,[Lgb,Kgb,Ngb,Mgb,Ogb])));}
    function _ib(){_ib=iI;$ib=Cc((Xib(),Bv(tv(qF,1),uyb,85,0,[Wib,Sib,Tib,Uib,Vib])));}
    function zvb(a){tvb();xvb(this,_H(QH(SH(Lv(UH(a)?YH(a):a,24)),bBb)),_H(QH(a,bBb)));}
    function tb(a){return ew(a)?$F:cw(a)?HF:bw(a)?EF:_v(a)?a.$c:zv(a)?a.$c:a.$c||$y}
    function uv(a){return a.__elementTypeCategory$==null?9:a.__elementTypeCategory$}
    function Ht(a){var b,c;if(a.a){c=null;do{b=a.a;a.a=null;c=Lt(b,c);}while(a.a);a.a=c;}}
    function It(a){var b,c;if(a.b){c=null;do{b=a.b;a.b=null;c=Lt(b,c);}while(a.b);a.b=c;}}
    function oJ(a){nJ();var b,c;c=jzb;for(b=0;b<a.length;b++){a[b]>c&&(c=a[b]);}return c}
    function KQ(a,b){var c;c=Wv(Smb(a.b,b),106);if(!c){c=b.rc();Umb(a.b,b,c);}return c}
    function rub(a,b){var c;c=Wv(Smb(a.c,b),176);if(c){uub(a,c);return c.e}return null}
    function R2(a,b,c,d){var e;e=Wv(rub(a.e,b),116);e.b+=c;e.a+=d;tub(a.e,b,e);a.d=true;}
    function gtb(a){var b;++a.a;for(b=a.c.a.length;a.a<b;++a.a){if(a.c.b[a.a]){return}}}
    function bt(a){var b,c,d;for(b=(a.g==null&&(a.g=Pt(a)),a.g),c=0,d=b.length;c<d;++c);}
    function Tf(a,b){var c,d;Yf(a);d=a.d.V();c=a.d.ib(b);if(c){++a.f.c;d&&Vf(a);}return c}
    function Mh(a,b){if(a<0){throw new slb(b+' cannot be negative but was: '+a)}return a}
    function Yb(a){if(!a){throw new slb((bmb(),'numberToAdvance must be nonnegative'))}}
    function nm(a){if(!a.a.G()){a.a=a.b.mb();if(!a.a.G()){throw new nvb}}return a.a.H()}
    function Xl(a){Il();var b;_b(a);if(aw(a,108)){b=Wv(a,108);return b}return new km(a)}
    function gu(d,a){var b=d.a[a];var c=(ev(),dv)[typeof b];return c?c(b):kv(typeof b)}
    function K2(a,b){var c,d;for(d=new Tob(a);d.a<d.c.c.length;){c=Wv(Rob(d),7);J2(c,b);}}
    function Z9(a,b){var c,d,e,f;for(d=a.d,e=0,f=d.length;e<f;++e){c=d[e];W9(a.g,c).a=b;}}
    function hR(a,b){var c;c=EI(xI(Wv(Smb(a.g,b),10)),RN(Wv(Smb(a.f,b),198).b));return c}
    function sr(a){var b;return !od(Pl((b=(new Snb(a.b.a)).a.bb().mb(),new Ynb(b)),a.a))}
    function bvb(a){var b;uxb(!!a.c);b=a.c.a;$I(a.d,a.c);a.b==a.c?(a.b=b):--a.a;a.c=null;}
    function gW(a){return !!a.c&&!!a.d?a.c.f+'('+a.c+')->'+a.d.f+'('+a.d+')':'e_'+txb(a)}
    function gT(a,b){cT();return a==$S&&b==bT||a==bT&&b==$S||a==aT&&b==_S||a==_S&&b==aT}
    function hT(a,b){cT();return a==$S&&b==_S||a==$S&&b==aT||a==bT&&b==aT||a==bT&&b==_S}
    function Bhb(){zhb();return Bv(tv(nF,1),uyb,110,0,[shb,whb,thb,xhb,uhb,yhb,vhb,rhb])}
    function sM(){sM=iI;rM=Cc((oM(),Bv(tv(Gz,1),uyb,41,0,[gM,fM,iM,nM,mM,lM,jM,kM,hM])));}
    function UM(){UM=iI;TM=new VM('OUTSIDE',0);SM=new VM('INSIDE',1);RM=new VM('FIXED',2);}
    function Hhb(){Hhb=iI;Fhb=new Ihb(tzb,0);Ghb=new Ihb('TOP',1);Ehb=new Ihb('BOTTOM',2);}
    function lcb(){lcb=iI;jcb=new mcb('CLASSIC',0);kcb=new mcb('IMPROVE_STRAIGHTNESS',1);}
    function kW(){this.e=new FI;this.a=new $W;this.d=new FI;this.b=new GU;this.c=new GU;}
    function kdb(a,b,c){this.b=b;this.a=a;this.c=c;vU(this.a.e,this);vU(this.b.b,this);}
    function Afb(a,b){a.d=Qlb(a.d,b.d);a.c=Nlb(a.c,b.c);a.a=Nlb(a.a,b.a);a.b=Qlb(a.b,b.b);}
    function $I(a,b){var c;c=b.c;b.a.b=b.b;b.b.a=b.a;b.a=b.b=null;b.c=null;--a.b;return c}
    function Jl(a,b){Il();var c;_b(a);_b(b);c=false;while(b.G()){c=c|a.ib(b.H());}return c}
    function pnb(a){var b;ksb(a.e,a);Bxb(a.b);a.c=a.a;b=Wv(a.a.H(),21);a.b=onb(a);return b}
    function sm(a){var b;while(a.b.G()){b=a.b.H();if(a.a.D(b)){return b}}return a.d=2,null}
    function _sb(a,b){if(!!b&&a.b[b.e]==b){Av(a.b,b.e,null);--a.c;return true}return false}
    function TH(a){if(ezb<a&&a<dzb){return a<0?Math.ceil(a):Math.floor(a)}return SH(Jv(a))}
    function rl(a){if(a){if(a.V()){throw new nvb}return a.sb(a.Y()-1)}return Rl(null.mb())}
    function ybb(a,b){var c;c=a.d;if(b<c.a.c.length-1){return Wv(yU(c.a,b+1),9)}return null}
    function $kb(a,b){if(!a){return}b.k=a;var d=Ukb(b);if(!d){fI[a]=[b];return}d.$c=b;}
    function O5(a,b){var c,d;d=false;do{a.i?(c=V5(a,b)):(c=X5(a,b));d=d|c;}while(c);return d}
    function Bbb(a,b,c){var d,e;d=b;do{e=Ixb(a.n[d.k])+c;a.n[d.k]=e;d=a.a[d.k];}while(d!=b)}
    function M4(a){var b,c;for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.vc();}}
    function bI(){cI();var a=aI;for(var b=0;b<arguments.length;b++){a.push(arguments[b]);}}
    function dn(a,b){var c,d;for(c=0,d=a.Y();c<d;++c){if(ovb(b,a.sb(c))){return c}}return -1}
    function or(a,b){var c;ac(a,'set1');ac(b,'set2');c=(hc(),new nc(b));return new tr(a,c,b)}
    function Rt(a){var b=/function(?:\s+([\w$]+))?\s*\(/;var c=b.exec(a);return c&&c[1]||Xxb}
    function YQ(a,b,c){nI(c,Tzb,3);NV(a.c,b,rI(c,1));aR(a,b,rI(c,1));BV(b,rI(c,1));pI(c);}
    function Dgb(){Dgb=iI;Cgb=Cc((zgb(),Bv(tv(iF,1),uyb,123,0,[ygb,xgb,wgb,ugb,tgb,vgb])));}
    function dhb(){dhb=iI;chb=Cc((_gb(),Bv(tv(lF,1),uyb,124,0,[Ygb,Xgb,$gb,Wgb,Zgb,Vgb])));}
    function Ilb(){Ilb=iI;Hlb=Bv(tv(mw,1),Yyb,26,12,[0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15]);}
    function djb(){djb=iI;cjb=new ejb(szb,0);ajb=new ejb('INPUT',1);bjb=new ejb('OUTPUT',2);}
    function de(a){this.c=a;this.b=new rnb((new inb(a.b)).a);this.a=null;this.d=(Il(),Il(),Hl);}
    function Nn(a){this.e=a;this.d=new wtb(op(ud(this.e).Y()));this.c=this.e.a;this.b=this.e.c;}
    function qR(a,b,c){this.c=a;oR.call(this);this.b=b;this.j=new VN(b.d,b.e,b.c,b.b);this.a=c;}
    function qI(a,b){if(a.j>0&&a.c<a.j){a.c+=b;!!a.g&&a.g.d>0&&a.e!=0&&qI(a.g,b/a.j*a.g.d);}}
    function WV(a){if(a.b.d.f.g==(CX(),xX)){return Wv(rJ(a.b.d.f,(Rib(),uib)),7)}return a.b.d}
    function VV(a){if(a.b.c.f.g==(CX(),xX)){return Wv(rJ(a.b.c.f,(Rib(),uib)),7)}return a.b.c}
    function od(a){dc(a.d!=3);switch(a.d){case 2:return false;case 0:return true;}return qd(a)}
    function CZ(a){switch(a.e){case 2:return sN(),rN;case 4:return sN(),ZM;default:return a;}}
    function DZ(a){switch(a.e){case 1:return sN(),pN;case 3:return sN(),$M;default:return a;}}
    function Km(a){var b;if(aw(a,90)){b=Wv(a,90);return new Lm(b.a)}else {return Il(),new dm(a)}}
    function Fpb(a,b){ypb();var c;c=new otb(1);ew(a)?Vmb(c,a,b):Ltb(c.d,a,b);return new mrb(c)}
    function Is(a,b){if(!a.g){return a.e}else {a.g=Is(a.g,b);--a.a;a.j=XH(a.j,b.c);return Gs(a)}}
    function Js(a,b){if(!a.e){return a.g}else {a.e=Js(a.e,b);--a.a;a.j=XH(a.j,b.c);return Gs(a)}}
    function Ue(a,b){var c,d,e;Dxb(b);c=false;for(e=b.mb();e.G();){d=e.H();c=c|a.ib(d);}return c}
    function nr(a){var b,c,d;b=0;for(d=a.mb();d.G();){c=d.H();b+=c!=null?vb(c):0;b=~~b;}return b}
    function BY(a){var b,c,d,e;for(c=a.a,d=0,e=c.length;d<e;++d){b=c[d];b.B(null);}return null}
    function Xeb(a){var b,c,d;d=new jJ;for(c=a.b.mb();c.G();){b=Wv(c.H(),92);QI(d,b.a);}return d}
    function mfb(a){var b,c,d;b=0;for(d=a.mb();d.G();){c=Yv(d.H());b+=(Dxb(c),c);}return b/a.Y()}
    function Rbb(a,b){var c;c=Wv(Smb(a.c,b),200);if(!c){c=new Ybb;c.c=b;Umb(a.c,c.c,c);}return c}
    function Wsb(a,b){var c;Dxb(b);c=b.e;if(!a.b[c]){Av(a.b,c,b);++a.c;return true}return false}
    function hwb(a,b){var c,d;c=1-b;d=a.a[c];a.a[c]=d.a[b];d.a[b]=a;a.b=true;d.b=false;return d}
    function yI(a,b){var c;if(aw(b,10)){c=Wv(b,10);return a.a==c.a&&a.b==c.b}else {return false}}
    function Bs(a,b,c){a.g=new Os(b,c);es(a,a.g,a.i);a.d=Plb(2,a.d);++a.a;a.j=PH(a.j,c);return a}
    function As(a,b,c){a.e=new Os(b,c);es(a.f,a.e,a);a.d=Plb(2,a.d);++a.a;a.j=PH(a.j,c);return a}
    function Nu(e,a){var b=e.a;var c=0;for(var d in b){b.hasOwnProperty(d)&&(a[c++]=d);}return a}
    function he(a,b){var c,d;Dxb(b);for(d=b.bb().mb();d.G();){c=Wv(d.H(),21);a.db(c.yb(),c.zb());}}
    function vcb(a,b,c){var d;d=a.a.e[Wv(b.a,9).k]-a.a.e[Wv(c.a,9).k];return hw(d>0?1:d<0?-1:0)}
    function r5(a,b,c){this.g=a;this.d=b;this.e=c;this.a=new GU;p5(this);ypb();Gpb(this.a,null);}
    function Os(a,b){Xb(b>0);this.b=a;this.c=b;this.j=b;this.a=1;this.d=1;this.e=null;this.g=null;}
    function qcb(a){a.a=null;a.e=null;a.b.c=xv(UF,syb,1,0,4,1);a.f.c=xv(UF,syb,1,0,4,1);a.c=null;}
    function qhb(){ohb();return Bv(tv(mF,1),uyb,113,0,[fhb,hhb,ihb,jhb,khb,lhb,nhb,ehb,ghb,mhb])}
    function uvb(a){return wvb(a,26)*1.4901161193847656E-8+wvb(a,27)*1.1102230246251565E-16}
    function Fo(a){return aw(a,87)?Ii(Wv(a,87)):aw(a,88)?Wv(a,88).a:aw(a,63)?new ap(a):new Ro(a)}
    function Udb(a){var b;b=Wv(rJ(a,(Rib(),hib)),32);return a.g==(CX(),xX)&&(b==(sN(),rN)||b==ZM)}
    function YT(a,b){if(ZT(a,b)){Fd(a.a,Wv(rJ(b,(Rib(),fib)),18),b);return true}else {return false}}
    function QQ(a,b){var c;if(b){for(c=0;c<6;c++){Wv(yU(a.a,c),18).jb(Wv(yU(b.a,c),19));}}return a}
    function rI(a,b){var c;if(a.b){return null}else {c=oI(a.e,a.f);QI(a.a,c);c.g=a;a.d=b;return c}}
    function hJ(a,b){var c,d;for(d=WI(a,0);d.b!=d.d.c;){c=Wv(_ub(d),10);c.a+=b.a;c.b+=b.b;}return a}
    function J9(a,b){var c,d;for(c=0;c<b.length;c++){for(d=0;d<b[c].length;d++){b[c][d]=a[c][d];}}}
    function P2(a){var b,c;for(c=new Tob(a.b.f);c.a<c.c.c.length;){b=Wv(Rob(c),7);Y2(a.a,Reb(b.g));}}
    function cT(){cT=iI;$S=new fT('Q1',0);bT=new fT('Q4',1);_S=new fT('Q2',2);aT=new fT('Q3',3);}
    function EK(){EK=iI;DK=new FK(szb,0);AK=new FK(qzb,1);BK=new FK('HEAD',2);CK=new FK('TAIL',3);}
    function ckb(){ckb=iI;_jb=new dkb('AGGRESSIVE',0);akb=new dkb('CAREFUL',1);bkb=new dkb('OFF',2);}
    function Dhb(){Dhb=iI;Chb=Cc((zhb(),Bv(tv(nF,1),uyb,110,0,[shb,whb,thb,xhb,uhb,yhb,vhb,rhb])));}
    function Akb(a,b){xkb();return ew(a)?kmb(a,$v(b)):cw(a)?flb(a,Yv(b)):bw(a)?ykb(a,Xv(b)):a.F(b)}
    function Es(a,b,c){var d;d=b.$b(c,a.b);return d<0?!a.e?0:Es(a.e,b,c):d>0?!a.g?0:Es(a.g,b,c):a.c}
    function rk(a,b){var c,d;if(!a.b){return false}d=a.e;c=a.a.$b(b,d);return c<0|c==0&a.d==(Gh(),Fh)}
    function qk(a,b){var c,d;if(!a.c){return false}d=a.g;c=a.a.$b(b,d);return c>0|c==0&a.f==(Gh(),Fh)}
    function SH(a){var b;b=a.h;if(b==0){return a.l+a.m*czb}if(b==bzb){return a.l+a.m*czb-dzb}return a}
    function MI(a){var b,c,d,e;b=new FI;for(d=0,e=a.length;d<e;++d){c=a[d];b.a+=c.a;b.b+=c.b;}return b}
    function J6(a){var b,c,d,e;for(c=a.a,d=0,e=c.length;d<e;++d){b=c[d];Q6(a,b,(sN(),pN));Q6(a,b,$M);}}
    function zo(a){var b,c,d;b=1;for(d=a.mb();d.G();){c=d.H();b=31*b+(c==null?0:vb(c));b=~~b;}return b}
    function Tsb(a){var b,c;b=Wv(a.e&&a.e(),11);c=Wv(cxb(b,b.length),11);return new atb(b,c,b.length)}
    function R6(a){this.e=gw(rJ(hX(a[0]),(eM(),uL)))===gw((NK(),JK));this.a=a;this.c=new ntb;J6(this);}
    function kR(a){fR();this.g=(mp(),new ntb);this.f=new ntb;this.b=new ntb;this.c=new xk;this.i=a;}
    function odb(a){this.o=a;this.g=new GU;this.j=new aJ;this.n=new aJ;this.e=new GU;this.b=new GU;}
    function OR(a,b){stb(a.a,b);if(b.f){throw new gt('CNode belongs to another CGroup.')}b.f=a;}
    function eI(a,b){typeof window===Sxb&&typeof window['$gwt']===Sxb&&(window['$gwt'][a]=b);}
    function K5(a,b,c,d){var e,f;e=I5(a,b,c,d);e<0&&(e=-e-1);for(f=c-1;f>=e;f--){a[f+1]=a[f];}a[e]=d;}
    function kab(a,b,c,d){var e,f;e=jab(a,b,c,d);e<0&&(e=-e-1);for(f=c-1;f>=e;f--){a[f+1]=a[f];}a[e]=d;}
    function Xe(a,b){var c,d;Dxb(b);for(d=b.mb();d.G();){c=d.H();if(!a.kb(c)){return false}}return true}
    function Ll(a,b){Il();var c;_b(b);while(a.G()){c=a.H();if(!Udb(Wv(c,9))){return false}}return true}
    function wV(a,b){var c,d,e;c=b.k-a.k;if(c==0){d=a.e.a*a.e.b;e=b.e.a*b.e.b;return glb(d,e)}return c}
    function YH(a){var b,c,d,e;e=a;d=0;if(e<0){e+=dzb;d=bzb;}c=hw(e/czb);b=hw(e-c*czb);return Ev(b,c,d)}
    function n6(a,b){a.c.c=xv(UF,syb,1,0,4,1);o6(a,a.e,b);o6(a,a.a,b);ypb();Gpb(a.c,null);return p6(a)}
    function c5(a,b,c){a.g=i5(a,b,(sN(),ZM),a.b);a.d=i5(a,c,ZM,a.b);if(a.g.c==0||a.d.c==0){return}f5(a);}
    function d5(a,b,c){a.g=i5(a,b,(sN(),rN),a.j);a.d=i5(a,c,rN,a.j);if(a.g.c==0||a.d.c==0){return}f5(a);}
    function pU(a,b,c){return new VN(Qlb(a.a,b.a)-c/2,Qlb(a.b,b.b)-c/2,Jlb(a.a-b.a)+c,Jlb(a.b-b.b)+c)}
    function onb(a){if(a.a.G()){return true}if(a.a!=a.d){return false}a.a=new Ptb(a.e.d);return a.a.G()}
    function xU(a,b){var c,d;c=b.ob();d=c.length;if(d==0){return false}gxb(a.c,a.c.length,c);return true}
    function S5(a,b){var c,d;for(c=0;c<a.a.length;c++){for(d=0;d<a.a[c].length;d++){a.a[c][d]=b[c][d];}}}
    function zpb(a,b){ypb();var c,d,e,f;f=false;for(d=0,e=b.length;d<e;++d){c=b[d];f=f|a.ib(c);}return f}
    function op(a){mp();if(a<3){Mh(a,'expectedSize');return a+1}if(a<Nyb){return hw(a/0.75+1)}return $xb}
    function ml(a,b){var c;if(aw(b,19)){c=(Oh(),Wv(b,19));return a.jb(c)}return Jl(a,Wv(_b(b),22).mb())}
    function Ufb(a,b){var c,d;d=a.d.f;if(d.g==(CX(),AX)){return}c=Uh(mX(d));Cm(c)&&Umb(b,a,Wv(Dm(c),12));}
    function Xob(a,b){var c,d;yxb(b);return c=epb(a,0,b),d=xv(mw,Yyb,26,b,12,1),dxb(a,0,d,0,c,true),d}
    function swb(a,b){var c;this.c=a;c=new GU;Zvb(a,c,b,a.b,null,false,null,false);this.a=new Fnb(c,0);}
    function is(a){if(!a.a){return false}else if(qk(a.c.b,a.a.b)){a.a=null;return false}else {return true}}
    function ec(a){if(!a){throw new ulb((bmb(),'no calls to next() since the last call to remove()'))}}
    function ev(){ev=iI;dv={'boolean':fv,'number':gv,'string':iv,'object':hv,'function':hv,'undefined':jv};}
    function xR(){xR=iI;vR=rr(Bv(tv(Bz,1),uyb,59,0,[(sK(),oK),pK]));wR=rr(Bv(tv(Bz,1),uyb,59,0,[rK,nK]));}
    function Apb(a){ypb();var b,c,d;d=0;for(c=a.mb();c.G();){b=c.H();d=d+(b!=null?vb(b):0);d=d|0;}return d}
    function Hq(a){Dq();var b,c,d;d=0;for(c=Vg(a).mb();c.G();){b=Wv(c.H(),83);d=PH(d,b.Yb());}return $s(d)}
    function dS(a){var b,c;for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.i.Q();}a.c.Dc(a);eS(a);}
    function eub(a,b){var c;c=Utb(a.a,b);if(c===undefined){++a.d;}else {a.a[$Ab](b);--a.c;msb(a.b);}return c}
    function X5(a,b){var c,d,e,f;c=false;d=a.d[b].length;for(e=d-1;e>0;e--){f=e-1;c=c|Y5(a,b,f,e);}return c}
    function V5(a,b){var c,d,e,f;c=false;d=a.d[b].length;for(f=0;f<d-1;f++){e=f+1;c=c|Y5(a,b,f,e);}return c}
    function Gv(a,b){var c,d,e;c=a.l+b.l;d=a.m+b.m+(c>>22);e=a.h+b.h+(d>>22);return Ev(c&azb,d&azb,e&bzb)}
    function Mv(a,b){var c,d,e;c=a.l-b.l;d=a.m-b.m+(c>>22);e=a.h-b.h+(d>>22);return Ev(c&azb,d&azb,e&bzb)}
    function LI(a,b){var c;for(c=0;c<(bmb(),b.length);c++){if(a==b.charCodeAt(c)){return true}}return false}
    function yP(a,b){var c;for(c=0;c<(bmb(),b.length);c++){if(a==b.charCodeAt(c)){return true}}return false}
    function rJ(a,b){var c,d;if(a.n){d=Smb(a.n,b);if(d!=null){return d}}c=zJ(b);aw(c,5)&&sJ(a,b,c);return c}
    function lJ(a){var b,c,d;b=new jJ;for(d=WI(a,0);d.b!=d.d.c;){c=Wv(_ub(d),10);rn(b,0,new II(c));}return b}
    function Q6(a,b,c){var d,e,f,g;g=new U6(b,c);f=0;for(e=T6(g);e.G();){d=Wv(e.H(),7);Umb(a.c,d,Elb(f++));}}
    function Fb(a,b,c){_b(b);if(c.G()){vmb(b,a.C(c.H()));while(c.G()){vmb(b,a.c);vmb(b,a.C(c.H()));}}return b}
    function g9(a,b,c,d,e){if(d){h9(a,b);}else {d9(a,b,e);e9(a,b,c);}if(b.c.length>1){Gpb(b,a.b);V9(a.c,b);}}
    function Bv(a,b,c,d,e){e.$c=a;e._c=b;e.ad=kI;e.__elementTypeId$=c;e.__elementTypeCategory$=d;return e}
    function vS(a,b,c){switch(c.e){case 2:a.b=b;break;case 1:a.c=b;break;case 4:a.d=b;break;case 3:a.a=b;}}
    function B6(a,b,c){var d,e;e=C6(c).g;d=w6(a,b,e).a;return d-Klb(Wv(Smb(a.c,b),24).a-Wv(Smb(a.c,c),24).a)}
    function glb(a,b){if(a<b){return -1}if(a>b){return 1}if(a==b){return 0}return isNaN(a)?isNaN(b)?0:1:-1}
    function Yi(a){switch(a.Y()){case 0:return Fi;case 1:return new Er(a.mb().H());default:return new gr(a);}}
    function Nt(){Nt=iI;var a,b;b=!(!!Error.stackTraceLimit||'stack' in new Error);a=new _t;Mt=b?new Tt:a;}
    function RP(){RP=iI;OP=new DJ('intCoordinates',(xkb(),xkb(),vkb));PP=new CJ('jsonObject');QP=new HI(0,0);}
    function XZ(){XZ=iI;VZ=new YZ('MIRROR_X',0);WZ=new YZ('TRANSPOSE',1);UZ=new YZ('MIRROR_AND_TRANSPOSE',2);}
    function Hgb(){Hgb=iI;Fgb=new Igb(tzb,0);Egb=new Igb('INCOMING_ONLY',1);Ggb=new Igb('OUTGOING_ONLY',2);}
    function Seb(){Ieb();return Bv(tv(_E,1),uyb,60,0,[meb,jeb,ieb,peb,oeb,Heb,Geb,neb,keb,leb,qeb,Eeb,Feb])}
    function b3(){b3=iI;var a,b,c,d;a3=new vsb(_E);for(b=Seb(),c=0,d=b.length;c<d;++c){a=b[c];ssb(a3,a,null);}}
    function Bpb(a){ypb();var b,c,d;d=1;for(c=a.mb();c.G();){b=c.H();d=31*d+(b!=null?vb(b):0);d=d|0;}return d}
    function Tl(a,b){Il();var c,d;ac(b,'predicate');for(d=0;a.G();d++){c=a.H();if(b.D(c)){return d}}return -1}
    function Or(a,b){var c,d;c=a.c.a;d=b.ac(c);a.b.b&&(d=XH(d,Nr(a,b,c)));a.b.c&&(d=XH(d,Mr(a,b,c)));return d}
    function bwb(a,b,c){var d,e;d=new ywb(b,c);e=new zwb;a.b=_vb(a,a.b,d,e);e.b||++a.c;a.b.b=false;return e.d}
    function gJ(a,b,c){var d,e,f;d=new aJ;for(f=WI(c,0);f.b!=f.d.c;){e=Wv(_ub(f),10);QI(d,new II(e));}sn(a,b,d);}
    function Mp(a,b){var c;if(b===a){return true}if(aw(b,144)){c=Wv(b,144);return a.P().t(c.P())}return false}
    function Svb(a){var b;b=a.a.c.length;if(b>0){return Dvb(b-1,a.a.c.length),AU(a.a,b-1)}else {throw new osb}}
    function p2(a){if(a.b.c.length-a.e.c.length<0){QX(a,(sN(),ZM));a.a.a=a.j.a;}else {QX(a,(sN(),rN));a.a.a=0;}}
    function $mb(a,b){wxb(a>=0,'Negative initial capacity');wxb(b>=0,'Non-positive load factor');Ymb(this);}
    function rnb(a){var b;this.e=a;this.d=new hub(this.e.e);this.a=this.d;this.b=onb(this);b=a[WAb];this[WAb]=b;}
    function Kkb(){this.n=null;this.j=null;this.i=null;this.d=null;this.b=null;this.k=null;this.a=null;}
    function fpb(a){var b,c,d,e;e=1;for(c=0,d=a.length;c<d;++c){b=a[c];e=31*e+(b!=null?vb(b):0);e=e|0;}return e}
    function Cc(a){var b,c,d,e;b={};for(d=0,e=a.length;d<e;++d){c=a[d];b[':'+(c.d!=null?c.d:''+c.e)]=c;}return b}
    function wO(a){uO();var b,c,d,e;for(c=xO(),d=0,e=c.length;d<e;++d){b=c[d];if(Zi(b.a,a)){return b}}return tO}
    function Itb(a,b,c){var d,e,f;for(e=0,f=c.length;e<f;++e){d=c[e];if(a.b.Uc(b,d.yb())){return d}}return null}
    function Rmb(a,b,c){var d,e;for(e=c.mb();e.G();){d=Wv(e.H(),21);if(a.Uc(b,d.zb())){return true}}return false}
    function Wvb(a,b){var c,d,e;e=a.b;while(e){c=a.a.$b(b,e.d);if(c==0){return e}d=c<0?0:1;e=e.a[d];}return null}
    function Ge(a,b){var c,d;c=Wv(Wmb(a.a,b),19);if(!c){return null}d=a.b.Z();d.jb(c);a.b.c-=c.Y();c.Q();return d}
    function y0(a,b,c){var d;d=Wv(b.B(a),9);while(d.g==(CX(),zX)){!d.n&&(d.n=new ntb);Wmb(d.n,c);d=Wv(b.B(d),9);}}
    function RH(a,b){var c;if(UH(a)&&UH(b)){c=a-b;if(!isNaN(c)){return c}}return Iv(UH(a)?YH(a):a,UH(b)?YH(b):b)}
    function OH(a){var b;if(aw(a,46)){return a}b=a&&a.__gwt$exception;if(!b){b=new kt(a);Ot(b,a);MH(a,b);}return b}
    function p6(a){var b,c,d;b=0;for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),226);b+=b6(a,c.a,c.b);}return b}
    function pT(a){var b;b=new DT(a);RT(a.a,nT,new opb(Bv(tv(JA,1),syb,160,0,[b])));!!b.d&&vU(b.f,b.d);return b.f}
    function w6(a,b,c){switch(c.e){case 1:return Wv(Smb(a.d,b),24);case 3:return Wv(Smb(a.j,b),24);}return Elb(0)}
    function M5(a,b,c){if(!a.d[b.k][c.k]){L5(a,b,c);a.d[b.k][c.k]=true;a.d[c.k][b.k]=true;}return a.a[b.k][c.k]}
    function Ds(a,b,c){var d;d=b.$b(c,a.b);return d<0?!a.e?a:Wv(Sb(Ds(a.e,b,c),a),206):d==0?a:!a.g?null:Ds(a.g,b,c)}
    function rb(a,b){return ew(a)?emb(a,b):cw(a)?(Dxb(a),a===b):bw(a)?(Dxb(a),a===b):_v(a)?a.t(b):zv(a)?a===b:a===b}
    function vQ(a,b){return emb(a.b,b)||dmb(a.b,b)&&((bmb(),b.length)==pmb(a.b)||jmb(a.b,pmb(a.b)-b.length-1)==46)}
    function L6(a,b){var c,d,e;c=0;for(e=nX(a,b).mb();e.G();){d=Wv(e.H(),7);c+=rJ(d,(Rib(),Bib))!=null?1:0;}return c}
    function Xvb(a,b){var c,d,e;d=null;e=a.b;while(e){c=a.a.$b(b,e.d);if(c>=0){e=e.a[1];}else {d=e;e=e.a[0];}}return d}
    function Yvb(a,b){var c,d,e;d=null;e=a.b;while(e){c=a.a.$b(b,e.d);if(c<=0){e=e.a[0];}else {d=e;e=e.a[1];}}return d}
    function u0(a,b,c,d){var e,f;for(f=a.mb();f.G();){e=Wv(f.H(),33);e.i.a=b.a+(d.a-e.j.a)/2;e.i.b=b.b;b.b+=e.j.b+c;}}
    function o$(a,b){var c;if(a.c.length==0){return}c=Wv(FU(a,xv(qB,Nzb,9,a.c.length,0,1)),51);lpb(c,new z$);l$(c,b);}
    function t$(a,b){var c;if(a.c.length==0){return}c=Wv(FU(a,xv(qB,Nzb,9,a.c.length,0,1)),51);lpb(c,new C$);l$(c,b);}
    function _Z(a){var b,c;b=a.g;if(b==(CX(),xX)){c=Wv(rJ(a,(Rib(),hib)),32);return c==(sN(),$M)||c==pN}return false}
    function Gc(a,b){var c;Dxb(b);c=a[':'+b];xxb(!!c,'Enum constant undefined: %s',Bv(tv(UF,1),syb,1,4,[b]));return c}
    function Zb(a,b,c){if(!a){throw new slb(fc('lowerEndpoint (%s) > upperEndpoint (%s)',Bv(tv(UF,1),syb,1,4,[b,c])))}}
    function kv(a){ev();throw new zu("Unexpected typeof result '"+a+"'; please report this bug to the GWT team")}
    function tN(a){switch(a.e){case 1:return pN;case 2:return rN;case 3:return $M;case 4:return ZM;default:return qN;}}
    function vK(a){switch(a.e){case 2:return pK;case 1:return oK;case 4:return nK;case 3:return rK;default:return qK;}}
    function Dkb(a){if(a>=48&&a<58){return a-48}if(a>=97&&a<97){return a-97+10}if(a>=65&&a<65){return a-65+10}return -1}
    function td(a,b){var c,d;for(d=Ep(Be(a.P()));d.b.G();){c=Wv(zm(d,d.b.H()),19);if(c.kb(b)){return true}}return false}
    function js(a){var b;if(!is(a)){throw new nvb}b=new fs(a.c,a.a);a.b=b;a.a.i==a.c.a?(a.a=null):(a.a=a.a.i);return b}
    function pp(a,b){mp();var c;if(a===b){return true}else if(aw(b,57)){c=Wv(b,57);return mr(nj(a),c.bb())}return false}
    function Gq(a,b,c,d){Dq();Mh(c,'oldCount');Mh(d,'newCount');if(a.Cb(b)==c){a.Gb(b,d);return true}else {return false}}
    function Bh(a,b,c,d,e){_b(c);_b(e);return Rr(new Ur(a.c,pk(a.b,new sk(a.d,true,b,c,false,null,(Gh(),Fh))),a.a),d,e)}
    function ck(a){hi();switch(a.Y()){case 0:return kr(),jr;case 1:return new Gr(a.mb().H());default:return new lr(a);}}
    function PH(a,b){var c;if(UH(a)&&UH(b)){c=a+b;if(ezb<c&&c<dzb){return c}}return SH(Gv(UH(a)?YH(a):a,UH(b)?YH(b):b))}
    function WH(a,b){var c;if(UH(a)&&UH(b)){c=a*b;if(ezb<c&&c<dzb){return c}}return SH(Kv(UH(a)?YH(a):a,UH(b)?YH(b):b))}
    function XH(a,b){var c;if(UH(a)&&UH(b)){c=a-b;if(ezb<c&&c<dzb){return c}}return SH(Mv(UH(a)?YH(a):a,UH(b)?YH(b):b))}
    function sK(){sK=iI;qK=new wK(szb,0);pK=new wK(pzb,1);oK=new wK(ozb,2);nK=new wK('DOWN',3);rK=new wK('UP',4);}
    function NK(){NK=iI;MK=new OK(szb,0);KK=new OK('POLYLINE',1);JK=new OK('ORTHOGONAL',2);LK=new OK('SPLINES',3);}
    function eL(){eL=iI;cL=new fL('INHERIT',0);bL=new fL('INCLUDE_CHILDREN',1);dL=new fL('SEPARATE_CHILDREN',2);}
    function G8(){G8=iI;D8=TQ(RQ(new WQ,(d0(),p_)),I_);E8=PQ(TQ(SQ(new WQ,j_),h_),i_);F8=PQ(UQ(new WQ,k_),i_);}
    function P8(){P8=iI;M8=TQ(RQ(new WQ,(d0(),p_)),I_);N8=PQ(TQ(SQ(new WQ,j_),h_),i_);O8=PQ(UQ(new WQ,k_),i_);}
    function deb(a){this.a=new Wub;this.d=new Wub;this.b=new Wub;this.c=new Wub;this.g=new Wub;this.i=new Wub;this.f=a;}
    function UV(a,b,c,d,e,f){this.e=new GU;this.f=(djb(),cjb);vU(this.e,a);this.d=b;this.a=c;this.b=d;this.f=e;this.c=f;}
    function hpb(a,b,c,d,e,f,g,h){var i;i=c;while(f<g){i>=d||b<c&&h.$b(a[b],a[i])<=0?Av(e,f++,a[b++]):Av(e,f++,a[i++]);}}
    function v0(a,b,c,d,e){var f,g;for(g=a.mb();g.G();){f=Wv(g.H(),33);f.i.a=b.a;f.i.b=e?b.b:b.b+d.b-f.j.b;b.a+=f.j.a+c;}}
    function gcb(a,b){$bb();var c,d;for(d=Uh(gX(a));Cm(d);){c=Wv(Dm(d),12);if(c.d.f==b||c.c.f==b){return c}}return null}
    function fdb(a,b,c){var d,e,f;d=0;for(f=WI(a,0);f.b!=f.d.c;){e=Ixb(Yv(_ub(f)));if(e>c){break}else e>=b&&++d;}return d}
    function sn(a,b,c){var d,e,f,g;Dxb(c);g=false;f=WI(a,b);for(e=WI(c,0);e.b!=e.d.c;){d=_ub(e);$ub(f,d);g=true;}return g}
    function Uf(a,b){var c,d,e;if(b.V()){return false}e=a.Y();c=a.d.jb(b);if(c){d=a.d.Y();a.f.c+=d-e;e==0&&Vf(a);}return c}
    function qJ(a,b){var c;if(!b){return a}c=!b.n?(ypb(),ypb(),wpb):b.n;c.V()||(!a.n?(a.n=new ptb(c)):he(a.n,c));return a}
    function Gb(b,c,d){var e;try{Fb(b,c,d);}catch(a){a=OH(a);if(aw(a,181)){e=a;throw new ukb(e)}else throw NH(a)}return c}
    function Qb(b,c,d){var e;try{Pb(b,c,d);}catch(a){a=OH(a);if(aw(a,181)){e=a;throw new ukb(e)}else throw NH(a)}return c}
    function NH(a){var b;if(aw(a,164)){b=Wv(a,164);if(gw(b.b)!==gw((it(),ht))){return gw(b.b)===gw(ht)?null:b.b}}return a}
    function SW(a,b){var c;c=Wv(rJ(hX(a),(Rib(),zib)),9);while(c){if(c==b){return true}c=Wv(rJ(hX(c),zib),9);}return false}
    function EZ(a){switch(Wv(rJ(a,(Rib(),mib)),140).e){case 1:sJ(a,mib,(Hhb(),Ehb));break;case 2:sJ(a,mib,(Hhb(),Ghb));}}
    function Kk(a){hi();switch(a.c){case 0:return kr(),jr;case 1:return new Gr(Sl(new jtb(a)));default:return new Jk(a);}}
    function Ti(a){Gi();var b,c;for(b=0,c=a.length;b<c;b++){if(a[b]==null){throw new Wlb('at index '+b)}}return new opb(a)}
    function $4(a,b,c){if(b.length==0||c.length==0){return 0}a.e?(a.b=new y5(a.c)):(a.b=new H5(a.c));return a.b.Gc(b,c)}
    function pI(a){if(a.i==null){throw new ulb('The task has not begun yet.')}if(!a.b){a.c<a.j&&qI(a,a.j-a.c);a.b=true;}}
    function DR(a,b){var c,d;for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),27);BU(a.b.b,c.b);PR(Wv(c.a,78),Wv(c.b,25));}}
    function aU(a,b){var c,d;for(d=new Tob(a.a);d.a<d.c.c.length;){c=Wv(Rob(d),222);if(YT(c,b)){return}}vU(a.a,new _T(b));}
    function aV(a){var b,c,d;b=new GU;for(d=new Tob(a.b);d.a<d.c.c.length;){c=Wv(Rob(d),251);xU(b,Wv(c.Ac(),19));}return b}
    function Q0(a,b){var c,d,e;e=new GU;for(d=nX(a,b).mb();d.G();){c=Wv(d.H(),7);e.c[e.c.length]=c;}Gpb(e,new V0);return e}
    function iX(a){var b,c,d;b=new GU;for(d=new Tob(a.f);d.a<d.c.c.length;){c=Wv(Rob(d),7);vU(b,c.b);}return _b(b),new Vh(b)}
    function mX(a){var b,c,d;b=new GU;for(d=new Tob(a.f);d.a<d.c.c.length;){c=Wv(Rob(d),7);vU(b,c.e);}return _b(b),new Vh(b)}
    function Elb(a){var b,c;if(a>-129&&a<128){b=a+128;c=(Glb(),Flb)[b];!c&&(c=Flb[b]=new wlb(a));return c}return new wlb(a)}
    function R5(a){var b,c;b=Z4(a.b,a.d);c=$xb;while(c>b){S5(a,a.d);if(b==0){c=0;break}W5(a);U5(a);c=b;b=Z4(a.b,a.d);}a.c=c;}
    function yvb(){tvb();var a,b,c;c=svb+++ixb();a=hw(Math.floor(c*FAb))&bBb;b=hw(c-a*aBb);this.a=a^1502;this.b=b^_Ab;}
    function vb(a){return ew(a)?Pxb(a):cw(a)?hw((Dxb(a),a)):bw(a)?Ckb((Dxb(a),a))?1231:1237:_v(a)?a.v():zv(a)?txb(a):txb(a)}
    function AQ(a,b,c){var d,e,f;e=new jQ;e.d=c;d=UP(e,b);f=new dR;Ckb(Ixb(Xv(rJ(d,yQ))))?YQ(f,d,new sI):BQ(a,f,d);ZP(e,d);}
    function E6(a,b,c,d){var e,f,g,h;h=new U6(b,d);g=0;for(f=T6(h);f.G();){e=Wv(f.H(),7);Umb(a.i,e,Elb(g++));}Umb(c,b,Elb(g));}
    function c6(a,b){var c,d,e,f,g;c=0;g=0;for(e=0,f=b.length;e<f;++e){d=b[e];c=i6(a,c,d,(sN(),ZM),a.f);g=i6(a,g,d,rN,a.n);}}
    function pJ(a,b){var c,d,e,f;if(!a.n){return}for(d=0,e=b.length;d<e;++d){c=b[d];f=Smb(a.n,c);if(f!=null){c.nc();c.oc();}}}
    function L2(a,b){var c,d,e;for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),75);e=X2(a.a);R2(a.a,e,c.k,c.j);aeb(c,e,true);}}
    function M2(a,b){var c,d,e;for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),75);e=W2(a.a);R2(a.a,e,c.k,c.j);aeb(c,e,true);}}
    function PW(a){var b,c;c=Wv(rJ(a,(eM(),sL)),59);if(c==(sK(),qK)){b=Wv(rJ(a,(Rib(),Rhb)),15).a;return b>=1?pK:nK}return c}
    function Cm(a){_b(a.b);if(a.b.G()){return true}while(a.a.G()){_b(a.b=a.Wb(a.a.H()));if(a.b.G()){return true}}return false}
    function m7(a){if(a.d!=a.c.d||a.i!=a.g.d){a.a.c=xv(UF,syb,1,0,4,1);xU(a.a,a.c);xU(a.a,a.g);a.d=a.c.d;a.i=a.g.d;}return a.a}
    function Yf(a){var b;if(a.b){Yf(a.b);if(a.b.d!=a.c){throw new nsb}}else if(a.d.V()){b=Wv(Smb(a.f.b,a.e),19);!!b&&(a.d=b);}}
    function H9(a,b,c,d,e){var f,g,h,i;i=Co(a);g9(b,i,d,e,c);f=0;for(h=new Tob(i);h.a<h.c.c.length;){g=Wv(Rob(h),9);a[f++]=g;}}
    function oP(a){var b,c,d;d=Wv(vW(a.a,(eM(),DL)),15).a;for(c=new Tob(uW(a.a));c.a<c.c.c.length;){b=Wv(Rob(c),626);qP(a,b,d);}}
    function WQ(){var a,b;this.a=new HU(6);for(b=0;b<6;b++){vU(this.a,(a=Wv(Hkb(mC),11),new atb(a,Wv(exb(a,a.length),11),0)));}}
    function W5(a){var b,c,d;d=false;for(c=0;c<a.d.length;c++){a.j=(b=new N5(a.e,a.d,c,0),new b7(c,a.d,b));d=d|O5(a,c);}return d}
    function H8(a,b,c){var d,e;e=a.a.c;for(d=e.c.length;d<c;d++){uU(e,0,new sY(a.a));}rX(b,Wv(yU(e,e.c.length-c),16));a.b[b.k]=c;}
    function hdb(a,b){var c,d;c=WI(a,0);while(c.b!=c.d.c){d=Ixb(Yv(_ub(c)));if(d==b){return}else if(d>b){avb(c);break}}$ub(c,b);}
    function dub(a,b,c){var d;d=Utb(a.a,b);Wtb(a.a,b,c===undefined?null:c);if(d===undefined){++a.c;msb(a.b);}else {++a.d;}return d}
    function qgb(a,b,c){if((b-a<=0?0-(b-a):b-a)<uAb||(c-a<=0?0-(c-a):c-a)<uAb){return true}return b-a>uAb?a-c>uAb:c-a>uAb}
    function Qgb(a){switch(a.e){case 0:return Kgb;case 1:return Lgb;case 2:return Mgb;case 3:return Ngb;default:return Ogb;}}
    function uS(a,b){switch(b.e){case 2:return a.b;case 1:return a.c;case 4:return a.d;case 3:return a.a;default:return false;}}
    function vN(a){sN();switch(a.e){case 4:return $M;case 1:return ZM;case 3:return pN;case 2:return rN;default:return qN;}}
    function c7(a,b){if(b==a.c){return a.d}else if(b==a.d){return a.c}else {throw new slb('Node '+b+' not part of edge '+a)}}
    function zO(a,b){var c;if(Zsb(a.a,b)){return Wv(Zsb(a.a,b)?a.b[b.e]:null,62)}else {c=new ZN;Wsb(a.a,b);usb(a,b.e,c);return c}}
    function Zeb(a,b){var c,d,e,f;f=a.g.tb();c=0;while(f.G()){d=Ixb(Yv(f.H()));e=d-b;if(e>RAb){return c}else e>SAb&&++c;}return c}
    function Usb(a){var b,c,d,e;c=(b=Wv(Hkb((d=a.$c,e=d.f,e==IF?d:e)),11),new atb(b,Wv(exb(b,b.length),11),0));Wsb(c,a);return c}
    function yR(a,b){var c,d;for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),27);vU(a.b.b,Wv(c.b,25));OR(Wv(c.a,78),Wv(c.b,25));}}
    function gpb(a,b,c,d){var e,f,g;for(e=b+1;e<c;++e){for(f=e;f>b&&d.$b(a[f-1],a[f])>0;--f){g=a[f];Av(a,f,a[f-1]);Av(a,f-1,g);}}}
    function k3(a){var b,c;if(!MM(Wv(rJ(a,(eM(),TL)),28))){for(c=new Tob(a.f);c.a<c.c.c.length;){b=Wv(Rob(c),7);QX(b,(sN(),qN));}}}
    function oX(a,b){switch(b.e){case 1:return pl(a.f,(LX(),GX));case 2:return pl(a.f,(LX(),IX));default:return ypb(),ypb(),vpb;}}
    function oW(a,b){if(yJ(b,(eM(),cM))){return rJ(a.e,(Rib(),Jib))}else if(yJ(b,LL)){return rJ(a.e,(Rib(),tib))}return rJ(a.e,b)}
    function I5(a,b,c,d){var e,f,g;f=b;e=c-1;while(f<=e){g=(f+e)/2|0;if(a[g]==d){return g}else a[g]<d?(f=g+1):(e=g-1);}return -f-1}
    function Ve(a,b,c){var d,e;for(e=a.mb();e.G();){d=e.H();if(gw(b)===gw(d)||b!=null&&rb(b,d)){c&&e.I();return true}}return false}
    function epb(a,b,c){var d;xxb(b<=c,'%s > %s',Bv(tv(UF,1),syb,1,4,[Elb(b),Elb(c)]));d=a.length;c=c<d?c:d;Gxb(b,c,d);return c-b}
    function aW(a,b){var c,d,e;c=a;e=0;do{if(c==b){return e}d=Wv(rJ(c,(Rib(),zib)),9);if(!d){throw new rlb}c=hX(d);++e;}while(true)}
    function U5(a){var b,c,d;d=false;for(c=a.d.length-1;c>=0;c--){a.j=(b=new N5(a.e,a.d,c,1),new b7(c,a.d,b));d=d|O5(a,c);}return d}
    function k6(a){this.f=(mp(),new ntb);this.n=new ntb;this.k=new ntb;this.g=new vtb;this.i=new Vr((Tq(),Sq));this.j=a;c6(this,a);}
    function vsb(a){var b;this.a=(b=Wv(a.e&&a.e(),11),new atb(b,Wv(exb(b,b.length),11),0));this.b=xv(UF,syb,1,this.a.a.length,4,1);}
    function jf(a,b){var c;if(b===a){return true}if(!aw(b,18)){return false}c=Wv(b,18);if(c.Y()!=a.Y()){return false}return a.lb(c)}
    function Reb(a){Ieb();switch(a.e){case 1:return meb;case 2:return ieb;case 3:return oeb;case 4:return Geb;default:return Feb;}}
    function pgb(a,b){switch(b.e){case 1:return a.e.d;case 2:return a.e.c;case 3:return a.e.a;case 4:return a.e.b;default:return 0;}}
    function xO(){uO();return Bv(tv(Oz,1),uyb,67,0,[rO,qO,sO,iO,hO,jO,mO,lO,kO,pO,oO,nO,fO,eO,gO,cO,bO,dO,_N,$N,aO,tO])}
    function zM(){zM=iI;yM=new AM(szb,0);xM=new AM('JUSTIFIED',1);uM=new AM('BEGIN',2);vM=new AM(qzb,3);wM=new AM('END',4);}
    function DN(){DN=iI;BN=new EN('PORTS',0);CN=new EN('PORT_LABELS',1);AN=new EN('NODE_LABELS',2);zN=new EN('MINIMUM_SIZE',3);}
    function kP(){kP=iI;jP=new lP('UNKNOWN',0);gP=new lP('ABOVE',1);hP=new lP('BELOW',2);iP=new DJ('de.cau.cs.kieler.labelSide',jP);}
    function Qjb(){Qjb=iI;Njb=new Rjb('EQUALLY_DISTRIBUTED',0);Pjb=new Rjb('NORTH_STACKED',1);Ojb=new Rjb('NORTH_SEQUENCE',2);}
    function gI(){fI={};!Array.isArray&&(Array.isArray=function(a){return Object.prototype.toString.call(a)==='[object Array]'});}
    function SR(a,b){return Ws(),Ws(),((a-b>0?a-b:-(a-b))<=$yb||a==b||isNaN(a)&&isNaN(b)?0:a<b?-1:a>b?1:Ys(isNaN(a),isNaN(b)))>0}
    function TR(a,b){return Ws(),Ws(),((a-b>0?a-b:-(a-b))<=$yb||a==b||isNaN(a)&&isNaN(b)?0:a<b?-1:a>b?1:Ys(isNaN(a),isNaN(b)))<0}
    function Veb(a){var b,c;a.d||cfb(a);c=new jJ;b=a.b.mb();b.H();while(b.G()){QI(c,Wv(b.H(),92).a);}Bxb(c.b!=0);$I(c,c.c.b);return c}
    function $db(a){var b,c,d,e;e=new Wub;b=new IU(a.c);Dpb(b);for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),7);e.a.db(c,e);}return e}
    function Np(a,b){var c,d,e;_b(b);for(d=(e=a.g,Wv(!e?(a.g=new En(a)):e,20)).mb();d.G();){c=Wv(d.H(),21);Fd(b,c.zb(),c.yb());}return b}
    function mf(a,b){var c,d,e;if(aw(b,21)){c=Wv(b,21);d=c.yb();e=rp(a.qb(),d);return Tb(e,c.zb())&&(e!=null||a.qb().R(d))}return false}
    function Yeb(a,b){var c,d,e;e=a.g.tb();while(e.G()){c=Ixb(Yv(e.H()));d=c-b<=0?0-(c-b):c-b;if(d<RAb){return e.L()-1}}return a.g.Y()}
    function Vfb(a){var b,c;for(c=new Tob(a.a);c.a<c.c.c.length;){b=Wv(Rob(c),9);if(b.g==(CX(),AX)||b.g==wX){return false}}return true}
    function nI(a,b,c){if(a.b){throw new ulb('The task is already done.')}else if(a.i!=null){return false}else {a.i=b;a.j=c;return true}}
    function A5(a,b){if(a.f<b.f){return -1}else if(a.f>b.f){return 1}else if(a.g<b.g){return -1}else if(a.g>b.g){return 1}return a.b-b.b}
    function S8(a,b){if(b.c==a){return b.d}else if(b.d==a){return b.c}throw new slb('Input edge is not connected to the input port.')}
    function q5(a){var b;if(a.c==0){return}b=Wv(yU(a.a,a.b),128);b.b==1?(++a.b,a.b<a.a.c.length&&u5(Wv(yU(a.a,a.b),128))):--b.b;--a.c;}
    function ZU(a,b){a.b.a=Qlb(a.b.a,b.c);a.b.b=Qlb(a.b.b,b.d);a.a.a=Nlb(a.a.a,b.c);a.a.b=Nlb(a.a.b,b.d);return a.c[a.c.length]=b,true}
    function vbb(a,b,c){var d,e;d=Ixb(a.n[b.f.k])+Ixb(a.d[b.f.k])+b.i.b+b.a.b;e=Ixb(a.n[c.f.k])+Ixb(a.d[c.f.k])+c.i.b+c.a.b;return e-d}
    function Y5(a,b,c,d){var e,f,g;e=false;if($6(a.j,c,d)){a7(a.j,a.d[b][c],a.d[b][d]);f=a.d[b];g=f[d];f[d]=f[c];f[c]=g;e=true;}return e}
    function fX(a,b,c){var d,e,f,g,h;h=hX(a);e=h.a;d=Wv(rJ(h,(Rib(),Xhb)),15).a;f=h.d;g=a.i;b&&(g.a=g.a-e.b-d-f.a);c&&(g.b=g.b-e.d-d-f.b);}
    function Q$(a,b){var c,d,e;for(d=Uh(gX(a));Cm(d);){c=Wv(Dm(d),12);e=Wv(b.B(c),9);return new $c(_b(e.i.b+e.j.b/2))}return zb(),zb(),yb}
    function ifb(a){var b,c,d,e,f;d=gfb(a);b=rAb;f=0;e=0;while(b>0.5&&f<50){e=ofb(d);c=$eb(d,e,true);b=Jlb(c.b);++f;}return $eb(a,e,false)}
    function jfb(a){var b,c,d,e,f;d=gfb(a);b=rAb;f=0;e=0;while(b>0.5&&f<50){e=nfb(d);c=$eb(d,e,true);b=Jlb(c.a);++f;}return $eb(a,e,false)}
    function QR(a){var b,c,d;this.a=new Wub;this.e=new vtb;this.f=0;for(c=0,d=a.length;c<d;++c){b=a[c];!this.g&&(this.g=b);OR(this,b);}}
    function dfb(a){Teb(this);this.c=a.c;this.f=a.f;this.e=a.e;this.k=a.k;this.d=a.d;this.g=Eo(a.g);this.j=a.j;this.i=a.i;this.b=Eo(a.b);}
    function oU(a){switch(a.e){case 1:return sK(),rK;case 4:return sK(),oK;case 2:return sK(),pK;case 3:return sK(),nK;}return sK(),qK}
    function Xdb(a,b){if(_db(a,b)){stb(a.g,b);return true}b.g!=(sN(),qN)&&stb(a.i,b);b.e.c.length==0?stb(a.c,b):stb(a.b,b);return false}
    function wU(a,b){var c,d;Fxb(0,a.c.length);c=Ye(b,xv(UF,syb,1,b.a.Y(),4,1));d=c.length;if(d==0){return false}gxb(a.c,0,c);return true}
    function Zkb(a,b){var c=0;while(!b[c]||b[c]==''){c++;}var d=b[c++];for(;c<b.length;c++){if(!b[c]||b[c]==''){continue}d+=a+b[c];}return d}
    function yt(){var a;if(ut!=0){a=pt();if(a-vt>2000){vt=a;wt=$wnd.setTimeout(Et,10);}}if(ut++==0){Ht((Gt(),Ft));return true}return false}
    function kS(a){var b,c;for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.j.d=-b.j.d-b.j.c;!!b.o&&(b.g.a=-b.g.a+b.o.j.c);}fS(a);}
    function D2(a,b){var c;c=a;while(b.b<b.d.Y()&&c==a){c=(Bxb(b.b<b.d.Y()),Wv(b.d.sb(b.c=b.b++),7)).g;}c==a||(Bxb(b.b>0),b.a.sb(b.c=--b.b));}
    function a$(a){var b;if(!LM(Wv(rJ(a,(eM(),TL)),28))){return}b=a.c;b$((Cxb(0,b.c.length),Wv(b.c[0],16)));b$(Wv(yU(b,b.c.length-1),16));}
    function NV(a,b,c){nI(c,'Compound graph preprocessor',1);a.a=new xk;RV(a,b,null);MV(a,b);sJ(b,(Rib(),bib),a.a);a.a=null;Ymb(a.b);pI(c);}
    function P0(a){var b,c;b=Wv(Dm(Uh(iX(a))),12);c=Wv(Dm(Uh(mX(a))),12);return !Ckb(Ixb(Xv(rJ(b,(Rib(),Iib)))))||!Ckb(Ixb(Xv(rJ(c,Iib))))}
    function O6(a,b,c){if(b.g==(CX(),AX)&&c.g==zX){a.d=L6(b,(sN(),pN));a.b=L6(b,$M);}if(c.g==AX&&b.g==zX){a.d=L6(c,(sN(),$M));a.b=L6(c,pN);}}
    function _8(a,b,c){var d,e,f,g;f=b.g;g=c.g;if(f!=g){return f.e-g.e}else {d=a.a[b.k];e=a.a[c.k];return !d&&!e?0:!d?-1:!e?1:glb(d.a,e.a)}}
    function jab(a,b,c,d){var e,f,g,h;f=b;e=c-1;while(f<=e){g=f+e>>>1;h=a[g];if(h<d){f=g+1;}else if(h>d){e=g-1;}else {return g}}return -(f+1)}
    function Id(a){return aw(a,137)?(ypb(),new dsb(Wv(a,137))):aw(a,18)?(ypb(),new Frb(Wv(a,18))):aw(a,20)?Hpb(Wv(a,20)):(ypb(),new zqb(a))}
    function Kd(a,b,c){return aw(c,137)?new Lg(a,b,Wv(c,137)):aw(c,18)?new Kg(a,b,Wv(c,18)):aw(c,20)?Ld(a,b,Wv(c,20),null):new _f(a,b,c,null)}
    function tn(b,c){var d;d=b.ub(c);try{return d.H()}catch(a){a=OH(a);if(aw(a,74)){throw new okb("Can't get element "+c)}else throw NH(a)}}
    function rp(b,c){mp();_b(b);try{return b.cb(c)}catch(a){a=OH(a);if(aw(a,119)){return null}else if(aw(a,76)){return null}else throw NH(a)}}
    function Qu(f,a){var b=f.a;var c;a=String(a);b.hasOwnProperty(a)&&(c=b[a]);var d=(ev(),dv)[typeof c];var e=d?d(c):kv(typeof c);return e}
    function kgb(a,b,c,d){if(b<c){a.b=0.5*(b+c);a.p=UAb*a.b+0.9*b;a.a=UAb*a.b+0.9*c;}else {a.b=0.5*(b+d);a.p=UAb*a.b+0.9*d;a.a=UAb*a.b+0.9*b;}}
    function Vr(a){Ch.call(this,a);this.b=new sk(a,false,null,(Gh(),Fh),false,null,Fh);this.a=new Os(null,1);ds(this.a,this.a);this.c=new Vs;}
    function xT(a){vT();this.c=new GU;this.d=a;switch(a.e){case 0:case 2:this.a=Epb(uT);this.b=Uzb;break;case 3:case 1:this.a=uT;this.b=Vzb;}}
    function iK(){iK=iI;cK=new jK('AUTOMATIC',0);fK=new jK(ozb,1);gK=new jK(pzb,2);hK=new jK('TOP',3);dK=new jK('BOTTOM',4);eK=new jK(qzb,5);}
    function Pxb(a){Nxb();var b,c,d;c=':'+a;d=Mxb[c];if(!(d===undefined)){return d}d=Kxb[c];b=d===undefined?Oxb(a):d;Qxb();Mxb[c]=b;return b}
    function bk(a,b,c,d,e,f,g){hi();var h,i;i=g.length+6;h=new HU(i);zpb(h,Bv(tv(UF,1),syb,1,4,[a,b,c,d,e,f]));zpb(h,g);return Yj(new Tob(h))}
    function GZ(a){var b;b=Wv(rJ(a,(eM(),JL)),18);if(b.V()){return}if(b.kb((oM(),gM))){b.nb(gM);b.ib(iM);}else if(b.kb(iM)){b.nb(iM);b.ib(gM);}}
    function HZ(a){var b;b=Wv(rJ(a,(eM(),JL)),18);if(b.V()){return}if(b.kb((oM(),nM))){b.nb(nM);b.ib(lM);}else if(b.kb(lM)){b.nb(lM);b.ib(nM);}}
    function f$(a,b){var c,d,e,f;e=a.g;c=Ixb(Yv(rJ(a,(Rib(),Cib))));f=b.g;d=Ixb(Yv(rJ(b,Cib)));return f!=(CX(),xX)?-1:e!=xX?1:c==d?0:c<d?-1:1}
    function g6(a,b,c){var d,e;d=Slb(h6(a,b.d),h6(a,b.c));e=Plb(h6(a,b.d),h6(a,b.c));return $s(Or(Bh(c,Elb(d),(Gh(),Fh),Elb(e),Fh),(qs(),ps)))}
    function qp(b,c){mp();_b(b);try{return b.R(c)}catch(a){a=OH(a);if(aw(a,119)){return false}else if(aw(a,76)){return false}else throw NH(a)}}
    function Qh(b,c){Oh();_b(b);try{return hnb(b,c)}catch(a){a=OH(a);if(aw(a,119)){return false}else if(aw(a,76)){return false}else throw NH(a)}}
    function nab(a,b){if(a.e<b.e){return -1}else if(a.e>b.e){return 1}else if(a.f<b.f){return -1}else if(a.f>b.f){return 1}return txb(a)-txb(b)}
    function QZ(a){switch(a.e){case 1:return sN(),rN;case 4:return sN(),$M;case 3:return sN(),ZM;case 2:return sN(),pN;default:return sN(),qN;}}
    function Ki(a){var b,c;b=cxb(a.c,a.c.length);switch(b.length){case 0:return Fi;case 1:c=new Er(b[0]);return c;default:return new gr(Ti(b));}}
    function EY(a){var b,c,d,e;d=xv(ow,syb,64,a.c.length,0,1);e=0;for(c=new Tob(a);c.a<c.c.c.length;){b=Wv(Rob(c),64);d[e++]=b;}return new CY(d)}
    function sW(a){var b,c;if(!a.b){a.b=Do(a.a.b.c.length);for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),33);vU(a.b,new yW(b));}}return a.b}
    function K6(a,b){var c,d,e;if(a.e){return 1}c=0;for(e=new Tob(b.f);e.a<e.c.c.length;){d=Wv(Rob(e),7);c+=d.b.c.length+d.e.c.length;}return c}
    function I6(a){var b,c,d,e;b=false;e=false;for(d=new Tob(a.f);d.a<d.c.c.length;){c=Wv(Rob(d),7);b=b|c.g==(sN(),ZM);e=e|c.g==rN;}return b&&e}
    function bV(a){var b,c;this.b=new GU;this.c=a;this.a=false;for(c=new Tob(a.b);c.a<c.c.c.length;){b=Wv(Rob(c),9);this.a=this.a|b.g==(CX(),AX);}}
    function uX(a){cX.call(this);this.g=(CX(),AX);this.f=(Mh(6,Vyb),new HU(6));this.c=(Mh(2,Vyb),new HU(2));this.e=new ZW;this.b=new ZW;this.a=a;}
    function ffb(a,b,c,d,e,f){Teb(this);this.e=a;this.f=b;this.d=c;this.c=d;this.g=e;this.b=f;this.j=Ixb(Yv(e.mb().H()));this.i=Ixb(Yv(rl(e)));}
    function Lh(a,b){if(a==null){throw new Wlb('null key in entry: null='+b)}else if(b==null){throw new Wlb('null value in entry: '+a+'=null')}}
    function Hab(){Hab=iI;Eab=VQ(new WQ,(d0(),v_));Fab=new DJ('linearSegments.inputPrio',Elb(0));Gab=new DJ('linearSegments.outputPrio',Elb(0));}
    function Cd(a){var b,c,d,e;for(c=(e=(new aob(a.b)).a.bb().mb(),new fob(e));c.a.G();){b=(d=Wv(c.a.H(),21),Wv(d.zb(),19));b.Q();}Ymb(a.b);a.c=0;}
    function WI(a,b){var c,d;Fxb(b,a.b);if(b>=a.b>>1){d=a.c;for(c=a.b;c>b;--c){d=d.b;}}else {d=a.a.a;for(c=0;c<b;++c){d=d.a;}}return new cvb(a,b,d)}
    function cU(a,b){var c,d,e;e=new FI;for(d=a.mb();d.G();){c=Wv(d.H(),55);UT(c,e.a,0);e.a+=c.e.a+b;e.b=Nlb(e.b,c.e.b);}e.b>0&&(e.b+=b);return e}
    function eU(a,b){var c,d,e;e=new FI;for(d=a.mb();d.G();){c=Wv(d.H(),55);UT(c,0,e.b);e.b+=c.e.b+b;e.a=Nlb(e.a,c.e.a);}e.a>0&&(e.a+=b);return e}
    function tub(a,b,c){var d,e,f;e=Wv(Smb(a.c,b),176);if(!e){d=new Jub(a,b,c);Umb(a.c,b,d);Gub(d);return null}else {f=job(e,c);uub(a,e);return f}}
    function y3(a,b){if(!Keb(a.b).kb(b.c)){return false}return Oeb(a.b)?!(rgb(b.d,a.c,a.a)&&rgb(b.a,a.c,a.a)):rgb(b.d,a.c,a.a)&&rgb(b.a,a.c,a.a)}
    function s6(a,b){return a.c<b.c||a.c==b.c&&d6(a.a)&&d6(b.a)&&h6(a.d,q6(a.a,a.b))>h6(a.d,q6(b.a,b.b))?-1:a.c==b.c&&q6(a.a,a.b)==q6(a.a,a.b)?0:1}
    function L5(a,b,c){if(a.e){switch(a.b){case 1:g5(a.c,b,c);break;case 0:h5(a.c,b,c);}}else {e5(a.c,b,c);}a.a[b.k][c.k]=a.c.i;a.a[c.k][b.k]=a.c.e;}
    function LW(a,b,c){switch(c.e){case 1:a.a=b.a/2;a.b=0;break;case 2:a.a=b.a;a.b=b.b/2;break;case 3:a.a=b.a/2;a.b=b.b;break;case 4:a.a=0;a.b=b.b/2;}}
    function Jeb(a){switch(a.e){case 8:return sN(),$M;case 9:return sN(),pN;case 10:return sN(),ZM;case 11:return sN(),rN;default:return sN(),qN;}}
    function Qt(a){var b,c,d;b='Ot';d=Slb(a.length,5);for(c=0;c<d;c++){if(emb(a[c].d,b)){a.length>=c+1&&(a.splice(0,c+1),undefined);break}}return a}
    function Vv(a,b){if(ew(a)){return !!Uv[b]}else if(a._c){return !!a._c[b]}else if(cw(a)){return !!Tv[b]}else if(bw(a)){return !!Sv[b]}return false}
    function jQ(){RP();this.i=(mp(),new ntb);this.a=new ntb;this.k=new ntb;this.j=new ntb;this.b=new ntb;this.n=new ntb;this.f=new ntb;this.e=new ntb;}
    function r$(a,b){var c,d;if(b.a.R(a)){return}else {d=Wv(rJ(a,(Rib(),hib)),32);c=Wv(yU(a.f,0),7);d==(sN(),$M)?QX(c,pN):d==pN&&QX(c,$M);b.a.db(a,b);}}
    function bbb(a){var b,c;c=Plb(1,Wv(rJ(a,(Rib(),Eib)),24).a);a.c.f.g==(CX(),AX)&&a.d.f.g==AX?(b=1):a.c.f.g==AX||a.d.f.g==AX?(b=2):(b=8);return c*b}
    function P1(a){var b,c,d,e,f;f=Wv(rJ(a,(Rib(),uib)),7);b=Wv(FU(a.b,xv(dB,gAb,12,a.b.c.length,0,1)),47);for(d=0,e=b.length;d<e;++d){c=b[d];eW(c,f);}}
    function Q1(a){var b,c,d,e,f;c=Wv(rJ(a,(Rib(),uib)),7);b=Wv(FU(a.e,xv(dB,gAb,12,a.e.c.length,0,1)),47);for(e=0,f=b.length;e<f;++e){d=b[e];dW(d,c);}}
    function Cfb(a){var b,c;c=a.i;b=vI(new HI(c.a,c.b),a.j);this.d=Qlb(c.b,b.b);this.a=Nlb(c.b,b.b);this.b=Qlb(c.a,b.a);this.c=Nlb(c.a,b.a);}
    function ipb(a,b,c,d){var e,f,g,h;!d&&(d=(hsb(),hsb(),gsb));e=(f=epb(a,b,c),g=(h=new Array(c-b),Cv(h,a)),dxb(a,b,g,0,f,true),g);jpb(e,a,b,c,-b,d);}
    function FU(a,b){var c,d,e;e=a.c.length;b.length<e&&(b=(d=new Array(e),Cv(d,b)));for(c=0;c<e;++c){Av(b,c,a.c[c]);}b.length>e&&Av(b,e,null);return b}
    function npb(a,b){var c,d,e;e=a.a.length;b.length<e&&(b=(d=new Array(e),Cv(d,b)));for(c=0;c<e;++c){Av(b,c,a.a[c]);}b.length>e&&Av(b,e,null);return b}
    function xb(a){return ew(a)?a:cw(a)?ilb((Dxb(a),a)):bw(a)?Bkb(Ckb((Dxb(a),a))):_v(a)?a.w():zv(a)?ob(a):a.toString?a.toString():'[JavaScriptObject]'}
    function A6(a){var b,c,d,e,f;f=0;for(c=a.b,d=0,e=c.length;d<e;++d){b=c[d];b.g==(CX(),zX)||Umb(a.c,b,Elb(f++));E6(a,b,a.d,(sN(),$M));E6(a,b,a.j,pN);}}
    function kbb(){kbb=iI;jbb=new lbb('SIMPLE',0);gbb=new lbb(zAb,1);hbb=new lbb('LINEAR_SEGMENTS',2);fbb=new lbb('BRANDES_KOEPF',3);ibb=new lbb(DAb,4);}
    function Xib(){Xib=iI;Wib=new Yib(tzb,0);Sib=new Yib('FIRST',1);Tib=new Yib('FIRST_SEPARATE',2);Uib=new Yib('LAST',3);Vib=new Yib('LAST_SEPARATE',4);}
    function Ndb(){Ndb=iI;Mdb=new Vdb;Kdb=TQ(new WQ,(d0(),A_));Ldb=PQ(TQ(new WQ,R_),Q_);Idb=PQ(UQ(TQ(SQ(new WQ,D_),F_),H_),E_);Jdb=PQ(UQ(new WQ,H_),q_);}
    function ceb(a){var b,c,d,e;for(c=(e=(new Snb(a.d.a)).a.bb().mb(),new Ynb(e));c.a.G();){b=(d=Wv(c.a.H(),21),Wv(d.yb(),12));vU(b.c.e,b);vU(b.d.b,b);}}
    function vvb(a,b){var c,d;vxb(b>0);if((b&-b)==b){return hw(b*wvb(a,31)*4.6566128730773926E-10)}do{c=wvb(a,31);d=c%b;}while(c-d+(b-1)<0);return hw(d)}
    function zcb(a,b){if(a.c.f==b){return a.d.f}else if(a.d.f==b){return a.c.f}else {throw new slb('Node '+b+' is neither source nor target of edge '+a)}}
    function Ekb(a,b,c){vxb(a>=0&&a<=1114111);if(a>=ayb){b[c++]=55296+(a-ayb>>10&1023)&byb;b[c]=56320+(a-ayb&1023)&byb;return 2}else {b[c]=a&byb;return 1}}
    function Ol(a,b){Il();var c,d;while(a.G()){if(!b.G()){return false}c=a.H();d=b.H();if(!(gw(c)===gw(d)||c!=null&&rb(c,d))){return false}}return !b.G()}
    function JS(a){var b,c,d;Vvb(a.b.a);a.a=xv(kA,syb,25,a.c.b.a.b.c.length,0,1);b=0;for(d=new Tob(a.c.b.a.b);d.a<d.c.c.length;){c=Wv(Rob(d),25);c.k=b++;}}
    function PT(a){var b,c,d,e;Gpb(a.c,a.a);for(e=new Tob(a.c);e.a<e.c.c.length;){d=Rob(e);for(c=new Tob(a.b);c.a<c.c.c.length;){b=Wv(Rob(c),160);b.Ec(d);}}}
    function zW(a){var b,c;if(!a.a){a.a=Do(Wv(a.e,9).c.c.length);for(c=new Tob(Wv(a.e,9).c);c.a<c.c.c.length;){b=Wv(Rob(c),33);vU(a.a,new yW(b));}}return a.a}
    function DW(a){var b,c;if(!a.b){a.b=Do(Wv(a.e,7).c.c.length);for(c=new Tob(Wv(a.e,7).c);c.a<c.c.c.length;){b=Wv(Rob(c),33);vU(a.b,new yW(b));}}return a.b}
    function F6(a){this.b=a;this.c=(mp(),new ntb);this.i=new ntb;this.d=new ntb;this.j=new ntb;this.k=gw(rJ(hX(a[0]),(eM(),uL)))===gw((NK(),JK));A6(this);}
    function sgb(a){switch(a.e){case 1:return 4.71238898038469;default:case 2:return 0;case 3:return 1.5707963267948966;case 4:return 3.141592653589793;}}
    function Ql(a){Il();var b;b=Kl(a);if(!Cm(a)){throw new okb('position (0) must be less than the number of elements that remained ('+b+')')}return Dm(a)}
    function un(b,c){var d,e;d=b.ub(c);try{e=d.H();d.I();return e}catch(a){a=OH(a);if(aw(a,74)){throw new okb("Can't remove element "+c)}else throw NH(a)}}
    function Ye(a,b){var c,d,e,f;f=a.Y();b.length<f&&(b=(e=new Array(f),Cv(e,b)));d=a.mb();for(c=0;c<f;++c){Av(b,c,d.H());}b.length>f&&Av(b,f,null);return b}
    function qX(a,b,c){if(!!c&&(b<0||b>c.a.c.length)){throw new slb('index must be >= 0 and <= layer node count')}!!a.d&&BU(a.d.a,a);a.d=c;!!c&&uU(c.a,b,a);}
    function Zvb(a,b,c,d,e,f,g,h){var i,j;if(!d){return}i=d.a[0];!!i&&Zvb(a,b,c,i,e,f,g,h);$vb(a,c,d.d,e,f,g,h)&&b.ib(d);j=d.a[1];!!j&&Zvb(a,b,c,j,e,f,g,h);}
    function Gxb(a,b,c){if(a<0){throw new okb(jyb+a+' < 0')}if(b>c){throw new okb('toIndex: '+b+' > size '+c)}if(a>b){throw new slb(jyb+a+' > toIndex: '+b)}}
    function ee(a,b){var c,d,e;c=b.yb();e=b.zb();d=a.cb(c);if(!(gw(e)===gw(d)||e!=null&&rb(e,d))){return false}if(d==null&&!a.R(c)){return false}return true}
    function h1(a,b,c){var d;d=b.c.f;if(d.g==(CX(),zX)){sJ(a,(Rib(),qib),Wv(rJ(d,qib),7));sJ(a,rib,Wv(rJ(d,rib),7));}else {sJ(a,(Rib(),qib),b.c);sJ(a,rib,c.d);}}
    function w2(a,b,c){var d;d=b.c.f;if(d.g==(CX(),zX)){sJ(a,(Rib(),qib),Wv(rJ(d,qib),7));sJ(a,rib,Wv(rJ(d,rib),7));}else {sJ(a,(Rib(),qib),b.c);sJ(a,rib,c.d);}}
    function at(a,b,c){var d,e,f,g,h;bt(a);for(e=(a.i==null&&(a.i=xv(_F,Txb,46,0,0,1)),a.i),f=0,g=e.length;f<g;++f){d=e[f];at(d);}h=a.e;!!h&&at(h);}
    function yv(a,b){var c=new Array(b);var d;switch(a){case 11:case 12:d=0;break;case 13:d=false;break;default:return c;}for(var e=0;e<b;++e){c[e]=d;}return c}
    function P5(a){var b,c,d,e;e=xv(qB,Txb,51,a.a.length,0,2);for(c=0;c<e.length;c++){d=a.a[c].length;b=xv(qB,Nzb,9,d,0,1);Gmb(a.a[c],0,b,0,d);e[c]=b;}return e}
    function AW(a){var b,c;if(!a.b){a.b=Do(Wv(a.e,9).f.c.length);for(c=new Tob(Wv(a.e,9).f);c.a<c.c.c.length;){b=Wv(Rob(c),7);vU(a.b,new FW(b,a.c));}}return a.b}
    function sp(b,c){mp();_b(b);try{return ew(c)?Xmb(b,c):Mtb(b.d,c)}catch(a){a=OH(a);if(aw(a,119)){return null}else if(aw(a,76)){return null}else throw NH(a)}}
    function Blb(a){var b;b=(Ilb(),Hlb);return b[a>>>28]|b[a>>24&15]<<4|b[a>>20&15]<<8|b[a>>16&15]<<12|b[a>>12&15]<<16|b[a>>8&15]<<20|b[a>>4&15]<<24|b[a&15]<<28}
    function ZV(a,b,c){var d,e;if(b.c==(djb(),bjb)&&c.c==ajb){return -1}else if(b.c==ajb&&c.c==bjb){return 1}d=aW(b.a,a.a);e=aW(c.a,a.a);return b.c==bjb?e-d:d-e}
    function L7(a){var b,c,d,e,f;e=$xb;f=null;for(d=new Tob(a.d);d.a<d.c.c.length;){c=Wv(Rob(d),89);if(c.c.j^c.d.j){b=c.d.e-c.c.e-c.a;if(b<e){e=b;f=c;}}}return f}
    function $vb(a,b,c,d,e,f,g){var h,i;if(b.Xc()&&(i=a.a.$b(c,d),i<0||!e&&i==0)){return false}if(b.Yc()&&(h=a.a.$b(c,f),h>0||!g&&h==0)){return false}return true}
    function Yj(a){hi();var b,c;if(!a.G()){return kr(),jr}c=a.H();if(!a.G()){return new Gr(c)}b=new Wub;stb(b,_b(c));do{stb(b,_b(a.H()));}while(a.G());return ck(b)}
    function m6(a,b,c){a.e=b;a.a=c;a.d=n6(a,(sN(),ZM));a.d+=n6(a,rN);j6(a,b,c,ZM,a.f);j6(a,b,c,rN,a.n);a.b=n6(a,ZM);a.b+=n6(a,rN);j6(a,c,b,ZM,a.f);j6(a,c,b,rN,a.n);}
    function hmb(a){var b,c,d;c=(bmb(),a.length);d=0;while(d<c&&a.charCodeAt(d)<=32){++d;}b=c;while(b>d&&a.charCodeAt(b-1)<=32){--b;}return d>0||b<c?a.substr(d,b-d):a}
    function dxb(a,b,c,d,e,f){var g,h,i;if(gw(a)===gw(c)){a=a.slice(b,b+e);b=0;}for(h=b,i=b+e;h<i;){g=h+10000<i?h+10000:i;e=g-h;bxb(c,d,f?e:0,a.slice(h,g));h=g;d+=e;}}
    function Nv(a){var b,c,d;if(Iv(a,(Rv(),Qv))<0){return -Fv((b=~a.l+1&azb,c=~a.m+(b==0?1:0)&azb,d=~a.h+(b==0&&c==0?1:0)&bzb,Ev(b,c,d)))}return a.l+a.m*czb+a.h*dzb}
    function JW(a,b){var c;c=a.f;switch(b.e){case 1:return -(a.i.b+a.j.b);case 2:return a.i.a-c.j.a;case 3:return a.i.b-c.j.b;case 4:return -(a.i.a+a.j.a);}return 0}
    function KM(){KM=iI;JM=new NM(szb,0);IM=new NM('FREE',1);HM=new NM('FIXED_SIDE',2);EM=new NM('FIXED_ORDER',3);GM=new NM('FIXED_RATIO',4);FM=new NM('FIXED_POS',5);}
    function ZT(a,b){var c,d,e,f;c=Wv(rJ(b,(Rib(),fib)),18);f=Wv(Dd(WT,c),18);for(e=f.mb();e.G();){d=Wv(e.H(),18);if(!Wv(Dd(a.a,d),20).V()){return false}}return true}
    function HY(a,b,c){this.b=new Dh;this.i=new GU;this.d=new JY(this);this.g=a;this.a=b.c.length;this.c=b;this.e=Wv(yU(this.c,this.c.c.length-1),9);this.f=c;FY(this);}
    function Pgb(){Pgb=iI;Lgb=new Rgb('ALWAYS_UP',0);Kgb=new Rgb('ALWAYS_DOWN',1);Ngb=new Rgb('DIRECTION_UP',2);Mgb=new Rgb('DIRECTION_DOWN',3);Ogb=new Rgb('SMART',4);}
    function Iv(a,b){var c,d,e,f,g,h,i,j;i=a.h>>19;j=b.h>>19;if(i!=j){return j-i}e=a.h;h=b.h;if(e!=h){return e-h}d=a.m;g=b.m;if(d!=g){return d-g}c=a.l;f=b.l;return c-f}
    function K7(a){var b,c,d,e;for(c=(e=(new Snb(a.p.a)).a.bb().mb(),new Ynb(e));c.a.G();){b=(d=Wv(c.a.H(),21),Wv(d.yb(),89));if(b.e&&a.b[b.b]<0){return b}}return null}
    function TN(a,b){var c,d,e,f,g;d=Qlb(a.d,b.d);f=Qlb(a.e,b.e);e=Nlb(a.d+a.c,b.d+b.c);g=Nlb(a.e+a.b,b.e+b.b);if(e<d){c=d;d=e;e=c;}if(g<f){c=f;f=g;g=c;}SN(a,d,f,e-d,g-f);}
    function hQ(a,b){var c;if(Gzb in a.a){c=Pu(a,Gzb);if(!c.kc()){throw new GQ("The 'properties' property of a graph element must be an object.",c,a)}iQ(c.kc(),b,true);}}
    function HS(a,b){var c,d,e;d=a.b.j.e;a.a||(d+=a.b.j.b);e=b.b.j.e;b.a||(e+=b.b.j.b);c=glb(d,e);if(c==0){if(!a.a&&b.a){return -1}else if(!b.a&&a.a){return 1}}return c}
    function kX(a){var b,c;switch(Wv(rJ(hX(a),(Mjb(),ujb)),174).e){case 0:b=a.i;c=a.j;return new HI(b.a+c.a/2,b.b+c.b/2);case 1:return new II(a.i);default:return null;}}
    function RX(){LX();cX.call(this);this.g=(sN(),qN);this.a=new FI;this.d=new ZW;this.c=(Mh(2,Vyb),new HU(2));this.b=(Mh(4,Vyb),new HU(4));this.e=(Mh(4,Vyb),new HU(4));}
    function G6(a,b,c){a.d=0;a.b=0;P6(a,b,c);b.g==(CX(),BX)&&c.g==zX?M6(b).g==(sN(),$M)?(a.d=1):(a.b=1):c.g==BX&&b.g==zX&&(M6(c).g==(sN(),$M)?(a.b=1):(a.d=1));O6(a,b,c);}
    function h9(a,b){var c,d;for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),9);a.a[c.d.k][c.k].a=uvb(a.e);a.a[c.d.k][c.k].d=Ixb(a.a[c.d.k][c.k].a);a.a[c.d.k][c.k].b=1;}}
    function d9(a,b,c){var d,e,f;for(f=new Tob(b);f.a<f.c.c.length;){d=Wv(Rob(f),9);a.a[d.d.k][d.k].e=false;}for(e=new Tob(b);e.a<e.c.c.length;){d=Wv(Rob(e),9);c9(a,d,c);}}
    function Ydb(a,b){var c,d,e,f;c=0;d=0;for(f=new Tob(b.b);f.a<f.c.c.length;){e=Wv(Rob(f),33);c=Nlb(c,e.j.a);d+=e.j.b;}sJ(b,(Rib(),Lib),new HI(c,d));a.k<c&&(a.k=c);a.j+=d;}
    function Vbb(a,b){this.c=(mp(),new ntb);this.a=a;this.b=b;this.d=Wv(rJ(a,(Rib(),Kib)),134);gw(rJ(a,(Mjb(),hjb)))===gw((lcb(),kcb))?(this.e=new Jcb):(this.e=new Ccb);}
    function Z4(a,b){var c,d,e,f;e=0;for(d=0;d<b.length;d++){c=b[d];if(d<b.length-1){f=b[d+1];e+=$4(a,c,f);}e+=(a.d=new F6(c),x6(a.d));e+=(a.a=new k6(c),a6(a.a));}return e}
    function S6(a){switch(a.c.e){case 1:return LX(),HX;case 2:return LX(),FX;case 3:return LX(),JX;case 4:return LX(),KX;}throw new Imb("Can't filter on undefined side")}
    function Pr(b,c){var d;try{d=b.c.a;if(!ok(b.b,c)||!d){return 0}return Es(d,b.d,c)}catch(a){a=OH(a);if(aw(a,119)){return 0}else if(aw(a,76)){return 0}else throw NH(a)}}
    function J4(a){var b,c,d,e,f;for(d=new rnb((new inb(a.b)).a);d.b;){c=pnb(d);b=Wv(c.yb(),9);f=Wv(Wv(c.zb(),27).a,9);e=Wv(Wv(c.zb(),27).b,10);vI(BI(b.i),vI(xI(f.i),e));}}
    function B9(a,b,c){var d,e,f;d=glb(a.a[b.k],a.a[c.k]);if(d==0){e=Wv(rJ(b,(Rib(),oib)),20);f=Wv(rJ(c,oib),20);if(e.kb(c)){return -1}else if(f.kb(b)){return 1}}return d}
    function ogb(a,b){var c,d;d=vI(xI(a.i),a.a);c=a.f.j;switch(b.e){case 1:return -d.b;case 2:return -d.a+c.a;case 3:return -d.b+c.b;case 4:return -d.a;default:return 0;}}
    function Z8(a,b){var c,d,e,f;for(e=0;e<b.length;e++){e+1<b.length&&X8(a,b[e+1],(djb(),ajb));f=b[e];c=0;for(d=0;d<f.length;d++){Y8(a,f[d]);c+=a.Hc(f[d],c,(djb(),bjb));}}}
    function Mfb(){Mfb=iI;Lfb=UQ(UQ(RQ(new WQ,(d0(),__)),$_),a0);Hfb=PQ(UQ(TQ(SQ(new WQ,D_),F_),H_),E_);Jfb=TQ(new WQ,A_);Kfb=PQ(TQ(new WQ,R_),Q_);Ifb=PQ(UQ(new WQ,H_),q_);}
    function dI(b,c,d,e){cI();var f=aI;function g(){for(var a=0;a<f.length;a++){f[a]();}}
    if(b){try{Rxb(g)();}catch(a){b(c,a);}}else {Rxb(g)();}}
    function clb(a){blb==null&&(blb=/^\s*[+-]?(NaN|Infinity|((\d+\.?\d*)|(\.\d+))([eE][+-]?\d+)?[dDfF]?)\s*$/);if(!elb(blb,a)){throw new Ylb(dyb+a+'"')}return parseFloat(a)}
    function _gb(){_gb=iI;Ygb=new ahb(tzb,0);Xgb=new ahb('LEFTUP',1);$gb=new ahb('RIGHTUP',2);Wgb=new ahb('LEFTDOWN',3);Zgb=new ahb('RIGHTDOWN',4);Vgb=new ahb('BALANCED',5);}
    function zgb(){zgb=iI;ygb=new Agb('V_TOP',0);xgb=new Agb('V_CENTER',1);wgb=new Agb('V_BOTTOM',2);ugb=new Agb('H_LEFT',3);tgb=new Agb('H_CENTER',4);vgb=new Agb('H_RIGHT',5);}
    function YK(){YK=iI;WK=new ZK(tzb,0);UK=new ZK('DIRECTED',1);XK=new ZK('UNDIRECTED',2);SK=new ZK('ASSOCIATION',3);VK=new ZK('GENERALIZATION',4);TK=new ZK('DEPENDENCY',5);}
    function CX(){CX=iI;AX=new DX('NORMAL',0);zX=new DX('LONG_EDGE',1);xX=new DX('EXTERNAL_PORT',2);BX=new DX('NORTH_SOUTH_PORT',3);yX=new DX('LABEL',4);wX=new DX('BIG_NODE',5);}
    function wv(a,b,c,d,e,f,g){var h,i,j,k,l;k=e[f];j=f==g-1;h=j?d:0;l=yv(h,k);d!=9&&Bv(tv(a,g-f),b[f],c[f],h,l);if(!j){++f;for(i=0;i<k;++i){l[i]=wv(a,b,c,d,e,f,g);}}return l}
    function gX(a){var b,c,d;b=new GU;for(d=new Tob(a.f);d.a<d.c.c.length;){c=Wv(Rob(d),7);vU(b,Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[c.b,c.e]))))));}return _b(b),new Vh(b)}
    function b7(a,b,c){this.a=c;if(a>=b.length){throw new okb('Greedy SwitchDecider: Free layer layer not in graph.')}this.b=b[a];this.c=new r6(this.b);this.d=new R6(this.b);}
    function _n(a,b){var c;this.f=a;this.b=this.f.c;c=a.d;bc(b,c);if(b>=(c/2|0)){this.e=a.e;this.d=c;while(b++<c){Zn(this);}}else {this.c=a.a;while(b-->0){Yn(this);}}this.a=null;}
    function qS(a){var b,c,d;for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);d=b.j.d;b.j.d=b.j.e;b.j.e=d;d=b.j.c;b.j.c=b.j.b;b.j.b=d;d=b.g.a;b.g.a=b.g.b;b.g.b=d;}fS(a);}
    function f1(a,b){var c,d,e;d=new Fnb(a.b,0);while(d.b<d.d.Y()){c=(Bxb(d.b<d.d.Y()),Wv(d.d.sb(d.c=d.b++),33));e=Wv(rJ(c,(eM(),tL)),107);if(e==(EK(),BK)){vnb(d);vU(b.b,c);}}}
    function Vab(a,b,c){var d,e,f,g;g=zU(a.f,b,0);f=new Wab;f.b=c;d=new Fnb(a.f,g);while(d.b<d.d.Y()){e=(Bxb(d.b<d.d.Y()),Wv(d.d.sb(d.c=d.b++),9));e.k=c;vU(f.f,e);vnb(d);}return f}
    function Eq(a,b){Dq();var c,d,e;if(b.V()){return false}if(aw(b,207)){e=Wv(b,207);for(d=e.bb().mb();d.G();){c=Wv(d.H(),83);a.Bb(c.Zb(),c.Yb());}}else {Jl(a,b.mb());}return true}
    function MN(){MN=iI;KN=new NN('DEFAULT_MINIMUM_SIZE',0);LN=new NN('MINIMUM_SIZE_ACCOUNTS_FOR_INSETS',1);JN=new NN('COMPUTE_INSETS',2);IN=new NN('APPLY_ADDITIONAL_INSETS',3);}
    function MP(a){var b,c,d,e;c=a.a.b+2;e=xv(qz,Fzb,10,c,0,1);e[0]=xI(MX(a.c));d=WI(a.a,0);while(d.b!=d.d.c){b=Wv(_ub(d),10);e[d.a]=new HI(b.a,b.b);}e[c-1]=xI(MX(a.d));return e}
    function ge(a,b,c){var d,e,f;for(e=a.bb().mb();e.G();){d=Wv(e.H(),21);f=d.yb();if(gw(b)===gw(f)||b!=null&&rb(b,f)){if(c){d=new qob(d.yb(),d.zb());e.I();}return d}}return null}
    function f9(a,b,c){var d,e;d=a.a[b.d.k][b.k];e=a.a[c.d.k][c.k];if(d.a!=null&&e.a!=null){return flb(d.a,e.a)}else if(d.a!=null){return -1}else if(e.a!=null){return 1}return 0}
    function beb(a,b,c){var d,e,f;e=b.c;f=b.d;d=c;if(stb(a.a,b)){Xdb(a,e)&&(d=true);Xdb(a,f)&&(d=true);if(d){BU(b.c.e,b);BU(b.d.b,b);stb(a.d,b);}Ydb(a,b);return true}return false}
    function $eb(a,b,c){var d,e;e=Zeb(a,b);if(e==a.c){return Web(a,Yeb(a,b))}if(c){_eb(a,b,a.c-e);return Web(a,Yeb(a,b))}else {d=new dfb(a);_eb(d,b,a.c-e);return Web(d,Yeb(d,b))}}
    function $tb(){function b(){try{return (new Map).entries().next().done}catch(a){return false}}
    if(typeof Map===Zxb&&Map.prototype.entries&&b()){return Map}else {return _tb()}}
    function Dd(a,b){var c;c=Wv(Smb(a.b,b),19);!c&&(c=a.Z());return aw(c,137)?new Lg(a,b,Wv(c,137)):aw(c,18)?new Kg(a,b,Wv(c,18)):aw(c,20)?Ld(a,b,Wv(c,20),null):new _f(a,b,c,null)}
    function Gs(a){switch(Rs(a.e)-Rs(a.g)){case -2:Cs(a.g)>0&&(a.g=Ls(a.g));return Ks(a);case 2:Cs(a.e)<0&&(a.e=Ks(a.e));return Ls(a);default:a.d=1+Plb(Rs(a.e),Rs(a.g));return a;}}
    function k5(a,b){this.f=(mp(),new ntb);this.b=new ntb;this.j=new ntb;this.a=a;this.c=b;this.c>0&&j5(this,this.c-1,(sN(),ZM));this.c<this.a.length-1&&j5(this,this.c+1,(sN(),rN));}
    function jt(a){var b;if(a.c==null){b=gw(a.b)===gw(ht)?null:a.b;a.d=b==null?Wxb:dw(b)?mt(Zv(b)):ew(b)?'String':Ikb(tb(b));a.a=a.a+': '+(dw(b)?lt(Zv(b)):b+'');a.c='('+a.d+') '+a.a;}}
    function IY(a){var b,c,d,e;for(c=new Tob(a.a.c);c.a<c.c.c.length;){b=Wv(Rob(c),9);for(e=WI(Eo(b.c),0);e.b!=e.d.c;){d=Wv(_ub(e),33);rJ(d,(Rib(),uib))==null&&BU(b.c,d);}}return null}
    function e3(a,b){var c,d,e,f,g;g=new GU;for(d=Wv(qsb(a3,a),20).mb();d.G();){c=Wv(d.H(),75);xU(g,c.b);}Dpb(g);K2(g,a.a);for(f=new Tob(g);f.a<f.c.c.length;){e=Wv(Rob(f),7);Anb(b,e);}}
    function P7(a){var b,c,d,e;while(a.o.a.c.length!=0){c=Wv(Svb(a.o),27);d=Wv(c.a,61);b=Wv(c.b,89);e=c7(b,d);if(b.d==d){o7(e.g,b);d.e=e.e+b.a;}else {o7(e.c,b);d.e=e.e-b.a;}vU(a.e.a,d);}}
    function Tr(a,b,c){var d,e,f;Mh(c,'count');if(!ok(a.b,b)){Xb(c==0);return 0}f=a.c.a;if(!f){c>0&&Lr(a,b,c);return 0}e=xv(mw,Yyb,26,1,12,1);d=Ns(f,a.d,b,c,e);Us(a.c,f,d);return e[0]}
    function l$(a,b){var c,d,e,f,g;e=Wv(rJ(b,(Rib(),Jib)),15).a*Wv(rJ(b,(Mjb(),qjb)),15).a;g=a[0].i.a+a[0].j.a;for(f=1;f<a.length;f++){c=a[f].i;d=a[f].j;c.a<=g+e&&(c.a=g+e);g=c.a+d.a;}}
    function tvb(){tvb=iI;var a,b,c,d;qvb=xv(kw,hyb,26,25,12,1);rvb=xv(kw,hyb,26,33,12,1);d=1.52587890625E-5;for(b=32;b>=0;b--){rvb[b]=d;d*=0.5;}c=1;for(a=24;a>=0;a--){qvb[a]=c;c*=0.5;}}
    function f5(a){while(a.g.c!=0&&a.d.c!=0){if(o5(a.g).c>o5(a.d).c){a.i+=a.g.c;q5(a.d);}else if(o5(a.d).c>o5(a.g).c){a.e+=a.d.c;q5(a.g);}else {a.i+=n5(a.g);a.e+=n5(a.d);q5(a.g);q5(a.d);}}}
    function TP(a){if(!a){throw new EQ('An element is null. The origin of an edge could not be determined, this might be due to an inconsistency within the internal element mappings.')}}
    function UP(a,b){var c,d;Ymb(a.i);Ymb(a.a);Ymb(a.k);Ymb(a.j);Ymb(a.b);Ymb(a.n);Ymb(a.f);Ymb(a.e);if(a.d){d=Pu(a.d,OP.b);!!d&&!!d.ic()&&(a.c=d.ic().a);}c=fQ(a,b,null);bQ(a,b);return c}
    function kfb(a){var b,c,d,e,f,g;d=hfb(gfb(a));b=rAb;f=0;e=0;while(b>0.5&&f<50){e=ofb(d);c=$eb(d,e,true);b=Jlb(c.b);++f;}g=Yv(tn(Eo(a.g),Eo(a.g).b-1));return $eb(a,(Dxb(g),g)-e,false)}
    function lfb(a){var b,c,d,e,f,g;d=hfb(gfb(a));b=rAb;f=0;e=0;while(b>0.5&&f<50){e=nfb(d);c=$eb(d,e,true);b=Jlb(c.a);++f;}g=Yv(tn(Eo(a.g),Eo(a.g).b-1));return $eb(a,(Dxb(g),g)-e,false)}
    function Ze(a){var b,c,d,e;e=new Bmb('[');b=false;for(d=a.mb();d.G();){c=d.H();b?(e.a+=', ',e):(b=true);ymb(e,c===a?'(this Collection)':(bmb(),c==null?Wxb:xb(c)));}e.a+=']';return e.a}
    function ie(a){var b,c,d,e;e=new Bmb('{');b=false;for(d=a.bb().mb();d.G();){c=Wv(d.H(),21);b?(e.a+=', ',e):(b=true);ymb(e,je(a,c.yb()));e.a+='=';ymb(e,je(a,c.zb()));}e.a+='}';return e.a}
    function Ks(a){var b;dc(!!a.g);b=a.g;a.g=b.e;b.e=a;b.j=a.j;b.a=a.a;a.a=1+Zr(a.e)+Zr(a.g);a.j=PH(PH(a.c,Ts(a.e)),Ts(a.g));a.d=1+Plb(Rs(a.e),Rs(a.g));b.d=1+Plb(Rs(b.e),Rs(b.g));return b}
    function Ls(a){var b;dc(!!a.e);b=a.e;a.e=b.g;b.g=a;b.j=a.j;b.a=a.a;a.a=1+Zr(a.e)+Zr(a.g);a.j=PH(PH(a.c,Ts(a.e)),Ts(a.g));a.d=1+Plb(Rs(a.e),Rs(a.g));b.d=1+Plb(Rs(b.e),Rs(b.g));return b}
    function ZO(a){var b;if(!Qob(new Tob(AW(a.e)))){return}b=Wv(oW(a.e,(eM(),TL)),28);b==(KM(),FM)?SO(a.e):b==GM?TO(a.e):Ckb(Ixb(Xv(oW(a.e,AL))))||a.e.e.j.a==0&&a.e.e.j.b==0?UO(a.e):WO(a);}
    function s3(a,b,c){var d,e,f;e=new Tob(a);if(e.a<e.c.c.length){f=Wv(Rob(e),33);d=r3(f,b,c);while(e.a<e.c.c.length){f=Wv(Rob(e),33);Afb(d,r3(f,b,c));}return new Dfb(d)}else {return null}}
    function u2(a,b){var c,d,e,f,g,h;e=0;for(d=new Tob(b.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);for(g=new Tob(c.a);g.a<g.c.c.length;){f=Wv(Rob(g),9);h=f.j.a+f.e.c+f.e.b+a.b;e=e>h?e:h;}}return e}
    function sT(a,b){oT();var c;if(a.c==b.c){if(a.b==b.b||gT(a.b,b.b)){c=dT(a.b)?1:-1;if(a.a&&!b.a){return c}else if(!a.a&&b.a){return -c}}return xlb(a.b.e,b.b.e)}else {return glb(a.c,b.c)}}
    function nU(a){var b,c;c=xI(MI(Bv(tv(qz,1),Fzb,10,0,[a.f.i,a.i,a.a])));b=a.f.e;switch(a.g.e){case 1:c.b-=b.d;break;case 2:c.a+=b.c;break;case 3:c.b+=b.a;break;case 4:c.a-=b.b;}return c}
    function z6(a,b){var c;c=0;if(b.g==(CX(),BX)){if(C6(b).f!=a.a){D6(a,C6(b).f);a.e=true;}a.e?++a.g:(c+=a.f);}else if(b.g==zX){a.e?(c+=a.g):++a.f;}else if(b.g==AX){D6(a,b);a.e=false;}return c}
    function HV(a,b,c,d,e){var f,g,h,i;i=null;for(h=new Tob(d);h.a<h.c.c.length;){g=Wv(Rob(h),187);if(g!=c&&zU(g.e,e,0)!=-1){i=g;break}}f=IV(e);dW(f,c.b);eW(f,i.b);Fd(a.a,e,new XV(f,b,c.f));}
    function FZ(a){switch(Wv(rJ(a,(Mjb(),vjb)),85).e){case 1:sJ(a,vjb,(Xib(),Uib));break;case 2:sJ(a,vjb,(Xib(),Vib));break;case 3:sJ(a,vjb,(Xib(),Sib));break;case 4:sJ(a,vjb,(Xib(),Tib));}}
    function iQ(a,b,c){var d,e,f,g;if(a){for(e=(f=Nu(a,xv($F,Txb,2,0,5,1)),new wnb(new opb((new _u(a,f)).b)));e.b<e.d.Y();){d=(Bxb(e.b<e.d.Y()),$v(e.d.sb(e.c=e.b++)));g=Pu(a,d);wQ(b,d,g,c);}}}
    function G5(a,b,c){var d,e,f,g,h,i;e=1;while(e<a){e*=2;}i=2*e-1;e-=1;h=xv(mw,Yyb,26,i,12,1);d=0;for(g=0;g<b;g++){f=c[g]+e;++h[f];while(f>0){f%2>0&&(d+=h[f+1]);f=(f-1)/2|0;++h[f];}}return d}
    function aeb(a,b,c){var d,e,f,g;a.e=b;if(c){for(e=(g=(new Snb(a.a.a)).a.bb().mb(),new Ynb(g));e.a.G();){d=(f=Wv(e.a.H(),21),Wv(f.yb(),12));sJ(d,(Rib(),Mib),a.e);QX(d.c,b.a);QX(d.d,b.b);}}}
    function g4(){g4=iI;e4=new h4(tzb,0);b4=new h4(ozb,1);f4=new h4(pzb,2);d4=new h4('LEFT_RIGHT_CONSTRAINT_LOCKING',3);c4=new h4('LEFT_RIGHT_CONNECTION_LOCKING',4);a4=new h4('EDGE_LENGTH',5);}
    function N5(a,b,c,d){var e;this.b=d;this.e=a.a;e=b[c];this.d=vv(KH,[Txb,xAb],[227,26],13,[e.length,e.length],2);this.a=vv(mw,[Txb,Yyb],[52,26],12,[e.length,e.length],2);this.c=new k5(b,c);}
    function fwb(a,b,c,d){var e,f;f=b;e=f.d==null||a.a.$b(c.d,f.d)>0?1:0;while(f.a[e]!=c){f=f.a[e];e=a.a.$b(c.d,f.d)>0?1:0;}f.a[e]=d;d.b=c.b;d.a[0]=c.a[0];d.a[1]=c.a[1];c.a[0]=null;c.a[1]=null;}
    function ZQ(a,b,c){var d,e,f,g;nI(c,Tzb,1);NQ(a.d,b);g=sV(a.a,b);if(g.Y()==1){_Q(Wv(g.sb(0),55),c);}else {f=1/g.Y();for(e=g.mb();e.G();){d=Wv(e.H(),55);_Q(d,rI(c,f));}}qV(a.a,g,b);bR(b);pI(c);}
    function o6(a,b,c){var d,e,f,g,h;h=new U6(b,c);for(g=T6(h);g.G();){f=Wv(g.H(),7);for(e=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[f.b,f.e]))))));Cm(e);){d=Wv(Dm(e),12);bW(d)||l6(a,b,f,d);}}}
    function _6(a,b){var c,d,e;e=nX(a,b);for(d=e.mb();d.G();){c=Wv(d.H(),7);if(rJ(c,(Rib(),Bib))!=null||Cm(Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[c.b,c.e])))))))){return true}}return false}
    function Efb(a){var b,c;if(sl(a)){throw new slb(TAb)}for(c=WI(a,0);c.b!=c.d.c;){b=Wv(_ub(c),10);this.d=Qlb(this.d,b.b);this.c=Nlb(this.c,b.a);this.a=Nlb(this.a,b.b);this.b=Qlb(this.b,b.a);}}
    function wI(a,b,c){if(b<0||c<0){throw new slb('The highx must be bigger then lowx and the highy must be bigger then lowy')}a.a<0?(a.a=0):a.a>b&&(a.a=b);a.b<0?(a.b=0):a.b>c&&(a.b=c);return a}
    function nX(a,b){switch(b.e){case 1:return pl(a.f,(LX(),HX));case 2:return pl(a.f,(LX(),FX));case 3:return pl(a.f,(LX(),JX));case 4:return pl(a.f,(LX(),KX));default:return ypb(),ypb(),vpb;}}
    function K0(a){var b,c,d,e;for(e=(Il(),new Im(Dl(ul(a.a,new yl))));Cm(e);){d=Wv(Dm(e),9);d.g==(CX(),yX)&&sJ(d,(Rib(),pib),(kP(),hP));for(c=Uh(mX(d));Cm(c);){b=Wv(Dm(c),12);M0(b,(kP(),hP));}}}
    function L0(a){var b,c,d,e;for(e=(Il(),new Im(Dl(ul(a.a,new yl))));Cm(e);){d=Wv(Dm(e),9);d.g==(CX(),yX)&&sJ(d,(Rib(),pib),(kP(),gP));for(c=Uh(mX(d));Cm(c);){b=Wv(Dm(c),12);M0(b,(kP(),gP));}}}
    function cdb(a,b){this.b=new vtb;switch(a){case 0:this.d=new Ddb(this);break;case 1:this.d=new tdb(this);break;case 2:this.d=new ydb(this);break;default:throw new rlb;}this.c=b;this.a=0.2*b;}
    function uW(a){var b,c,d,e;if(!a.b){a.b=new GU;for(c=new Tob(a.a.c);c.a<c.c.c.length;){b=Wv(Rob(c),16);for(e=new Tob(b.a);e.a<e.c.c.length;){d=Wv(Rob(e),9);vU(a.b,new BW(d,a.c));}}}return a.b}
    function l5(a,b){var c,d,e;c=m5(b,a.e);d=Wv(Smb(a.g.f,c),24).a;e=a.a.c.length-1;if(a.a.c.length!=0&&Wv(yU(a.a,e),128).c==d){++Wv(yU(a.a,e),128).a;++Wv(yU(a.a,e),128).b;}else {vU(a.a,new v5(d));}}
    function lmb(a){bmb();var b,c;if(a>=ayb){b=55296+(a-ayb>>10&1023)&byb;c=56320+(a-ayb&1023)&byb;return String.fromCharCode(b)+(''+String.fromCharCode(c))}else {return String.fromCharCode(a&byb)}}
    function KV(a,b,c,d){var e,f,g;e=hX(c);f=PW(e);g=new RX;PX(g,c);switch(d.e){case 1:QX(g,tN(vN(f)));break;case 2:QX(g,vN(f));}sJ(g,(Rib(),tib),Wv(rJ(b,tib),15));sJ(b,uib,g);Umb(a.b,g,b);return g}
    function l6(a,b,c,d){var e;vU(a.c,new t6(a,c,d,Wv(Smb(a.k,c),24).a));if(d6(d)&&(b==a.e?d.d.f!=a.a&&d.c.f!=a.a:d.d.f!=a.e&&d.c.f!=a.e)){e=c==d.c?d.d:d.c;vU(a.c,new t6(a,e,d,Wv(Smb(a.k,e),24).a));}}
    function fe(a,b){var c,d,e;if(b===a){return true}if(!aw(b,57)){return false}e=Wv(b,57);if(a.Y()!=e.Y()){return false}for(d=e.bb().mb();d.G();){c=Wv(d.H(),21);if(!a._(c)){return false}}return true}
    function $Z(a,b){var c,d,e;d=new uX(a);qJ(d,b);sJ(d,(Rib(),gib),b);sJ(d,(eM(),TL),(KM(),FM));sJ(d,lL,(iK(),eK));sX(d,(CX(),xX));c=new RX;PX(c,d);QX(c,(sN(),rN));e=new RX;PX(e,d);QX(e,ZM);return d}
    function O7(a,b){var c,d,e;e=$xb;for(d=new Tob(m7(b));d.a<d.c.c.length;){c=Wv(Rob(d),89);if(c.e&&!a.c[c.b]){a.c[c.b]=true;e=Slb(e,O7(a,c7(c,b)));}}a.i[b.b]=a.j;a.g[b.b]=Slb(e,a.j++);return a.g[b.b]}
    function _eb(a,b,c){var d,e,f,g;g=a.g.tb();if(a.e){for(e=0;e<a.c;e++){g.H();}}else {for(e=0;e<a.c-1;e++){g.H();}}f=a.b.tb();d=Ixb(Yv(g.H()));while(d-b<RAb){d=Ixb(Yv(g.H()));f.H();}g.M();afb(a,c,b,f,g);}
    function Lt(b,c){var d,e,f,g;for(e=0,f=b.length;e<f;e++){g=b[e];try{g[1]?g[0].bd()&&(c=Kt(c,g)):g[0].bd();}catch(a){a=OH(a);if(aw(a,46)){d=a;Ct(aw(d,164)?Wv(d,164).cc():d);}else throw NH(a)}}return c}
    function Qr(a){var b,c,d;d=a.c.a;if(!d){return null}if(a.b.b){b=a.b.e;c=Ds(a.c.a,a.d,b);if(!c){return null}a.b.d==(Gh(),Fh)&&a.d.$b(b,c.b)==0&&(c=c.i);}else {c=a.a.i;}return c==a.a||!ok(a.b,c.b)?null:c}
    function t2(a,b){var c,d,e,f,g,h;f=0;for(d=new Tob(b.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);e=0;for(h=new Tob(c.a);h.a<h.c.c.length;){g=Wv(Rob(h),9);e+=g.j.b+g.e.a+g.e.d+a.a;}e-=a.a;f=f>e?f:e;}return f}
    function M7(a){var b,c,d,e,f;f=$xb;e=$xb;for(d=new Tob(m7(a));d.a<d.c.c.length;){c=Wv(Rob(d),89);b=c.d.e-c.c.e;c.d==a&&b<e?(e=b):b<f&&(f=b);}e==$xb&&(e=-1);f==$xb&&(f=-1);return new RJ(Elb(e),Elb(f))}
    function l8(a,b,c){var d,e,f,g,h;b.k=-1;for(h=oX(b,(djb(),bjb)).mb();h.G();){g=Wv(h.H(),7);for(e=new Tob(g.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);f=d.d.f;b!=f&&(f.k<0?c.ib(d):f.k>0&&l8(a,f,c));}}b.k=0;}
    function Bfb(a,b){if(0>b){throw new slb('Top must be smaller or equal to bottom.')}else if(0>a){throw new slb('Left must be smaller or equal to right.')}this.d=0;this.c=a;this.a=b;this.b=0;}
    function Ffb(a){var b,c,d;if(a.length==0){throw new slb(TAb)}for(c=0,d=a.length;c<d;++c){b=a[c];this.d=Qlb(this.d,b.b);this.c=Nlb(this.c,b.a);this.a=Nlb(this.a,b.b);this.b=Qlb(this.b,b.a);}}
    function g0(){d0();return Bv(tv(mC,1),uyb,37,0,[L_,o_,c0,m_,p_,__,z_,T_,j_,D_,S_,P_,I_,s_,h_,N_,W_,F_,G_,A_,Z_,V_,R_,r_,U_,$_,Y_,B_,x_,H_,k_,C_,a0,O_,t_,v_,J_,i_,l_,y_,u_,M_,Q_,E_,w_,X_,K_,n_,b0,q_])}
    function a5(a,b){var c,d,e,f,g,h,i,j,k;k=0;for(d=0,e=b.length;d<e;++d){c=b[d];for(g=0,h=c.length;g<h;++g){f=c[g];for(j=new Tob(f.f);j.a<j.c.c.length;){i=Wv(Rob(j),7);i.k=k++;}}}a.a=xv(mw,Yyb,26,k,12,1);}
    function Sl(a){Il();var b,c,d;b=a.H();if(!a.G()){return b}d=new zmb;d.a+='expected one element but was: <'+b;for(c=0;c<4&&a.G();c++){ymb(d,', '+a.H());}a.G()&&(d.a+=', ...',d);d.a+='>';throw new slb(d.a)}
    function x6(a){var b,c,d,e,f;b=0;for(d=a.b,e=0,f=d.length;e<f;++e){c=d[e];b+=z6(a,c);if(LM(Wv(rJ(c,(eM(),TL)),28))){nX(c,(sN(),$M)).mb().G()&&(b+=y6(a,c,$M));nX(c,pN).mb().G()&&(b+=y6(a,c,pN));}}return b}
    function i5(a,b,c,d){var e,f,g,h,i;if(d.d.c+d.e.c==0){for(g=a.a[a.c],h=0,i=g.length;h<i;++h){f=g[h];Umb(d,f,new r5(a,f,c));}}e=Wv(re(Ktb(d.d,b)),284);e.b=0;e.c=e.f;e.c==0||u5(Wv(yU(e.a,e.b),128));return e}
    function Dpb(a){var h;ypb();var b,c,d,e,f,g;if(aw(a,63)){for(e=0,d=a.Y()-1;e<d;++e,--d){h=a.sb(e);a.wb(e,a.sb(d));a.wb(d,h);}}else {b=a.tb();f=a.ub(a.Y());while(b.L()<f.N()){c=b.H();g=f.M();b.O(g);f.O(c);}}}
    function Wb(a,b,c){if(a<0||a>c){return Vb(a,c,'start index')}if(b<0||b>c){return Vb(b,c,'end index')}return fc('end index (%s) must not be less than start index (%s)',Bv(tv(UF,1),syb,1,4,[Elb(b),Elb(a)]))}
    function SP(a){if(!('id' in a.a)){throw new FQ("Every graph element must specify an 'id' property.",a)}if(!Pu(a,'id').lc()){throw new FQ("Invalid format for 'id'. Must be a string, was "+Pu(a,'id').$c,a)}}
    function f3(a,b){var c,d,e,f,g,h,i;i=a.b;for(d=Wv(qsb(a3,a),20).mb();d.G();){c=Wv(d.H(),75);for(h=(f=(new Snb(c.c.a)).a.bb().mb(),new Ynb(f));h.a.G();){g=(e=Wv(h.a.H(),21),Wv(e.yb(),7));Anb(b,g);J2(g,i);}}}
    function _db(a,b){var c,d,e;for(e=new Tob(b.e);e.a<e.c.c.length;){c=Wv(Rob(e),12);if(c.d.f!=a.f){return true}}for(d=new Tob(b.b);d.a<d.c.c.length;){c=Wv(Rob(d),12);if(c.c.f!=a.f){return true}}return false}
    function Z2(a){var b,c,d,e;We(a.c);We(a.b);We(a.a);for(e=(c=(new Snb(a.e)).a.bb().mb(),new Ynb(c));e.a.G();){d=(b=Wv(e.a.H(),21),Wv(b.yb(),60));if(d.c!=2){Wsb(a.a,d);d.c==0&&Wsb(a.c,d);}Wsb(a.b,d);}a.d=false;}
    function mr(b,c){var d;if(b===c){return true}if(aw(c,18)){d=Wv(c,18);try{return b.Y()==d.Y()&&b.lb(d)}catch(a){a=OH(a);if(aw(a,76)){return false}else if(aw(a,119)){return false}else throw NH(a)}}return false}
    function Ltb(a,b,c){var d,e,f,g;g=b==null?0:a.b.Vc(b);e=(d=Ttb(a.a,g),d==null?[]:d);if(e.length==0){Vtb(a.a,g,e);}else {f=Itb(a,b,e);if(f){return f.Ab(c)}}Av(e,e.length,new qob(b,c));++a.c;msb(a.b);return null}
    function Vb(a,b,c){if(a<0){return fc(ryb,Bv(tv(UF,1),syb,1,4,[c,Elb(a)]))}else if(b<0){throw new slb(tyb+b)}else {return fc('%s (%s) must not be greater than size (%s)',Bv(tv(UF,1),syb,1,4,[c,Elb(a),Elb(b)]))}}
    function Ub(a,b){if(a<0){return fc(ryb,Bv(tv(UF,1),syb,1,4,['index',Elb(a)]))}else if(b<0){throw new slb(tyb+b)}else {return fc('%s (%s) must be less than size (%s)',Bv(tv(UF,1),syb,1,4,['index',Elb(a),Elb(b)]))}}
    function jW(a){var b,c,d,e;e=xv(qB,Txb,51,a.c.c.length,0,2);d=new Fnb(a.c,0);while(d.b<d.d.Y()){b=(Bxb(d.b<d.d.Y()),Wv(d.d.sb(d.c=d.b++),16));c=d.b-1;e[c]=Wv(FU(b.a,xv(qB,Nzb,9,b.a.c.length,0,1)),51);}return e}
    function w3(a,b,c,d,e){this.c=e;this.d=b;this.a=c;switch(e.e){case 4:this.b=Jlb(a.b);break;case 1:this.b=Jlb(a.d);break;case 2:this.b=Jlb(a.c-d.j.a);break;case 3:this.b=Jlb(a.a-d.j.b);break;default:this.b=0;}}
    function adb(a,b,c,d,e){var f,g,h,i,j;if(b){for(h=b.mb();h.G();){g=Wv(h.H(),9);for(j=pX(g,(djb(),bjb),c).mb();j.G();){i=Wv(j.H(),7);f=Wv(re(Ktb(e.d,i)),80);if(!f){f=new odb(a);d.c[d.c.length]=f;mdb(f,i,e);}}}}}
    function Ofb(a,b){var c,d,e;c=a.c;if(c.a.Y()>1){throw new slb('In straight hyperEdges there may be only one edge.')}QI((e=(new Snb(c.a)).a.bb().mb(),d=Wv((new Ynb(e)).a.H(),21),Wv(d.yb(),12)).a,new HI(b,a.b));}
    function no(a,b,c){var d,e;this.f=a;d=Wv(Smb(a.b,b),126);e=!d?0:d.a;bc(c,e);if(c>=(e/2|0)){this.e=!d?null:d.c;this.d=e;while(c++<e){lo(this);}}else {this.c=!d?null:d.b;while(c-->0){ko(this);}}this.b=b;this.a=null;}
    function HP(a,b){{typeof document!==Czb?Rxb(a(b)):module.exports&&Rxb(a(b));typeof document===Czb&&typeof self!==Czb&&self.postMessage(b);}}
    function _P(a,b){var c,d,e,f;if('x' in a.a){e=Wv(Pu(a,'x'),104);b.i.a=e.a;}if('y' in a.a){f=Wv(Pu(a,'y'),104);b.i.b=f.a;}if(Jzb in a.a){d=Wv(Pu(a,Jzb),104);b.j.a=d.a;}if(Kzb in a.a){c=Wv(Pu(a,Kzb),104);b.j.b=c.a;}}
    function lgb(a,b,c){var d,e;igb(this);b==(fgb(),dgb)?stb(this.g,a.c):stb(this.o,a.c);c==dgb?stb(this.g,a.d):stb(this.o,a.d);stb(this.c,a);d=MX(a.c).b;e=MX(a.d).b;kgb(this,d,e,e);this.f=Zfb(MX(a.c).b,MX(a.d).b);}
    function p5(a){var b,c,d,e,f,g;g=new U6(a.d,a.e);for(f=T6(g);f.G();){e=Wv(f.H(),7);d=a.e==(sN(),rN)?e.b:e.e;for(c=new Tob(d);c.a<c.c.c.length;){b=Wv(Rob(c),12);if(!bW(b)&&b.c.f.d!=b.d.f.d){l5(a,b);++a.f;++a.c;}}}}
    function LQ(a,b,c){var d,e,f,g,h;g=(ypb(),new Frb(Wv(yU(b.a,c),18)));h=new HU(g.b.Y());for(e=new Nqb(g.b.mb());e.b.G();){d=Wv(e.b.H(),37);f=Wv(Smb(a.a,d),31);if(!f){f=e0(d);Umb(a.a,d,f);}h.c[h.c.length]=f;}return h}
    function T5(a,b){var c,d,e,f;d=new Fnb(a.f.c,0);while(d.b<d.d.Y()){c=(Bxb(d.b<d.d.Y()),Wv(d.d.sb(d.c=d.b++),16));f=b[d.b-1];e=new Fnb(c.a,0);while(e.b<e.d.Y()){Bxb(e.b<e.d.Y());e.d.sb(e.c=e.b++);Enb(e,f[e.b-1]);}}}
    function m2(a){var b,c;if(MM(Wv(rJ(a,(eM(),TL)),28))){for(c=new Tob(a.f);c.a<c.c.c.length;){b=Wv(Rob(c),7);b.g==(sN(),qN)&&p2(b);}}else {for(c=new Tob(a.f);c.a<c.c.c.length;){b=Wv(Rob(c),7);p2(b);}sJ(a,TL,(KM(),HM));}}
    function jpb(a,b,c,d,e,f){var g,h,i,j;g=d-c;if(g<7){gpb(b,c,d,f);return}i=c+e;h=d+e;j=i+(h-i>>1);jpb(b,a,i,j,-e,f);jpb(b,a,j,h,-e,f);if(f.$b(a[j-1],a[j])<=0){while(c<d){Av(b,c++,a[i++]);}return}hpb(a,i,j,h,b,c,d,f);}
    function hv(a){if(!a){return Bu(),Au}var b=a.valueOf?a.valueOf():a;if(b!==a){var c=dv[typeof b];return c?c(b):kv(typeof b)}else if(a instanceof Array||a instanceof $wnd.Array){return new ku(a)}else {return new Uu(a)}}
    function I7(a,b,c){var d,e;d=c.c;e=c.d;if(a.g[d.b]<=a.i[b.b]&&a.i[b.b]<=a.i[d.b]&&a.g[e.b]<=a.i[b.b]&&a.i[b.b]<=a.i[e.b]){if(a.i[d.b]<a.i[e.b]){return false}return true}if(a.i[d.b]<a.i[e.b]){return true}return false}
    function j5(a,b,c){var d,e,f,g,h,i,j,k;j=0;for(e=a.a[b],f=0,g=e.length;f<g;++f){d=e[f];k=new U6(d,c);for(i=T6(k);i.G();){h=Wv(i.H(),7);Umb(a.f,h,Elb(j));LM(Wv(rJ(d,(eM(),TL)),28))&&++j;}LM(Wv(rJ(d,(eM(),TL)),28))||++j;}}
    function Pb(a,b,c){var d,e;_b(b);if(c.G()){e=Wv(c.H(),21);vmb(b,Mb(a.a,e.yb()));vmb(b,a.b);vmb(b,Mb(a.a,e.zb()));while(c.G()){vmb(b,a.a.c);d=Wv(c.H(),21);vmb(b,Mb(a.a,d.yb()));vmb(b,a.b);vmb(b,Mb(a.a,d.zb()));}}return b}
    function Gd(a,b){var c,d;c=Wv(Wmb(a.b,b),19);if(!c){return a.$()}d=a.Z();d.jb(c);a.c-=c.Y();c.Q();return aw(d,137)?(ypb(),new dsb(Wv(d,137))):aw(d,18)?(ypb(),new Frb(Wv(d,18))):aw(d,20)?Hpb(Wv(d,20)):(ypb(),new zqb(d))}
    function Tm(a,b){var c;b.d?(b.d.b=b.b):(a.a=b.b);b.b?(b.b.d=b.d):(a.e=b.d);if(!b.e&&!b.c){c=Wv(Wmb(a.b,b.a),126);c.a=0;++a.c;}else {c=Wv(Smb(a.b,b.a),126);--c.a;!b.e?(c.b=b.c):(b.e.c=b.c);!b.c?(c.c=b.e):(b.c.e=b.e);}--a.d;}
    function mU(a,b,c){switch(c.e){case 1:return new HI(b.a,Qlb(a.d.b,b.b));case 2:return new HI(Nlb(a.c.a,b.a),b.b);case 3:return new HI(b.a,Nlb(a.c.b,b.b));case 4:return new HI(Qlb(b.a,a.d.a),b.b);}return new HI(b.a,b.b)}
    function Oxb(a){var b,c,d,e;b=0;d=(bmb(),a.length);e=d-4;c=0;while(c<e){b=a.charCodeAt(c+3)+31*(a.charCodeAt(c+2)+31*(a.charCodeAt(c+1)+31*(a.charCodeAt(c)+31*b)));b=b|0;c+=4;}while(c<d){b=b*31+jmb(a,c++);}b=b|0;return b}
    function X9(a,b){var c,d,e;this.a=a;this.c=b;this.b=xv(nE,Txb,673,a.length,0,2);for(c=0;c<a.length;++c){e=a[c].length;this.b[c]=xv(nE,{673:1,3:1,5:1,6:1},102,e,0,1);for(d=0;d<e;++d){this.b[c][d]=new $9(this,a[c][d].c);}}}
    function sk(a,b,c,d,e,f,g){var h;this.a=Wv(_b(a),56);this.b=b;this.c=e;this.e=c;this.d=Wv(_b(d),159);this.g=f;this.f=Wv(_b(g),159);b&&a.$b(c,c);e&&a.$b(f,f);if(b&&e){h=a.$b(c,f);Zb(h<=0,c,f);h==0&&Xb(d!=(Gh(),Fh)|g!=Fh);}}
    function eV(a){this.a=a;if(a.c.f.g==(CX(),xX)){this.c=a.c;this.d=Wv(rJ(a.c.f,(Rib(),hib)),32);}else if(a.d.f.g==xX){this.c=a.d;this.d=Wv(rJ(a.d.f,(Rib(),hib)),32);}else {throw new slb('Edge '+a+' is not an external edge.')}}
    function Xcb(){Xcb=iI;Scb=UQ(new WQ,(d0(),x_));Ucb=TQ(new WQ,A_);Vcb=PQ(TQ(new WQ,R_),Q_);Rcb=PQ(UQ(TQ(new WQ,s_),t_),u_);Wcb=TQ(new WQ,Z_);Tcb=PQ(new WQ,y_);Pcb=PQ(UQ(TQ(SQ(new WQ,D_),F_),H_),E_);Qcb=PQ(UQ(new WQ,H_),q_);}
    function Lr(a,b,c){var d,e,f,g;Mh(c,Xyb);if(c==0){return Pr(a,b)}Xb(ok(a.b,b));g=a.c.a;if(!g){a.d.$b(b,b);e=new Os(b,c);es(a.a,e,a.a);Us(a.c,null,e);return 0}f=xv(mw,Yyb,26,1,12,1);d=zs(g,a.d,b,c,f);Us(a.c,g,d);return f[0]}
    function i$(a,b,c){var d,e,f,g,h,i;d=0;i=c;if(!b){d=c*(a.c.length-1);i*=-1;}for(f=new Tob(a);f.a<f.c.c.length;){e=Wv(Rob(f),9);sJ(e,(eM(),lL),(iK(),eK));e.j.a=d;for(h=nX(e,(sN(),ZM)).mb();h.G();){g=Wv(h.H(),7);g.i.a=d;}d+=i;}}
    function Fd(a,b,c){var d;d=Wv(Smb(a.b,b),19);if(!d){d=a.Z();if(d.ib(c)){++a.c;Umb(a.b,b,d);return true}else {throw new ukb('New Collection violated the Collection spec')}}else if(d.ib(c)){++a.c;return true}else {return false}}
    function ES(a,b,c){var d,e,f;CS(a,b,c);f=new GU;for(e=new Tob(a.b.a.b);e.a<e.c.c.length;){d=Wv(Rob(e),25);if(b.D(d)){vU(f,new OS(d,true));vU(f,new OS(d,false));}}JS(a.d);RT(f,a.c,new opb(Bv(tv(JA,1),syb,160,0,[a.d])));DS(a,b,c);}
    function R8(a,b){var c,d,e,f,g;a.c[b.k]=true;vU(a.a,b);for(g=new Tob(b.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);for(d=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[f.b,f.e]))))));Cm(d);){c=Wv(Dm(d),12);e=S8(f,c).f;a.c[e.k]||R8(a,e);}}}
    function dQ(a,b,c,d){var e,f,g;if('labels' in b.a){g=Pu(b,'labels');if(!g.hc()){throw new GQ("The 'labels' property of a node must be an array.",g,b)}f=g.hc();for(e=0;e<f.a.length;++e){aw(gu(f,e),69)&&cQ(a,Wv(gu(f,e),69),c,d);}}}
    function j0(a,b,c){var d,e,f,g,h,i;f=Wv(yU(b.b,0),12).c;d=f.f;e=d.g;i=Wv(yU(c.e,0),12).d;g=i.f;h=g.g;e==(CX(),zX)?sJ(a,(Rib(),qib),Wv(rJ(d,qib),7)):sJ(a,(Rib(),qib),f);h==zX?sJ(a,(Rib(),rib),Wv(rJ(g,rib),7)):sJ(a,(Rib(),rib),i);}
    function oM(){oM=iI;gM=new pM('H_LEFT',0);fM=new pM('H_CENTER',1);iM=new pM('H_RIGHT',2);nM=new pM('V_TOP',3);mM=new pM('V_CENTER',4);lM=new pM('V_BOTTOM',5);jM=new pM('INSIDE',6);kM=new pM('OUTSIDE',7);hM=new pM('H_PRIORITY',8);}
    function rS(a){aS();var b,c,d;this.b=ZR;this.c=_R;this.d=(sK(),qK);this.g=(VR(),UR);this.a=a;oS(this,new sS);fS(this);for(d=new Tob(a.b);d.a<d.c.c.length;){c=Wv(Rob(d),25);if(!c.f){b=new QR(Bv(tv(kA,1),syb,25,0,[c]));vU(a.a,b);}}}
    function R7(a,b){var c,d,e,f;e=1;b.j=true;for(d=new Tob(m7(b));d.a<d.c.c.length;){c=Wv(Rob(d),89);if(!a.c[c.b]){a.c[c.b]=true;f=c7(c,b);if(c.e){e+=R7(a,f);}else if(!f.j&&c.a==c.d.e-c.c.e){c.e=true;stb(a.p,c);e+=R7(a,f);}}}return e}
    function Abb(a){var b,c,d,e,f,g,h,i;e=Uzb;d=Vzb;for(c=new Tob(a.e.c);c.a<c.c.c.length;){b=Wv(Rob(c),16);for(g=new Tob(b.a);g.a<g.c.c.length;){f=Wv(Rob(g),9);i=Ixb(a.n[f.k]);h=i+Ixb(a.b[a.f[f.k].k]);e=e<i?e:i;d=d>h?d:h;}}return d-e}
    function DQ(a){var b;b=new Tu;Ru(b,'type',new lv((Gkb($z),$z.n)));Ru(b,Dzb,new lv(a.f));!!a.b&&Ru(b,'value',a.b);!!a.a&&Ru(b,'context',a.a);Ru(b,Ezb,new lv(Hb(new Kb('\n'),new wnb(new opb((a.g==null&&(a.g=Pt(a)),a.g))))));return b}
    function D5(a,b){if(a.c<b.c){return -1}else if(a.c>b.c){return 1}else if(a.b<b.b){return -1}else if(a.b>b.b){return 1}else if(a.a!=b.a){return a.a.b-b.a.b}else if(a.d==0&&b.d==1){return -1}else if(a.d==1&&b.d==0){return 1}return 0}
    function cn(a,b){var c,d,e,f,g;if(b===a){return true}if(!aw(b,20)){return false}g=Wv(b,20);if(a.Y()!=g.Y()){return false}f=g.mb();for(d=a.mb();d.G();){c=d.H();e=f.H();if(!(gw(c)===gw(e)||c!=null&&rb(c,e))){return false}}return true}
    function st(b){(!qt&&(qt=tt()),qt);var d=b.replace(/[\x00-\x1f\xad\u0600-\u0603\u06dd\u070f\u17b4\u17b5\u200b-\u200f\u2028-\u202e\u2060-\u2064\u206a-\u206f\ufeff\ufff9-\ufffb"\\]/g,function(a){return rt(a)});return '"'+d+'"'}
    function ER(a,b){var c,d,e,f,g,h,i;e=b==1?wR:vR;for(d=(g=(new Snb(e.a)).a.bb().mb(),new Ynb(g));d.a.G();){c=(f=Wv(d.a.H(),21),Wv(f.yb(),59));for(i=Wv(Dd(a.f.c,c),18).mb();i.G();){h=Wv(i.H(),27);BU(a.b.b,h.b);BU(a.b.a,Wv(h.b,25).f);}}}
    function aR(a,b,c){var d,e,f,g;nI(c,'Recursive layout',2);if(b.b.c.length!=0){g=1/b.b.c.length;for(f=new Tob(b.b);f.a<f.c.c.length;){e=Wv(Rob(f),9);d=Wv(rJ(e,(Rib(),sib)),55);if(d){aR(a,d,rI(c,g));$Q(e,d);}}NQ(a.d,b);_Q(b,c);}bR(b);pI(c);}
    function L3(a,b){oR.call(this);this.d=new vtb;this.b=Wv(rJ(b,(Rib(),Jib)),15).a*Wv(rJ(b,(Mjb(),qjb)),15).a;this.e=this.b*Wv(rJ(b,Ejb),15).a;this.a=new jJ;this.c=new jJ;this.j=new VN(a.j,a.k,0,a.n-a.k);this.o=a.g;this.g.a=a.i;K3(this,a);}
    function Mtb(a,b){var c,d,e,f,g;f=b==null?0:a.b.Vc(b);d=(c=Ttb(a.a,f),c==null?[]:c);for(g=0;g<d.length;g++){e=d[g];if(a.b.Uc(b,e.yb())){if(d.length==1){d.length=0;a.a[$Ab](f);}else {d.splice(g,1);}--a.c;msb(a.b);return e.zb()}}return null}
    function hU(a,b,c){var d;d=null;!!b&&(d=b.e);ZU(a,new VS(b.i.a-d.b+c.a,b.i.b-d.d+c.b));ZU(a,new VS(b.i.a-d.b+c.a,b.i.b+b.j.b+d.a+c.b));ZU(a,new VS(b.i.a+b.j.a+d.c+c.a,b.i.b-d.d+c.b));ZU(a,new VS(b.i.a+b.j.a+d.c+c.a,b.i.b+b.j.b+d.a+c.b));}
    function J2(a,b){switch(b.e){case 2:QX(a,(sN(),ZM));a.a.a=a.j.a;a.a.b=a.j.b/2;break;case 4:QX(a,(sN(),rN));a.a.a=0;a.a.b=a.j.b/2;break;case 1:QX(a,(sN(),$M));a.a.a=a.j.a/2;a.a.b=0;break;case 3:QX(a,(sN(),pN));a.a.a=a.j.a/2;a.a.b=a.j.b;}}
    function Fq(a,b){Dq();var c,d,e;if(b===a){return true}if(aw(b,207)){e=Wv(b,207);if(a.Y()!=e.Y()||Vg(a).Y()!=e.bb().Y()){return false}for(d=e.bb().mb();d.G();){c=Wv(d.H(),83);if(a.Cb(c.Zb())!=c.Yb()){return false}}return true}return false}
    function wvb(a,b){var c,d,e,f,g,h;f=a.a*_Ab+a.b*1502;h=a.b*_Ab+11;c=Math.floor(h*FAb);f+=c;h-=c*aBb;f%=aBb;a.a=f;a.b=h;if(b<=24){return Mlb(a.a*qvb[b])}else {e=a.a*(1<<b-24);g=Mlb(a.b*rvb[b]);d=e+g;d>=2147483648&&(d-=4294967296);return d}}
    function MW(a,b,c){var d,e,f;if(b==c){return}d=b;do{vI(a,d.d);f=Wv(rJ(d,(Rib(),zib)),9);if(f){e=d.a;uI(a,e.b,e.d);vI(a,f.i);d=hX(f);}}while(f);d=c;do{EI(a,d.d);f=Wv(rJ(d,(Rib(),zib)),9);if(f){e=d.a;DI(a,e.b,e.d);EI(a,f.i);d=hX(f);}}while(f)}
    function n3(a,b){var c,d,e,f,g,h;c=new GU;h=new Um;for(e=(g=(new Snb(a.a)).a.bb().mb(),new Ynb(g));e.a.G();){d=(f=Wv(e.a.H(),21),Wv(f.yb(),12));Nm(h,d.c,d,null);Nm(h,d.d,d,null);}while(h.a){vU(c,m3(h,b,LM(Wv(rJ(b,(eM(),TL)),28))));}return c}
    function B7(a,b){var c,d,e,f,g;for(f=new Tob(a.e.a);f.a<f.c.c.length;){e=Wv(Rob(f),61);if(e.c.c.length==e.g.c.length){d=e.e;g=M7(e);for(c=e.e-Wv(g.a,24).a+1;c<e.e+Wv(g.b,24).a;c++){b[c]<b[d]&&(d=c);}if(b[d]<b[e.e]){--b[e.e];++b[d];e.e=d;}}}}
    function zR(a,b){var c,d,e,f,g,h,i;e=b==1?wR:vR;for(d=(g=(new Snb(e.a)).a.bb().mb(),new Ynb(g));d.a.G();){c=(f=Wv(d.a.H(),21),Wv(f.yb(),59));for(i=Wv(Dd(a.f.c,c),18).mb();i.G();){h=Wv(i.H(),27);vU(a.b.b,Wv(h.b,25));vU(a.b.a,Wv(h.b,25).f);}}}
    function ecb(a){$bb();var b,c,d,e,f,g,h;c=(mp(),new wub);for(e=new Tob(a.e.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);for(g=new Tob(d.a);g.a<g.c.c.length;){f=Wv(Rob(g),9);h=a.f[f.k];b=Wv(rub(c,h),20);if(!b){b=new GU;tub(c,h,b);}b.ib(f);}}return c}
    function cS(a,b){var c,d,e,f;for(d=new Tob(a.a.a);d.a<d.c.c.length;){c=Wv(Rob(d),78);c.i=true;}for(f=new Tob(a.a.b);f.a<f.c.c.length;){e=Wv(Rob(f),25);e.p=Ckb(Ixb(Xv(a.f.B(new RJ(e,b)))));e.f.i=e.f.i&Ckb(Ixb(Xv(a.f.B(new RJ(e,b)))));}return a}
    function RY(a,b){var c,d,e,f;e=Eo(mX(b));for(d=WI(e,0);d.b!=d.d.c;){c=Wv(_ub(d),12);f=c.d.f;if(f.g==(CX(),wX)&&!(Ckb(Ixb(Xv(rJ(f,(Rib(),Vhb)))))&&rJ(f,uib)!=null)){BU(f.d.a,f);PX(c.c,null);PX(c.d,null);return RY(a,f)}else {return b}}return b}
    function D7(a,b){var c,d,e,f,g,h,i;if(!b.e){throw new slb('The input edge is not a tree edge.')}f=null;e=$xb;for(d=new Tob(a.d);d.a<d.c.c.length;){c=Wv(Rob(d),89);h=c.c;i=c.d;if(I7(a,h,b)&&!I7(a,i,b)){g=i.e-h.e-c.a;if(g<e){e=g;f=c;}}}return f}
    function Icb(a,b){var c,d,e,f,g;f=b.a;f.c.f==b.b?(g=f.d):(g=f.c);f.c.f==b.b?(d=f.c):(d=f.d);e=vbb(a.a,g,d);if(e>0&&e<rAb){c=wbb(a.a,d.f,e);Bbb(a.a,d.f,-c);return c>0}else if(e<0&&-e<rAb){c=xbb(a.a,d.f,-e);Bbb(a.a,d.f,c);return c>0}return false}
    function Odb(a,b,c,d,e){var f,g;if(!yI(MI(Bv(tv(qz,1),Fzb,10,0,[e.f.i,e.i,e.a])),c)){b.c==e?rn(b.a,0,new II(c)):QI(b.a,new II(c));if(d&&!ttb(a.a,c)){g=Wv(rJ(b,(eM(),CL)),44);if(!g){g=new jJ;sJ(b,CL,g);}f=new II(c);TI(g,f,g.c.b,g.c);stb(a.a,f);}}}
    function Pdb(a){var b,c,d,e,f,g,h;b=0;for(d=new Tob(a.a);d.a<d.c.c.length;){c=Wv(Rob(d),9);for(f=Uh(mX(c));Cm(f);){e=Wv(Dm(f),12);if(a==e.d.f.d&&e.c.g==(sN(),rN)){g=MX(e.c).b;h=MX(e.d).b;b=b>(h-g<=0?0-(h-g):h-g)?b:h-g<=0?0-(h-g):h-g;}}}return b}
    function yo(a,b){var c,d,e;if(gw(b)===gw(_b(a))){return true}if(!aw(b,20)){return false}d=Wv(b,20);e=a.Y();if(e!=d.Y()){return false}if(aw(d,63)){for(c=0;c<e;c++){if(!Tb(a.sb(c),d.sb(c))){return false}}return true}else {return Ol(a.mb(),d.mb())}}
    function I8(a,b){var c,d,e,f,g,h,i,j;e=a.b[b.k];if(e>=0){return e}else {f=1;for(h=new Tob(b.f);h.a<h.c.c.length;){g=Wv(Rob(h),7);for(d=new Tob(g.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);j=c.d.f;if(b!=j){i=I8(a,j);f=f>i+1?f:i+1;}}}H8(a,b,f);return f}}
    function edb(a,b,c){var d,e,f,g,h,i;d=0;if(a.b!=0&&b.b!=0){f=WI(a,0);g=WI(b,0);h=Ixb(Yv(_ub(f)));i=Ixb(Yv(_ub(g)));e=true;do{h>i-c&&h<i+c&&++d;h<=i&&f.b!=f.d.c?(h=Ixb(Yv(_ub(f)))):i<=h&&g.b!=g.d.c?(i=Ixb(Yv(_ub(g)))):(e=false);}while(e)}return d}
    function sv(a,b){switch(uv(a)){case 5:return ew(b);case 6:return cw(b);case 7:return bw(b);case 0:return Vv(b,a.__elementTypeId$);case 2:return fw(b)&&!(b.ad===kI);case 1:return fw(b)&&!(b.ad===kI)||Vv(b,a.__elementTypeId$);default:return true;}}
    function Lv(a,b){var c,d,e,f,g;b&=63;c=a.h;d=(c&524288)!=0;d&&(c|=-1048576);if(b<22){g=c>>b;f=a.m>>b|c<<22-b;e=a.l>>b|a.m<<22-b;}else if(b<44){g=d?bzb:0;f=c>>b-22;e=a.m>>b-22|c<<44-b;}else {g=d?bzb:0;f=d?azb:0;e=c>>b-44;}return Ev(e&azb,f&azb,g&bzb)}
    function O9(a,b){switch(a.e){case 1:switch(b.e){case 1:return 1;case 4:return 2;case 3:return 3;case 2:return 4;}break;case 2:switch(b.e){case 1:return 1;case 2:return 2;case 3:return 3;case 4:return 4;}break;default:throw new slb(GAb);}return 0}
    function hZ(a,b,c){var d,e,f,g,h,i;d=new GU;d.c[d.c.length]=b;i=b;h=0;do{i=mZ(a,i);!!i&&(d.c[d.c.length]=i,true);++h;}while(i);g=(c-(d.c.length-1)*a.d.d)/d.c.length;for(f=new Tob(d);f.a<f.c.c.length;){e=Wv(Rob(f),9);e.j.a=g;}return new RJ(Elb(h),g)}
    function kZ(a,b,c){var d,e,f,g,h,i;d=new GU;d.c[d.c.length]=b;i=b;h=0;do{i=lZ(a,i);!!i&&(d.c[d.c.length]=i,true);++h;}while(i);g=(c-(d.c.length-1)*a.d.d)/d.c.length;for(f=new Tob(d);f.a<f.c.c.length;){e=Wv(Rob(f),9);e.j.a=g;}return new RJ(Elb(h),g)}
    function m$(a){var b,c,d,e,f,g;e=Wv(yU(a.f,0),7);g=0;for(d=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[new fY(e),new lY(e)]))))));Cm(d);){c=Wv(Dm(d),7);g+=c.f.i.a+c.i.a+c.a.a;}b=Wv(rJ(a,(eM(),SL)),10);f=!b?0:b.a;a.i.a=g/(e.b.c.length+e.e.c.length)-f;}
    function Ueb(a,b){var c,d,e,f;if(b<2*a.c){throw new slb('The knot vector must have at least two time the dimension elements.')}a.j=0;a.i=1;for(d=0;d<a.c;d++){a.g.ib(0);}f=b+1-2*a.c;for(e=1;e<f;e++){a.g.ib(e/f);}if(a.e){for(c=0;c<a.c;c++){a.g.ib(1);}}}
    function Fs(a){var b,c;c=a.c;a.c=0;ds(a.f,a.i);if(!a.e){return a.g}else if(!a.g){return a.e}else if(a.e.d>=a.g.d){b=a.f;b.e=Is(a.e,b);b.g=a.g;b.a=a.a-1;b.j=XH(a.j,c);return Gs(b)}else {b=a.i;b.g=Js(a.g,b);b.e=a.e;b.a=a.a-1;b.j=XH(a.j,c);return Gs(b)}}
    function e2(a){var b,c,d,e,f,g;for(e=new Tob(a.a);e.a<e.c.c.length;){d=Wv(Rob(e),9);if(d.g==(CX(),BX)){f=Wv(rJ(d,(Rib(),nib)),9);c=d.f;b=(Cxb(0,c.c.length),Wv(c.c[0],7));g=Wv(rJ(b,uib),7);g.g==(sN(),$M)&&d.k>f.k?QX(g,pN):g.g==pN&&f.k>d.k&&QX(g,$M);}}}
    function q3(a,b,c){var d,e,f,g,h,i,j;j=a.b;g=0;for(f=new Tob(a.a.b);f.a<f.c.c.length;){e=Wv(Rob(f),33);g=Nlb(g,e.j.a);}i=wfb(a.a.c,a.a.d,b,c,g);Ue(a.a.a,Veb(i));h=s3(a.a.b,i.a,j);d=new Dfb((!i.k&&(i.k=new Efb(Xeb(i))),i.k));zfb(d);return !h?d:Gfb(d,h)}
    function wbb(a,b,c){var d,e,f,g,h,i,j;d=c;e=b;do{e=a.a[e.k];g=(j=a.f[e.k],Ixb(a.n[j.k])+Ixb(a.d[e.k])-e.e.d);h=zbb(e,!e.d?-1:zU(e.d.a,e,0));if(h){f=(i=a.f[h.k],Ixb(a.n[i.k])+Ixb(a.d[h.k])+h.j.b+h.e.a);d=Qlb(d,g-(f+Xjb(a.j,e,h)));}}while(b!=e);return d}
    function xbb(a,b,c){var d,e,f,g,h,i,j;d=c;e=b;do{e=a.a[e.k];f=(j=a.f[e.k],Ixb(a.n[j.k])+Ixb(a.d[e.k])+e.j.b+e.e.a);h=ybb(e,!e.d?-1:zU(e.d.a,e,0));if(h){g=(i=a.f[h.k],Ixb(a.n[i.k])+Ixb(a.d[h.k])-h.e.d);d=Qlb(d,g-(f+Xjb(a.j,e,h)));}}while(b!=e);return d}
    function Sr(b,c,d){var e,f,g;Mh(d,Xyb);if(d==0){return Pr(b,c)}g=b.c.a;f=xv(mw,Yyb,26,1,12,1);try{if(!ok(b.b,c)||!g){return 0}e=Hs(g,b.d,c,d,f);}catch(a){a=OH(a);if(aw(a,119)){return 0}else if(aw(a,76)){return 0}else throw NH(a)}Us(b.c,g,e);return f[0]}
    function MO(a,b){var c,d,e,f,g;if(a.b){d=Wv(oW(a.e,(eM(),jL)),65);e=d.b+d.c;c=d.d+d.a;}else {e=b*2;c=b*2;}g=Nlb(a.o[1]>0?e+a.i[1]*b+a.n[1]:0,a.o[3]>0?e+a.i[3]*b+a.n[3]:0);f=Nlb(a.o[4]>0?c+a.i[4]*b+a.n[4]:0,a.o[2]>0?c+a.i[2]*b+a.n[2]:0);return new HI(g,f)}
    function b$(a){var b,c,d,e,f,g;g=Wv(FU(a.a,xv(qB,Nzb,9,a.a.c.length,0,1)),51);lpb(g,new g$);c=null;for(e=0,f=g.length;e<f;++e){d=g[e];if(d.g!=(CX(),xX)){break}b=Wv(rJ(d,(Rib(),hib)),32);if(b!=(sN(),rN)&&b!=ZM){continue}!!c&&Wv(rJ(c,oib),20).ib(d);c=d;}}
    function j6(a,b,c,d,e){var f,g,h,i;i=new U6(b,d);for(h=T6(i);h.G();){f=Wv(h.H(),7);Umb(a.k,f,Elb(Wv(Smb(a.k,f),24).a+Wv(re(Ktb(e.d,c)),24).a));}i=new U6(c,d);for(g=T6(i);g.G();){f=Wv(g.H(),7);Umb(a.k,f,Elb(Wv(Smb(a.k,f),24).a-Wv(re(Ktb(e.d,b)),24).a));}}
    function hI(a,b,c){var d=fI,h;var e=d[a];var f=e instanceof Array?e[0]:null;if(e&&!f){_=e;}else {_=(h=b&&b.prototype,!h&&(h=fI[b]),jI(h));_._c=c;_.constructor=_;!b&&(_.ad=kI);d[a]=_;}for(var g=3;g<arguments.length;++g){arguments[g].prototype=_;}f&&(_.$c=f);}
    function Wkb(a){if(a.Sc()){var b=a.c;b.Tc()?(a.n='['+b.k):!b.Sc()?(a.n='[L'+b.Qc()+';'):(a.n='['+b.Qc());a.b=b.Pc()+'[]';a.j=b.Rc()+'[]';return}var c=a.i;var d=a.d;d=d.split('/');a.n=Zkb('.',[c,Zkb('$',d)]);a.b=Zkb('.',[c,Zkb('.',d)]);a.j=d[d.length-1];}
    function Mr(a,b,c){var d;if(!c){return 0}d=a.d.$b(a.b.g,c.b);if(d>0){return Mr(a,b,c.g)}else if(d==0){switch(a.b.f.e){case 0:return PH(b._b(c),b.ac(c.g));case 1:return b.ac(c.g);default:throw new tkb;}}else {return PH(PH(b.ac(c.g),b._b(c)),Mr(a,b,c.e))}}
    function Nr(a,b,c){var d;if(!c){return 0}d=a.d.$b(a.b.e,c.b);if(d<0){return Nr(a,b,c.e)}else if(d==0){switch(a.b.d.e){case 0:return PH(b._b(c),b.ac(c.e));case 1:return b.ac(c.e);default:throw new tkb;}}else {return PH(PH(b.ac(c.e),b._b(c)),Nr(a,b,c.g))}}
    function z2(a,b,c,d){var e,f,g,h;g=new uX(a);sX(g,(CX(),zX));sJ(g,(Rib(),uib),b);sJ(g,(eM(),TL),(KM(),FM));sJ(g,qib,c);sJ(g,rib,d);f=new RX;QX(f,(sN(),rN));PX(f,g);h=new RX;QX(h,ZM);PX(h,g);eW(b,f);e=new hW;qJ(e,b);sJ(e,CL,null);dW(e,h);eW(e,d);return g}
    function e6(a,b){var c,d,e,f,g,h,i,j,k,l;c=0;for(g=a.j,h=0,i=g.length;h<i;++h){f=g[h];l=new U6(f,b);for(k=T6(l);k.G();){j=Wv(k.H(),7);for(e=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[j.b,j.e]))))));Cm(e);){d=Wv(Dm(e),12);bW(d)||(c+=b6(a,d,j));}}}return c}
    function qab(a,b){if(a.c<b.c){return -1}else if(a.c>b.c){return 1}else if(a.b<b.b){return -1}else if(a.b>b.b){return 1}else if(a.a!=b.a){return txb(a.a)-txb(b.a)}else if(a.d==(vab(),uab)&&b.d==tab){return -1}else if(a.d==tab&&b.d==uab){return 1}return 0}
    function R4(a){var b,c,d,e,f,g;e=new aJ;for(d=new Tob(a.d.a);d.a<d.c.c.length;){c=Wv(Rob(d),61);c.c.c.length==0&&(TI(e,c,e.c.b,e.c),true);}if(e.b>1){b=x7(y7(new A7,a.b++),a.d);for(g=WI(e,0);g.b!=g.d.c;){f=Wv(_ub(g),61);f7(i7(h7(j7(g7(new k7,1),0),b),f));}}}
    function p3(a,b,c,d){var e,f,g,h,i,j;j=0;for(g=new Tob(a.a.b);g.a<g.c.c.length;){f=Wv(Rob(g),33);j=Nlb(j,f.j.a);}i=vfb(a.a.c,b,a.a.d,d,Jeb(a.b),c);Ue(a.a.a,Veb(i));h=s3(a.a.b,i.a,a.b);e=new Dfb((!i.k&&(i.k=new Efb(Xeb(i))),i.k));zfb(e);return !h?e:Gfb(e,h)}
    function M0(a,b){var c,d,e,f,g;for(d=new Tob(a.b);d.a<d.c.c.length;){c=Wv(Rob(d),33);sJ(c,(Rib(),pib),b);}for(g=new Tob(a.c.c);g.a<g.c.c.length;){e=Wv(Rob(g),33);sJ(e,(Rib(),pib),b);}for(f=new Tob(a.d.c);f.a<f.c.c.length;){e=Wv(Rob(f),33);sJ(e,(Rib(),pib),b);}}
    function I1(){I1=iI;G1=new J1(tzb,0);B1=new J1('NIKOLOV',1);E1=new J1('NIKOLOV_PIXEL',2);C1=new J1('NIKOLOV_IMPROVED',3);D1=new J1('NIKOLOV_IMPROVED_PIXEL',4);A1=new J1('DUMMYNODE_PERCENTAGE',5);F1=new J1('NODECOUNT_PERCENTAGE',6);H1=new J1('NO_BOUNDARY',7);}
    function cab(a,b){var c,d,e,f,g;f=0;g=Wv(re(Ktb(b.d,a)),24);if(!g){return 0}for(e=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[a.b,a.e]))))));Cm(e);){d=Wv(Dm(e),12);d.c==a?(c=Wv(Smb(b,d.d),24)):(c=Wv(Smb(b,d.c),24));!!c&&g.a>c.a&&(f=Plb(f,g.a-c.a-1));}return f}
    function RZ(a){var b,c;b=Wv(rJ(a,(eM(),HL)),15).a;c=Wv(rJ(a,IL),15).a;sJ(a,IL,new llb(b));sJ(a,HL,new llb(c));switch(Wv(rJ(a,lL),103).e){case 1:sJ(a,lL,(iK(),hK));break;case 2:sJ(a,lL,(iK(),dK));break;case 3:sJ(a,lL,(iK(),fK));break;case 4:sJ(a,lL,(iK(),gK));}}
    function N0(a){var b,c,d,e,f;for(e=(Il(),new Im(Dl(ul(a.a,new yl))));Cm(e);){d=Wv(Dm(e),9);if(d.g==(CX(),yX)){f=P0(d)?(kP(),hP):(kP(),gP);sJ(d,(Rib(),pib),f);}for(c=Uh(mX(d));Cm(c);){b=Wv(Dm(c),12);f=Ckb(Ixb(Xv(rJ(b,(Rib(),Iib)))))?(kP(),gP):(kP(),hP);M0(b,f);}}}
    function O0(a){var b,c,d,e,f;for(e=(Il(),new Im(Dl(ul(a.a,new yl))));Cm(e);){d=Wv(Dm(e),9);if(d.g==(CX(),yX)){f=P0(d)?(kP(),gP):(kP(),hP);sJ(d,(Rib(),pib),f);}for(c=Uh(mX(d));Cm(c);){b=Wv(Dm(c),12);f=Ckb(Ixb(Xv(rJ(b,(Rib(),Iib)))))?(kP(),hP):(kP(),gP);M0(b,f);}}}
    function jdb(a,b,c){var d,e,f;for(f=new Tob(a.e);f.a<f.c.c.length;){d=Wv(Rob(f),118);if(d.b.d<0&&d.c>0){d.b.c-=d.c;d.b.c<=0&&d.b.f>0&&QI(b,d.b);}}for(e=new Tob(a.b);e.a<e.c.c.length;){d=Wv(Rob(e),118);if(d.a.d<0&&d.c>0){d.a.f-=d.c;d.a.f<=0&&d.a.c>0&&QI(c,d.a);}}}
    function agb(a,b,c){var d,e,f;for(f=new Tob(a.j);f.a<f.c.c.length;){d=Wv(Rob(f),117);if(d.b.i<0&&d.c>0){d.b.e-=d.c;d.b.e<=0&&d.b.k>0&&QI(b,d.b);}}for(e=new Tob(a.d);e.a<e.c.c.length;){d=Wv(Rob(e),117);if(d.a.i<0&&d.c>0){d.a.k-=d.c;d.a.k<=0&&d.a.e>0&&QI(c,d.a);}}}
    function tj(a){var b,c,d,e,f;f=a.d.c+a.e.c;switch(f){case 0:return dr(),cr;case 1:d=Wv(Sl(new rnb((new inb(a)).a)),21);return Bj(d.yb(),d.zb());default:e=(mp(),new wub);for(c=new rnb((new inb(a)).a);c.b;){b=pnb(c);tub(e,_b(b.yb()),_b(b.zb()));}return new ir(e);}}
    function DS(a,b,c){var d,e,f;for(e=new Tob(a.b.a.b);e.a<e.c.c.length;){d=Wv(Rob(e),25);if(!b.D(d)){continue}f=Ixb(Yv(c.B(d)));if(f>0){!(tK(a.b.d)&&d.q.d)&&!(uK(a.b.d)&&d.q.b)&&(d.j.e+=0>f/2-0.5?0:f/2-0.5);!(tK(a.b.d)&&d.q.a)&&!(uK(a.b.d)&&d.q.c)&&(d.j.b-=f-1);}}}
    function R9(a,b){switch(a.e){case 1:switch(b.e){case 1:return HAb;case 4:return 0.5;case 3:return IAb;case 2:return JAb;}break;case 2:switch(b.e){case 1:return HAb;case 2:return 0.5;case 3:return IAb;case 4:return JAb;}break;default:throw new slb(GAb);}return 0}
    function rT(a,b){var c,d,e,f;f=new Fnb(a,0);c=(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),48));while(f.b<f.d.Y()){d=(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),48));e=new WS(d.c,c.d,b);Bxb(f.b>0);f.a.sb(f.c=--f.b);Anb(f,e);Bxb(f.b<f.d.Y());f.d.sb(f.c=f.b++);e.a=false;c=d;}}
    function oZ(a){var b,c,d,e,f,g;e=Wv(rJ(a,(Rib(),Zhb)),7);for(g=new Tob(a.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);for(d=new Tob(f.e);d.a<d.c.c.length;){b=Wv(Rob(d),12);eW(b,e);return f}for(c=new Tob(f.b);c.a<c.c.c.length;){b=Wv(Rob(c),12);dW(b,e);return f}}return null}
    function i6(a,b,c,d,e){var f,g,h,i,j,k;g=b;f=0;h=false;k=new U6(c,d);for(j=T6(k);j.G();){i=Wv(j.H(),7);h=true;Umb(a.k,i,Elb(g));if(LM(Wv(rJ(c,(eM(),TL)),28))||i.b.c.length+i.e.c.length>1){++f;++g;}}if(!LM(Wv(rJ(c,(eM(),TL)),28))&&h){++f;++g;}Umb(e,c,Elb(f));return g}
    function nfb(a){var b,c,d,e,f,g,h,i,j,k,l,m;g=a.b.mb();h=Wv(g.H(),92);k=h.a.a;j=k>RAb;i=k<SAb;while(g.G()){c=h;f=k;e=j;d=i;h=Wv(g.H(),92);k=h.a.a;j=k>RAb;i=k<SAb;if(!(j||i)){return mfb(h.b)}if(e&&i||d&&j){b=f/(f-k);l=mfb(c.b);m=mfb(h.b);return b*l+(1-b)*m}}return 0}
    function ofb(a){var b,c,d,e,f,g,h,i,j,k,l,m;g=a.b.mb();h=Wv(g.H(),92);k=h.a.b;j=k>RAb;i=k<SAb;while(g.G()){c=h;f=k;e=j;d=i;h=Wv(g.H(),92);k=h.a.b;j=k>RAb;i=k<SAb;if(!(j||i)){return mfb(h.b)}if(e&&i||d&&j){b=f/(f-k);l=mfb(c.b);m=mfb(h.b);return b*l+(1-b)*m}}return 0}
    function b6(a,b,c){var d,e;d=0;if(d6(b)){if(ttb(a.g,b)){Sr(a.i,Elb(h6(a,b.c)),1)>0;Sr(a.i,Elb(h6(a,b.d)),1)>0;utb(a.g,b);d+=g6(a,b,a.i);}else {stb(a.g,b);Lr(a.i,Elb(h6(a,b.c)),1);Lr(a.i,Elb(h6(a,b.d)),1);}}else {e=Pr(a.i,Elb(Wv(Smb(a.k,c),24).a));d+=a.g.a.Y()-e;}return d}
    function Keb(a){switch(a.e){case 0:return veb;case 1:return seb;case 2:return reb;case 3:return yeb;case 4:return xeb;case 5:return Deb;case 6:return Ceb;case 7:return web;case 8:return teb;case 9:return ueb;case 11:return Aeb;case 10:return zeb;default:return Beb;}}
    function Leb(a){switch(a.e){case 0:return neb;case 1:return meb;case 2:return jeb;case 3:return ieb;case 4:return peb;case 5:return oeb;case 6:return Heb;case 7:return Geb;case 8:return leb;case 9:return keb;case 10:return Eeb;case 11:return qeb;default:return Feb;}}
    function Meb(a){switch(a.e){case 0:return oeb;case 1:return Heb;case 2:return Geb;case 3:return neb;case 4:return meb;case 5:return jeb;case 6:return ieb;case 7:return peb;case 8:return leb;case 9:return keb;case 10:return Eeb;case 11:return qeb;default:return Feb;}}
    function Neb(a){switch(a.e){case 0:return jeb;case 1:return ieb;case 2:return peb;case 3:return oeb;case 4:return Heb;case 5:return Geb;case 6:return neb;case 7:return meb;case 8:return leb;case 9:return keb;case 10:return Eeb;case 11:return qeb;default:return Feb;}}
    function fcb(a){var b,c,d,e,f,g,h,i;c=(mp(),new wub);h=new Yub((Oh(),new opb(a.f)));for(g=(e=(new Snb(h.a)).a.bb().mb(),new Ynb(e));g.a.G();){f=(d=Wv(g.a.H(),21),Wv(d.yb(),9));if(!f){Fmb();break}i=a.i[f.k];b=Wv(rub(c,i),20);if(!b){b=new GU;tub(c,i,b);}b.ib(f);}return c}
    function CS(a,b,c){var d,e,f;for(e=new Tob(a.b.a.b);e.a<e.c.c.length;){d=Wv(Rob(e),25);if(!b.D(d)){continue}f=Ixb(Yv(c.B(d)));if(f>0){!(tK(a.b.d)&&d.q.d)&&!(uK(a.b.d)&&d.q.b)&&(d.j.e-=0>f/2-0.5?0:f/2-0.5);!(tK(a.b.d)&&d.q.a)&&!(uK(a.b.d)&&d.q.c)&&(d.j.b+=0>f-1?0:f-1);}}}
    function T6(a){var b,c,d;d=a.a.f;switch(a.b){case 0:return new Tob(a.a.f);case 1:return Pl((c=new W6(d),c),S6(a));case 2:switch(a.c.e){case 2:case 1:return Pl(new Tob(d),S6(a));case 3:case 4:return Pl((b=new W6(d),b),S6(a));}}throw new Imb('PortOrder not implemented.')}
    function CT(a,b){var c;if(!!a.d&&(b.c!=a.e.c||hT(a.e.b,b.b))){vU(a.f,a.d);a.a=a.d.d+a.d.c;a.d=null;a.e=null;}eT(b.b)?(a.c=b):(a.b=b);if(b.b==(cT(),$S)&&!b.a||b.b==_S&&b.a||b.b==aT&&b.a||b.b==bT&&!b.a){if(!!a.c&&!!a.b){c=new VN(a.a,a.c.d,b.c-a.a,a.b.d-a.c.d);a.d=c;a.e=b;}}}
    function Cbb(a,b,c,d){this.e=a;this.j=Wv(rJ(a,(Rib(),Kib)),134);this.f=xv(qB,Nzb,9,b,0,1);this.b=xv(HF,Txb,184,b,6,1);this.a=xv(qB,Nzb,9,b,0,1);this.d=xv(HF,Txb,184,b,6,1);this.i=xv(qB,Nzb,9,b,0,1);this.g=xv(HF,Txb,184,b,6,1);this.n=xv(HF,Txb,184,b,6,1);this.k=c;this.c=d;}
    function P6(a,b,c){var d,e;if(b.g==(CX(),BX)&&c.g==BX){if(!LM(Wv(rJ(Wv(rJ(b,(Rib(),uib)),9),(eM(),TL)),28))||Wv(rJ(b,uib),9)!=Wv(rJ(c,uib),9)){return}if(I6(b)||I6(c)){a.d=1;a.b=1;return}e=Wv(yU(b.f,0),7).g;d=Wv(yU(c.f,0),7).g;M6(b).g==(sN(),$M)?H6(a,b,c,e,d):H6(a,c,b,d,e);}}
    function f7(a){if(!a.a.c||!a.a.d){throw new ulb((Gkb(QD),QD.j+' must have a source and target '+(Gkb(UD),UD.j)+' specified.'))}if(a.a.c==a.a.d){throw new ulb('Network simplex does not support self-loops: '+a.a+' '+a.a.c+' '+a.a.d)}o7(a.a.c.g,a.a);o7(a.a.d.c,a.a);return a.a}
    function H6(a,b,c,d,e){if(d==(sN(),ZM)&&e==ZM){N6(a,b)>N6(a,c)?(a.d=K6(a,c)):(a.b=K6(a,b));}else if(d==rN&&e==rN){N6(a,b)<N6(a,c)?(a.d=K6(a,c)):(a.b=K6(a,b));}else if(d==rN&&e==ZM){if(N6(a,b)>N6(a,c)){a.d=K6(a,c);a.b=K6(a,b);}}else {if(N6(a,b)<N6(a,c)){a.d=K6(a,c);a.b=K6(a,b);}}}
    function W1(a){var b,c,d,e,f,g,h,i;i=a.f.c.length;c=0;b=i;e=2*i;for(h=new Tob(a.f);h.a<h.c.c.length;){g=Wv(Rob(h),7);switch(g.g.e){case 2:case 4:g.k=-1;break;case 1:case 3:d=g.b.c.length;f=g.e.c.length;d>0&&f>0?(g.k=b++):d>0?(g.k=c++):f>0?(g.k=e++):(g.k=c++);}}Gpb(a.f,new Z1);}
    function i0(a,b,c,d){var e,f,g,h,i;if(c.d.f==b.f){return}e=new uX(a);sX(e,(CX(),zX));sJ(e,(Rib(),uib),c);sJ(e,(eM(),TL),(KM(),FM));d.c[d.c.length]=e;g=new RX;PX(g,e);QX(g,(sN(),rN));h=new RX;PX(h,e);QX(h,ZM);i=c.d;eW(c,g);f=new hW;qJ(f,c);sJ(f,CL,null);dW(f,h);eW(f,i);j0(e,g,h);}
    function W2(a){var b,c,d,e,f,g,h,i,j;g=rAb;i=rAb;h=null;for(c=new Sub(new Lub(a.e));c.b!=c.c.a.b;){b=Rub(c);if(Wv(b.d,60).c==1){d=Wv(b.e,116).a;j=Wv(b.e,116).b;e=g-d>uAb;f=d-g<uAb&&i-j>uAb;if(e||f){i=Wv(b.e,116).b;g=Wv(b.e,116).a;h=Wv(b.d,60);if(i==0&&g==0){return h}}}}return h}
    function i1(a,b){var c,d,e,f,g,h;f=a.d;h=Wv(rJ(a,(eM(),dM)),15).a;if(h<0){h=0;sJ(a,dM,new llb(h));}b.j.b=h;g=Math.floor(h/2);d=new RX;QX(d,(sN(),rN));PX(d,b);d.i.b=g;e=new RX;QX(e,ZM);PX(e,b);e.i.b=g;eW(a,d);c=new hW;qJ(c,a);sJ(c,CL,null);dW(c,e);eW(c,f);h1(b,a,c);f1(a,c);return c}
    function OZ(a){var b,c;c=Wv(rJ(a,(Mjb(),vjb)),85);b=Wv(rJ(a,(Rib(),mib)),140);if(c==(Xib(),Tib)){sJ(a,vjb,Wib);sJ(a,mib,(Hhb(),Ghb));}else if(c==Vib){sJ(a,vjb,Wib);sJ(a,mib,(Hhb(),Ehb));}else if(b==(Hhb(),Ghb)){sJ(a,vjb,Tib);sJ(a,mib,Fhb);}else if(b==Ehb){sJ(a,vjb,Vib);sJ(a,mib,Fhb);}}
    function QO(a){var b,c,d,e,f;for(d=new Tob(zW(a.e));d.a<d.c.c.length;){c=Wv(Rob(d),129);f=new II(c.e.i);e=xO()[c.e.k];b=Wv(qsb(a.c,e),283);f.b=b.e+b.a;e.b==(DO(),BO)?(f.a=b.d):e.b==AO?(f.a=b.d+(b.c-c.e.j.a)/2):e.b==CO&&(f.a=b.d+b.c-c.e.j.a);c.e.i.a=f.a;c.e.i.b=f.b;b.a+=c.e.j.b+a.d;}}
    function UO(a){var b,c,d;for(c=new Tob(AW(a));c.a<c.c.c.length;){b=Wv(Rob(c),161);d=new II(b.e.i);switch(Wv(b.e,7).g.e){case 4:d.a=0;d.b=a.e.j.b/2;break;case 2:d.a=a.e.j.a;d.b=a.e.j.b/2;break;case 1:d.a=a.e.j.a/2;d.b=0;break;case 3:d.a=a.e.j.a/2;d.b=a.e.j.b;}b.e.i.a=d.a;b.e.i.b=d.b;}}
    function oV(){this.c=xv(kw,hyb,26,(sN(),Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN])).length,12,1);this.b=xv(kw,hyb,26,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,12,1);this.a=xv(kw,hyb,26,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,12,1);Yob(this.c,Uzb);Yob(this.b,Vzb);Yob(this.a,Vzb);}
    function tfb(a,b,c){var d,e,f,g,h,i,j,k;f=Ixb(Yv(a.b.mb().H()));j=Ixb(Yv(rl(b.b)));d=CI(xI(a.a),j-c);e=CI(xI(b.a),c-f);k=vI(d,e);CI(k,1/(j-f));this.a=k;this.b=new GU;h=true;g=a.b.mb();g.H();while(g.G()){i=Ixb(Yv(g.H()));if(h&&i-c>RAb){this.b.ib(c);h=false;}this.b.ib(i);}h&&this.b.ib(c);}
    function G7(a){var b,c,d,e;J7(a,a.n);if(a.d.c.length>0){dpb(a.c);while(R7(a,Wv(Rob(new Tob(a.e.a)),61))<a.e.a.c.length){b=L7(a);e=b.d.e-b.c.e-b.a;b.d.j&&(e=-e);for(d=new Tob(a.e.a);d.a<d.c.c.length;){c=Wv(Rob(d),61);c.j&&(c.e+=e);}dpb(a.c);}dpb(a.c);O7(a,Wv(Rob(new Tob(a.e.a)),61));C7(a);}}
    function Aab(a,b){var c,d,e,f,g,h,i;c=Vzb;h=(CX(),AX);for(e=new Tob(b.a);e.a<e.c.c.length;){d=Wv(Rob(e),9);f=d.g;if(f!=AX){g=Yv(rJ(d,(Rib(),wib)));if(g==null){c=c>0?c:0;d.i.b=c+Wjb(a.a,f,h);}else {d.i.b=(Dxb(g),g);}}i=Wjb(a.a,f,h);d.i.b<c+i+d.e.d&&(d.i.b=c+i+d.e.d);c=d.i.b+d.j.b+d.e.a;h=f;}}
    function mdb(a,b,c){var d,e,f;c.db(b,a);vU(a.g,b);f=a.o.d.Lc(b);hlb(a.k)?(a.k=f):(a.k=Qlb(a.k,f));hlb(a.a)?(a.a=f):(a.a=Nlb(a.a,f));b.g==a.o.d.Mc()?hdb(a.j,f):hdb(a.n,f);for(e=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[new fY(b),new lY(b)]))))));Cm(e);){d=Wv(Dm(e),7);c.R(d)||mdb(a,d,c);}}
    function dlb(a){var b,c,d,e,f;d=(bmb(),a.length);e=d>0&&(a.charCodeAt(0)==45||a.charCodeAt(0)==43)?1:0;for(b=e;b<d;b++){if(Dkb(a.charCodeAt(b))==-1){throw new Ylb(dyb+a+'"')}}f=parseInt(a,10);c=f<eyb;if(isNaN(f)){throw new Ylb(dyb+a+'"')}else if(c||f>$xb){throw new Ylb(dyb+a+'"')}return f}
    function H$(a,b,c,d){var e,f,g,h;e=Wv(nX(b,(sN(),rN)).mb().H(),7);f=Wv(nX(b,ZM).mb().H(),7);for(h=new Tob(a.f);h.a<h.c.c.length;){g=Wv(Rob(h),7);while(g.b.c.length!=0){eW(Wv(yU(g.b,0),12),e);}while(g.e.c.length!=0){dW(Wv(yU(g.e,0),12),f);}}c||sJ(b,(Rib(),qib),null);d||sJ(b,(Rib(),rib),null);}
    function jU(a){var b,c,d,e,f,g,h;h=new $U;for(g=new Tob(a.b);g.a<g.c.c.length;){f=Wv(Rob(g),9);if(f.g==(CX(),xX)){continue}hU(h,f,new FI);for(e=Uh(mX(f));Cm(e);){d=Wv(Dm(e),12);if(d.c.f.g==xX||d.d.f.g==xX){continue}for(c=WI(d.a,0);c.b!=c.d.c;){b=Wv(_ub(c),10);ZU(h,new VS(b.a,b.b));}}}return h}
    function X4(a,b,c,d){var e,f,g;this.e=new jJ;this.a=a;this.b=b;if(a.b<b.b){this.j=a.a;this.k=a.b;this.n=b.b;}else {this.j=b.a;this.k=b.b;this.n=a.b;}e=Wv(rJ(d,(eM(),CL)),44);if(e){for(g=WI(e,0);g.b!=g.d.c;){f=Wv(_ub(g),10);RR(f.a,a.a)&&QI(this.e,f);}}this.g=c;!!this.g&&(this.i=this.j-c.j.d);this.f=d;}
    function Zj(a){hi();var b,c,d,e,f,g;g=new Wub;zpb(g,a);for(c=(f=(new Snb(g.a)).a.bb().mb(),new Ynb(f));c.a.G();){b=(d=Wv(c.a.H(),21),d.yb());_b(b);}switch(g.a.Y()){case 0:return kr(),jr;case 1:return new Gr((e=(new Snb(g.a)).a.bb().mb(),d=Wv((new Ynb(e)).a.H(),21),d.yb()));default:return new lr(g);}}
    function $P(a,b,c,d){var e,f,g;VP(a,c,'x',b.i.a+d.a);VP(a,c,'y',b.i.b+d.b);VP(a,c,Jzb,b.j.a);VP(a,c,Kzb,b.j.b);if(aw(b,9)){if(Wv(rJ(b,(eM(),bM)),86).kb((MN(),JN))){e=Wv(b,9).b;g=Pu(c,Lzb);if(!g){g=new Tu;Ru(c,Lzb,g);}f=g.kc();VP(a,f,'left',e.b);VP(a,f,'top',e.d);VP(a,f,'right',e.c);VP(a,f,Azb,e.a);}}}
    function GR(a,b){var c,d,e,f,g,h,i,j,k,l;g=b==1?wR:vR;for(f=(i=(new Snb(g.a)).a.bb().mb(),new Ynb(i));f.a.G();){e=(h=Wv(f.a.H(),21),Wv(h.yb(),59));for(k=Wv(Dd(a.f.c,e),18).mb();k.G();){j=Wv(k.H(),27);d=Wv(j.b,25);l=Wv(j.a,78);c=l.c;switch(e.e){case 2:case 1:d.j.e+=c;break;case 4:case 3:d.j.d+=c;}}}}
    function IS(a,b){var c,d,e;b.a?(Rwb(a.b,b.b),a.a[b.b.k]=Wv(Twb(a.b,b.b),25),c=Wv(Swb(a.b,b.b),25),!!c&&(a.a[c.k]=b.b),undefined):(d=Wv(Twb(a.b,b.b),25),!!d&&d==a.a[b.b.k]&&!!d.f&&d.f!=b.b.f&&d.i.ib(b.b),e=Wv(Swb(a.b,b.b),25),!!e&&a.a[e.k]==b.b&&!!e.f&&e.f!=b.b.f&&b.b.i.ib(e),Uwb(a.b,b.b),undefined);}
    function p1(a,b){var c,d,e,f,g,h,i;e=new GU;for(c=0;c<=a.i;c++){d=new sY(b);d.k=a.i-c;e.c[e.c.length]=d;}for(h=new Tob(a.o);h.a<h.c.c.length;){g=Wv(Rob(h),9);rX(g,Wv(yU(e,a.i-a.f[g.k]),16));}f=new Tob(e);while(f.a<f.c.c.length){i=Wv(Rob(f),16);i.a.c.length==0&&Sob(f);}b.c.c=xv(UF,syb,1,0,4,1);xU(b.c,e);}
    function N4(a){var b,c,d,e;a.a.a.c=xv(UF,syb,1,0,4,1);for(d=new Tob(a.a.b);d.a<d.c.c.length;){b=Wv(Rob(d),25);b.f=null;}for(e=new Tob(a.a.b);e.a<e.c.c.length;){b=Wv(Rob(e),25);!b.o&&vU(a.a.a,new QR(Bv(tv(kA,1),syb,25,0,[b])));}for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);!!b.o&&OR(b.o.f,b);}}
    function fc(a,b){var c,d,e,f;a=(bmb(),a==null?Wxb:a);c=(a.length+16*b.length,new Amb);f=0;d=0;while(d<b.length){e=a.indexOf('%s',f);if(e==-1){break}jkb(c,a,f,e);xmb(c,b[d++]);f=e+2;}wmb(c,a,f,a.length);if(d<b.length){c.a+=' [';xmb(c,b[d++]);while(d<b.length){c.a+=', ';xmb(c,b[d++]);}c.a+=']';}return c.a}
    function _vb(a,b,c,d){var e,f;if(!b){return c}else {e=a.a.$b(c.d,b.d);if(e==0){d.d=job(b,c.e);d.b=true;return b}f=e<0?0:1;b.a[f]=_vb(a,b.a[f],c,d);if(awb(b.a[f])){if(awb(b.a[1-f])){b.b=true;b.a[0].b=false;b.a[1].b=false;}else {awb(b.a[f].a[f])?(b=hwb(b,1-f)):awb(b.a[f].a[1-f])&&(b=gwb(b,1-f));}}}return b}
    function GY(a,b){var c,d,e,f,g,h,i,j,k,l;i=pmb(b.a);h=hw(Llb(i/a.a));l=b.a;g=0;j=h;for(f=0;f<a.a;++f){k=(bmb(),l.substr((0>g?0:g)<i?0>g?0:g:i,(0>(j<i?j:i)?0:j<i?j:i)-((0>g?0:g)<i?0>g?0:g:i)));g=j;j+=h;d=Wv(yU(a.c,f),9);c=new dX(k);c.j.b=b.j.b;Fd(a.b,b,c);vU(d.c,c);}BU(a.g.c,b);vU(a.i,(e=new PY(a,b),e));}
    function p8(a,b,c){var d,e,f,g,h,i,j,k,l;b.k=1;f=b.d;for(l=oX(b,(djb(),bjb)).mb();l.G();){k=Wv(l.H(),7);for(e=new Tob(k.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);j=d.d.f;if(b!=j){g=j.d;if(g.k<=f.k){h=f.k+1;if(h==c.c.c.length){i=new sY(c);i.k=h;vU(c.c,i);rX(j,i);}else {i=Wv(yU(c.c,h),16);rX(j,i);}p8(a,j,c);}}}}}
    function SO(a){var b,c,d,e,f;b=a.e.j;for(d=new Tob(AW(a));d.a<d.c.c.length;){c=Wv(Rob(d),161);e=Wv(oW(c,(eM(),LL)),15);!e&&(e=new llb(0));f=new II(c.e.i);switch(Wv(c.e,7).g.e){case 4:f.a=-c.e.j.a-e.a;break;case 2:f.a=b.a+e.a;break;case 1:f.b=-c.e.j.b-e.a;break;case 3:f.b=b.b+e.a;}c.e.i.a=f.a;c.e.i.b=f.b;}}
    function PZ(a){var b,c,d;d=Wv(rJ(a,(eM(),JL)),18);if(d.V()){return}c=(b=Wv(Hkb(Gz),11),new atb(b,Wv(exb(b,b.length),11),0));d.kb((oM(),jM))?Wsb(c,jM):Wsb(c,kM);d.kb(hM)||Wsb(c,hM);d.kb(gM)?Wsb(c,nM):d.kb(fM)?Wsb(c,mM):d.kb(iM)&&Wsb(c,lM);d.kb(nM)?Wsb(c,gM):d.kb(mM)?Wsb(c,fM):d.kb(lM)&&Wsb(c,iM);sJ(a,JL,c);}
    function afb(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o;m=Zeb(a,c);for(i=0;i<b;i++){e.J(c);n=new GU;o=Wv(d.H(),92);for(k=m+i;k<a.c;k++){h=o;o=Wv(d.H(),92);vU(n,new tfb(h,o,c));}for(l=m+i;l<a.c;l++){d.M();l>m+i&&d.I();}for(g=new Tob(n);g.a<g.c.c.length;){f=Wv(Rob(g),92);d.J(f);}if(i<b-1){for(j=m+i;j<a.c;j++){d.M();}}}}
    function CW(a){var b,c,d,e;if(a.d&&Wv(a.e,7).f.g==(CX(),BX)){return ypb(),ypb(),vpb}else if(!a.a){a.a=new GU;for(d=new Tob(Wv(a.e,7).b);d.a<d.c.c.length;){b=Wv(Rob(d),12);vU(a.a,new tW(b));}if(a.d){e=Wv(rJ(Wv(a.e,7),(Rib(),Bib)),9);if(e){for(c=Uh(iX(e));Cm(c);){b=Wv(Dm(c),12);vU(a.a,new tW(b));}}}}return a.a}
    function EW(a){var b,c,d,e;if(a.d&&Wv(a.e,7).f.g==(CX(),BX)){return ypb(),ypb(),vpb}else if(!a.c){a.c=new GU;for(d=new Tob(Wv(a.e,7).e);d.a<d.c.c.length;){b=Wv(Rob(d),12);vU(a.c,new tW(b));}if(a.d){e=Wv(rJ(Wv(a.e,7),(Rib(),Bib)),9);if(e){for(c=Uh(mX(e));Cm(c);){b=Wv(Dm(c),12);vU(a.c,new tW(b));}}}}return a.c}
    function N1(a,b){var c,d,e,f,g,h,i,j;h=Wv(rJ(a,(Rib(),uib)),7);i=MI(Bv(tv(qz,1),Fzb,10,0,[h.f.i,h.i,h.a])).a;j=a.f.i.b;c=Wv(FU(a.b,xv(dB,gAb,12,a.b.c.length,0,1)),47);for(e=0,f=c.length;e<f;++e){d=c[e];eW(d,h);SI(d.a,new HI(i,j));if(b){g=Wv(rJ(d,(eM(),CL)),44);if(!g){g=new jJ;sJ(d,CL,g);}QI(g,new HI(i,j));}}}
    function O1(a,b){var c,d,e,f,g,h,i,j;e=Wv(rJ(a,(Rib(),uib)),7);i=MI(Bv(tv(qz,1),Fzb,10,0,[e.f.i,e.i,e.a])).a;j=a.f.i.b;c=Wv(FU(a.e,xv(dB,gAb,12,a.e.c.length,0,1)),47);for(g=0,h=c.length;g<h;++g){f=c[g];dW(f,e);RI(f.a,new HI(i,j));if(b){d=Wv(rJ(f,(eM(),CL)),44);if(!d){d=new jJ;sJ(f,CL,d);}QI(d,new HI(i,j));}}}
    function X2(a){var b,c,d,e,f,g,h,i,j;g=rAb;i=rAb;h=null;for(c=new Sub(new Lub(a.e));c.b!=c.c.a.b;){b=Rub(c);if(gw(b.d)===gw((Ieb(),keb))||gw(b.d)===gw(leb)){d=Wv(b.e,116).a;j=Wv(b.e,116).b;e=g-d>uAb;f=d-g<uAb&&i-j>uAb;if(e||f){i=Wv(b.e,116).b;g=Wv(b.e,116).a;h=Wv(b.d,60);if(i==0&&g==0){return h}}}}return h}
    function P4(a,b){var c,d,e,f,g;a.d=b;Ymb(a.b);a.c=false;h:for(d=new Tob(a.d.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);for(f=new Tob(c.a);f.a<f.c.c.length;){e=Wv(Rob(f),9);if(!sl(gX(e))){a.c=true;break h}}}g=Vsb((sK(),qK),Bv(tv(Bz,1),uyb,59,0,[oK,pK]));if(!a.c){Wsb(g,rK);Wsb(g,nK);}a.a=new NR(g);O4(a);return a.a}
    function $2(){var a,b,c,d,e;this.e=(mp(),new wub);this.b=(c=Wv(Hkb(_E),11),new atb(c,Wv(exb(c,c.length),11),0));this.c=(d=Wv(Hkb(_E),11),new atb(d,Wv(exb(d,d.length),11),0));this.a=(e=Wv(Hkb(_E),11),new atb(e,Wv(exb(e,e.length),11),0));for(b=(Ieb(),Ieb(),feb).mb();b.G();){a=Wv(b.H(),60);tub(this.e,a,new _2);}}
    function gdb(a,b,c){var d,e,f,g,h,i;if(Jlb(a.k-a.a)<dAb||Jlb(b.k-b.a)<dAb){return}d=edb(a.n,b.j,c);e=edb(b.n,a.j,c);f=fdb(a.n,b.k,b.a)+fdb(b.j,a.k,a.a);g=fdb(b.n,a.k,a.a)+fdb(a.j,b.k,b.a);h=16*d+f;i=16*e+g;if(h<i){new kdb(a,b,i-h);}else if(h>i){new kdb(b,a,h-i);}else if(h>0&&i>0){new kdb(a,b,0);new kdb(b,a,0);}}
    function c3(a,b){var c,d,e,f,g,h,i,j,k;j=new GU;k=null;for(d=Wv(qsb(a3,a),20).mb();d.G();){c=Wv(d.H(),75);for(i=(f=(new Snb(c.c.a)).a.bb().mb(),new Ynb(f));i.a.G();){g=(e=Wv(i.a.H(),21),Wv(e.yb(),7));Anb(b,g);J2(g,a.b);}xU(j,c.b);k=a.a;}Dpb(j);K2(j,k);for(h=new Tob(j);h.a<h.c.c.length;){g=Wv(Rob(h),7);Anb(b,g);}}
    function GP(){var b={'layout':function(a){Rxb(IP(a));}};{typeof document!==Czb&&($wnd.$klay=b);module.exports&&(module.exports=b);typeof document===Czb&&typeof self!==Czb&&self.addEventListener('message',function(a){b.layout(a.data);},false);}}
    function _cb(a,b,c,d,e){var f,g,h;h=e?d.b:d.a;if(h>c.k&&h<c.a||c.j.b!=0&&c.n.b!=0&&(Jlb(h-Ixb(Yv(UI(c.j))))<dAb&&Jlb(h-Ixb(Yv(UI(c.n))))<dAb||Jlb(h-Ixb(Yv(VI(c.j))))<dAb&&Jlb(h-Ixb(Yv(VI(c.n))))<dAb)){if(!ttb(a.b,d)){g=Wv(rJ(b,(eM(),CL)),44);if(!g){g=new jJ;sJ(b,CL,g);}f=new II(d);TI(g,f,g.c.b,g.c);stb(a.b,f);}}}
    function lU(a,b,c){var d,e,f,g,h,i,j,k,l;d=c.c;e=c.d;h=MX(b.c);i=MX(b.d);if(d==b.c){h=mU(a,h,e);i=nU(b.d);}else {h=nU(b.c);i=mU(a,i,e);}j=new kJ(b.a);TI(j,h,j.a,j.a.a);TI(j,i,j.c.b,j.c);g=b.c==d;l=new pV;for(f=0;f<j.b-1;++f){k=new RJ(Wv(tn(j,f),10),Wv(tn(j,f+1),10));g&&f==0||!g&&f==j.b-2?(l.b=k):vU(l.a,k);}return l}
    function GW(a,b){var c,d,e,f;f=a.g.e-b.g.e;if(f!=0){return f}c=Wv(rJ(a,(eM(),UL)),24);d=Wv(rJ(b,UL),24);if(!!c&&!!d){e=c.a-d.a;if(e!=0){return e}}switch(a.g.e){case 1:return glb(a.i.a,b.i.a);case 2:return glb(a.i.b,b.i.b);case 3:return glb(b.i.a,a.i.a);case 4:return glb(b.i.b,a.i.b);default:throw new ulb(iAb);}}
    function KO(a,b){var c,d,e,f,g;g=new FI;for(f=new Tob(AW(a));f.a<f.c.c.length;){e=Wv(Rob(f),161);switch(Wv(e.e,7).g.e){case 4:case 2:g.b=Nlb(g.b,e.e.i.b+e.e.j.b+(b?(d=Wv(e.e,7).d,new EP(d.d,d.b,d.a,d.c)).a:0));break;case 1:case 3:g.a=Nlb(g.a,e.e.i.a+e.e.j.a+(b?(c=Wv(e.e,7).d,new EP(c.d,c.b,c.a,c.c)).c:0));}}return g}
    function d3(a,b){var c,d,e,f,g,h,i;e=new GU;i=new GU;c=Wv(qsb(a3,a),20).mb();while(c.G()){d=Wv(c.H(),75);wU(e,d.b);wU(e,$db(d));if(c.G()){d=Wv(c.H(),75);xU(i,$db(d));xU(i,d.b);}}K2(e,a.b);K2(i,a.a);for(h=new Tob(e);h.a<h.c.c.length;){f=Wv(Rob(h),7);Anb(b,f);}for(g=new Tob(i);g.a<g.c.c.length;){f=Wv(Rob(g),7);Anb(b,f);}}
    function ohb(){ohb=iI;fhb=new phb('COMMENTS',0);hhb=new phb('EXTERNAL_PORTS',1);ihb=new phb('HYPEREDGES',2);jhb=new phb('HYPERNODES',3);khb=new phb('NON_FREE_PORTS',4);lhb=new phb('NORTH_SOUTH_PORTS',5);nhb=new phb('SELF_LOOPS',6);ehb=new phb('CENTER_LABELS',7);ghb=new phb('END_LABELS',8);mhb=new phb('PARTITIONS',9);}
    function Jxb(a,b){var c,d,e,f;a=(bmb(),a==null?Wxb:a);c=(a.length+16*b.length,new Amb);f=0;d=0;while(d<b.length){e=a.indexOf('%s',f);if(e==-1){break}ymb(c,a.substr(f,e-f));xmb(c,b[d++]);f=e+2;}ymb(c,imb(a,f,a.length-f));if(d<b.length){c.a+=' [';xmb(c,b[d++]);while(d<b.length){c.a+=', ';xmb(c,b[d++]);}c.a+=']';}return c.a}
    function pX(a,b,c){var d,e;e=null;switch(b.e){case 1:e=(LX(),GX);break;case 2:e=(LX(),IX);}d=null;switch(c.e){case 1:d=(LX(),HX);break;case 2:d=(LX(),FX);break;case 3:d=(LX(),JX);break;case 4:d=(LX(),KX);}return !!e&&!!d?pl(a.f,(hc(),new ic(new opb(Bv(tv(tw,1),syb,68,0,[Wv(_b(e),68),Wv(_b(d),68)]))))):(ypb(),ypb(),vpb)}
    function vY(a,b,c){var d,e,f,g,h,i,j;i=Eo(mX(b));for(e=WI(i,0);e.b!=e.d.c;){d=Wv(_ub(e),12);j=d.d.f;if(!(Ckb(Ixb(Xv(rJ(j,(Rib(),Vhb)))))&&rJ(j,uib)!=null)&&j.g==(CX(),wX)&&!Ckb(Ixb(Xv(rJ(d,Iib))))&&d.d.g==(sN(),rN)){f=rY(j.d)-rY(b.d);if(f>1){c?(g=rY(b.d)+1):(g=rY(j.d)-1);h=Wv(yU(a.a.c,g),16);rX(j,h);}vY(a,j,c);}}return b}
    function Hcb(a,b){var c,d,e,f;b.d?(e=a.a.c==(Gbb(),Fbb)?iX(b.b):mX(b.b)):(e=a.a.c==(Gbb(),Ebb)?iX(b.b):mX(b.b));f=false;for(d=(Il(),new Im(Dl(ul(e.a,new yl))));Cm(d);){c=Wv(Dm(d),12);if(a.c.a[c.c.f.d.k]===a.c.a[c.d.f.d.k]){continue}f=true;if(ttb(a.b,a.a.f[zcb(c,b.b).k])){b.c=true;b.a=c;return b}}b.c=f;b.a=null;return b}
    function K4(a,b,c){var d,e,f,g;d=Wv(rJ(a.d,(eM(),pL)),15).a;for(f=new Tob(a.a.b);f.a<f.c.c.length;){e=Wv(Rob(f),25);if(aw(e,93)){g=Wv(e,93).b;if(g.g==(CX(),xX)){switch(Wv(rJ(g,(Rib(),hib)),32).e){case 4:g.i.a=b.a-d;break;case 2:g.i.a=c.a+d-(g.j.a+g.e.c);break;case 1:g.i.b=b.b-d;break;case 3:g.i.b=c.b+d-(g.j.b+g.e.a);}}}}}
    function Ztb(){if(!Object.create||!Object.getOwnPropertyNames){return false}var a='__proto__';var b=Object.create(null);if(b[a]!==undefined){return false}var c=Object.getOwnPropertyNames(b);if(c.length!=0){return false}b[a]=42;if(b[a]!==42){return false}if(Object.getOwnPropertyNames(b).length==0){return false}return true}
    function eS(a){var b,c,d,e,f,g,h,i,j;for(g=new Tob(a.a.a);g.a<g.c.c.length;){e=Wv(Rob(g),78);e.f=0;e.e.a.Q();}for(f=new Tob(a.a.a);f.a<f.c.c.length;){e=Wv(Rob(f),78);for(c=(j=(new Snb(e.a.a)).a.bb().mb(),new Ynb(j));c.a.G();){b=(d=Wv(c.a.H(),21),Wv(d.yb(),25));for(i=b.i.mb();i.G();){h=Wv(i.H(),25);if(h.f!=e){stb(e.e,h);++h.f.f;}}}}}
    function bcb(a,b,c,d){var e,f,g,h;if(b.g==(CX(),wX)){for(f=Uh(iX(b));Cm(f);){e=Wv(Dm(f),12);g=e.c.f;if((g.g==wX||Ckb(Ixb(Xv(rJ(g,(Rib(),Vhb))))))&&a.d.a[e.c.f.d.k]==d&&a.d.a[b.d.k]==c){return true}}}if(b.g==zX){for(f=Uh(iX(b));Cm(f);){e=Wv(Dm(f),12);h=e.c.f.g;if(h==zX&&a.d.a[e.c.f.d.k]==d&&a.d.a[b.d.k]==c){return true}}}return false}
    function cfb(a){var b,c,d,e,f,g;e=a.g.tb();d=a.b.tb();if(a.e){for(c=0;c<a.c;c++){e.H();}}else {for(c=0;c<a.c-1;c++){e.H();e.I();}}b=Ixb(Yv(e.H()));while(a.i-b>RAb){f=b;g=0;while((b-f<=0?0-(b-f):b-f)<RAb){++g;b=Ixb(Yv(e.H()));d.H();}if(g<a.c){e.M();afb(a,a.c-g,f,d,e);e.H();}d.M();}if(!a.e){for(c=0;c<a.c-1;c++){e.H();e.I();}}a.e=true;a.d=true;}
    function O2(a){var b,c,d,e;switch(V2(a.a).c){case 4:return Ieb(),oeb;case 3:return Wv(S2(a.a).mb().H(),60);case 2:d=V2(a.a);c=new jtb(d);b=Wv(itb(c),60);e=Wv(itb(c),60);return Meb(b)==e?Zsb(d,(Ieb(),oeb))?ieb:oeb:Leb(Leb(b))==e?Leb(b):Neb(b);case 1:d=V2(a.a);return Meb(Wv(itb(new jtb(d)),60));case 0:return Ieb(),peb;default:return null;}}
    function Q3(a,b){var c;oR.call(this);this.a=Wv(rJ(b,(Rib(),Jib)),15).a;this.c=this.a*Wv(rJ(b,(Mjb(),Ejb)),15).a;this.b=a;this.j=new VN(a.i.a-a.e.b,a.i.b-a.e.d,a.j.a+a.e.b+a.e.c,a.j.b+a.e.d+a.e.a);BI(this.g);c=tl(iX(a))-tl(mX(a));c<0?vS(this.n,true,(sK(),oK)):c>0&&vS(this.n,true,(sK(),pK));a.g==(CX(),xX)&&wS(this.n,false,false,false,false);}
    function UT(a,b,c){var d,e,f,g,h,i,j,k,l,m;f=new HI(b,c);for(k=new Tob(a.b);k.a<k.c.c.length;){j=Wv(Rob(k),9);vI(j.i,f);for(m=new Tob(j.f);m.a<m.c.c.length;){l=Wv(Rob(m),7);for(e=new Tob(l.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);hJ(d.a,f);g=Wv(rJ(d,(eM(),CL)),44);!!g&&hJ(g,f);for(i=new Tob(d.b);i.a<i.c.c.length;){h=Wv(Rob(i),33);vI(h.i,f);}}}}}
    function TW(a,b,c){var d,e,f,g,h,i,j,k,l,m;f=new HI(b,c);for(k=new Tob(a.b);k.a<k.c.c.length;){j=Wv(Rob(k),9);vI(j.i,f);for(m=new Tob(j.f);m.a<m.c.c.length;){l=Wv(Rob(m),7);for(e=new Tob(l.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);hJ(d.a,f);g=Wv(rJ(d,(eM(),CL)),44);!!g&&hJ(g,f);for(i=new Tob(d.b);i.a<i.c.c.length;){h=Wv(Rob(i),33);vI(h.i,f);}}}}}
    function X0(a,b){var c,d,e,f,g;for(g=new Tob(a.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);if(b){if(f.b.c.length!=0){throw new $J((e=lX(a),nAb+(e==null?Dlb(a.k):e)+oAb+pAb+qAb))}}else {for(d=new Tob(f.b);d.a<d.c.c.length;){c=Wv(Rob(d),12);if(gw(rJ(c.c.f,(Mjb(),vjb)))!==gw((Xib(),Tib))){throw new $J((e=lX(a),nAb+(e==null?Dlb(a.k):e)+oAb+pAb+qAb))}}}}}
    function y6(a,b,c){var d,e,f,g,h,i,j;d=0;j=nX(b,c);for(i=j.mb();i.G();){h=Wv(i.H(),7);if(Wv(rJ(h,(Rib(),Bib)),9)){g=Wv(rJ(h,Bib),9);nX(g,(sN(),ZM)).mb().G()&&(d+=(f=a.k?1:NX(Wv(yU(g.f,0),7)),f*Slb(w6(a,b,c).a-1-Wv(Smb(a.i,h),24).a,B6(a,b,g))));nX(g,rN).mb().G()&&(d+=(e=a.k?1:NX(Wv(yU(g.f,0),7)),e*Slb(Wv(Smb(a.i,h),24).a,B6(a,b,g))));}}return d}
    function J7(a,b){var c,d,e,f,g,h,i;e=xv(mw,Yyb,26,a.e.a.c.length,12,1);for(g=new Tob(a.e.a);g.a<g.c.c.length;){f=Wv(Rob(g),61);e[f.b]+=f.c.c.length;}h=Eo(b);while(h.b!=0){f=Wv(h.b==0?null:(Bxb(h.b!=0),$I(h,h.a.a)),61);for(d=new Tob(f.g);d.a<d.c.c.length;){c=Wv(Rob(d),89);i=c.d;i.e=Plb(i.e,f.e+c.a);--e[i.b];e[i.b]==0&&(TI(h,i,h.c.b,h.c),true);}}}
    function nP(a,b,c,d,e,f,g){a.d=d.e.i.a;a.e=d.e.i.b;if(e){a.d+=e.e.i.a;a.e+=e.e.i.b;}a.c=b.e.j.a;a.b=b.e.j.b;if(!e){c?(a.d-=g+b.e.j.a):(a.d+=d.e.j.a+g);}else {switch(Wv(e.e,7).g.e){case 0:case 2:a.d+=e.e.j.a+g+f.a+g;break;case 4:a.d-=g+f.a+g+b.e.j.a;break;case 1:a.d+=e.e.j.a+g;a.e-=g+f.b+g+b.e.j.b;break;case 3:a.d+=e.e.j.a+g;a.e+=e.e.j.b+g+f.b+g;}}}
    function V9(a,b){var c,d,e,f,g,h,i,j,k;e=new GU;for(i=new Tob(b);i.a<i.c.c.length;){f=Wv(Rob(i),9);vU(e,a.b[f.d.k][f.k]);}S9(a,e);while(k=T9(e)){U9(a,Wv(k.a,102),Wv(k.b,102),e);}b.c=xv(UF,syb,1,0,4,1);for(d=new Tob(e);d.a<d.c.c.length;){c=Wv(Rob(d),102);for(g=c.d,h=0,j=g.length;h<j;++h){f=g[h];b.c[b.c.length]=f;a.a[f.d.k][f.k].a=W9(c.g,c.d[0]).a;}}}
    function lS(a){var b,c,d,e,f,g,h;h=(mp(),new ntb);for(d=new Tob(a.a.b);d.a<d.c.c.length;){b=Wv(Rob(d),25);Umb(h,b,new GU);}for(e=new Tob(a.a.b);e.a<e.c.c.length;){b=Wv(Rob(e),25);b.r=Vzb;for(g=b.i.mb();g.G();){f=Wv(g.H(),25);Wv(re(Ktb(h.d,f)),20).ib(b);}}for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.i.Q();b.i=Wv(re(Ktb(h.d,b)),20);}eS(a);}
    function kU(a){var b,c,d,e,f;e=Wv(yU(a.b,0),9);b=new uX(a);vU(a.b,b);b.j.a=Nlb(1,e.j.a);b.j.b=Nlb(1,e.j.b);b.i.a=e.i.a;b.i.b=e.i.b;switch(Wv(rJ(e,(Rib(),hib)),32).e){case 4:b.i.a+=2;break;case 1:b.i.b+=2;break;case 2:b.i.a-=2;break;case 3:b.i.b-=2;}d=new RX;PX(d,b);c=new hW;f=Wv(yU(e.f,0),7);dW(c,f);eW(c,d);vI(BI(d.i),f.i);vI(BI(d.a),f.a);return b}
    function T8(a){var b,c,d,e,f,g,h,i,j;j=(mp(),new ntb);b=0;c=new l7;for(h=a.mb();h.G();){f=Wv(h.H(),9);i=x7(z7(y7(new A7,b++),f),c);Ltb(j.d,f,i);}for(g=a.mb();g.G();){f=Wv(g.H(),9);for(e=Uh(mX(f));Cm(e);){d=Wv(Dm(e),12);if(bW(d)){continue}f7(i7(h7(g7(j7(new k7,Plb(1,Wv(rJ(d,(Rib(),Eib)),24).a)),1),Wv(Smb(j,d.c.f),61)),Wv(Smb(j,d.d.f),61)));}}return c}
    function E2(a){var b,c;if(a.V()){return}c=Wv(a.sb(0),75).f;new g3(a);b=new Fnb(c.f,0);e3((Ieb(),neb),b);f3(Eeb,b);D2((sN(),$M),b);d3(meb,b);f3(qeb,b);c3(jeb,b);e3(keb,b);D2(ZM,b);d3(ieb,b);e3(leb,b);c3(peb,b);e3(qeb,b);D2(pN,b);d3(oeb,b);e3(Eeb,b);c3(Heb,b);f3(leb,b);while(b.b<b.d.Y()){Bxb(b.b<b.d.Y());b.d.sb(b.c=b.b++);}d3(Geb,b);f3(keb,b);f3(neb,b);}
    function F2(a){var b,c;if(a.V()){return}c=Wv(a.sb(0),75).f;new g3(a);b=new Fnb(c.f,0);e3((Ieb(),neb),b);f3(Eeb,b);D2((sN(),$M),b);c3(meb,b);f3(qeb,b);c3(jeb,b);e3(keb,b);D2(ZM,b);c3(ieb,b);e3(leb,b);c3(peb,b);e3(qeb,b);D2(pN,b);c3(oeb,b);e3(Eeb,b);c3(Heb,b);f3(leb,b);while(b.b<b.d.Y()){Bxb(b.b<b.d.Y());b.d.sb(b.c=b.b++);}c3(Geb,b);f3(keb,b);f3(neb,b);}
    function N7(a){var b,c,d,e,f,g,h,i,j;e=eyb;g=$xb;for(j=new Tob(a.e.a);j.a<j.c.c.length;){h=Wv(Rob(j),61);g=Slb(g,h.e);e=Plb(e,h.e);}f=0;d=xv(mw,Yyb,26,e-g+1,12,1);for(i=new Tob(a.e.a);i.a<i.c.c.length;){h=Wv(Rob(i),61);h.e-=g;++d[h.e];}if(a.k){for(c=new Tob(a.k.c);c.a<c.c.c.length;){b=Wv(Rob(c),16);d[f++]+=b.a.c.length;if(d.length==f){break}}}return d}
    function L4(a){var b,c,d,e;M4(a);J4(a);e=new HI(Uzb,Uzb);b=new HI(Vzb,Vzb);for(d=new Tob(a.a.b);d.a<d.c.c.length;){c=Wv(Rob(d),25);e.a=Qlb(e.a,c.j.d);e.b=Qlb(e.b,c.j.e);b.a=Nlb(b.a,c.j.d+c.j.c);b.b=Nlb(b.b,c.j.e+c.j.b);}vI(BI(a.d.d),zI(new HI(e.a,e.b)));vI(BI(a.d.e),EI(new HI(b.a,b.b),e));K4(a,e,b);a.a.a.c=xv(UF,syb,1,0,4,1);a.a.b.c=xv(UF,syb,1,0,4,1);}
    function j1(a,b){var c,d,e,f,g,h,i,j,k,l;g=a.e;k=Wv(rJ(a,(Rib(),Qib)),20);l=0;if(k){i=0;for(f=k.mb();f.G();){e=Wv(f.H(),9);i=Nlb(i,e.j.b);l+=e.j.a;}l+=b/2*(k.Y()-1);g.d+=i+b;}c=Wv(rJ(a,Yhb),20);d=0;if(c){i=0;for(f=c.mb();f.G();){e=Wv(f.H(),9);i=Nlb(i,e.j.b);d+=e.j.a;}d+=b/2*(c.Y()-1);g.a+=i+b;}h=l>d?l:d;if(h>a.j.a){j=(h-a.j.a)/2;g.b=Nlb(g.b,j);g.c=Nlb(g.c,j);}}
    function ST(a,b,c,d){var e,f,g,h,i,j,k,l,m,n;g=uI(b.d,c,d);for(l=new Tob(b.b);l.a<l.c.c.length;){k=Wv(Rob(l),9);vI(k.i,g);for(n=new Tob(k.f);n.a<n.c.c.length;){m=Wv(Rob(n),7);for(f=new Tob(m.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);hJ(e.a,g);h=Wv(rJ(e,(eM(),CL)),44);!!h&&hJ(h,g);for(j=new Tob(e.b);j.a<j.c.c.length;){i=Wv(Rob(j),33);vI(i.i,g);}}}vU(a.b,k);k.a=a;}}
    function Q8(a,b){var c,d,e,f,g;a.c==null||a.c.length<b.c.length?(a.c=xv(KH,xAb,26,b.c.length,13,1)):dpb(a.c);a.a=new GU;d=0;for(g=new Tob(b);g.a<g.c.c.length;){e=Wv(Rob(g),9);e.k=d++;}c=new aJ;for(f=new Tob(b);f.a<f.c.c.length;){e=Wv(Rob(f),9);if(!a.c[e.k]){R8(a,e);c.b==0||(Bxb(c.b!=0),Wv(c.a.a.c,20)).Y()<a.a.c.length?RI(c,a.a):SI(c,a.a);a.a=new GU;}}return c}
    function xfb(a,b,c){var d,e,f,g,h,i,j,k,l;d=sgb(a.g);j=vI(xI(a.i),a.a);k=vI(xI(b.i),b.a);e=vI(new II(j),CI(new GI(d),c));l=vI(new II(k),CI(new GI(d),c));g=CI(EI(new II(e),l),0.5);i=vI(vI(new II(l),g),CI(new GI(d),Tlb(g.a*g.a+g.b*g.b)));h=new ufb(Bv(tv(qz,1),Fzb,10,0,[j,e,i,l,k]));f=$eb(h,0.5,false);h.a=f;bfb(h,new Ffb(Bv(tv(qz,1),Fzb,10,0,[f,j,k])));return h}
    function F7(a,b){var c,d,e,f,g;nI(b,'Network simplex',1);if(a.e.a.c.length<1){pI(b);return}for(f=new Tob(a.e.a);f.a<f.c.c.length;){e=Wv(Rob(f),61);e.e=0;}g=a.e.a.c.length>=40;g&&Q7(a);H7(a);G7(a);c=K7(a);d=0;while(!!c&&d<a.f){E7(a,c,D7(a,c));c=K7(a);++d;}g&&P7(a);a.a?B7(a,N7(a)):N7(a);a.b=null;a.d=null;a.p=null;a.c=null;a.g=null;a.i=null;a.n=null;a.o=null;pI(b);}
    function uQ(a){var b,c,d,e,f,g,h,i,j,k;j=new vtb;e=(mp(),new ntb);for(h=0,i=a.length;h<i;++h){g=a[h];b=g.mc();j.a.db(b,j);b==null?Ltb(e.d,null,g):dub(e.e,b,g);k=gmb(b,(bmb(),b.lastIndexOf('.'))+1,b.length);if(!ttb(sQ,k)){j.a.db(k,j);k==null?Ltb(e.d,null,g):dub(e.e,k,g);stb(sQ,k);}}d=(hi(),Yj((f=(new Snb(j.a)).a.bb().mb(),new Ynb(f))));c=tj(e);return new RJ(d,c)}
    function E7(a,b,c){var d,e,f;if(!b.e){throw new slb('Given leave edge is no tree edge.')}if(c.e){throw new slb('Given enter edge is a tree edge already.')}b.e=false;utb(a.p,b);c.e=true;stb(a.p,c);d=c.d.e-c.c.e-c.a;I7(a,c.d,b)||(d=-d);for(f=new Tob(a.e.a);f.a<f.c.c.length;){e=Wv(Rob(f),61);I7(a,e,b)||(e.e+=d);}a.j=1;dpb(a.c);O7(a,Wv(Rob(new Tob(a.e.a)),61));C7(a);}
    function dU(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;if(a.V()){return new FI}j=0;l=0;for(e=a.mb();e.G();){d=Wv(e.H(),55);f=d.e;j=Nlb(j,f.a);l+=f.a*f.b;}j=Nlb(j,Math.sqrt(l)*Wv(rJ(Wv(a.mb().H(),55),(Rib(),Rhb)),15).a);m=0;n=0;i=0;c=b;for(h=a.mb();h.G();){g=Wv(h.H(),55);k=g.e;if(m+k.a>j){m=0;n+=i+b;i=0;}UT(g,m,n);c=Nlb(c,m+k.a);i=Nlb(i,k.b);m+=k.a+b;}return new HI(c+b,n+i+b)}
    function Nm(a,b,c,d){var e,f,g;g=new Sn(b,c);if(!a.a){a.a=a.e=g;Umb(a.b,b,new Rn(g));++a.c;}else if(!d){a.e.b=g;g.d=a.e;a.e=g;e=Wv(Smb(a.b,b),126);if(!e){Umb(a.b,b,new Rn(g));++a.c;}else {++e.a;f=e.c;f.c=g;g.e=f;e.c=g;}}else {e=Wv(Smb(a.b,b),126);++e.a;g.d=d.d;g.e=d.e;g.b=d;g.c=d;!d.e?(Wv(Smb(a.b,b),126).b=g):(d.e.c=g);!d.d?(a.a=g):(d.d.b=g);d.d=g;d.e=g;}++a.d;return g}
    function hS(a){var b,c,d,e,f,g,h,i;if(a.e){throw new ulb((Gkb(nA),'The '+nA.j+Yzb))}a.d==(sK(),qK)&&gS(a,oK);for(c=new Tob(a.a.a);c.a<c.c.c.length;){b=Wv(Rob(c),78);b.f=0;}for(g=new Tob(a.a.b);g.a<g.c.c.length;){f=Wv(Rob(g),25);f.r=Vzb;for(e=f.i.mb();e.G();){d=Wv(e.H(),25);++d.f.f;}}a.b.Cc(a);for(i=new Tob(a.a.b);i.a<i.c.c.length;){h=Wv(Rob(i),25);h.p=true;}return a}
    function V1(a,b,c,d,e){var f,g,h,i;f=new uX(a);sX(f,(CX(),BX));sJ(f,(eM(),TL),(KM(),FM));sJ(f,(Rib(),uib),b.c.f);g=new RX;sJ(g,uib,b.c);QX(g,e);PX(g,f);sJ(b.c,Bib,f);h=new uX(a);sX(h,BX);sJ(h,TL,FM);sJ(h,uib,b.d.f);i=new RX;sJ(i,uib,b.d);QX(i,e);PX(i,h);sJ(b.d,Bib,h);dW(b,g);eW(b,i);Fxb(0,c.c.length);fxb(c.c,0,f);d.c[d.c.length]=h;sJ(f,aib,Elb(1));sJ(h,aib,Elb(1));}
    function j2(a,b){var c,d,e,f,g;g=Wv(rJ(a.f,(eM(),TL)),28);f=a.g.e-b.g.e;if(f!=0||g==(KM(),HM)){return f}if(g==(KM(),EM)){c=Wv(rJ(a,UL),24);d=Wv(rJ(b,UL),24);if(!!c&&!!d){e=c.a-d.a;if(e!=0){return e}}}switch(a.g.e){case 1:return glb(a.i.a,b.i.a);case 2:return glb(a.i.b,b.i.b);case 3:return glb(b.i.a,a.i.a);case 4:return glb(b.i.b,a.i.b);default:throw new ulb(iAb);}}
    function hfb(a){var b,c,d,e,f,g,h,i,j,k,l;h=new GU;f=Ixb(Yv(a.g.sb(a.g.Y()-1)));for(l=a.g.mb();l.G();){k=Yv(l.H());uU(h,0,f-(Dxb(k),k));}g=lJ(Xeb(a));j=new GU;e=new Tob(h);i=new GU;for(b=0;b<a.c-1;b++){vU(j,Yv(Rob(e)));}for(d=WI(g,0);d.b!=d.d.c;){c=Wv(_ub(d),10);vU(j,Yv(Rob(e)));vU(i,new sfb(c,j));Cxb(0,j.c.length);j.c.splice(0,1);}return new ffb(a.e,a.f,a.d,a.c,h,i)}
    function zs(a,b,c,d,e){var f,g,h,i,j;f=b.$b(c,a.b);if(f<0){h=a.e;if(!h){e[0]=0;return As(a,c,d)}g=h.d;a.e=zs(h,b,c,d,e);e[0]==0&&++a.a;a.j=PH(a.j,d);return a.e.d==g?a:Gs(a)}else if(f>0){i=a.g;if(!i){e[0]=0;return Bs(a,c,d)}g=i.d;a.g=zs(i,b,c,d,e);e[0]==0&&++a.a;a.j=PH(a.j,d);return a.g.d==g?a:Gs(a)}e[0]=a.c;j=PH(a.c,d);Xb(RH(j,$xb)<=0);a.c+=d;a.j=PH(a.j,d);return a}
    function iJ(b,c){var d,e,f,g,h,i;f=fmb(c,',|;|\\(|\\)|\\[|\\]|\\{|\\}| |\t|\n');_I(b);try{e=0;h=0;g=0;i=0;while(e<f.length){if(f[e]!=null&&pmb(hmb(f[e]))>0){h%2==0?(g=clb(f[e])):(i=clb(f[e]));h>0&&h%2!=0&&QI(b,new HI(g,i));++h;}++e;}}catch(a){a=OH(a);if(aw(a,130)){d=a;throw new slb('The given string does not match the expected format for vectors.'+d)}else throw NH(a)}}
    function _bb(a,b,c){var d,e,f,g,h,i,j,k;e=true;for(g=new Tob(b.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);j=Vzb;for(i=new Tob(f.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);k=Ixb(c.n[h.k])+Ixb(c.d[h.k])-h.e.d;d=Ixb(c.n[h.k])+Ixb(c.d[h.k])+h.j.b+h.e.a;if(k>j&&d>j){j=Ixb(c.n[h.k])+Ixb(c.d[h.k])+h.j.b+h.e.a;}else {e=false;a.a&&(Fmb(),Emb);break}}if(!e){break}}a.a&&(Fmb(),Emb);return e}
    function Jv(a){var b,c,d,e,f,g,h,i;if(isNaN(a)){return Rv(),Qv}if(a<-9223372036854775808){return Rv(),Pv}if(a>=9223372036854775807){return Rv(),Ov}e=false;if(a<0){e=true;a=-a;}d=0;if(a>=dzb){d=hw(a/dzb);a-=d*dzb;}c=0;if(a>=czb){c=hw(a/czb);a-=c*czb;}b=hw(a);f=Ev(b,c,d);e&&(g=~f.l+1&azb,h=~f.m+(g==0?1:0)&azb,i=~f.h+(g==0&&h==0?1:0)&bzb,f.l=g,f.m=h,f.h=i,undefined);return f}
    function JO(a){var b,c,d,e,f,g,h;e=DW(a);if(Qob(new Tob(e))){h=new VN(0,0,a.e.j.a,a.e.j.b);for(c=new Tob(e);c.a<c.c.c.length;){b=Wv(Rob(c),129);d=new VN(b.e.i.a,b.e.i.b,b.e.j.a,b.e.j.b);TN(h,d);}g=new FP((f=Wv(a.e,7).d,new EP(f.d,f.b,f.a,f.c)));g.d=-h.e;g.a=h.e+h.b-a.e.j.b;g.b=-h.d;g.c=h.d+h.c-a.e.j.a;Wv(a.e,7).d.b=g.b;Wv(a.e,7).d.d=g.d;Wv(a.e,7).d.c=g.c;Wv(a.e,7).d.a=g.a;}}
    function Y0(a){var b,c,d,e,f;for(f=new Tob(a.f);f.a<f.c.c.length;){e=Wv(Rob(f),7);for(d=new Tob(e.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);if(gw(rJ(c.d.f,(Mjb(),vjb)))!==gw((Xib(),Vib))){throw new $J((b=lX(a),nAb+(b==null?Dlb(a.k):b)+"' has its layer constraint set to LAST or LAST_SEPARATE, but has "+'at least one outgoing edge. Connections between nodes with these '+qAb))}}}}
    function Rfb(a,b,c,d){var e,f,g,h,i,j;for(f=new Tob(a);f.a<f.c.c.length;){e=Wv(Rob(f),12);g=e.c;if(b.a.R(g)){h=(fgb(),dgb);}else if(c.a.R(g)){h=(fgb(),egb);}else {throw new slb('Source port must be in one of the port sets.')}i=e.d;if(b.a.R(i)){j=(fgb(),dgb);}else if(c.a.R(i)){j=(fgb(),egb);}else {throw new slb('Target port must be in one of the port sets.')}vU(d,new lgb(e,h,j));}}
    function bQ(a,b){var c,d,e,f,g,h;if('edges' in b.a){h=Pu(b,'edges');if(!h.hc()){throw new GQ("The 'edges' property of a node has to be an array.",h,b)}f=h.hc();for(g=0;g<f.a.length;++g){e=gu(f,g);if(!e.kc()){throw new GQ("All elements of the 'edges' property must be objects.",e,b)}aQ(a,e.kc());}}if(Mzb in b.a){d=Pu(b,Mzb).hc();for(g=0;g<d.a.length;++g){c=gu(d,g).kc();bQ(a,c);}}}
    function fS(a){var b,c,d,e,f,g,h,i;for(d=new Tob(a.a.a);d.a<d.c.c.length;){c=Wv(Rob(d),78);c.g=null;for(g=(i=(new Snb(c.a.a)).a.bb().mb(),new Ynb(i));g.a.G();){e=(b=Wv(g.a.H(),21),Wv(b.yb(),25));BI(e.g);(!c.g||e.j.d<c.g.j.d)&&(c.g=e);}for(f=(h=(new Snb(c.a.a)).a.bb().mb(),new Ynb(h));f.a.G();){e=(b=Wv(f.a.H(),21),Wv(b.yb(),25));e.g.a=e.j.d-c.g.j.d;e.g.b=e.j.e-c.g.j.e;}}return a}
    function Nab(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;c=false;n=$yb*a.b.f*a.b.d;for(e=new Tob(b.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);j=new Tob(d.a);f=Wv(Rob(j),9);k=Uab(a.a[f.k]);while(j.a<j.c.c.length){h=Wv(Rob(j),9);l=Uab(a.a[h.k]);if(k!=l){m=Xjb(a.b,f,h);g=f.i.b+f.j.b+f.e.a+k.a+m;i=h.i.b-h.e.d+l.a;if(g>i+n){o=k.i+l.i;l.a=(l.i*l.a+k.i*k.a)/o;l.i=o;k.g=l;c=true;}}f=h;k=l;}}return c}
    function XY(a){var b,c,d,e,f,g;if(gw(rJ(a,(eM(),TL)))===gw((KM(),GM))||gw(rJ(a,TL))===gw(FM)){for(g=new Tob(a.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);if(f.g==(sN(),$M)||f.g==pN){return false}}}if(MM(Wv(rJ(a,TL),28))){for(e=nX(a,(sN(),ZM)).mb();e.G();){d=Wv(e.H(),7);if(d.b.c.length!=0){return false}}}for(c=Uh(mX(a));Cm(c);){b=Wv(Dm(c),12);if(b.c.f==b.d.f){return false}}return true}
    function KW(a,b){var c,d,e,f,g,h,i,j,k;e=a.f;g=e.j.a;f=e.j.b;if(g<=0&&f<=0){return sN(),qN}j=a.i.a;k=a.i.b;h=a.j.a;c=a.j.b;switch(b.e){case 2:case 1:if(j<0){return sN(),rN}else if(j+h>g){return sN(),ZM}break;case 4:case 3:if(k<0){return sN(),$M}else if(k+c>f){return sN(),pN}}i=(j+h/2)/g;d=(k+c/2)/f;return i+d<=1&&i-d<=0?(sN(),rN):i+d>=1&&i-d>=0?(sN(),ZM):d<0.5?(sN(),$M):(sN(),pN)}
    function pP(a,b,c,d,e,f,g){var h,i,j,k,l,m;m=new UN;for(j=b.mb();j.G();){h=Wv(j.H(),627);for(l=new Tob(sW(h));l.a<l.c.c.length;){k=Wv(Rob(l),129);if(gw(oW(k,(eM(),tL)))===gw((EK(),CK))){nP(m,k,false,d,e,f,g);TN(a,m);}}}for(i=c.mb();i.G();){h=Wv(i.H(),627);for(l=new Tob(sW(h));l.a<l.c.c.length;){k=Wv(Rob(l),129);if(gw(oW(k,(eM(),tL)))===gw((EK(),BK))){nP(m,k,true,d,e,f,g);TN(a,m);}}}}
    function f8(a,b){var c,d,e,f,g,h,i,j;for(i=new Tob(b.f);i.a<i.c.c.length;){h=Wv(Rob(i),7);for(e=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[h.b,h.e]))))));Cm(e);){d=Wv(Dm(e),12);c=d.c==h?d.d:d.c;f=c.f;if(b==f){continue}j=Wv(rJ(d,(Rib(),Eib)),24).a;j<0&&(j=0);g=f.k;if(a.b[g]==0){if(d.d==c){a.a[g]-=j+1;a.a[g]<=0&&a.c[g]>0&&QI(a.e,f);}else {a.c[g]-=j+1;a.c[g]<=0&&a.a[g]>0&&QI(a.d,f);}}}}}
    function tcb(a,b){var c,d,e,f,g,h,i,j,k;for(g=new Tob(b.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);for(j=new Tob(f.a);j.a<j.c.c.length;){i=Wv(Rob(j),9);k=new GU;h=0;for(e=Uh(iX(i));Cm(e);){c=Wv(Dm(e),12);Wv(rJ(c,(Rib(),Eib)),24).a>h&&(h=Wv(rJ(c,Eib),24).a);}for(d=Uh(iX(i));Cm(d);){c=Wv(Dm(d),12);i.d!=c.c.f.d&&Wv(rJ(c,(Rib(),Eib)),24).a==h&&vU(k,new RJ(c.c.f,c));}Gpb(k,a.c);uU(a.b,i.k,k);}}}
    function ucb(a,b){var c,d,e,f,g,h,i,j,k;for(g=new Tob(b.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);for(j=new Tob(f.a);j.a<j.c.c.length;){i=Wv(Rob(j),9);k=new GU;h=0;for(e=Uh(mX(i));Cm(e);){c=Wv(Dm(e),12);Wv(rJ(c,(Rib(),Eib)),24).a>h&&(h=Wv(rJ(c,Eib),24).a);}for(d=Uh(mX(i));Cm(d);){c=Wv(Dm(d),12);i.d!=c.d.f.d&&Wv(rJ(c,(Rib(),Eib)),24).a==h&&vU(k,new RJ(c.d.f,c));}Gpb(k,a.c);uU(a.f,i.k,k);}}}
    function g3(a){b3();var b,c,d,e,f,g,h,i,j,k;this.b=new i3;this.c=new GU;this.a=new GU;for(i=Seb(),j=0,k=i.length;j<k;++j){h=i[j];ssb(a3,h,new GU);}for(c=a.mb();c.G();){b=Wv(c.H(),75);xU(this.a,Zdb(b));b.g.a.Y()==0?Wv(qsb(a3,b.e),20).ib(b):vU(this.c,b);}for(f=(g=(new aob(a3)).a.bb().mb(),new fob(g));f.a.G();){e=(d=Wv(f.a.H(),21),Wv(d.zb(),20));Gpb(e,this.b);}Dpb(Wv(qsb(a3,(Ieb(),neb)),20));}
    function E$(a,b){var c,d,e,f,g,h,i;i=Wv(rJ(b,(eM(),TL)),28);if(!(i==(KM(),GM)||i==FM)){return}f=(c=Wv(rJ(b,(Rib(),Xhb)),15).a,new HI(b.e.a+b.a.b+b.a.c+2*c,b.e.b+b.a.d+b.a.a+2*c)).b;for(h=new Tob(a.a);h.a<h.c.c.length;){g=Wv(Rob(h),9);if(g.g!=(CX(),xX)){continue}d=Wv(rJ(g,hib),32);if(d!=(sN(),ZM)&&d!=rN){continue}e=Ixb(Yv(rJ(g,Cib)));i==GM&&(e*=f);g.i.b=e-Wv(rJ(g,SL),10).b;fX(g,false,true);}}
    function fZ(a,b){var c,d,e,f,g,h,i,j;c=new uX(a.d.c);sX(c,(CX(),wX));sJ(c,(eM(),TL),Wv(rJ(b,TL),28));sJ(c,JL,Wv(rJ(b,JL),86));c.k=a.d.b++;vU(a.b,c);c.j.b=b.j.b;c.j.a=0;j=(sN(),ZM);f=Ao(nX(b,j));for(i=new Tob(f);i.a<i.c.c.length;){h=Wv(Rob(i),7);PX(h,c);}g=new RX;QX(g,j);PX(g,b);g.i.a=c.j.a;g.i.b=c.j.b/2;e=new RX;QX(e,tN(j));PX(e,c);e.i.b=c.j.b/2;e.i.a=-e.j.a;d=new hW;dW(d,g);eW(d,e);return c}
    function m3(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;i=new Dh;Np(a,i);e=new deb(b);n=new GU;vU(n,(o=a.j,Wv(um(dq(!o?(a.j=new eq(a)):o)),7)));m=new GU;while(n.c.length!=0){h=Wv(Rob(new Tob(n)),7);m.c[m.c.length]=h;d=Sm(a,h);for(g=new Nqb(d.b.mb());g.b.G();){f=Wv(g.b.H(),12);if(beb(e,f,c)){l=Wv(Gd(i,f),20);for(k=l.mb();k.G();){j=Wv(k.H(),7);zU(m,j,0)!=-1||(n.c[n.c.length]=j,true);}}}BU(n,h);}return e}
    function fmb(a,b){var c,d,e,f,g,h,i;c=RegExp(b,'g');h=xv($F,Txb,2,0,5,1);d=0;i=a;f=null;while(true){g=c.exec(i);if(g==null||i==''){h[d]=i;break}else {h[d]=gmb(i,0,g.index);i=gmb(i,g.index+g[0].length,(bmb(),i.length));c.lastIndex=0;if(f==i){h[d]=i.substr(0,1);i=imb(i,1,i.length-1);}f=i;++d;}}if((bmb(),a.length)>0){e=h.length;while(e>0&&h[e-1]==''){--e;}e<h.length&&(h.length=e,undefined);}return h}
    function NO(a){var b,c,d,e,f,g;for(g=new Tob(AW(a.e));g.a<g.c.c.length;){f=Wv(Rob(g),161);switch(Wv(f.e,7).g.e){case 4:a.q.b=Nlb(a.q.b,(c=Wv(f.e,7).d,new EP(c.d,c.b,c.a,c.c)).c);break;case 2:a.q.c=Nlb(a.q.c,(d=Wv(f.e,7).d,new EP(d.d,d.b,d.a,d.c)).b);break;case 1:a.q.d=Nlb(a.q.d,(e=Wv(f.e,7).d,new EP(e.d,e.b,e.a,e.c)).a);break;case 3:a.q.a=Nlb(a.q.a,(b=Wv(f.e,7).d,new EP(b.d,b.b,b.a,b.c)).d);}}}
    function Ns(a,b,c,d,e){var f,g,h;f=b.$b(c,a.b);if(f<0){g=a.e;if(!g){e[0]=0;return d>0?As(a,c,d):a}a.e=Ns(g,b,c,d,e);d==0&&e[0]!=0?--a.a:d>0&&e[0]==0&&++a.a;a.j=PH(a.j,d-e[0]);return Gs(a)}else if(f>0){h=a.g;if(!h){e[0]=0;return d>0?Bs(a,c,d):a}a.g=Ns(h,b,c,d,e);d==0&&e[0]!=0?--a.a:d>0&&e[0]==0&&++a.a;a.j=PH(a.j,d-e[0]);return Gs(a)}e[0]=a.c;if(d==0){return Fs(a)}a.j=PH(a.j,d-a.c);a.c=d;return a}
    function Q7(a){var b,c,d,e,f,g,h;a.o=new Uvb;d=new aJ;for(g=new Tob(a.e.a);g.a<g.c.c.length;){f=Wv(Rob(g),61);m7(f).c.length==1&&(TI(d,f,d.c.b,d.c),true);}while(d.b!=0){f=Wv(d.b==0?null:(Bxb(d.b!=0),$I(d,d.a.a)),61);if(m7(f).c.length==0){continue}b=Wv(yU(m7(f),0),89);c=f.g.c.length>0;h=c7(b,f);c?p7(h.c,b):p7(h.g,b);m7(h).c.length==1&&(TI(d,h,d.c.b,d.c),true);e=new RJ(f,b);Tvb(a.o,e);BU(a.e.a,f);}}
    function Hs(a,b,c,d,e){var f,g,h;f=b.$b(c,a.b);if(f<0){g=a.e;if(!g){e[0]=0;return a}a.e=Hs(g,b,c,d,e);if(e[0]>0){if(d>=e[0]){--a.a;a.j=XH(a.j,e[0]);}else {a.j=XH(a.j,d);}}return e[0]==0?a:Gs(a)}else if(f>0){h=a.g;if(!h){e[0]=0;return a}a.g=Hs(h,b,c,d,e);if(e[0]>0){if(d>=e[0]){--a.a;a.j=XH(a.j,e[0]);}else {a.j=XH(a.j,d);}}return Gs(a)}e[0]=a.c;if(d>=a.c){return Fs(a)}else {a.c-=d;a.j=XH(a.j,d);return a}}
    function BQ(a,b,c){var d,e,f,g,h,i,j,k;for(i=new Tob(c.b);i.a<i.c.c.length;){h=Wv(Rob(i),9);g=Wv(rJ(h,(Rib(),sib)),55);if(g){k=BQ(a,b,g);h.j.a=(f=Wv(rJ(k,Xhb),15).a,new HI(k.e.a+k.a.b+k.a.c+2*f,k.e.b+k.a.d+k.a.a+2*f)).a;h.j.b=(e=Wv(rJ(k,Xhb),15).a,new HI(k.e.a+k.a.b+k.a.c+2*e,k.e.b+k.a.d+k.a.a+2*e)).b;}}j=new sI;d=$v(rJ(c,(eM(),kL)));d!=null&&emb(d,'de.cau.cs.kieler.fixed')?JP(c,j):ZQ(b,c,j);return c}
    function bR(a){var b,c,d,e,f,g,h,i;h=Wv(rJ(a,(eM(),aM)),18);i=Wv(rJ(a,bM),18);d=Wv(rJ(a,(Rib(),Xhb)),15).a;a.d.a+=d;a.d.b+=d;a.e.a+=2*d;a.e.b+=2*d;sJ(a,Xhb,new llb(0));e=(c=Wv(rJ(a,Xhb),15).a,new HI(a.e.a+a.a.b+a.a.c+2*c,a.e.b+a.a.d+a.a.a+2*c));b=new II(e);if(h.kb((DN(),zN))){g=Wv(rJ(a,IL),15).a;f=Wv(rJ(a,HL),15).a;if(i.kb((MN(),KN))){g<=0&&(g=20);f<=0&&(f=20);}b.a=Nlb(e.a,g);b.b=Nlb(e.b,f);}cR(a,e,b);}
    function rV(a,b,c){var d,e,f,g,h,i,j,k;if(b.k==0){b.k=1;g=c;if(!c){e=new GU;f=(d=Wv(Hkb(Kz),11),new atb(d,Wv(exb(d,d.length),11),0));g=new RJ(e,f);}Wv(g.a,20).ib(b);b.g==(CX(),xX)&&Wv(g.b,18).ib(Wv(rJ(b,(Rib(),hib)),32));for(i=new Tob(b.f);i.a<i.c.c.length;){h=Wv(Rob(i),7);for(k=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[new fY(h),new lY(h)]))))));Cm(k);){j=Wv(Dm(k),7);rV(a,j.f,g);}}return g}return null}
    function QW(a,b,c,d){var e,f,g,h,i;i=new II(b.i);i.a+=b.j.a/2;i.b+=b.j.b/2;h=Wv(rJ(b,(Rib(),tib)),15).a;f=a.e;g=a.a;e=a.d;switch(Wv(rJ(b,hib),32).e){case 1:i.a+=g.b+e.a-c/2;i.b=-d-h;b.i.b=-(g.d+h+e.b);break;case 2:i.a=f.a+g.b+g.c+h;i.b+=g.d+e.b-d/2;b.i.a=f.a+g.c+h-e.a;break;case 3:i.a+=g.b+e.a-c/2;i.b=f.b+g.d+g.a+h;b.i.b=f.b+g.a+h-e.b;break;case 4:i.a=-c-h;i.b+=g.d+e.b-d/2;b.i.a=-(g.b+h+e.a);}return i}
    function $Q(a,b){var c,d,e,f,g,h,i;for(f=new Tob(b.b);f.a<f.c.c.length;){e=Wv(Rob(f),9);g=rJ(e,(Rib(),uib));if(aw(g,7)){h=Wv(g,7);i=QW(b,e,h.j.a,h.j.b);h.i.a=i.a;h.i.b=i.b;QX(h,Wv(rJ(e,hib),32));}}c=(d=Wv(rJ(b,(Rib(),Xhb)),15).a,new HI(b.e.a+b.a.b+b.a.c+2*d,b.e.b+b.a.d+b.a.a+2*d));if(Wv(rJ(b,jib),18).kb((ohb(),hhb))){sJ(a,(eM(),TL),(KM(),FM));Wv(rJ(hX(a),jib),18).ib(khb);WW(a,c,false);}else {WW(a,c,true);}}
    function VW(a,b,c){var d,e,f,g,h;h=null;switch(b.e){case 1:for(e=new Tob(a.f);e.a<e.c.c.length;){d=Wv(Rob(e),7);if(Ckb(Ixb(Xv(rJ(d,(Rib(),kib)))))){return d}}h=new RX;sJ(h,(Rib(),kib),(xkb(),xkb(),wkb));break;case 2:for(g=new Tob(a.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);if(Ckb(Ixb(Xv(rJ(f,(Rib(),yib)))))){return f}}h=new RX;sJ(h,(Rib(),yib),(xkb(),xkb(),wkb));}if(h){PX(h,a);QX(h,c);LW(h.i,a.j,c);}return h}
    function pk(a,b){var c,d,e,f,g,h,i;_b(b);Xb(a.a.t(b.a));d=a.b;f=a.e;g=a.d;if(a.b){if(b.b){c=a.a.$b(a.e,b.e);if(c<0||c==0&&b.d==(Gh(),Fh)){f=b.e;g=b.d;}}}else {d=b.b;f=b.e;g=b.d;}e=a.c;h=a.g;i=a.f;if(a.c){if(b.c){c=a.a.$b(a.g,b.g);if(c>0||c==0&&b.f==(Gh(),Fh)){h=b.g;i=b.f;}}}else {e=b.c;h=b.g;i=b.f;}if(d&&e){c=a.a.$b(f,h);if(c>0||c==0&&g==(Gh(),Fh)&&i==(Gh(),Fh)){f=h;g=(Gh(),Fh);i=Eh;}}return new sk(a.a,d,f,g,e,h,i)}
    function h0(a,b,c,d){var e,f,g,h,i,j,k;if(c.c.f==b.f){return}e=new uX(a);sX(e,(CX(),zX));sJ(e,(Rib(),uib),c);sJ(e,(eM(),TL),(KM(),FM));d.c[d.c.length]=e;g=new RX;PX(g,e);QX(g,(sN(),rN));h=new RX;PX(h,e);QX(h,ZM);eW(c,g);f=new hW;qJ(f,c);sJ(f,CL,null);dW(f,h);eW(f,b);j0(e,g,h);j=new Fnb(c.b,0);while(j.b<j.d.Y()){i=(Bxb(j.b<j.d.Y()),Wv(j.d.sb(j.c=j.b++),33));k=Wv(rJ(i,tL),107);if(k==(EK(),BK)){vnb(j);vU(f.b,i);}}}
    function Pfb(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q;f=c+(b.n+1)*a.a;g=b.b;e=new HI(f,g);for(i=(k=(new Snb(b.c.a)).a.bb().mb(),new Ynb(k));i.a.G();){h=(j=Wv(i.a.H(),21),Wv(j.yb(),12));o=MX(h.d);l=MX(h.c);n=new HI(f,l.b);q=new HI(f,o.b);m=new HI(c-10,l.b);p=new HI(d,o.b);o.a>=d&&l.a>=d&&(m.a=d);o.a<=c&&l.a<=c&&(p.a=c-10);b.c.a.Y()==1?fJ(h.a,Bv(tv(qz,1),Fzb,10,0,[m,n,q,p])):fJ(h.a,Bv(tv(qz,1),Fzb,10,0,[m,n,e,q,p]));}}
    function cW(a,b){var c,d,e,f,g,h;f=a.c;g=a.d;dW(a,null);eW(a,null);b&&Ckb(Ixb(Xv(rJ(g,(Rib(),kib)))))?dW(a,VW(g.f,(djb(),bjb),(sN(),ZM))):dW(a,g);b&&Ckb(Ixb(Xv(rJ(f,(Rib(),yib)))))?eW(a,VW(f.f,(djb(),ajb),(sN(),rN))):eW(a,f);for(d=new Tob(a.b);d.a<d.c.c.length;){c=Wv(Rob(d),33);e=Wv(rJ(c,(eM(),tL)),107);e==(EK(),CK)?sJ(c,tL,BK):e==BK&&sJ(c,tL,CK);}h=Ckb(Ixb(Xv(rJ(a,(Rib(),Iib)))));sJ(a,Iib,(xkb(),h?vkb:wkb));a.a=lJ(a.a);}
    function efb(a){var b,c,d,e,f,g;Teb(this);for(c=a.Y()-1;c<3;c++){a.rb(0,Wv(a.sb(0),10));}if(a.Y()<4){throw new slb('At (least dimension + 1) control points are necessary!')}else {this.c=3;this.e=true;this.f=true;this.d=false;Ueb(this,a.Y()+this.c-1);g=new GU;f=this.g.mb();for(b=0;b<this.c-1;b++){vU(g,Yv(f.H()));}for(e=a.mb();e.G();){d=Wv(e.H(),10);vU(g,Yv(f.H()));this.b.ib(new sfb(d,g));Cxb(0,g.c.length);g.c.splice(0,1);}}}
    function scb(a){var b,c,d,e,f,g,h,i,j,k,l;l=new rcb;l.d=0;for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);l.d+=f.a.c.length;}d=0;e=0;l.a=xv(mw,Yyb,26,a.c.c.length,12,1);j=0;l.e=xv(mw,Yyb,26,l.d,12,1);for(c=new Tob(a.c);c.a<c.c.c.length;){b=Wv(Rob(c),16);b.k=d++;l.a[b.k]=e++;k=0;for(i=new Tob(b.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);h.k=j++;l.e[h.k]=k++;}}l.c=new wcb(l);l.b=Do(l.d);tcb(l,a);l.f=Do(l.d);ucb(l,a);return l}
    function Lab(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;h=xv(mw,Yyb,26,b.c.c.length,12,1);j=xv(pB,uyb,132,b.c.c.length,0,1);for(l=a.a,m=0,n=l.length;m<n;++m){k=l[m];p=0;for(g=new Tob(k.f);g.a<g.c.c.length;){e=Wv(Rob(g),9);i=e.g;d=rY(e.d);++h[d];o=a.b.a*a.b.d;h[d]>0&&!!j[d]&&(o=Wjb(a.b,j[d],i));p=Nlb(p,e.d.c.b+o);}for(f=new Tob(k.f);f.a<f.c.c.length;){e=Wv(Rob(f),9);e.i.b=p+e.e.d;c=e.d;c.c.b=p+e.e.d+e.j.b+e.e.a;j[zU(c.b.c,c,0)]=e.g;}}}
    function n$(a){var b,c,d,e,f,g,h,i,j,k;for(i=new Tob(a.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);if(h.g!=(CX(),xX)){continue}e=Wv(rJ(h,(Rib(),hib)),32);if(e==(sN(),ZM)||e==rN){for(d=Uh(gX(h));Cm(d);){c=Wv(Dm(d),12);b=c.a;if(b.b==0){continue}j=c.c;if(j.f==h){f=(Bxb(b.b!=0),Wv(b.a.a.c,10));f.b=MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b;}k=c.d;if(k.f==h){g=(Bxb(b.b!=0),Wv(b.c.b.c,10));g.b=MI(Bv(tv(qz,1),Fzb,10,0,[k.f.i,k.i,k.a])).b;}}}}}
    function U9(a,b,c,d){var e,f,g,h,i,j;g=new _9(a,b,c);i=new Fnb(d,0);e=false;while(i.b<i.d.Y()){h=(Bxb(i.b<i.d.Y()),Wv(i.d.sb(i.c=i.b++),102));if(h==b||h==c){vnb(i);}else if(!e&&Ixb(W9(h.g,h.d[0]).a)>Ixb(W9(g.g,g.d[0]).a)){Bxb(i.b>0);i.a.sb(i.c=--i.b);Anb(i,g);e=true;}else if(!!h.e&&h.e.Y()>0){f=(!h.e&&(h.e=new GU),h.e).nb(b);j=(!h.e&&(h.e=new GU),h.e).nb(c);if(f||j){(!h.e&&(h.e=new GU),h.e).ib(g);++g.c;}}}e||(d.c[d.c.length]=g,true);}
    function s2(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o;if(c.d.f==b.f){return}e=new uX(a);sX(e,(CX(),zX));sJ(e,(Rib(),uib),c);sJ(e,(eM(),TL),(KM(),FM));d.c[d.c.length]=e;g=new RX;PX(g,e);QX(g,(sN(),rN));h=new RX;PX(h,e);QX(h,ZM);i=c.d;eW(c,g);f=new hW;qJ(f,c);sJ(f,CL,null);dW(f,h);eW(f,i);j=Wv(yU(g.b,0),12).c;k=j.f;l=k.g;m=Wv(yU(h.e,0),12).d;n=m.f;o=n.g;l==zX?sJ(e,qib,Wv(rJ(k,qib),7)):sJ(e,qib,j);o==zX?sJ(e,rib,Wv(rJ(n,rib),7)):sJ(e,rib,m);}
    function $6(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;if(h=a.b[b],i=a.b[c],(j=Wv(rJ(h,(Rib(),oib)),20),!!j&&j.Y()!=0&&j.kb(i))||(k=h.g!=(CX(),zX)&&i.g!=zX,l=Wv(rJ(h,nib),9),m=Wv(rJ(i,nib),9),n=!!l&&l!=h||!!m&&m!=i,o=l!=m,p=_6(h,(sN(),$M)),q=_6(i,pN),r=n&&o||p||q,k&&r)||h.g==(CX(),BX)&&i.g==AX||i.g==(CX(),BX)&&h.g==AX){return false}g=a.b[b];d=a.b[c];m6(a.c,g,d);G6(a.d,g,d);f=M5(a.a,g,d)+a.c.d+a.d.d;e=M5(a.a,d,g)+a.c.b+a.d.b;return f>e}
    function v2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;g=b;m=b.d;k=b.c.f;n=b.d.f;l=rY(k.d);o=rY(n.d);for(h=l;h<o;h++){e=new uX(a);sX(e,(CX(),zX));sJ(e,(Rib(),uib),g);sJ(e,(eM(),TL),(KM(),FM));i=Wv(yU(a.c,h+1),16);rX(e,i);p=Wv(rJ(g,dM),15).a;if(p<0){p=0;sJ(g,dM,new llb(p));}e.j.b=p;j=Math.floor(p/2);d=new RX;QX(d,(sN(),rN));PX(d,e);d.i.b=j;f=new RX;QX(f,ZM);PX(f,e);f.i.b=j;eW(g,d);c=new hW;qJ(c,g);sJ(c,CL,null);dW(c,f);eW(c,m);w2(e,g,c);g=c;}}
    function Qeb(a,b){Ieb();if(a==b){return Reb(a)}switch(a.e){case 1:switch(b.e){case 4:return neb;case 1:return meb;case 2:return jeb;case 3:return qeb;}case 2:switch(b.e){case 1:return jeb;case 2:return ieb;case 3:return peb;case 4:return keb;}case 3:switch(b.e){case 2:return peb;case 3:return oeb;case 4:return Heb;case 1:return qeb;}case 4:switch(b.e){case 3:return Heb;case 4:return Geb;case 1:return neb;case 2:return keb;}}return Feb}
    function s$(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p;l=new Wub;e=null;for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);for(i=new Tob(f.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);if(h.g!=(CX(),xX)){continue}k=Wv(rJ(h,(Rib(),gib)),9);if(k){r$(k,l);m=new RX;PX(m,h);n=Wv(rJ(h,hib),32);QX(m,n);o=Wv(yU(k.f,0),7);p=new hW;dW(p,m);eW(p,o);}}e=f;}for(c=(j=(new Snb(l.a)).a.bb().mb(),new Ynb(j));c.a.G();){b=(d=Wv(c.a.H(),21),Wv(d.yb(),9));rX(b,e);}return l}
    function RV(a,b,c){var d,e,f,g,h,i,j,k,l;e=new GU;for(j=new Tob(b.b);j.a<j.c.c.length;){i=Wv(Rob(j),9);h=Wv(rJ(i,(Rib(),sib)),55);if(h){d=RV(a,h,i);xU(e,d);PV(a,h,i);if(Wv(rJ(h,jib),18).kb((ohb(),hhb))){for(l=new Tob(i.f);l.a<l.c.c.length;){k=Wv(Rob(l),7);if(Smb(a.b,k)==null){f=NW(k,(KM(),IM),k.g,-(k.b.c.length-k.e.c.length),k.j,Wv(rJ(h,(eM(),sL)),59),h);sJ(f,uib,k);Umb(a.b,k,f);vU(h.b,f);}}}}}g=new GU;OV(a,b,c,e,g);!!c&&QV(a,b,c,g);return g}
    function Obb(a){var b,c,d,e,f,g,h,i,j,k,l,m;b=ecb(a);for(k=(h=(new Snb(b)).a.bb().mb(),new Ynb(h));k.a.G();){j=(e=Wv(k.a.H(),21),Wv(e.yb(),9));l=j.e.d;m=j.j.b+j.e.a;a.d[j.k]=0;c=j;while((f=a.a[c.k])!=j){d=gcb(c,f);a.c==(Gbb(),Ebb)?(i=d.d.i.b+d.d.a.b-d.c.i.b-d.c.a.b):(i=d.c.i.b+d.c.a.b-d.d.i.b-d.d.a.b);g=Ixb(a.d[c.k])+i;a.d[f.k]=g;l=Nlb(l,f.e.d-g);m=Nlb(m,g+f.j.b+f.e.a);c=f;}c=j;do{a.d[c.k]=Ixb(a.d[c.k])+l;c=a.a[c.k];}while(c!=j);a.b[j.k]=l+m;}}
    function Gcb(a,b,c){var d,e,f,g,h,i,j,k;d=a.a.k==(Lbb(),Kbb)?Uzb:Vzb;h=Hcb(a,new Fcb(b,c));if(!h.a&&h.c){QI(a.d,h);return d}else if(h.a){e=h.a.c;i=h.a.d;if(c){j=a.a.c==(Gbb(),Fbb)?i:e;f=a.a.c==Fbb?e:i;g=a.a.f[f.f.k];k=Ixb(a.a.n[g.k])+Ixb(a.a.d[f.f.k])+f.i.b+f.a.b-Ixb(a.a.d[j.f.k])-j.i.b-j.a.b;}else {j=a.a.c==(Gbb(),Ebb)?i:e;f=a.a.c==Ebb?e:i;k=Ixb(a.a.n[a.a.f[f.f.k].k])+Ixb(a.a.d[f.f.k])+f.i.b+f.a.b-Ixb(a.a.d[j.f.k])-j.i.b-j.a.b;}return k}return d}
    function FY(a){var b,c,d,e,f;sJ(a.g,(Rib(),Thb),Eo(a.g.c));for(b=1;b<a.c.c.length-1;++b){sJ(Wv(yU(a.c,b),9),(eM(),JL),(oM(),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,fM]))));}for(d=WI(Eo(a.g.c),0);d.b!=d.d.c;){c=Wv(_ub(d),33);e=Wv(rJ(a.g,(eM(),JL)),86);if(Xe(e,Vsb((oM(),kM),Bv(tv(Gz,1),uyb,41,0,[gM,mM]))));else if(Xe(e,Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[iM,mM])))){vU(a.e.c,c);BU(a.g.c,c);f=new MY(a,c);sJ(a.g,Uhb,f);}else {GY(a,c);vU(a.i,a.d);sJ(a.g,Uhb,EY(a.i));}}}
    function OW(a,b,c,d){var e,f,g,h,i,j,k;f=PW(d);h=Ckb(Ixb(Xv(rJ(d,(Mjb(),xjb)))));if((h||Ckb(Ixb(Xv(rJ(a,(eM(),AL))))))&&!MM(Wv(rJ(a,(eM(),TL)),28))){e=vN(f);i=VW(a,c,c==(djb(),bjb)?e:tN(e));}else {i=new RX;PX(i,a);k=i.i;k.a=b.a-a.i.a;k.b=b.b-a.i.b;wI(k,a.j.a,a.j.b);QX(i,KW(i,f));g=Wv(rJ(d,(Rib(),jib)),18);j=i.g;switch(f.e){case 2:case 1:(j==(sN(),$M)||j==pN)&&g.ib((ohb(),lhb));break;case 4:case 3:(j==(sN(),ZM)||j==rN)&&g.ib((ohb(),lhb));}}return i}
    function G2(a){var b,c,d,e,f,g,h,i;d=Nl(Ao(a.a));e=(b=Wv(Hkb(_E),11),new atb(b,Wv(exb(b,b.length),11),0));while(d.a.G()||d.b.mb().G()){c=Wv(nm(d),12);h=c.c.g;i=c.d.g;if(h==(sN(),qN)){if(i!=qN){g=Reb(i);sJ(c,(Rib(),Mib),g);QX(c.c,i);Wsb(e,g);d.a.I();}}else {if(i==qN){g=Reb(h);sJ(c,(Rib(),Mib),g);QX(c.d,h);Wsb(e,g);d.a.I();}else {g=Qeb(h,i);sJ(c,(Rib(),Mib),g);Wsb(e,g);d.a.I();}}}e.c==1?(f=Wv(itb(new jtb(e)),60)):(f=(Ieb(),Feb));aeb(a,f,false);return f}
    function AI(b,c){var d,e,f,g;f=0;while(f<(bmb(),c.length)&&LI(c.charCodeAt(f),fzb)){++f;}d=c.length;while(d>0&&LI(c.charCodeAt(d-1),gzb)){--d;}if(f>=d){throw new slb('The given string does not contain any numbers.')}g=fmb(c.substr(f,d-f),',|;|\r|\n');if(g.length!=2){throw new slb('Exactly two numbers are expected, '+g.length+' were found.')}try{b.a=clb(hmb(g[0]));b.b=clb(hmb(g[1]));}catch(a){a=OH(a);if(aw(a,130)){e=a;throw new slb(hzb+e)}else throw NH(a)}}
    function Qdb(a,b,c){var d,e,f,g,h,i,j,k,l;i=c+b.d.c.a;for(l=new Tob(b.f);l.a<l.c.c.length;){k=Wv(Rob(l),7);d=MI(Bv(tv(qz,1),Fzb,10,0,[k.f.i,k.i,k.a]));f=new HI(0,d.b);if(k.g==(sN(),ZM)){f.a=i;}else if(k.g==rN){f.a=c;}else {continue}if(d.a==f.a){continue}e=k.e.c.length+k.b.c.length>1;for(h=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[k.b,k.e]))))));Cm(h);){g=Wv(Dm(h),12);j=g.c==k?g.d:g.c;Jlb(MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b-f.b)>1&&Odb(a,g,f,e,k);}}}
    function FR(a,b){var c,d,e,f,g,h;for(g=new rnb((new inb(a.f.b)).a);g.b;){f=pnb(g);e=Wv(f.yb(),251);if(b==1){if(e.yc()!=(sK(),rK)&&e.yc()!=nK){continue}}else {if(e.yc()!=(sK(),oK)&&e.yc()!=pK){continue}}d=Wv(Wv(f.zb(),27).b,25);h=Wv(Wv(f.zb(),27).a,78);c=h.c;switch(e.yc().e){case 2:d.j.d=a.e.a;d.j.c=Nlb(1,d.j.c+c);break;case 1:d.j.d=d.j.d+c;d.j.c=Nlb(1,d.j.c-c);break;case 4:d.j.e=a.e.b;d.j.b=Nlb(1,d.j.b+c);break;case 3:d.j.e=d.j.e+c;d.j.b=Nlb(1,d.j.b-c);}}}
    function bdb(a,b,c,d,e){var f,g,h,i,j,k,l,m,n;m=(mp(),new ntb);h=new GU;adb(a,c,a.d.Mc(),h,m);adb(a,d,a.d.Nc(),h,m);i=new Fnb(h,0);while(i.b<i.d.Y()){f=(Bxb(i.b<i.d.Y()),Wv(i.d.sb(i.c=i.b++),80));j=new Fnb(h,i.b);while(j.b<j.d.Y()){g=(Bxb(j.b<j.d.Y()),Wv(j.d.sb(j.c=j.b++),80));gdb(f,g,a.a);}}ddb(h,Wv(rJ(b,(Rib(),Gib)),154));idb(h);n=-1;for(l=new Tob(h);l.a<l.c.c.length;){k=Wv(Rob(l),80);if(Jlb(k.k-k.a)<dAb){continue}n=Plb(n,k.i);a.d.Kc(k,e);}a.b.a.Q();return n+1}
    function r3(a,b,c){var d,e;e=new II(b);d=new II(a.j);switch(c.e){case 1:case 8:case 7:uI(e,-d.a/2,-d.b);uI(b,0,-(0.5+d.b));break;case 3:case 4:case 5:uI(e,-d.a/2,0);uI(b,0,0.5+d.b);break;case 0:uI(e,-d.a/2,-d.b);uI(b,0,-(0.5+-d.b));break;case 10:case 2:uI(e,0,-d.b/2);uI(b,0,-(0.5+d.b));break;case 6:uI(e,-d.a,d.b/2);uI(b,0,-(0.5+d.b));break;case 9:uI(e,-d.a/2,0);uI(b,0,-(0.5+d.b));break;case 11:uI(e,-d.a,-d.b/2);uI(b,0,-(0.5+d.b));}vI(BI(a.i),e);return new Cfb(a)}
    function Gmb(a,b,c,d,e){Fmb();var f,g,h,i,j,k,l;Exb(a,'src');Exb(c,'dest');k=tb(a);h=tb(c);Axb((k.g&4)!=0,'srcType is not an array');Axb((h.g&4)!=0,'destType is not an array');j=k.c;f=h.c;Axb((j.g&1)!=0?j==f:(f.g&1)==0,"Array types don't match");l=a.length;i=c.length;if(b<0||d<0||e<0||b+e>l||d+e>i){throw new nkb}if(((j.g&1)==0||(j.g&4)!=0)&&k!=h){if(a===c&&b<d){b+=e;for(g=d+e;g-->d;){c[g]=a[--b];}}else {for(g=d+e;d<g;){c[d++]=a[b++];}}}else e>0&&dxb(a,b,c,d,e,true);}
    function cR(a,b,c){var d,e,f,g,h;d=Wv(rJ(a,(Mjb(),jjb)),18);c.a>b.a&&(d.kb((zgb(),tgb))?(a.d.a+=(c.a-b.a)/2):d.kb(vgb)&&(a.d.a+=c.a-b.a));c.b>b.b&&(d.kb((zgb(),xgb))?(a.d.b+=(c.b-b.b)/2):d.kb(wgb)&&(a.d.b+=c.b-b.b));if(Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))&&(c.a>b.a||c.b>b.b)){for(h=new Tob(a.b);h.a<h.c.c.length;){g=Wv(Rob(h),9);if(g.g==(CX(),xX)){e=Wv(rJ(g,hib),32);e==(sN(),ZM)?(g.i.a+=c.a-b.a):e==pN&&(g.i.b+=c.b-b.b);}}}f=a.a;a.e.a=c.a-f.b-f.c;a.e.b=c.b-f.d-f.a;}
    function Ms(a,b,c,d,e,f){var g,h,i;g=b.$b(c,a.b);if(g<0){h=a.e;if(!h){f[0]=0;if(d==0&&e>0){return As(a,c,e)}return a}a.e=Ms(h,b,c,d,e,f);if(f[0]==d){e==0&&f[0]!=0?--a.a:e>0&&f[0]==0&&++a.a;a.j=PH(a.j,e-f[0]);}return Gs(a)}else if(g>0){i=a.g;if(!i){f[0]=0;if(d==0&&e>0){return Bs(a,c,e)}return a}a.g=Ms(i,b,c,d,e,f);if(f[0]==d){e==0&&f[0]!=0?--a.a:e>0&&f[0]==0&&++a.a;a.j=PH(a.j,e-f[0]);}return Gs(a)}f[0]=a.c;if(d==a.c){if(e==0){return Fs(a)}a.j=PH(a.j,e-a.c);a.c=e;}return a}
    function gfb(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q;i=a.e;n=a.f;g=a.d;o=a.c;k=o-1;p=a.g;l=Eo(a.g.xb(1,a.g.Y()-1));j=new GU;for(c=0;c<a.b.Y()-1;c++){h=CI(EI(xI(Wv(a.b.sb(c+1),92).a),Wv(a.b.sb(c),92).a),o/(Ixb(Yv(p.sb(c+o)))-Ixb(Yv(p.sb(c)))));j.c[j.c.length]=h;}q=new GU;f=WI(l,0);m=new GU;for(b=0;b<k-1;b++){vU(q,Yv(_ub(f)));}for(e=new Tob(j);e.a<e.c.c.length;){d=Wv(Rob(e),10);vU(q,Yv(_ub(f)));vU(m,new sfb(d,q));Cxb(0,q.c.length);q.c.splice(0,1);}return new ffb(i,n,g,k,l,m)}
    function fP(a){this.q=new AP;this.p=new AP;this.o=xv(mw,Yyb,26,(sN(),Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN])).length,12,1);this.i=xv(mw,Yyb,26,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,12,1);this.j=xv(kw,hyb,26,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,12,1);this.n=xv(kw,hyb,26,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,12,1);this.g=xv(Hz,uyb,100,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,0,1);this.c=new vsb(Oz);this.e=a;$ob(this.o);$ob(this.i);Yob(this.n,0);}
    function _Q(a,b){var c,d,e,f,g,h,i,j,k;g=b.i!=null&&!b.b;g||nI(b,'Component Layout',1);c=Wv(rJ(a,(Rib(),Fib)),20);f=1/c.Y();if(Ckb(Ixb(Xv(rJ(a,(eM(),rL)))))){for(k=c.mb();k.G();){j=Wv(k.H(),31);Jkb(tb(j));j.sc(a,rI(b,f));}}else {for(k=c.mb();k.G();){j=Wv(k.H(),31);j.sc(a,rI(b,f));}}for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);xU(a.b,d.a);d.a.c=xv(UF,syb,1,0,4,1);}for(i=new Tob(a.b);i.a<i.c.c.length;){h=Wv(Rob(i),9);rX(h,null);}a.c.c=xv(UF,syb,1,0,4,1);g||pI(b);}
    function S9(a,b){var c,d,e,f,g,h,i,j,k,l,m;for(g=new Tob(b);g.a<g.c.c.length;){e=Wv(Rob(g),102);e.e=null;e.c=0;}h=null;for(f=new Tob(b);f.a<f.c.c.length;){e=Wv(Rob(f),102);k=e.d[0];for(m=Wv(rJ(k,(Rib(),oib)),20).mb();m.G();){l=Wv(m.H(),9);(!e.e&&(e.e=new GU),e.e).ib(a.b[l.d.k][l.k]);++a.b[l.d.k][l.k].c;}if(k.g==(CX(),AX)){if(h){for(j=An(new Bn(a.c,h),0);j.c;){i=Wv(ko(j),9);for(d=An(new Bn(a.c,k),0);d.c;){c=Wv(ko(d),9);Y9(a.b[i.d.k][i.k]).ib(a.b[c.d.k][c.k]);++a.b[c.d.k][c.k].c;}}}h=k;}}}
    function gQ(a,b,c,d){var e,f,g,h,i,j;SP(b);f=Wv(rJ(d,(Rib(),jib)),18);h=(eM(),KL).b;if(h in b.a&&Pu(b,h).ic().a){return}i=new RX;sJ(i,uib,b);PX(i,c);g=Wv(Pu(b,'id'),97);Vmb(a.k,g.a,i);Umb(a.n,i,b);_P(b,i);hQ(b,i);dQ(a,b,i,d);QX(i,Wv(rJ(i,WL),32));j=Wv(rJ(c,TL),28);j==(KM(),JM)&&(j=IM);e=Wv(rJ(d,sL),59);e==(sK(),qK)&&(e=pK);RW(i,j,e,Wv(rJ(i,SL),10));switch(e.e){case 2:case 1:(i.g==(sN(),$M)||i.g==pN)&&f.ib((ohb(),lhb));break;case 4:case 3:(i.g==(sN(),ZM)||i.g==rN)&&f.ib((ohb(),lhb));}}
    function Q5(a,b){var c,d,e,f,g,h,i,j;a.f=b;e=b.c.c.length;a.a=xv(qB,Txb,51,e,0,2);a.d=xv(qB,Txb,51,e,0,2);a.g=xv(qB,Txb,51,e,0,2);g=new Fnb(b.c,0);while(g.b<g.d.Y()){d=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),16));h=d.a.c.length;f=g.b-1;a.a[f]=xv(qB,Nzb,9,h,0,1);a.d[f]=xv(qB,Nzb,9,h,0,1);a.g[f]=xv(qB,Nzb,9,h,0,1);j=new Fnb(d.a,0);c=0;while(j.b<j.d.Y()){i=(Bxb(j.b<j.d.Y()),Wv(j.d.sb(j.c=j.b++),9));i.k=c++;a.d[f][j.b-1]=i;a.a[f][j.b-1]=i;a.g[f][j.b-1]=i;}}a.b=new _4(a.d);a.e.c&&(a.b.e=true);}
    function gZ(a){var b,c,d,e,f,g;e=new GU;for(g=new Tob(a.c.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);f.g==(sN(),ZM)&&(e.c[e.c.length]=f,true);}if(a.d.a==(sK(),pK)&&!MM(Wv(rJ(a.c,(eM(),TL)),28))){for(d=Uh(mX(a.c));Cm(d);){c=Wv(Dm(d),12);vU(e,c.c);}}sJ(a.c,(Rib(),Whb),new llb(a.c.j.a));sJ(a.c,Vhb,(xkb(),xkb(),wkb));vU(a.b,a.c);b=null;a.e==1?(b=jZ(a,a.c,rY(a.c.d),a.c.j.a)):a.e==0?(b=iZ(a,a.c,rY(a.c.d),a.c.j.a)):a.e==3?(b=kZ(a,a.c,a.c.j.a)):a.e==2&&(b=hZ(a,a.c,a.c.j.a));!!b&&new HY(a.c,a.b,Ixb(Yv(b.b)));}
    function Mab(a,b,c){var d,e,f,g,h,i,j,k;e=b.g;Ckb(Ixb(Xv(rJ(b,(Rib(),Vhb)))))&&(e=(CX(),wX));if(b.k>=0){return false}else if(!!c.e&&e==(CX(),wX)&&e!=c.e){return false}else {b.k=c.b;vU(c.f,b);}c.e=e;if(e==(CX(),zX)||e==BX||e==wX){for(g=new Tob(b.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);for(k=(d=new Tob((new lY(f)).a.e),new nY(d));Qob(k.a);){j=Wv(Rob(k.a),12).d;h=j.f;i=h.g;if(b.d!=h.d){if(e==wX){if(i==wX){if(Mab(a,h,c)){return true}}}else {if(i==zX||i==BX){if(Mab(a,h,c)){return true}}}}}}}return true}
    function K3(a,b){var c,d,e,f,g,h,i,j,k;fJ(a.a,Bv(tv(qz,1),Fzb,10,0,[b.a,b.b]));Ue(a.c,b.e);a.q.d=a.q.d|b.d;a.q.a=a.q.a|b.c;h=Qlb(a.j.e,b.k);i=Nlb(a.j.e+a.j.b,b.n);SN(a.j,b.j,h,0,i-h);stb(a.d,b.f);b.f.c.f==b.f.d.f&&wS(a.n,true,true,true,true);g=new vtb;j=new vtb;for(e=(k=(new Snb(a.d.a)).a.bb().mb(),new Ynb(k));e.a.G();){d=(f=Wv(e.a.H(),21),Wv(f.yb(),12));stb(g,d.c);stb(j,d.d);}c=g.a.Y()-j.a.Y();if(c<0){vS(a.n,true,(sK(),oK));vS(a.n,false,pK);}else if(c>0){vS(a.n,false,(sK(),oK));vS(a.n,true,pK);}}
    function tP(b,c){var d,e,f,g,h,i,j,k,l,m;h=0;while(h<(bmb(),c.length)&&yP(c.charCodeAt(h),fzb)){++h;}d=c.length;while(d>0&&yP(c.charCodeAt(d-1),gzb)){--d;}if(h<d){l=fmb(c.substr(h,d-h),',|;');try{for(j=0,k=l.length;j<k;++j){i=l[j];g=fmb(i,'=');if(g.length!=2){throw new slb('Expecting a list of key-value pairs.')}f=hmb(g[0]);m=clb(hmb(g[1]));emb(f,'top')?(b.d=m):emb(f,'left')?(b.b=m):emb(f,Azb)?(b.a=m):emb(f,'right')&&(b.c=m);}}catch(a){a=OH(a);if(aw(a,130)){e=a;throw new slb(hzb+e)}else throw NH(a)}}}
    function Ubb(a,b){var c,d,e,f,g,h,i,j,k;k=new aJ;for(h=(j=(new aob(a.c)).a.bb().mb(),new fob(j));h.a.G();){f=(e=Wv(h.a.H(),21),Wv(e.zb(),200));f.b==0&&(TI(k,f,k.c.b,k.c),true);}while(k.b!=0){f=Wv(k.b==0?null:(Bxb(k.b!=0),$I(k,k.a.a)),200);for(d=new Tob(f.d);d.a<d.c.c.length;){c=Wv(Rob(d),279);b.k==(Lbb(),Jbb)?(c.b.a=Qlb(c.b.a,f.a+c.a)):(c.b.a=Nlb(c.b.a,f.a+c.a));--c.b.b;c.b.b==0&&QI(k,c.b);}}for(g=(i=(new aob(a.c)).a.bb().mb(),new fob(i));g.a.G();){f=(e=Wv(g.a.H(),21),Wv(e.zb(),200));b.g[f.c.k]=f.a;}}
    function yZ(a,b,c){var d,e,f,g;f=a.i;e=MI(Bv(tv(qz,1),Fzb,10,0,[b.i,b.f.i]));d=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a]));g=b.d;switch(b.g.e){case 4:f.a=Qlb(e.a,d.a)-g.b-a.j.a-c;f.b=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).b+c;break;case 2:f.a=Nlb(e.a+b.j.a,d.a)+g.c+c;f.b=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).b+c;break;case 1:f.a=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).a+c;f.b=Qlb(e.b,d.b)-g.d-a.j.b-c;break;case 3:f.a=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).a+c;f.b=Nlb(e.b+b.j.b,d.b)+g.a+c;}}
    function zZ(a,b,c){var d,e,f,g;f=a.i;e=MI(Bv(tv(qz,1),Fzb,10,0,[b.i,b.f.i]));d=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a]));g=b.d;switch(b.g.e){case 4:f.a=Qlb(e.a,d.a)-g.b-a.j.a-c;f.b=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).b-a.j.b-c;break;case 2:f.a=Nlb(e.a+b.j.a,d.a)+g.c+c;f.b=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).b-a.j.b-c;break;case 1:f.a=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).a+c;f.b=Qlb(e.b,d.b)-g.d-a.j.b-c;break;case 3:f.a=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).a+c;f.b=Nlb(e.b+b.j.b,d.b)+g.a+c;}}
    function MQ(a){var b,c;c=Wv(rJ(a,(Rib(),jib)),18);b=XQ(HQ);Ckb(Ixb(Xv(rJ(a,(Mjb(),rjb)))))?RQ(b,(d0(),W_)):TQ(b,(d0(),W_));rJ(a,(bK(),aK))!=null&&QQ(b,IQ);switch(Wv(rJ(a,(eM(),sL)),59).e){case 2:PQ(RQ(b,(d0(),L_)),K_);break;case 3:PQ(RQ(b,(d0(),o_)),n_);break;case 4:PQ(RQ(b,(d0(),c0)),b0);}c.kb((ohb(),fhb))&&PQ(RQ(b,(d0(),m_)),l_);gw(rJ(a,Bjb))!==gw((I1(),G1))&&TQ(b,(d0(),P_));gw(rJ(a,Fjb))!==gw((g4(),e4))&&gw(rJ(a,eib))===gw((NK(),JK))&&PQ(b,(d0(),w_));if(c.kb(mhb)){RQ(b,(d0(),T_));TQ(b,S_);}return b}
    function zhb(){zhb=iI;shb=new Ahb('ONE_SIDED',0,true,false,false);whb=new Ahb('TWO_SIDED',1,false,false,false);thb=new Ahb('ONE_SIDED_BEST_OF_UP_OR_DOWN',2,true,true,false);xhb=new Ahb('TWO_SIDED_BEST_OF_UP_OR_DOWN',3,false,true,false);uhb=new Ahb('ONE_SIDED_BEST_OF_UP_OR_DOWN_ORTHOGONAL_HYPEREDGES',4,true,true,true);yhb=new Ahb('TWO_SIDED_BEST_OF_UP_OR_DOWN_ORTHOGONAL_HYPEREDGES',5,false,true,true);vhb=new Ahb('ONE_SIDED_ORTHOGONAL_HYPEREDGES',6,true,false,true);rhb=new Ahb('OFF',7,false,false,false);}
    function LV(a,b,c,d,e,f,g){var h,i,j,k,l,m,n;l=Ckb(Ixb(Xv(rJ(b,(Mjb(),yjb)))));m=null;f==(djb(),ajb)&&d.c.f==c?(m=d.c):f==bjb&&d.d.f==c&&(m=d.d);j=g;if(!g||!l||!!m){k=(sN(),qN);m?(k=m.g):MM(Wv(rJ(c,(eM(),TL)),28))&&(k=f==ajb?rN:ZM);i=JV(a,b,c,f,k,d);h=IV((hX(c),d));if(f==ajb){dW(h,Wv(yU(i.f,0),7));eW(h,e);}else {dW(h,e);eW(h,Wv(yU(i.f,0),7));}j=new UV(d,h,i,Wv(rJ(i,(Rib(),uib)),7),f,!m);}else {vU(g.e,d);n=Olb(Wv(rJ(g.d,(eM(),dM)),15).a,Wv(rJ(d,dM),15).a);sJ(g.d,dM,new llb(n));}Fd(a.a,d,new XV(j.d,b,f));return j}
    function T1(a,b,c,d){var e,f,g,h,i,j,k,l;f=new uX(a);sX(f,(CX(),BX));sJ(f,(eM(),TL),(KM(),FM));e=0;if(b){g=new RX;sJ(g,(Rib(),uib),b);sJ(f,uib,b.f);QX(g,(sN(),rN));PX(g,f);l=Wv(FU(b.b,xv(dB,gAb,12,b.b.c.length,0,1)),47);for(j=0,k=l.length;j<k;++j){i=l[j];eW(i,g);}sJ(b,Bib,f);++e;}if(c){h=new RX;sJ(f,(Rib(),uib),c.f);sJ(h,uib,c);QX(h,(sN(),ZM));PX(h,f);l=Wv(FU(c.e,xv(dB,gAb,12,c.e.c.length,0,1)),47);for(j=0,k=l.length;j<k;++j){i=l[j];dW(i,h);}sJ(c,Bib,f);++e;}sJ(f,(Rib(),aib),Elb(e));d.c[d.c.length]=f;return f}
    function MV(a,b){var c,d,e,f,g,h,i;for(g=ud(a.a).mb();g.G();){f=Wv(g.H(),12);if(f.b.c.length>0){d=new IU(Wv(Dd(a.a,f),18));Gpb(d,new $V(b));e=new Fnb(f.b,0);while(e.b<e.d.Y()){c=(Bxb(e.b<e.d.Y()),Wv(e.d.sb(e.c=e.b++),33));h=-1;switch(Wv(rJ(c,(eM(),tL)),107).e){case 2:h=d.c.length-1;break;case 1:h=d.c.length/2|0;break;case 3:h=0;}if(h!=-1){i=(Cxb(h,d.c.length),Wv(d.c[h],114));vU(i.b.b,c);Wv(rJ(hX(i.b.c.f),(Rib(),jib)),18).ib((ohb(),ghb));Wv(rJ(hX(i.b.c.f),jib),18).ib(ehb);vnb(e);sJ(c,xib,f);}}}dW(f,null);eW(f,null);}}
    function H7(a){var b,c,d,e,f,g,h,i,j,k,l;k=a.e.a.c.length;for(g=new Tob(a.e.a);g.a<g.c.c.length;){f=Wv(Rob(g),61);f.j=false;}a.i=xv(mw,Yyb,26,k,12,1);a.g=xv(mw,Yyb,26,k,12,1);a.n=new GU;e=0;l=new GU;for(i=new Tob(a.e.a);i.a<i.c.c.length;){h=Wv(Rob(i),61);h.b=e++;h.c.c.length==0&&vU(a.n,h);xU(l,h.g);}b=0;for(d=new Tob(l);d.a<d.c.c.length;){c=Wv(Rob(d),89);c.b=b++;c.e=false;}j=l.c.length;if(a.b==null||a.b.length<j){a.b=xv(kw,hyb,26,j,12,1);a.c=xv(KH,xAb,26,j,13,1);}else {dpb(a.c);}a.d=l;a.p=new Xub(op(a.d.c.length));a.j=1;}
    function z0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;p=a.d;q=b.d;n=Wv(oX(a,(djb(),ajb)).mb().H(),7);t=Wv(oX(a,bjb).mb().H(),7);o=Wv(oX(b,ajb).mb().H(),7);u=Wv(oX(b,bjb).mb().H(),7);l=Wv(FU(n.b,xv(dB,gAb,12,1,0,1)),47);r=Wv(FU(t.e,xv(dB,gAb,12,1,0,1)),47);m=Wv(FU(o.b,xv(dB,gAb,12,1,0,1)),47);s=Wv(FU(u.e,xv(dB,gAb,12,1,0,1)),47);rX(a,q);for(e=0,i=m.length;e<i;++e){c=m[e];eW(c,n);}for(f=0,j=s.length;f<j;++f){c=s[f];dW(c,t);}rX(b,p);for(g=0,k=l.length;g<k;++g){c=l[g];eW(c,o);}for(d=0,h=r.length;d<h;++d){c=r[d];dW(c,u);}}
    function gR(a){var b,c,d,e,f,g,h,i;for(f=new Tob(a.a.b);f.a<f.c.c.length;){e=Wv(Rob(f),25);e.vc();}i=new HI(Uzb,Uzb);b=new HI(Vzb,Vzb);for(d=new Tob(a.a.b);d.a<d.c.c.length;){c=Wv(Rob(d),25);i.a=Qlb(i.a,c.j.d);i.b=Qlb(i.b,c.j.e);b.a=Nlb(b.a,c.j.d+c.j.c);b.b=Nlb(b.b,c.j.e+c.j.b);}for(h=Jd(a.c).mb();h.G();){g=Wv(h.H(),27);c=Wv(g.b,25);i.a=Qlb(i.a,c.j.d);i.b=Qlb(i.b,c.j.e);b.a=Nlb(b.a,c.j.d+c.j.c);b.b=Nlb(b.b,c.j.e+c.j.b);}a.d=zI(new HI(i.a,i.b));a.e=EI(new HI(b.a,b.b),i);a.a.a.c=xv(UF,syb,1,0,4,1);a.a.b.c=xv(UF,syb,1,0,4,1);}
    function P$(a){var b,c,d,e,f,g,h;h=Wv(yU(a.f,0),7);if(h.e.c.length!=0&&h.b.c.length!=0){throw new ulb('Interactive layout does not support NORTH/SOUTH ports with incoming _and_ outgoing edges.')}if(h.e.c.length!=0){f=Uzb;for(c=new Tob(h.e);c.a<c.c.c.length;){b=Wv(Rob(c),12);g=b.d.f;d=Wv(rJ(g,(eM(),GL)),65);f=Qlb(f,g.i.a-d.b);}return new $c(_b(f))}if(h.b.c.length!=0){e=Vzb;for(c=new Tob(h.b);c.a<c.c.c.length;){b=Wv(Rob(c),12);g=b.c.f;d=Wv(rJ(g,(eM(),GL)),65);e=Nlb(e,g.i.a+g.j.a+d.c);}return new $c(_b(e))}return zb(),zb(),yb}
    function JV(a,b,c,d,e,f){var g,h,i,j,k,l,m;j=d==(djb(),ajb)?f.c:f.d;i=PW(b);if(j.f==c){g=Wv(Smb(a.b,j),9);if(!g){g=NW(j,Wv(rJ(c,(eM(),TL)),28),e,d==ajb?-1:1,j.j,i,b);sJ(g,(Rib(),uib),j);Umb(a.b,j,g);}}else {k=Wv(rJ(f,(eM(),dM)),15).a;g=NW((l=new tJ,m=Wv(rJ(b,(Rib(),Jib)),15).a*Wv(rJ(b,(Mjb(),qjb)),15).a/2,sJ(l,tib,new llb(m)),l),Wv(rJ(c,TL),28),e,d==ajb?-1:1,new HI(k,k),i,b);h=KV(a,g,c,d);sJ(g,uib,h);Umb(a.b,h,g);}Wv(rJ(b,(Rib(),jib)),18).ib((ohb(),hhb));MM(Wv(rJ(b,(eM(),TL)),28))?sJ(b,TL,(KM(),HM)):sJ(b,TL,(KM(),IM));return g}
    function Iab(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;d=Wv(rJ(b,(Mjb(),wjb)),15).a;v=Wv(rJ(b,Kjb),24).a;m=4;e=3;w=20/v;n=false;i=0;g=$xb;do{f=i!=1;l=i!=0;A=0;for(q=a.a,s=0,u=q.length;s<u;++s){o=q[s];o.g=null;Jab(a,o,f,l,d);A+=Jlb(o.a);}do{h=Nab(a,b);}while(h);for(p=a.a,r=0,t=p.length;r<t;++r){o=p[r];c=Uab(o).a;if(c!=0){for(k=new Tob(o.f);k.a<k.c.c.length;){j=Wv(Rob(k),9);j.i.b+=c;}}}if(i==0||i==1){--m;if(m<=0&&(A<g||-m>v)){i=2;g=$xb;}else if(i==0){i=1;g=A;}else {i=0;g=A;}}else {n=A>=g||g-A<w;g=A;n&&--e;}}while(!(n&&e<=0))}
    function vZ(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;l=Wv(FU(a.f,xv(BB,mAb,7,a.f.c.length,0,1)),346);for(j=0,k=l.length;j<k;++j){i=l[j];if(c!=(djb(),ajb)){h=Wv(FU(i.e,xv(dB,gAb,12,i.e.c.length,0,1)),47);for(e=0,f=h.length;e<f;++e){d=h[e];n=Wv(rJ(d.d.f,(Mjb(),vjb)),85);!Ckb(Ixb(Xv(rJ(d,(Rib(),Iib)))))&&!(b==(Xib(),Uib)&&n==Vib)&&cW(d,true);}}if(c!=bjb){g=Wv(FU(i.b,xv(dB,gAb,12,i.b.c.length,0,1)),47);for(e=0,f=g.length;e<f;++e){d=g[e];m=Wv(rJ(d.c.f,(Mjb(),vjb)),85);!Ckb(Ixb(Xv(rJ(d,(Rib(),Iib)))))&&!(b==(Xib(),Sib)&&m==Tib)&&cW(d,true);}}}}
    function RW(a,b,c,d){var e,f,g,h,i;g=a.g;if(g==(sN(),qN)&&b!=(KM(),IM)&&b!=(KM(),JM)){g=KW(a,c);QX(a,g);rJ(a,(eM(),LL))==null&&g!=qN&&(a.i.a!=0||a.i.b!=0)&&sJ(a,LL,new llb(JW(a,g)));}if(b==(KM(),GM)){i=0;switch(g.e){case 1:case 3:f=a.f.j.a;f>0&&(i=a.i.a/f);break;case 2:case 4:e=a.f.j.b;e>0&&(i=a.i.b/e);}sJ(a,(Rib(),Cib),i);}h=a.j;if(d){a.a.a=d.a;a.a.b=d.b;}else if(b!=IM&&b!=JM&&g!=qN){switch(g.e){case 1:a.a.a=h.a/2;break;case 2:a.a.a=h.a;a.a.b=h.b/2;break;case 3:a.a.a=h.a/2;a.a.b=h.b;break;case 4:a.a.b=h.b/2;}}else {a.a.a=h.a/2;a.a.b=h.b/2;}}
    function zJ(a){var b,c,d,e;if(aw(a.a,10)){return xI(Wv(a.a,10))}else if(aw(a.a,66)){return Xsb(Wv(a.a,86))}else if(aw(a.a,50)){return Wv(a.a,50).Wc()}else if(aw(a.a,191)){b=new Vwb;e=(d=new rwb((new wwb((new Gob(Wv(a.a,191).a)).a)).b),new Mob(d));while(Bnb(e.a.a)){Rwb(b,(c=pwb(e.a),c.yb()));}return b}else if(aw(a.a,13)){return new IU(Wv(a.a,13))}else if(aw(a.a,44)){b=new jJ;e=WI(Wv(a.a,44),0);while(e.b!=e.d.c){QI(b,Wv(_ub(e),10));}return b}else if(aw(a.a,58)){b=new aJ;e=WI(Wv(a.a,58),0);while(e.b!=e.d.c){QI(b,_ub(e));}return b}else {return a.a}}
    function o1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;h=0;o=0;i=Xob(a.f,a.f.length);f=a.d;g=a.i;d=a.a;e=a.b;do{n=0;for(k=new Tob(a.p);k.a<k.c.c.length;){j=Wv(Rob(k),9);m=n1(a,j);c=true;(a.q==(I1(),B1)||a.q==E1)&&(c=Ckb(Ixb(Xv(m.b))));if(Wv(m.a,24).a<0&&c){++n;i=Xob(a.f,a.f.length);a.d=a.d+Wv(m.a,24).a;o+=f-a.d;f=a.d+Wv(m.a,24).a;g=a.i;d=Ao(a.a);e=Ao(a.b);}else {a.f=Xob(i,i.length);a.d=f;a.a=(_b(d),d?new IU((Oh(),d)):Bo(new Tob(null)));a.b=(_b(e),e?new IU((Oh(),e)):Bo(new Tob(null)));a.i=g;}}++h;l=n!=0&&Ckb(Ixb(Xv(b.B(new RJ(Elb(o),Elb(h))))));}while(l)}
    function yO(a,b,c,d){var e,f,g,h,i,j,k;if(!Qob(new Tob(zW(a)))){return d}k=wO(Wv(oW(a,(eM(),JL)),86));for(i=new Tob(zW(a));i.a<i.c.c.length;){h=Wv(Rob(i),129);j=wO(Wv(oW(h,JL),86));j==(uO(),tO)&&(j=k);qW(h,j.e);e=zO(c,j);e.c=Nlb(e.c,h.e.j.a);e.b+=h.e.j.b+b;}for(g=new Lsb((new Fsb(c)).a);htb(g.a);){f=(g.b=itb(g.a),new Psb(g.c,g.b));e=Wv(f.b.b[f.a.e],62);e.b-=b;switch(Wv(f.a,67).e){case 12:case 13:case 14:d.d=Nlb(d.d,e.b+b);break;case 15:d.b=Nlb(d.b,e.c+b);break;case 17:d.c=Nlb(d.c,e.c+b);break;case 18:case 19:case 20:d.a=Nlb(d.a,e.b+b);}}return d}
    function mgb(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p;igb(this);c==(fgb(),dgb)?stb(this.g,a):stb(this.o,a);n=rAb;m=4.9E-324;for(j=(g=(new Snb(b.a)).a.bb().mb(),new Ynb(g));j.a.G();){h=(e=Wv(j.a.H(),21),Wv(e.yb(),27));k=Wv(h.a,223);d=Wv(h.b,12);l=d.c;l==a&&(l=d.d);k==dgb?stb(this.g,l):stb(this.o,l);p=MI(Bv(tv(qz,1),Fzb,10,0,[l.f.i,l.i,l.a])).b;n=n<p?n:p;m=m>p?m:p;}o=MI(Bv(tv(qz,1),Fzb,10,0,[a.f.i,a.i,a.a])).b;kgb(this,o,n,m);for(i=(f=(new Snb(b.a)).a.bb().mb(),new Ynb(f));i.a.G();){h=(e=Wv(i.a.H(),21),Wv(e.yb(),27));stb(this.c,Wv(h.b,12));}this.f=false;}
    function cQ(a,b,c,d){var e,f,g,h,i,j;h=(eM(),KL).b;if(h in b.a&&Pu(b,h).ic().a){return}j=Pu(b,Dzb);if(!j){throw new GQ("Labels must have a property 'text'.",null,b)}else if(!j.lc()){throw new GQ("A label's 'text' property must be a string.",j,b)}i=j.lc().a;f=new dX(i);sJ(f,(Rib(),uib),b);Umb(a.f,f,b);_P(b,f);hQ(b,f);aw(c,9)?vU(Wv(c,9).c,f):aw(c,12)?vU(Wv(c,12).b,f):aw(c,7)&&vU(Wv(c,7).c,f);if(aw(c,12)){g=Wv(rJ(f,tL),107);_P(b,f);sJ(f,tL,g);e=Wv(rJ(d,jib),18);switch(g.e){case 2:case 3:e.ib((ohb(),ghb));case 1:case 0:e.ib((ohb(),ehb));sJ(f,tL,(EK(),AK));}}}
    function UW(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;f=0;g=0;for(j=new Tob(a.a);j.a<j.c.c.length;){h=Wv(Rob(j),9);f=Nlb(f,h.e.b);g=Nlb(g,h.e.c);}for(i=new Tob(a.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);c=Wv(rJ(h,(eM(),lL)),103);switch(c.e){case 1:o=0;break;case 2:o=1;break;case 5:o=0.5;break;default:d=0;l=0;for(n=new Tob(h.f);n.a<n.c.c.length;){m=Wv(Rob(n),7);m.b.c.length==0||++d;m.e.c.length==0||++l;}d+l==0?(o=0.5):(o=l/(d+l));}q=a.c;k=h.j.a;r=(q.a-k)*o;o>0.5?(r-=g*2*(o-0.5)):o<0.5&&(r+=f*2*(0.5-o));e=h.e.b;r<e&&(r=e);p=h.e.c;r>q.a-p-k&&(r=q.a-p-k);h.i.a=b+r;}}
    function Kv(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G;c=a.l&8191;d=a.l>>13|(a.m&15)<<9;e=a.m>>4&8191;f=a.m>>17|(a.h&255)<<5;g=(a.h&1048320)>>8;h=b.l&8191;i=b.l>>13|(b.m&15)<<9;j=b.m>>4&8191;k=b.m>>17|(b.h&255)<<5;l=(b.h&1048320)>>8;B=c*h;C=d*h;D=e*h;F=f*h;G=g*h;if(i!=0){C+=c*i;D+=d*i;F+=e*i;G+=f*i;}if(j!=0){D+=c*j;F+=d*j;G+=e*j;}if(k!=0){F+=c*k;G+=d*k;}l!=0&&(G+=c*l);n=B&azb;o=(C&511)<<13;m=n+o;q=B>>22;r=C>>9;s=(D&262143)<<4;t=(F&31)<<17;p=q+r+s+t;v=D>>18;w=F>>5;A=(G&4095)<<8;u=v+w+A;p+=m>>22;m&=azb;u+=p>>22;p&=azb;u&=bzb;return Ev(m,p,u)}
    function jZ(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;q=a.d.c.c.c.length;if(c>=q-1){return null}e=new GU;e.c[e.c.length]=b;u=b;g=c;o=-1;h=Wv(yU(a.d.c.c,c),16);for(n=0;n<h.a.c.length;++n){r=Wv(yU(h.a,n),9);if(r==b){o=n;break}}p=eZ(a,1,o,c,q,a.a);if(!p){return null}v=a.a;m=0;f=0;while(!!u&&v>1&&g<q-1){k=fZ(a,u);l=Wv(yU(a.d.c.c,g+1),16);w=Wv(p.sb(m++),24).a;s=Slb(w,l.a.c.length);qX(k,s,l);!!u&&(e.c[e.c.length]=u,true);u=k;--v;++f;++g;}t=(d-(e.c.length-1)*a.d.d)/e.c.length;for(j=new Tob(e);j.a<j.c.c.length;){i=Wv(Rob(j),9);i.j.a=t;}return new RJ(Elb(f),t)}
    function iZ(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;if(c<=0){return null}e=new GU;e.c[e.c.length]=b;u=b;g=c;o=-1;h=Wv(yU(a.d.c.c,c),16);for(n=0;n<h.a.c.length;++n){q=Wv(yU(h.a,n),9);if(q==b){o=n;break}}p=eZ(a,0,o,c,a.d.c.c.c.length,a.a);if(!p){return null}v=a.a;m=0;f=0;t=o;while(!!u&&v>1&&g>1){k=fZ(a,u);h=Wv(yU(a.d.c.c,g),16);l=Wv(yU(a.d.c.c,g-1),16);w=Wv(p.sb(m++),24).a;r=Slb(w,l.a.c.length);qX(u,r,l);qX(k,t,h);t=r;!!u&&(e.c[e.c.length]=u,true);u=k;--v;++f;--g;}s=(d-(e.c.length-1)*a.d.d)/e.c.length;for(j=new Tob(e);j.a<j.c.c.length;){i=Wv(Rob(j),9);i.j.a=s;}return new RJ(Elb(f),s)}
    function sV(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;a.b=a.c;o=Xv(rJ(b,(eM(),_L)));n=o==null||Ckb((Dxb(o),o));f=Wv(rJ(b,(Rib(),jib)),18).kb((ohb(),hhb));e=Wv(rJ(b,TL),28);c=!(e==(KM(),EM)||e==GM||e==FM);if(n&&(c||!f)){for(l=new Tob(b.b);l.a<l.c.c.length;){j=Wv(Rob(l),9);j.k=0;}m=new GU;for(k=new Tob(b.b);k.a<k.c.c.length;){j=Wv(Rob(k),9);d=rV(a,j,null);if(d){i=new kW;qJ(i,b);sJ(i,fib,Wv(d.b,18));YW(i.a,b.a);for(h=Wv(d.a,20).mb();h.G();){g=Wv(h.H(),9);vU(i.b,g);g.a=i;}m.ib(i);}}f&&(a.b=a.a);}else {m=new opb(Bv(tv(mB,1),{38:1,39:1,42:1,3:1,8:1,5:1,6:1},55,0,[b]));}return m}
    function T4(a){var b,c,d,e,f,g,h,i,j;for(c=new Tob(a.a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);for(g=b.i.mb();g.G();){f=Wv(g.H(),25);if(b.f==f.f){continue}tK(a.a.d)?(i=a.a.g.tc(b,f)):(i=a.a.g.uc(b,f));d=b.g.a+b.j.c+i-f.g.a;d=Math.ceil(d);d=0>d?0:d;if(!!b.o&&!!f.o&&aw(b,82)&&aw(f,82)&&!sr(or(Wv(b,82).d,Wv(f,82).d))){e=x7(new A7,a.d);h=hw(Llb(f.g.a-b.g.a));f7(i7(h7(j7(g7(new k7,0>h?0:h),1),e),a.c[b.f.d]));f7(i7(h7(j7(g7(new k7,0>-h?0:-h),1),e),a.c[f.f.d]));}else {j=1;(aw(b,82)&&aw(f,93)||aw(f,82)&&aw(b,93))&&(j=2);f7(i7(h7(j7(g7(new k7,hw(d)),j),a.c[b.f.d]),a.c[f.f.d]));}}}}
    function tQ(){tQ=iI;sQ=new vtb;rQ=uQ(Bv(tv(rz,1),syb,79,0,[(eM(),kL),xL]));oQ=uQ(Bv(tv(rz,1),syb,79,0,[ML,UL,(Mjb(),Hjb),yL,(Rib(),Eib),Kjb,Cjb]));kQ=uQ(Bv(tv(rz,1),syb,79,0,[mL,qL,KL,wL,BL,EL,FL,$L,_L,AL,gjb,mjb,njb,xjb,rjb,yjb,Ijb,Djb,ijb]));nQ=uQ(Bv(tv(rz,1),syb,79,0,[IL,HL,DL,dM,LL,Dib,Xhb,Rhb,Jib,Ejb,qjb,wjb]));mQ=uQ(Bv(tv(rz,1),syb,79,0,[WL,lL,sL,uL,tL,vL,zL,NL,OL,PL,QL,RL,TL,VL,hjb,ljb,zjb,ojb,kjb,Ajb,Bjb,sjb,tjb,vjb,Fjb,Gjb,Jjb,Ljb,ujb]));lQ=uQ(Bv(tv(rz,1),syb,79,0,[JL,aM,bM,jjb]));qQ=uQ(Bv(tv(rz,1),syb,79,0,[jL,oL,CL,GL,SL,YL]));pQ=uQ(Bv(tv(rz,1),syb,79,0,[(RP(),OP)]));}
    function AR(a){var b,c,d,e,f,g,h;b=0;for(f=new Tob(a.b.a);f.a<f.c.c.length;){d=Wv(Rob(f),78);d.b=0;d.c=0;}zR(a,0);yR(a,a.g);fS(a.c);jS(a.c);c=(sK(),oK);hS(bS(gS(hS(bS(gS(hS(gS(a.c,c)),vK(c)))),c)));gS(a.c,oK);DR(a,a.g);ER(a,0);FR(a,0);GR(a,1);zR(a,1);yR(a,a.d);fS(a.c);for(g=new Tob(a.b.a);g.a<g.c.c.length;){d=Wv(Rob(g),78);b+=Jlb(d.c);}for(h=new Tob(a.b.a);h.a<h.c.c.length;){d=Wv(Rob(h),78);d.b=0;d.c=0;}c=rK;hS(bS(gS(hS(bS(gS(hS(jS(gS(a.c,c))),vK(c)))),c)));gS(a.c,oK);DR(a,a.d);ER(a,1);FR(a,1);GR(a,0);jS(a.c);for(e=new Tob(a.b.a);e.a<e.c.c.length;){d=Wv(Rob(e),78);b+=Jlb(d.c);}return b}
    function BR(a){var b,c,d,e,f,g,h;b=new GU;a.g=new GU;a.d=new GU;for(g=new rnb((new inb(a.f.b)).a);g.b;){f=pnb(g);vU(b,Wv(Wv(f.zb(),27).b,25));tK(Wv(f.yb(),251).yc())?vU(a.d,Wv(f.zb(),27)):vU(a.g,Wv(f.zb(),27));}yR(a,a.d);yR(a,a.g);a.c=new rS(a.b);pS(a.c,(fR(),eR));DR(a,a.d);DR(a,a.g);xU(b,a.c.a.b);a.e=new HI(Uzb,Uzb);a.a=new HI(Vzb,Vzb);for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),25);a.e.a=Qlb(a.e.a,c.j.d);a.e.b=Qlb(a.e.b,c.j.e);a.a.a=Nlb(a.a.a,c.j.d+c.j.c);a.a.b=Nlb(a.a.b,c.j.e+c.j.b);}oS(a.c,new IR);h=0;do{e=AR(a);++h;}while((h<2||e>$yb)&&h<10);oS(a.c,new KR);AR(a);iS(a.c);gR(a.f);}
    function tT(a){oT();var b,c,d,e,f,g,h;h=new qT;for(c=new Tob(a);c.a<c.c.c.length;){b=Wv(Rob(c),48);(!h.b||b.c>=h.b.c)&&(h.b=b);if(!h.c||b.c<=h.c.c){h.d=h.c;h.c=b;}(!h.e||b.d>=h.e.d)&&(h.e=b);(!h.f||b.d<=h.f.d)&&(h.f=b);}d=new xT((cT(),$S));RT(a,mT,new opb(Bv(tv(JA,1),syb,160,0,[d])));g=new xT(bT);RT(a,lT,new opb(Bv(tv(JA,1),syb,160,0,[g])));e=new xT(_S);RT(a,kT,new opb(Bv(tv(JA,1),syb,160,0,[e])));f=new xT(aT);RT(a,jT,new opb(Bv(tv(JA,1),syb,160,0,[f])));rT(d.c,$S);rT(e.c,_S);rT(f.c,aT);rT(g.c,bT);h.a.c=xv(UF,syb,1,0,4,1);xU(h.a,d.c);xU(h.a,Fo(e.c));xU(h.a,f.c);xU(h.a,Fo(g.c));return h}
    function $O(a){var b,c,d,e,f,g,h,i,j,k;e=Wv(vW(a,(eM(),DL)),15).a;for(h=new Tob(uW(a));h.a<h.c.c.length;){g=Wv(Rob(h),626);c=new fP(g);c.d=e;c.k=Wv(oW(g,XL),15).a;d=Wv(oW(g,VL),149);b=Ckb(Ixb(Xv(rJ(Wv(g.e,9),(Rib(),$hb)))));for(k=new Tob(AW(g));k.a<k.c.c.length;){j=Wv(Rob(k),161);d==(UM(),SM)?XO(j,b,e):d==TM&&YO(j,e);JO(j);}LO(c,Wv(oW(g,aM),86).kb((DN(),CN)));NO(c);yO(c.e,c.d,c.c,c.p);_O(c);ZO(c);VO(c);i=new CP((f=Wv(g.e,9).b,new BP(f.d,f.b,f.a,f.c)));i.b=c.p.b+c.q.b;i.c=c.p.c+c.q.c;i.d=c.p.d+c.q.d;i.a=c.p.a+c.q.a;Wv(g.e,9).b.b=i.b;Wv(g.e,9).b.d=i.d;Wv(g.e,9).b.c=i.c;Wv(g.e,9).b.a=i.a;}}
    function c1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;i=Wv(nX(a,(sN(),rN)).mb().H(),7).b;n=Wv(nX(a,ZM).mb().H(),7).e;h=i.c.length;t=MX(Wv(yU(a.f,0),7));while(h-->0){p=(Cxb(0,i.c.length),Wv(i.c[0],12));e=(Cxb(0,n.c.length),Wv(n.c[0],12));s=e.d.b;f=zU(s,e,0);fW(p,e.d,f);dW(e,null);eW(e,null);o=p.a;b&&QI(o,new II(t));for(d=WI(e.a,0);d.b!=d.d.c;){c=Wv(_ub(d),10);QI(o,new II(c));}r=p.b;for(m=new Tob(e.b);m.a<m.c.c.length;){l=Wv(Rob(m),33);r.c[r.c.length]=l;}q=Wv(rJ(p,(eM(),CL)),44);g=Wv(rJ(e,CL),44);if(g){if(!q){q=new jJ;sJ(p,CL,q);}for(k=WI(g,0);k.b!=k.d.c;){j=Wv(_ub(k),10);QI(q,new II(j));}}}}
    function XO(a,b,c){var d,e,f,g,h;f=Li(DW(a));if(f.Nb().V()){return}h=0;switch(Wv(a.e,7).g.e){case 4:case 2:h=b&&Ckb(Ixb(Xv(rJ(Wv(a.e,7),(Rib(),lib)))))?a.e.j.b:(a.e.j.b-Wv(f.Nb().sb(0),129).pc().b)/2-c;break;case 1:h=a.e.j.b;break;case 3:h=0;}Wv(a.e,7).g==(sN(),pN)&&Ii(f);for(e=new Tob(DW(a));e.a<e.c.c.length;){d=Wv(Rob(e),129);g=new II(a.e.i);switch(Wv(a.e,7).g.e){case 4:g.a=a.e.j.a+c;g.b=h+c;h+=c+d.e.j.b;break;case 2:g.a=-d.e.j.a-c;g.b=h+c;h+=c+d.e.j.b;break;case 1:g.a=(a.e.j.a-d.e.j.a)/2;g.b=h+c;h+=c+d.e.j.b;break;case 3:g.a=(a.e.j.a-d.e.j.a)/2;g.b=h-c-d.e.j.b;h-=c+d.e.j.b;}d.e.i.a=g.a;d.e.i.b=g.b;}}
    function jR(a,b){var c,d,e,f,g,h,i,j,k,l;a.a=new NR(Tsb(Bz));for(d=new Tob(b.a);d.a<d.c.c.length;){c=Wv(Rob(d),347);h=new QR(Bv(tv(kA,1),syb,25,0,[]));vU(a.a.a,h);for(j=new Tob(c.d);j.a<j.c.c.length;){i=Wv(Rob(j),62);k=new pR(a,i);iR(k,Wv(rJ(c.c,(Rib(),fib)),18));if(!Qmb(a.g,c)){Umb(a.g,c,new HI(i.d,i.e));Umb(a.f,c,k);}vU(a.a.b,k);OR(h,k);}for(g=new Tob(c.b);g.a<g.c.c.length;){f=Wv(Rob(g),251);k=new pR(a,f.Bc());Umb(a.b,f,new RJ(h,k));iR(k,Wv(rJ(c.c,(Rib(),fib)),18));if(f.zc()){l=new qR(a,f.zc(),1);iR(l,Wv(rJ(c.c,fib),18));e=new QR(Bv(tv(kA,1),syb,25,0,[]));OR(e,l);Fd(a.c,f.yc(),new RJ(h,l));}}}return a.a}
    function ccb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;p=b.c.c.length;if(p<3){return}n=xv(mw,Yyb,26,p,12,1);l=0;for(k=new Tob(b.c);k.a<k.c.c.length;){j=Wv(Rob(k),16);n[l++]=j.a.c.length;}m=new Fnb(b.c,2);for(d=1;d<p-1;d++){c=(Bxb(m.b<m.d.Y()),Wv(m.d.sb(m.c=m.b++),16));o=new Tob(c.a);f=0;h=0;for(i=0;i<n[d+1];i++){t=Wv(Rob(o),9);if(i==n[d+1]-1||bcb(a,t,d+1,d)){g=n[d]-1;bcb(a,t,d+1,d)&&(g=a.d.e[Wv(Wv(Wv(yU(a.d.b,t.k),20).sb(0),27).a,9).k]);while(h<=i){s=Wv(yU(c.a,h),9);if(!bcb(a,s,d+1,d)){for(r=Wv(yU(a.d.b,s.k),20).mb();r.G();){q=Wv(r.H(),27);e=a.d.e[Wv(q.a,9).k];(e<f||e>g)&&stb(a.c,Wv(q.b,12));}}++h;}f=g;}}}}
    function _9(a,b,c){var d,e,f,g,h,i;this.g=a;h=b.d.length;i=c.d.length;this.d=xv(qB,Nzb,9,h+i,0,1);for(g=0;g<h;g++){this.d[g]=b.d[g];}for(f=0;f<i;f++){this.d[h+f]=c.d[f];}if(b.e){this.e=Eo(b.e);this.e.nb(c);if(c.e){for(e=c.e.mb();e.G();){d=Wv(e.H(),102);if(d==b){continue}else this.e.kb(d)?--d.c:this.e.ib(d);}}}else if(c.e){this.e=Eo(c.e);this.e.nb(b);}this.f=b.f+c.f;this.a=b.a+c.a;this.a>0?Z9(this,this.f/this.a):W9(b.g,b.d[0]).a!=null&&W9(c.g,c.d[0]).a!=null?Z9(this,(Ixb(W9(b.g,b.d[0]).a)+Ixb(W9(c.g,c.d[0]).a))/2):W9(b.g,b.d[0]).a!=null?Z9(this,W9(b.g,b.d[0]).a):W9(c.g,c.d[0]).a!=null&&Z9(this,W9(c.g,c.d[0]).a);}
    function x9(a,b){var c,d,e,f,g,h,i,j,k,l,m;switch(a.g.e){case 1:d=Wv(rJ(a,(Rib(),uib)),12);c=Wv(rJ(d,vib),44);!c?(c=new jJ):Ckb(Ixb(Xv(rJ(d,Iib))))&&(c=lJ(c));j=Wv(rJ(a,qib),7);k=MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a]));if(b<=k.a){return k.b}TI(c,k,c.a,c.a.a);l=Wv(rJ(a,rib),7);m=MI(Bv(tv(qz,1),Fzb,10,0,[l.f.i,l.i,l.a]));if(m.a<=b){return m.b}TI(c,m,c.c.b,c.c);i=WI(c,0);g=Wv(_ub(i),10);h=Wv(_ub(i),10);while(h.a<b&&i.b!=i.d.c){g=h;h=Wv(_ub(i),10);}return g.b+(b-g.a)/(h.a-g.a)*(h.b-g.b);case 3:f=Wv(rJ(Wv(yU(a.f,0),7),(Rib(),uib)),7);e=f.f;switch(f.g.e){case 1:return e.i.b;case 3:return e.i.b+e.j.b;}}return kX(a).b}
    function KP(a){var b,c,d,e,f,g,h,i,j,k,l,m;k=gw(rJ(a.c.f,(Rib(),sib)))===gw(rJ(a.d.f,sib));g=new FI;c=Wv(rJ(a,(eM(),oL)),44);if(!!c&&c.b>=2){_I(a.a);d=0;for(m=WI(c,0);m.b!=m.d.c;){l=Wv(_ub(m),10);if(d==0){b=EI(EI(new HI(l.a,l.b),a.c.i),a.c.f.i);a.c.a.a=b.a;a.c.a.b=b.b;}else if(d==c.b-1){b=EI(EI(new HI(l.a,l.b),a.d.i),a.d.f.i);a.d.a.a=b.a;a.d.a.b=b.b;}else {QI(a.a,l);}++d;}}if(k){for(i=WI(a.a,0);i.b!=i.d.c;){h=Wv(_ub(i),10);g.a=Nlb(g.a,h.a);g.b=Nlb(g.b,h.b);}}for(f=new Tob(a.b);f.a<f.c.c.length;){e=Wv(Rob(f),33);j=Wv(rJ(e,YL),10);if(j){e.i.a=j.a;e.i.b=j.b;}if(k){g.a=Nlb(g.a,e.i.a+e.j.a);g.b=Nlb(g.b,e.i.b+e.j.b);}}return g}
    function eQ(a,b,c){var d,e,f,g,h,i,j;SP(b);d=Wv(rJ(c,(Rib(),jib)),18);g=new uX(c);sJ(g,uib,b);vU(c.b,g);f=Wv(Pu(b,'id'),97);Vmb(a.i,f.a,g);Umb(a.j,g,b);_P(b,g);hQ(b,g);if('ports' in b.a){j=Pu(b,'ports');if(!j.hc()){throw new GQ("The 'ports' property of the node must be an array.",j,b)}i=j.hc();for(e=0;e<i.a.length;++e){aw(gu(i,e),69)&&gQ(a,Wv(gu(i,e),69),g,c);}}dQ(a,b,g,c);Mzb in b.a&&Pu(b,Mzb).hc().a.length>0&&sJ(g,$hb,(xkb(),xkb(),wkb));h=Wv(rJ(g,(eM(),TL)),28);h==(KM(),JM)?IM:h!=IM&&d.ib((ohb(),khb));Ckb(Ixb(Xv(rJ(g,qL))))&&d.ib((ohb(),fhb));if(Ckb(Ixb(Xv(rJ(g,AL))))){d.ib((ohb(),jhb));d.ib(ihb);sJ(g,TL,IM);}return g}
    function iR(a,b){b.V()&&wS(a.n,true,true,true,true);b.t((sN(),eN))&&wS(a.n,true,true,true,false);b.t(_M)&&wS(a.n,false,true,true,true);b.t(mN)&&wS(a.n,true,true,false,true);b.t(oN)&&wS(a.n,true,false,true,true);b.t(fN)&&wS(a.n,false,true,true,false);b.t(aN)&&wS(a.n,false,true,false,true);b.t(nN)&&wS(a.n,true,false,false,true);b.t(lN)&&wS(a.n,true,false,true,false);b.t(jN)&&wS(a.n,true,true,true,true);b.t(cN)&&wS(a.n,true,true,true,true);b.t(jN)&&wS(a.n,true,true,true,true);b.t(bN)&&wS(a.n,true,true,true,true);b.t(kN)&&wS(a.n,true,true,true,true);b.t(iN)&&wS(a.n,true,true,true,true);b.t(hN)&&wS(a.n,true,true,true,true);}
    function n1(a,b){var c,d,e,f,g,h,i,j,k,l;i=true;e=0;j=a.f[b.k];k=b.j.b+a.n;c=a.c[b.k][2];DU(a.a,j,Elb(Wv(yU(a.a,j),24).a-1+c));DU(a.b,j,Ixb(Yv(yU(a.b,j)))-k+c*a.e);++j;if(j>=a.i){++a.i;vU(a.a,Elb(1));vU(a.b,k);}else {d=a.c[b.k][1];DU(a.a,j,Elb(Wv(yU(a.a,j),24).a+1-d));DU(a.b,j,Ixb(Yv(yU(a.b,j)))+k-d*a.e);}(a.q==(I1(),B1)&&(Wv(yU(a.a,j),24).a>a.j||Wv(yU(a.a,j-1),24).a>a.j)||a.q==E1&&(Ixb(Yv(yU(a.b,j)))>a.k||Ixb(Yv(yU(a.b,j-1)))>a.k))&&(i=false);for(g=Uh(iX(b));Cm(g);){f=Wv(Dm(g),12);h=f.c.f;if(a.f[h.k]==j){l=n1(a,h);e=e+Wv(l.a,24).a;i=i&&Ckb(Ixb(Xv(l.b)));}}a.f[b.k]=j;e=e+a.c[b.k][0];return new RJ(Elb(e),(xkb(),i?wkb:vkb))}
    function WW(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;m=new II(a.j);r=b.a/m.a;h=b.b/m.b;p=b.a-m.a;f=b.b-m.b;if(c){e=gw(rJ(a,(eM(),TL)))===gw((KM(),FM));for(o=new Tob(a.f);o.a<o.c.c.length;){n=Wv(Rob(o),7);switch(n.g.e){case 1:e||(n.i.a*=r);break;case 2:n.i.a+=p;e||(n.i.b*=h);break;case 3:e||(n.i.a*=r);n.i.b+=f;break;case 4:e||(n.i.b*=h);}}}for(j=new Tob(a.c);j.a<j.c.c.length;){i=Wv(Rob(j),33);k=i.i.a+i.j.a/2;l=i.i.b+i.j.b/2;q=k/m.a;g=l/m.b;if(q+g>=1){if(q-g>0&&l>=0){i.i.a+=p;i.i.b+=f*g;}else if(q-g<0&&k>=0){i.i.a+=p*q;i.i.b+=f;}}}a.j.a=b.a;a.j.b=b.b;sJ(a,(eM(),aM),(DN(),d=Wv(Hkb(Lz),11),new atb(d,Wv(exb(d,d.length),11),0)));}
    function C7(a){var b,c,d,e,f,g,h,i,j,k;d=new GU;for(g=new Tob(a.e.a);g.a<g.c.c.length;){e=Wv(Rob(g),61);k=0;e.k.c=xv(UF,syb,1,0,4,1);for(c=new Tob(m7(e));c.a<c.c.c.length;){b=Wv(Rob(c),89);if(b.e){vU(e.k,b);++k;}}k==1&&(d.c[d.c.length]=e,true);}for(f=new Tob(d);f.a<f.c.c.length;){e=Wv(Rob(f),61);while(e.k.c.length==1){j=Wv(Rob(new Tob(e.k)),89);a.b[j.b]=j.f;h=j.c;i=j.d;for(c=new Tob(m7(e));c.a<c.c.c.length;){b=Wv(Rob(c),89);b==j||(b.e?h==b.c||i==b.d?(a.b[j.b]-=a.b[b.b]-b.f):(a.b[j.b]+=a.b[b.b]-b.f):e==h?b.c==e?(a.b[j.b]+=b.f):(a.b[j.b]-=b.f):b.c==e?(a.b[j.b]-=b.f):(a.b[j.b]+=b.f));}BU(h.k,j);BU(i.k,j);h==e?(e=j.d):(e=j.c);}}}
    function _fb(a){var b,c,d,e,f,g,h,i,j,k;j=new aJ;h=new aJ;for(f=new Tob(a);f.a<f.c.c.length;){d=Wv(Rob(f),77);d.e=d.d.c.length;d.k=d.j.c.length;d.e==0&&(TI(j,d,j.c.b,j.c),true);d.k==0&&d.g.a.Y()==0&&(TI(h,d,h.c.b,h.c),true);}g=-1;while(j.b!=0){d=Wv(un(j,0),77);for(c=new Tob(d.j);c.a<c.c.c.length;){b=Wv(Rob(c),117);k=b.b;k.n=Plb(k.n,d.n+1);g=Plb(g,k.n);--k.e;k.e==0&&(TI(j,k,j.c.b,j.c),true);}}if(g>-1){for(e=WI(h,0);e.b!=e.d.c;){d=Wv(_ub(e),77);d.n=g;}while(h.b!=0){d=Wv(un(h,0),77);for(c=new Tob(d.d);c.a<c.c.c.length;){b=Wv(Rob(c),117);i=b.a;if(i.g.a.Y()!=0){continue}i.n=Slb(i.n,d.n-1);--i.k;i.k==0&&(TI(h,i,h.c.b,h.c),true);}}}}
    function QV(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;i=new GU;for(f=new Tob(b.b);f.a<f.c.c.length;){e=Wv(Rob(f),9);for(h=new Tob(e.f);h.a<h.c.c.length;){g=Wv(Rob(h),7);k=null;for(t=Wv(FU(g.e,xv(dB,gAb,12,0,0,1)),47),u=0,v=t.length;u<v;++u){s=t[u];if(!SW(s.d.f,c)){r=LV(a,b,c,s,s.c,(djb(),bjb),k);r!=k&&(i.c[i.c.length]=r,true);r.c&&(k=r);}}j=null;for(o=Wv(FU(g.b,xv(dB,gAb,12,0,0,1)),47),p=0,q=o.length;p<q;++p){n=o[p];if(!SW(n.c.f,c)){r=LV(a,b,c,n,n.d,(djb(),ajb),j);r!=j&&(i.c[i.c.length]=r,true);r.c&&(j=r);}}}}for(m=new Tob(i);m.a<m.c.c.length;){l=Wv(Rob(m),187);zU(b.b,l.a,0)!=-1||vU(b.b,l.a);l.c&&(d.c[d.c.length]=l,true);}}
    function WO(a){var b,c,d,e,f,g,h,i,j;d=a.e.e.j;b=Wv(oW(a.e,(eM(),aM)),86).kb((DN(),CN));PO(a);for(f=new Tob(AW(a.e));f.a<f.c.c.length;){e=Wv(Rob(f),161);h=Wv(oW(e,LL),15);!h&&(h=new llb(0));i=e.e.j;g=(c=Wv(e.e,7).d,new EP(c.d,c.b,c.a,c.c));j=new II(e.e.i);switch(Wv(e.e,7).g.e){case 4:j.a=-i.a-h.a;j.b=a.s-i.b-(b?g.a:0);a.s-=cP(a,(sN(),rN))+i.b+(b?g.d+g.a:0);break;case 2:j.a=d.a+h.a;j.b=a.a+(b?g.d:0);a.a+=cP(a,(sN(),ZM))+i.b+(b?g.d+g.a:0);break;case 1:j.a=a.f+(b?g.b:0);j.b=-e.e.j.b-h.a;a.f+=cP(a,(sN(),$M))+i.a+(b?g.b+g.c:0);break;case 3:j.a=a.r-i.a-(b?g.c:0);j.b=d.b+h.a;a.r-=cP(a,(sN(),pN))+i.a+(b?g.b+g.c:0);}e.e.i.a=j.a;e.e.i.b=j.b;}}
    function u$(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;k=new Wub;l=new Wub;q=new Wub;r=new Wub;j=Wv(rJ(b,(Rib(),Jib)),15).a;f=j*Wv(rJ(b,(Mjb(),qjb)),15).a;Ckb(Ixb(Xv(rJ(b,(eM(),rL)))));for(i=(m=(new Snb(c.a)).a.bb().mb(),new Ynb(m));i.a.G();){h=(g=Wv(i.a.H(),21),Wv(g.yb(),9));n=Wv(rJ(h,hib),32);if(n==(sN(),$M)){l.a.db(h,l);for(e=Uh(iX(h));Cm(e);){d=Wv(Dm(e),12);stb(k,d.c.f);}}else if(n==pN){r.a.db(h,r);for(e=Uh(iX(h));Cm(e);){d=Wv(Dm(e),12);stb(q,d.c.f);}}}if(k.a.Y()!=0){o=new cdb(2,f);p=bdb(o,b,k,l,-j-b.d.b);if(p>0){a.a=j+(p-1)*f;b.d.b+=a.a;b.e.b+=a.a;}}if(q.a.Y()!=0){o=new cdb(1,f);p=bdb(o,b,q,r,b.e.b+j-b.d.b);p>0&&(b.e.b+=j+(p-1)*f);}}
    function Xt(a,b){var c,d,e,f,g,h,i,j,k;if((bmb(),b.length)==0){return a.fc(Yxb,Xxb,-1,-1)}k=hmb(b);emb(k.substr(0,3),'at ')&&(k=imb(k,3,k.length-3));k=k.replace(/\[.*?\]/g,'');g=k.indexOf('(');if(g==-1){g=k.indexOf('@');if(g==-1){j=k;k='';}else {j=hmb(imb(k,g+1,k.length-(g+1)));k=hmb(k.substr(0,g));}}else {c=k.indexOf(')',g);j=k.substr(g+1,c-(g+1));k=hmb(k.substr(0,g));}g=mmb(k,lmb(46));g!=-1&&(k=imb(k,g+1,k.length-(g+1)));(k.length==0||emb(k,'Anonymous function'))&&(k=Xxb);h=nmb(j,lmb(58));e=omb(j,lmb(58),h-1);i=-1;d=-1;f=Yxb;if(h!=-1&&e!=-1){f=j.substr(0,e);i=St(j.substr(e+1,h-(e+1)));d=St(imb(j,h+1,j.length-(h+1)));}return a.fc(f,k,i,d)}
    function idb(a){var b,c,d,e,f,g,h,i,j,k;j=new GU;h=new GU;for(g=new Tob(a);g.a<g.c.c.length;){e=Wv(Rob(g),80);e.c=e.b.c.length;e.f=e.e.c.length;e.c==0&&(j.c[j.c.length]=e,true);e.f==0&&e.j.b==0&&(h.c[h.c.length]=e,true);}d=-1;while(j.c.length!=0){e=Wv(AU(j,0),80);for(c=new Tob(e.e);c.a<c.c.c.length;){b=Wv(Rob(c),118);k=b.b;k.i=Plb(k.i,e.i+1);d=Plb(d,k.i);--k.c;k.c==0&&(j.c[j.c.length]=k,true);}}if(d>-1){for(f=new Tob(h);f.a<f.c.c.length;){e=Wv(Rob(f),80);e.i=d;}while(h.c.length!=0){e=Wv(AU(h,0),80);for(c=new Tob(e.b);c.a<c.c.c.length;){b=Wv(Rob(c),118);i=b.a;if(i.j.b>0){continue}i.i=Slb(i.i,e.i-1);--i.f;i.f==0&&(h.c[h.c.length]=i,true);}}}}
    function PV(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p;if(!Ckb(Ixb(Xv(rJ(c,(eM(),$L)))))){return}for(h=new Tob(c.f);h.a<h.c.c.length;){g=Wv(Rob(h),7);l=Wv(FU(g.e,xv(dB,gAb,12,g.e.c.length,0,1)),47);for(j=0,k=l.length;j<k;++j){i=l[j];f=i.d.f==c;e=f&&Ckb(Ixb(Xv(rJ(i,$L))));if(e){n=i.c;m=Wv(Smb(a.b,n),9);if(!m){m=NW(n,(KM(),IM),n.g,-1,n.j,Wv(rJ(b,sL),59),b);sJ(m,(Rib(),uib),n);Umb(a.b,n,m);vU(b.b,m);}p=i.d;o=Wv(Smb(a.b,p),9);if(!o){o=NW(p,(KM(),IM),p.g,1,p.j,Wv(rJ(b,sL),59),b);sJ(o,(Rib(),uib),p);Umb(a.b,p,o);vU(b.b,o);}d=IV(i);dW(d,Wv(yU(m.f,0),7));eW(d,Wv(yU(o.f,0),7));Fd(a.a,i,new XV(d,b,(djb(),bjb)));Wv(rJ(b,(Rib(),jib)),18).ib((ohb(),hhb));}}}}
    function vfb(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o,p,q,r,s,t;n=sgb(a.g);p=sgb(c.g);o=vI(xI(a.i),a.a);q=vI(xI(c.i),c.a);g=vI(new II(o),CI(new GI(n),b));h=vI(new II(q),CI(new GI(p),d));j=ogb(a,e);e==(sN(),pN)||e==ZM?(j+=f):(j-=f);m=new FI;r=new FI;switch(e.e){case 1:case 3:m.a=g.a;m.b=o.b+j;r.a=h.a;r.b=m.b;break;case 2:case 4:m.a=o.a+j;m.b=g.b;r.a=m.a;r.b=h.b;break;default:return null;}k=CI(vI(new HI(m.a,m.b),r),0.5);l=new ufb(Bv(tv(qz,1),Fzb,10,0,[o,g,m,k,r,h,q]));i=ifb(l);t=jfb(l);switch(e.e){case 1:case 3:l.a=i;s=lfb(l);break;case 2:case 4:l.a=t;s=kfb(l);break;default:return null;}bfb(l,new Ffb(Bv(tv(qz,1),Fzb,10,0,[i,t,s,o,q])));return l}
    function qU(a,b,c,d){var e,f,g,h,i,j,k,l,m,n;f=new eV(b);l=lU(a,b,f);n=Nlb(Wv(rJ(b,(eM(),dM)),15).a,1);for(k=new Tob(l.a);k.a<k.c.c.length;){j=Wv(Rob(k),27);i=pU(Wv(j.a,10),Wv(j.b,10),n);o=true;o=o&YU(c,new HI(i.d,i.e));o=o&YU(c,uI(new HI(i.d,i.e),i.c,0));o=o&YU(c,uI(new HI(i.d,i.e),0,i.b));o&YU(c,uI(new HI(i.d,i.e),i.c,i.b));}m=f.d;h=pU(Wv(l.b.a,10),Wv(l.b.b,10),n);if(m==(sN(),rN)||m==ZM){d.c[m.e]=Qlb(d.c[m.e],h.e);d.b[m.e]=Nlb(d.b[m.e],h.e+h.b);}else {d.c[m.e]=Qlb(d.c[m.e],h.d);d.b[m.e]=Nlb(d.b[m.e],h.d+h.c);}e=Vzb;g=f.c.f.e;switch(m.e){case 4:e=g.c;break;case 2:e=g.b;break;case 1:e=g.a;break;case 3:e=g.d;}d.a[m.e]=Nlb(d.a[m.e],e);return f}
    function OV(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q;f=new GU;for(j=new Tob(d);j.a<j.c.c.length;){h=Wv(Rob(j),187);g=null;if(h.f==(djb(),bjb)){for(o=new Tob(h.e);o.a<o.c.c.length;){n=Wv(Rob(o),12);q=n.d.f;if(hX(q)==b){GV(a,b,h,n,h.b,n.d);}else if(!c||SW(q,c)){HV(a,b,h,d,n);}else {m=LV(a,b,c,n,h.b,bjb,g);m!=g&&(f.c[f.c.length]=m,true);m.c&&(g=m);}}}else {for(l=new Tob(h.e);l.a<l.c.c.length;){k=Wv(Rob(l),12);p=k.c.f;if(hX(p)==b){GV(a,b,h,k,k.c,h.b);}else if(!c||SW(p,c)){continue}else {m=LV(a,b,c,k,h.b,ajb,g);m!=g&&(f.c[f.c.length]=m,true);m.c&&(g=m);}}}}for(i=new Tob(f);i.a<i.c.c.length;){h=Wv(Rob(i),187);zU(b.b,h.a,0)!=-1||vU(b.b,h.a);h.c&&(e.c[e.c.length]=h,true);}}
    function TO(a){var b,c,d,e;b=a.e.j;for(d=new Tob(AW(a));d.a<d.c.c.length;){c=Wv(Rob(d),161);e=Wv(oW(c,(eM(),LL)),15);!e&&(e=new llb(0));switch(Wv(c.e,7).g.e){case 4:c.e.i.b=b.b*Ixb(Yv(oW(c,HO)));c.e.i.a=-c.e.j.a-e.a;break;case 2:c.e.i.b=b.b*Ixb(Yv(oW(c,HO)));c.e.i.a=b.a+e.a;break;case 1:c.e.i.a=b.a*Ixb(Yv(oW(c,HO)));c.e.i.b=-c.e.j.b-e.a;break;case 3:c.e.i.a=b.a*Ixb(Yv(oW(c,HO)));c.e.i.b=b.b+e.a;}switch(Wv(c.e,7).g.e){case 4:c.e.i.b=b.b*Ixb(Yv(oW(c,HO)));c.e.i.a=-c.e.j.a-e.a;break;case 2:c.e.i.b=b.b*Ixb(Yv(oW(c,HO)));c.e.i.a=b.a+e.a;break;case 1:c.e.i.a=b.a*Ixb(Yv(oW(c,HO)));c.e.i.b=-c.e.j.b-e.a;break;case 3:c.e.i.a=b.a*Ixb(Yv(oW(c,HO)));c.e.i.b=b.b+e.a;}}}
    function C2(a){var b,c,d,e,f,g,h,i,j;f=a.f;e=pr(Zdb(a));j=WI(Eo(a.g),0);while(j.b!=j.d.c){i=Wv(_ub(j),7);if(i.e.c.length==0){for(c=new Tob(i.b);c.a<c.c.c.length;){b=Wv(Rob(c),12);d=b.c;if(e.a.R(d)){g=new Fnb(f.f,0);h=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),7));while(h!=i){h=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),7));}Anb(g,d);$ub(j,d);J2(d,i.g);avb(j);avb(j);e.a.eb(d)!=null;}}}else {for(c=new Tob(i.e);c.a<c.c.c.length;){b=Wv(Rob(c),12);d=b.d;if(e.a.R(d)){g=new Fnb(f.f,0);h=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),7));while(h!=i){h=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),7));}Bxb(g.b>0);g.a.sb(g.c=--g.b);Anb(g,d);$ub(j,d);J2(d,i.g);avb(j);avb(j);e.a.eb(d)!=null;}}}}}
    function IP(b){var c,d,e,f,g,h,i,j,k;g=new Uu(b);f=Pu(g,'graph');j=Pu(g,'success');e=Pu(g,'error');h=Pu(g,'options');try{if(!f||!f.kc()){throw new $J("Mandatory parameter missing, 'graph' must be specified")}AQ(new CQ,f.kc(),h?h.kc():null);i=f.kc().a;!!j&&!!j.kc()?HP(j.kc().a,i):HP(null,i);}catch(a){a=OH(a);if(aw(a,73)){k=a;!!e&&!!e.kc()?HP(e.kc().a,DQ(k).a):HP(null,DQ(k).a);}else if(aw(a,54)){c=a;d=new Tu;Ru(d,'type',new lv(Ikb(c.$c)));c.bc()!=null?Ru(d,Dzb,new lv(c.bc())):Ru(d,Dzb,new lv('null (sic)'));Ru(d,Ezb,new lv(Hb(new Kb('\n'),new wnb(new opb((c.g==null&&(c.g=Pt(c)),c.g))))));!!e&&!!e.kc()?HP(e.kc().a,d.a):HP(null,d.a);at(c,(Fmb(),Dmb));}else throw NH(a)}}
    function e9(a,b,c){var d,e,f,g,h,i,j,k,l,m;if(c){d=-1;k=new Fnb(b,0);while(k.b<k.d.Y()){h=(Bxb(k.b<k.d.Y()),Wv(k.d.sb(k.c=k.b++),9));l=a.a[h.d.k][h.k].a;if(l==null){g=d+1;f=new Fnb(b,k.b);while(f.b<f.d.Y()){m=i9(a,(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),9))).a;if(m!=null){g=(Dxb(m),m);break}}l=(d+g)/2;a.a[h.d.k][h.k].a=l;a.a[h.d.k][h.k].d=(Dxb(l),l);a.a[h.d.k][h.k].b=1;}d=(Dxb(l),l);}}else {e=0;for(j=new Tob(b);j.a<j.c.c.length;){h=Wv(Rob(j),9);a.a[h.d.k][h.k].a!=null&&(e=Nlb(e,Ixb(a.a[h.d.k][h.k].a)));}e+=2;for(i=new Tob(b);i.a<i.c.c.length;){h=Wv(Rob(i),9);if(a.a[h.d.k][h.k].a==null){l=wvb(a.e,24)*FAb*e-1;a.a[h.d.k][h.k].a=l;a.a[h.d.k][h.k].d=l;a.a[h.d.k][h.k].b=1;}}}}
    function RO(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;i=0;j=0;o=0;n=0;g=0;m=0;l=0;k=0;for(f=new Lsb((new Fsb(a.c)).a);htb(f.a);){e=(f.b=itb(f.a),new Psb(f.c,f.b));d=Wv(e.b.b[e.a.e],62);switch(Wv(e.a,67).e){case 12:case 13:case 14:m+=d.c+b;break;case 15:case 16:case 17:l+=d.c+b;g=Nlb(g,d.b+b);break;case 18:case 19:case 20:k+=d.c+b;break;case 0:case 1:case 2:o+=d.c+b;break;case 3:case 4:case 5:n+=d.c+b;break;case 6:case 7:case 8:i+=d.b+b;break;case 9:case 10:case 11:j+=d.b+b;}}i-=b;j-=b;o-=b;n-=b;m+=m!=0?b:0;l+=l!=0?b:0;k+=k!=0?b:0;h=a.p.d+g+a.p.a;h+=h!=0?b:0;c.a=Nlb(c.a,o);c.a=Nlb(c.a,m);c.a=Nlb(c.a,l);c.a=Nlb(c.a,k);c.a=Nlb(c.a,n);c.b=Nlb(c.b,i);c.b=Nlb(c.b,h);c.b=Nlb(c.b,j);}
    function T9(a){var b,c,d,e,f,g,h,i;b=null;for(d=new Tob(a);d.a<d.c.c.length;){c=Wv(Rob(d),102);Ixb(W9(c.g,c.d[0]).a);c.b=null;if(!!c.e&&c.e.Y()>0&&c.c==0){!b&&(b=new GU);b.c[b.c.length]=c;}}if(b){while(b.c.length!=0){c=Wv(AU(b,0),102);if(!!c.b&&c.b.c.length>0){for(f=(!c.b&&(c.b=new GU),new Tob(c.b));f.a<f.c.c.length;){e=Wv(Rob(f),102);if(Ixb(W9(e.g,e.d[0]).a)==Ixb(W9(c.g,c.d[0]).a)){if(zU(a,e,0)>zU(a,c,0)){return new RJ(e,c)}}else if(Ixb(W9(e.g,e.d[0]).a)>Ixb(W9(c.g,c.d[0]).a)){return new RJ(e,c)}}}for(h=(!c.e&&(c.e=new GU),c.e).mb();h.G();){g=Wv(h.H(),102);i=(!g.b&&(g.b=new GU),g.b);Fxb(0,i.c.length);fxb(i.c,0,c);g.c==i.c.length&&(b.c[b.c.length]=g,true);}}}return null}
    function R0(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p;l=(mp(),new ntb);for(k=(Il(),new Im(Dl(ul(a.a,new yl))));Cm(k);){j=Wv(Dm(k),9);e=Q0(j,(sN(),ZM));for(d=new Tob(e);d.a<d.c.c.length;){c=Wv(Rob(d),7);for(g=new Tob(c.e);g.a<g.c.c.length;){f=Wv(Rob(g),12);kP();p=f.d.f;(p.g==(CX(),zX)||p.g==yX)&&(p=Wv(rJ(p,(Rib(),rib)),7).f);if(Ktb(l.d,p)){b=Wv(re(Ktb(l.d,p)),171);}else {e.c.length==2?gw(c)===gw((Cxb(0,e.c.length),e.c[0]))?(b=gP):(b=hP):(b=gP);Ltb(l.d,p,b);}for(i=new Tob(f.b);i.a<i.c.c.length;){h=Wv(Rob(i),33);sJ(h,(Rib(),pib),b);}for(o=new Tob(f.c.c);o.a<o.c.c.length;){m=Wv(Rob(o),33);sJ(m,(Rib(),pib),b);}for(n=new Tob(f.d.c);n.a<n.c.c.length;){m=Wv(Rob(n),33);sJ(m,(Rib(),pib),b);}}}}}
    function lZ(a,b){var c,d,e,f,g,h,i,j,k;if(tl(mX(b))!=1||Wv(ql(mX(b)),12).d.f.g!=(CX(),zX)){return null}f=Wv(ql(mX(b)),12);c=f.d.f;sX(c,(CX(),wX));sJ(c,(Rib(),qib),null);sJ(c,rib,null);sJ(c,(eM(),TL),Wv(rJ(b,TL),28));sJ(c,JL,Wv(rJ(b,JL),86));e=rJ(f.c,uib);g=null;for(j=nX(c,(sN(),ZM)).mb();j.G();){h=Wv(j.H(),7);if(h.e.c.length!=0){sJ(h,uib,e);k=f.c;h.j.a=k.j.a;h.j.b=k.j.b;h.a.a=k.a.a;h.a.b=k.a.b;xU(h.c,k.c);k.c.c=xv(UF,syb,1,0,4,1);g=h;break}}sJ(f.c,uib,null);if(!sl(nX(b,ZM))){for(i=new Tob(Ao(nX(b,ZM)));i.a<i.c.c.length;){h=Wv(Rob(i),7);if(h.e.c.length==0){d=new RX;QX(d,ZM);d.j.a=h.j.a;d.j.b=h.j.b;PX(d,c);sJ(d,uib,rJ(h,uib));PX(h,null);}else {PX(g,c);}}}c.j.b=b.j.b;vU(a.b,c);return c}
    function _O(a){var b,c,d,e,f,g,h,i,j;f=a.e.e.j;g=new II(f);i=Wv(oW(a.e,(eM(),aM)),86);j=Wv(oW(a.e,bM),86);h=Wv(oW(a.e,TL),28);b=Zsb(i,(DN(),CN));if(i.c==0){return}f.a=0;f.b=0;d=null;switch(h.e){case 1:case 2:case 3:d=MO(a,a.k);break;case 4:d=new II(g);break;case 5:d=KO(a.e,b);}if(Zsb(i,BN)){if(d){f.a=Nlb(f.a,d.a);f.b=Nlb(f.b,d.b);}if(b){f.a=Nlb(f.a,a.q.b+a.q.c+a.k);f.b=Nlb(f.b,a.q.d+a.q.a+a.k);}}Zsb(i,AN)&&Qob(new Tob(zW(a.e)))&&RO(a,a.d,f);if(Zsb(i,zN)){e=Wv(oW(a.e,IL),15).a;c=Wv(oW(a.e,HL),15).a;if(Zsb(j,(MN(),KN))){e<=0&&(e=20);c<=0&&(c=20);}if(Zsb(j,LN)){e>0&&(f.a=Nlb(f.a,e+a.q.b+a.q.c));c>0&&(f.b=Nlb(f.b,c+a.q.d+a.q.a));}else {e>0&&(f.a=Nlb(f.a,e));c>0&&(f.b=Nlb(f.b,c));}}pW(a.e,f);}
    function ewb(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;if(!a.b){return false}g=null;m=null;i=new ywb(null,null);e=1;i.a[1]=a.b;l=i;while(l.a[e]){j=e;h=m;m=l;l=l.a[e];d=a.a.$b(b,l.d);e=d<0?0:1;d==0&&(!c.c||ovb(l.e,c.d))&&(g=l);if(!(!!l&&l.b)&&!awb(l.a[e])){if(awb(l.a[1-e])){m=m.a[j]=hwb(l,e);}else if(!awb(l.a[1-e])){n=m.a[1-j];if(n){if(!awb(n.a[1-j])&&!awb(n.a[j])){m.b=false;n.b=true;l.b=true;}else {f=h.a[1]==m?1:0;awb(n.a[j])?(h.a[f]=gwb(m,j)):awb(n.a[1-j])&&(h.a[f]=hwb(m,j));l.b=h.a[f].b=true;h.a[f].a[0].b=false;h.a[f].a[1].b=false;}}}}}if(g){c.b=true;c.d=g.e;if(l!=g){k=new ywb(l.d,l.e);fwb(a,i,g,k);m==g&&(m=k);}m.a[m.a[1]==l?1:0]=l.a[!l.a[0]?1:0];--a.c;}a.b=i.a[1];!!a.b&&(a.b.b=false);return c.b}
    function v$(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;d=Wv(rJ(a,(eM(),TL)),28);i=a.e;h=a.a;c=Wv(rJ(a,(Rib(),Xhb)),15).a;j=i.a+h.b+h.c+2*c;k=0-h.d-c-a.d.b;n=i.b+h.d+h.a+2*c-a.d.b;l=new GU;o=new GU;for(f=(m=(new Snb(b.a)).a.bb().mb(),new Ynb(m));f.a.G();){e=(g=Wv(f.a.H(),21),Wv(g.yb(),9));switch(d.e){case 1:case 2:case 3:m$(e);break;case 4:p=Wv(rJ(e,SL),10);q=!p?0:p.a;e.i.a=j*Ixb(Yv(rJ(e,Cib)))-q;fX(e,true,false);break;case 5:r=Wv(rJ(e,SL),10);s=!r?0:r.a;e.i.a=Ixb(Yv(rJ(e,Cib)))-s;fX(e,true,false);i.a=Nlb(i.a,e.i.a+e.j.a/2);}switch(Wv(rJ(e,hib),32).e){case 1:e.i.b=k;l.c[l.c.length]=e;break;case 3:e.i.b=n;o.c[o.c.length]=e;}}switch(d.e){case 1:case 2:o$(l,a);o$(o,a);break;case 3:t$(l,a);t$(o,a);}}
    function OY(a){var b,c,d,e,f,g;d=Wv(rJ(a.a.g,(eM(),JL)),86);if(jf(d,(oM(),b=Wv(Hkb(Gz),11),new atb(b,Wv(exb(b,b.length),11),0))));else if(Xe(d,Usb(gM))){c=Wv(Wv(Dd(a.a.b,a.b),20).sb(0),33);a.b.i.a=c.i.a;a.b.i.b=c.i.b;}else if(Xe(d,Usb(iM))){e=Wv(yU(a.a.c,a.a.c.c.length-1),9);f=Wv(Wv(Dd(a.a.b,a.b),20).sb(Wv(Dd(a.a.b,a.b),20).Y()-1),33);g=e.j.a-(f.i.a+f.j.a);a.b.i.a=a.a.g.j.a-g-a.b.j.a;a.b.i.b=f.i.b;}else if(Xe(d,Vsb(mM,Bv(tv(Gz,1),uyb,41,0,[fM])))){c=Wv(Wv(Dd(a.a.b,a.b),20).sb(0),33);a.b.i.a=(a.a.g.j.a-a.b.j.a)/2;a.b.i.b=c.i.b;}else if(Xe(d,Usb(mM))){c=Wv(Wv(Dd(a.a.b,a.b),20).sb(0),33);a.b.i.b=c.i.b;}else if(Xe(d,Usb(fM))){c=Wv(Wv(Dd(a.a.b,a.b),20).sb(0),33);a.b.i.a=(a.a.g.j.a-a.b.j.a)/2;a.b.i.b=c.i.b;}return null}
    function NZ(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q;for(o=new Tob(a);o.a<o.c.c.length;){n=Wv(Rob(o),9);MZ(n.i);MZ(n.j);PZ(n);RZ(n);for(q=new Tob(n.f);q.a<q.c.c.length;){p=Wv(Rob(q),7);MZ(p.i);MZ(p.a);MZ(p.j);QX(p,QZ(p.g));f=Wv(rJ(p,(eM(),UL)),24);!!f&&sJ(p,UL,Elb(-f.a));for(e=new Tob(p.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);for(c=WI(d.a,0);c.b!=c.d.c;){b=Wv(_ub(c),10);MZ(b);}i=Wv(rJ(d,CL),44);if(i){for(h=WI(i,0);h.b!=h.d.c;){g=Wv(_ub(h),10);MZ(g);}}for(l=new Tob(d.b);l.a<l.c.c.length;){j=Wv(Rob(l),33);MZ(j.i);MZ(j.j);}}for(m=new Tob(p.c);m.a<m.c.c.length;){j=Wv(Rob(m),33);MZ(j.i);MZ(j.j);}}if(n.g==(CX(),xX)){sJ(n,(Rib(),hib),QZ(Wv(rJ(n,hib),32)));OZ(n);}for(k=new Tob(n.c);k.a<k.c.c.length;){j=Wv(Rob(k),33);MZ(j.j);MZ(j.i);}}}
    function YP(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;TP(c);if(SW(b.d.f,b.c.f)){k=b.c;l=MI(Bv(tv(qz,1),Fzb,10,0,[k.i,k.a]));j=k.f.b;uI(l,-j.b,-j.d);l.a-=d.a;l.b-=d.b;}else {l=MX(b.c);}l.a+=d.a;l.b+=d.b;m=new Tu;VP(a,m,'x',l.a);VP(a,m,'y',l.b);Ru(c,'sourcePoint',m);n=MX(b.d);rJ(b,(Rib(),Pib))!=null&&vI(n,Wv(rJ(b,Pib),10));vI(n,d);o=new Tu;VP(a,o,'x',n.a);VP(a,o,'y',n.b);Ru(c,'targetPoint',o);e=new ju;s=hJ(b.a,d);f=0;for(r=WI(s,0);r.b!=r.d.c;){p=Wv(_ub(r),10);i=new Tu;VP(a,i,'x',p.a);VP(a,i,'y',p.b);hu(e,f++,i);}s.b==0?Ru(c,Hzb,null):Ru(c,Hzb,e);g=Wv(rJ(b,(eM(),CL)),44);f=0;if(g){hJ(g,d);h=new ju;for(q=WI(g,0);q.b!=q.d.c;){p=Wv(_ub(q),10);i=new Tu;VP(a,i,'x',p.a);VP(a,i,'y',p.b);hu(h,f++,i);}Ru(c,Izb,h);}else {Ru(c,Izb,null);}}
    function pZ(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r;p=a.i;q=a.j;m=a.e;if(b){l=d/2*(b.Y()-1);n=0;for(j=b.mb();j.G();){h=Wv(j.H(),9);l+=h.j.a;n=Nlb(n,h.j.b);}r=p.a-(l-q.a)/2;g=p.b-m.d+n;e=q.a/(b.Y()+1);f=e;for(i=b.mb();i.G();){h=Wv(i.H(),9);h.i.a=r;h.i.b=g-h.j.b;r+=h.j.a+d/2;k=oZ(h);k.i.a=h.j.a/2-k.a.a;k.i.b=h.j.b;o=Wv(rJ(h,(Rib(),Zhb)),7);if(o.b.c.length+o.e.c.length==1){o.i.a=f-o.a.a;o.i.b=0;PX(o,a);}f+=e;}}if(c){l=d/2*(c.Y()-1);n=0;for(j=c.mb();j.G();){h=Wv(j.H(),9);l+=h.j.a;n=Nlb(n,h.j.b);}r=p.a-(l-q.a)/2;g=p.b+q.b+m.a-n;e=q.a/(c.Y()+1);f=e;for(i=c.mb();i.G();){h=Wv(i.H(),9);h.i.a=r;h.i.b=g;r+=h.j.a+d/2;k=oZ(h);k.i.a=h.j.a/2-k.a.a;k.i.b=0;o=Wv(rJ(h,(Rib(),Zhb)),7);if(o.b.c.length+o.e.c.length==1){o.i.a=f-o.a.a;o.i.b=q.b;PX(o,a);}f+=e;}}}
    function Jab(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;w=0;n=0;for(l=new Tob(b.f);l.a<l.c.c.length;){k=Wv(Rob(l),9);m=0;h=0;i=c?Wv(rJ(k,Fab),24).a:eyb;r=d?Wv(rJ(k,Gab),24).a:eyb;j=i>r?i:r;for(t=new Tob(k.f);t.a<t.c.c.length;){s=Wv(Rob(t),7);u=k.i.b+s.i.b+s.a.b;if(d){for(g=new Tob(s.e);g.a<g.c.c.length;){f=Wv(Rob(g),12);p=f.d;o=p.f;if(b!=a.a[o.k]){q=Plb(Wv(rJ(o,Fab),24).a,Wv(rJ(o,Gab),24).a);v=Wv(rJ(f,(Rib(),Eib)),24).a;if(v>=j&&v>=q){m+=o.i.b+p.i.b+p.a.b-u;++h;}}}}if(c){for(g=new Tob(s.b);g.a<g.c.c.length;){f=Wv(Rob(g),12);p=f.c;o=p.f;if(b!=a.a[o.k]){q=Plb(Wv(rJ(o,Fab),24).a,Wv(rJ(o,Gab),24).a);v=Wv(rJ(f,(Rib(),Eib)),24).a;if(v>=j&&v>=q){m+=o.i.b+p.i.b+p.a.b-u;++h;}}}}}if(h>0){w+=m/h;++n;}}if(n>0){b.a=e*w/n;b.i=n;}else {b.a=0;b.i=0;}}
    function Kab(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;n=b.c.length;m=0;for(l=new Tob(a.c);l.a<l.c.c.length;){k=Wv(Rob(l),16);r=k.a;if(r.c.length==0){continue}q=new Tob(r);j=0;s=null;e=Wv(Rob(q),9);while(e){f=Wv(yU(b,e.k),111);if(f.c>=0){i=null;h=new Fnb(k.a,j+1);while(h.b<h.d.Y()){g=(Bxb(h.b<h.d.Y()),Wv(h.d.sb(h.c=h.b++),9));i=Wv(yU(b,g.k),111);if(i.d==f.d&&i.c<f.c){break}else {i=null;}}if(i){if(s){DU(d,e.k,Elb(Wv(yU(d,e.k),24).a-1));Wv(yU(c,s.k),20).nb(f);}f=Vab(f,e,n++);b.c[b.c.length]=f;vU(c,new GU);if(s){Wv(yU(c,s.k),20).ib(f);vU(d,Elb(1));}else {vU(d,Elb(0));}}}o=null;if(q.a<q.c.c.length){o=Wv(Rob(q),9);p=Wv(yU(b,o.k),111);Wv(yU(c,e.k),20).ib(p);DU(d,o.k,Elb(Wv(yU(d,o.k),24).a+1));}f.d=m;f.c=j++;s=e;e=o;}++m;}Ckb(Ixb(Xv(rJ(a,(eM(),rL)))))&&undefined;}
    function gS(a,b){var c;if(a.e){throw new ulb((Gkb(nA),'The '+nA.j+Yzb))}if(!MR(a.a,b)){throw new gt('The direction '+b+' is not supported by the CGraph instance.')}if(b==a.d){return a}c=a.d;a.d=b;switch(c.e){case 0:switch(b.e){case 2:dS(a);break;case 1:kS(a);dS(a);break;case 4:qS(a);dS(a);break;case 3:qS(a);kS(a);dS(a);}break;case 2:switch(b.e){case 1:kS(a);lS(a);break;case 4:qS(a);dS(a);break;case 3:qS(a);kS(a);dS(a);}break;case 1:switch(b.e){case 2:kS(a);lS(a);break;case 4:kS(a);qS(a);dS(a);break;case 3:kS(a);qS(a);kS(a);dS(a);}break;case 4:switch(b.e){case 2:qS(a);dS(a);break;case 1:qS(a);kS(a);dS(a);break;case 3:kS(a);lS(a);}break;case 3:switch(b.e){case 2:kS(a);qS(a);dS(a);break;case 1:kS(a);qS(a);kS(a);dS(a);break;case 4:kS(a);lS(a);}}return a}
    function c9(a,b,c){var d,e,f,g,h,i,j,k,l;if(a.a[b.d.k][b.k].e){return}else {a.a[b.d.k][b.k].e=true;}a.a[b.d.k][b.k].b=0;a.a[b.d.k][b.k].d=0;a.a[b.d.k][b.k].a=null;for(k=new Tob(b.f);k.a<k.c.c.length;){j=Wv(Rob(k),7);l=c?new fY(j):new lY(j);for(i=l.mb();i.G();){h=Wv(i.H(),7);g=h.f;if(g.d==b.d){if(g!=b){c9(a,g,c);a.a[b.d.k][b.k].b+=a.a[g.d.k][g.k].b;a.a[b.d.k][b.k].d+=a.a[g.d.k][g.k].d;}}else {a.a[b.d.k][b.k].d+=a.d[h.k];++a.a[b.d.k][b.k].b;}}}f=Wv(rJ(b,(Rib(),Shb)),20);if(f){for(e=f.mb();e.G();){d=Wv(e.H(),9);if(b.d==d.d){c9(a,d,c);a.a[b.d.k][b.k].b+=a.a[d.d.k][d.k].b;a.a[b.d.k][b.k].d+=a.a[d.d.k][d.k].d;}}}if(a.a[b.d.k][b.k].b>0){a.a[b.d.k][b.k].d+=wvb(a.e,24)*FAb*0.07000000029802322-0.03500000014901161;a.a[b.d.k][b.k].a=a.a[b.d.k][b.k].d/a.a[b.d.k][b.k].b;}}
    function Sbb(a,b){var c,d,e,f,g,h,i,j,k,l,m;for(e=new Tob(a.a.c);e.a<e.c.c.length;){c=Wv(Rob(e),16);for(i=new Tob(c.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);b.i[h.k]=h;b.g[h.k]=b.k==(Lbb(),Kbb)?Vzb:Uzb;}}g=a.a.c;b.c==(Gbb(),Ebb)&&(g=aw(g,87)?Ii(Wv(g,87)):aw(g,88)?Wv(g,88).a:aw(g,63)?new ap(g):new Ro(g));Acb(a.e,b,a.b);bpb(b.n);for(f=g.mb();f.G();){c=Wv(f.H(),16);j=c.a;b.k==(Lbb(),Kbb)&&(j=aw(j,87)?Ii(Wv(j,87)):aw(j,88)?Wv(j,88).a:aw(j,63)?new ap(j):new Ro(j));for(m=j.mb();m.G();){l=Wv(m.H(),9);b.f[l.k]==l&&Tbb(a,l,b);}}Ubb(a,b);for(d=g.mb();d.G();){c=Wv(d.H(),16);for(m=new Tob(c.a);m.a<m.c.c.length;){l=Wv(Rob(m),9);b.n[l.k]=b.n[b.f[l.k].k];if(l==b.f[l.k]){k=Ixb(b.g[b.i[l.k].k]);(b.k==(Lbb(),Kbb)&&k>Vzb||b.k==Jbb&&k<Uzb)&&(b.n[l.k]=Ixb(b.n[l.k])+k);}}}a.e.Jc();}
    function NQ(a,b){var c,d,e,f,g,h,i,j,k,l,m;pJ(b,Bv(tv(rz,1),syb,79,0,[(Rib(),Jib),Xhb,(Mjb(),Kjb),Rhb]));j=Wv(rJ(b,Jib),15).a;Wv(rJ(b,qjb),15).a*j<2&&sJ(b,qjb,new llb(2/j));k=Wv(rJ(b,(eM(),sL)),59);k==(sK(),qK)&&sJ(b,sL,PW(b));l=Wv(rJ(b,Hjb),24);l.a==0?sJ(b,Gib,new yvb):sJ(b,Gib,new zvb(l.a));m=new $jb(b);sJ(b,Kib,m);e=KQ(a,Wv(rJ(b,ljb),180));h=KQ(a,Wv(rJ(b,zjb),180));d=KQ(a,Wv(rJ(b,kjb),180));i=KQ(a,Wv(rJ(b,Ajb),180));f=KQ(a,Ocb(Wv(rJ(b,eib),122)));g=new WQ;sJ(b,_hb,g);QQ(QQ(QQ(QQ(QQ(QQ(g,e.qc(b)),h.qc(b)),d.qc(b)),i.qc(b)),f.qc(b)),MQ(b));c=(Mh(30,Vyb),new HU(30));sJ(b,Fib,c);xU(c,LQ(a,g,0));c.c[c.c.length]=e;xU(c,LQ(a,g,1));c.c[c.c.length]=h;xU(c,LQ(a,g,2));c.c[c.c.length]=d;xU(c,LQ(a,g,3));c.c[c.c.length]=i;xU(c,LQ(a,g,4));c.c[c.c.length]=f;xU(c,LQ(a,g,5));}
    function YO(a,b){var c,d,e,f,g,h;f=Li(DW(a));if(f.Nb().V()){return}e=Wv(rJ(Wv(Wv(Wv(f.Nb().sb(0),129),224).e,33),(kP(),iP)),171);e=e==jP?hP:e;h=0;switch(Wv(a.e,7).g.e){case 4:case 2:e==hP&&(h=a.e.j.b);break;case 3:h=a.e.j.b;}(Wv(a.e,7).g==(sN(),$M)||e==gP)&&(f=Ii(f));for(d=Xl(f.Nb().mb());d.G();){c=Wv(d.H(),129);g=new II(c.e.i);if(e==gP){switch(Wv(a.e,7).g.e){case 1:case 4:g.a=-c.e.j.a-b;g.b=h-b-c.e.j.b;h-=b+c.e.j.b;break;case 2:g.a=a.e.j.a+b;g.b=h-b-c.e.j.b;h-=b+c.e.j.b;break;case 3:g.a=-c.e.j.a-b;g.b=h+b;h+=b+c.e.j.b;}}else {switch(Wv(a.e,7).g.e){case 4:g.a=-c.e.j.a-b;g.b=h+b;h+=b+c.e.j.b;break;case 2:g.a=a.e.j.a+b;g.b=h+b;h+=b+c.e.j.b;break;case 1:g.a=a.e.j.a+b;g.b=h-b-c.e.j.b;h-=b+c.e.j.b;break;case 3:g.a=a.e.j.a+b;g.b=h+b;h+=b+c.e.j.b;}}c.e.i.a=g.a;c.e.i.b=g.b;}}
    function fab(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;d=0;e=0;for(k=0;k<a.length;k++){i=a[k];if(LM(Wv(rJ(i,(eM(),TL)),28))){for(g=nX(i,(sN(),ZM)).mb();g.G();){f=Wv(g.H(),7);if(f.b.c.length+f.e.c.length>0){d+=f.b.c.length+f.e.c.length;Umb(b,f,Elb(d));}}}else {for(h=nX(i,(sN(),ZM)).mb();h.G();){f=Wv(h.H(),7);d+=f.b.c.length+f.e.c.length;}for(g=nX(i,ZM).mb();g.G();){f=Wv(g.H(),7);f.b.c.length+f.e.c.length>0&&Umb(b,f,Elb(d));}}}for(j=a.length-1;j>=0;j--){i=a[j];if(LM(Wv(rJ(i,(eM(),TL)),28))){for(m=nX(i,(sN(),rN)).mb();m.G();){l=Wv(m.H(),7);if(l.b.c.length+l.e.c.length>0){e+=l.b.c.length+l.e.c.length;Umb(c,l,Elb(e));}}}else {for(n=nX(i,(sN(),rN)).mb();n.G();){l=Wv(n.H(),7);e+=l.b.c.length+l.e.c.length;}for(m=nX(i,rN).mb();m.G();){l=Wv(m.H(),7);l.b.c.length+l.e.c.length>0&&Umb(c,l,Elb(e));}}}}
    function wfb(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q,r;m=sgb(a.g);o=sgb(b.g);n=vI(xI(a.i),a.a);p=vI(xI(b.i),b.a);i=vI(new HI(n.a,n.b),CI(new GI(m),1.3*c));q=vI(new HI(p.a,p.b),CI(new GI(o),1.3*d));h=Jlb(i.a-q.a);h<e&&(a.g==(sN(),rN)||a.g==ZM?i.a<q.a?(i.a=q.a-e):(i.a=q.a+e):i.a<q.a?(q.a=i.a+e):(q.a=i.a-e));f=0;g=0;switch(a.g.e){case 4:f=2*(n.a-c)-0.5*(i.a+q.a);break;case 2:f=2*(n.a+c)-0.5*(i.a+q.a);break;case 1:g=2*(n.b-c)-0.5*(i.b+q.b);break;case 3:g=2*(n.b+c)-0.5*(i.b+q.b);}switch(b.g.e){case 4:f=2*(p.a-d)-0.5*(q.a+i.a);break;case 2:f=2*(p.a+d)-0.5*(q.a+i.a);break;case 1:g=2*(p.b-d)-0.5*(q.b+i.b);break;case 3:g=2*(p.b+d)-0.5*(q.b+i.b);}l=new HI(f,g);k=new ufb(Bv(tv(qz,1),Fzb,10,0,[n,i,l,q,p]));j=ifb(k);r=jfb(k);k.a=j;bfb(k,new Ffb(Bv(tv(qz,1),Fzb,10,0,[j,r,n,p])));return k}
    function p$(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q;i=c.a;e=Wv(rJ(c,(Rib(),Xhb)),15).a;o=c.d;h=(d=Wv(rJ(c,Xhb),15).a,new HI(c.e.a+c.a.b+c.a.c+2*d,c.e.b+c.a.d+c.a.a+2*d));j=h.b;for(m=new Tob(a.a);m.a<m.c.c.length;){k=Wv(Rob(m),9);if(k.g!=(CX(),xX)){continue}f=Wv(rJ(k,hib),32);g=Wv(rJ(k,iib),10);n=k.i;switch(f.e){case 2:n.a=c.e.a+e+i.c-o.a;break;case 4:n.a=-o.a-e-i.b;}q=0;switch(f.e){case 2:case 4:if(b==(KM(),GM)){p=Ixb(Yv(rJ(k,Cib)));n.b=h.b*p-Wv(rJ(k,(eM(),SL)),10).b;q=n.b+g.b;fX(k,false,true);}else if(b==FM){n.b=Ixb(Yv(rJ(k,Cib)))-Wv(rJ(k,(eM(),SL)),10).b;q=n.b+g.b;fX(k,false,true);}}j=j>q?j:q;}c.e.b+=j-h.b;for(l=new Tob(a.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);if(k.g!=(CX(),xX)){continue}f=Wv(rJ(k,hib),32);n=k.i;switch(f.e){case 1:n.b=-o.b-e-i.d;break;case 3:n.b=c.e.b+e+i.a-o.b;}}}
    function $Y(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o;e=new GU;for(i=new Tob(a.d.f);i.a<i.c.c.length;){g=Wv(Rob(i),7);g.g==(sN(),ZM)&&(e.c[e.c.length]=g,true);}if(a.e.a==(sK(),pK)&&!MM(Wv(rJ(a.d,(eM(),TL)),28))){for(d=Uh(mX(a.d));Cm(d);){c=Wv(Dm(d),12);vU(e,c.c);}}f=a.d.j.a;sJ(a.d,(Rib(),Whb),new llb(a.d.j.a));a.d.j.a=a.c;sJ(a.d,Vhb,(xkb(),xkb(),wkb));vU(a.b,a.d);j=a.d;f-=a.c;k=a.a;while(k>1){b=Qlb(f,a.c);j=(l=new uX(a.e.c),sX(l,(CX(),wX)),sJ(l,(eM(),TL),Wv(rJ(j,TL),28)),sJ(l,JL,Wv(rJ(j,JL),86)),l.k=a.e.b++,vU(a.b,l),l.j.b=j.j.b,l.j.a=b,m=new RX,QX(m,(sN(),ZM)),PX(m,j),m.i.a=l.j.a,m.i.b=l.j.b/2,n=new RX,QX(n,rN),PX(n,l),n.i.b=l.j.b/2,n.i.a=-n.j.a,o=new hW,dW(o,m),eW(o,n),l);vU(a.e.c.b,j);--k;f-=a.c+a.e.d;}new HY(a.d,a.b,a.c);for(h=new Tob(e);h.a<h.c.c.length;){g=Wv(Rob(h),7);BU(a.d.f,g);PX(g,j);}}
    function Qfb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;if(a.p>b.a||b.p>a.a){return}c=0;d=0;for(l=(g=(new Snb(a.o.a)).a.bb().mb(),new Ynb(g));l.a.G();){j=(e=Wv(l.a.H(),21),Wv(e.yb(),7));qgb(MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b,b.p,b.a)&&++c;}for(m=(h=(new Snb(a.g.a)).a.bb().mb(),new Ynb(h));m.a.G();){j=(e=Wv(m.a.H(),21),Wv(e.yb(),7));qgb(MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b,b.p,b.a)&&--c;}for(n=(i=(new Snb(b.o.a)).a.bb().mb(),new Ynb(i));n.a.G();){j=(e=Wv(n.a.H(),21),Wv(e.yb(),7));qgb(MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b,a.p,a.a)&&++d;}for(k=(f=(new Snb(b.g.a)).a.bb().mb(),new Ynb(f));k.a.G();){j=(e=Wv(k.a.H(),21),Wv(e.yb(),7));qgb(MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b,a.p,a.a)&&--d;}if(c<d){new bgb(a,b,d-c);}else if(d<c){new bgb(b,a,c-d);}else {new bgb(b,a,0);new bgb(a,b,0);}}
    function $jb(a){var b;this.f=Wv(rJ(a,(Rib(),Jib)),15).a;this.d=Wv(rJ(a,(Mjb(),Ejb)),15).a;this.a=this.f*Wv(rJ(a,qjb),15).a;this.b=this.f*Wv(rJ(a,pjb),15).a;Wv(rJ(a,Dib),15);this.c=Wv(rJ(a,Dib),15).a;this.e=Wv(rJ(a,(eM(),DL)),15).a;b=(CX(),Bv(tv(pB,1),uyb,132,0,[AX,zX,xX,BX,yX,wX])).length;this.g=vv(lw,[Txb,tAb],[250,26],12,[b,b],2);Yjb(this,AX,this.f);Zjb(this,AX,zX,this.b);Zjb(this,AX,BX,this.b);Zjb(this,AX,xX,this.c);Zjb(this,AX,yX,this.b);Zjb(this,AX,wX,this.b);Yjb(this,zX,this.a);Zjb(this,zX,BX,this.a);Zjb(this,zX,xX,this.c);Zjb(this,zX,yX,this.e);Zjb(this,zX,wX,this.b);Yjb(this,BX,this.a);Zjb(this,BX,xX,this.c);Zjb(this,BX,yX,this.e);Zjb(this,BX,wX,this.b);Yjb(this,xX,this.c);Zjb(this,xX,yX,this.c);Zjb(this,xX,wX,this.c);Yjb(this,yX,this.e);Zjb(this,yX,wX,this.e);Yjb(this,wX,this.f);}
    function mZ(a,b){var c,d,e,f,g,h,i,j,k;if(tl(iX(b))!=1||Wv(ql(iX(b)),12).c.f.g!=(CX(),zX)){return null}c=Wv(ql(iX(b)),12);d=c.c.f;sX(d,(CX(),AX));sJ(d,(Rib(),qib),null);sJ(d,rib,null);sJ(d,Whb,Wv(rJ(b,Whb),15));sJ(d,Vhb,(xkb(),xkb(),wkb));sJ(d,uib,rJ(b,uib));d.j.b=b.j.b;f=rJ(c.d,uib);g=null;for(j=nX(d,(sN(),rN)).mb();j.G();){h=Wv(j.H(),7);if(h.b.c.length!=0){sJ(h,uib,f);k=c.d;h.j.a=k.j.a;h.j.b=k.j.b;h.a.a=k.a.a;h.a.b=k.a.b;xU(h.c,k.c);k.c.c=xv(UF,syb,1,0,4,1);g=h;break}}sJ(c.d,uib,null);if(tl(nX(b,rN))>1){for(i=WI(Eo(nX(b,rN)),0);i.b!=i.d.c;){h=Wv(_ub(i),7);if(h.b.c.length==0){e=new RX;QX(e,rN);e.j.a=h.j.a;e.j.b=h.j.b;PX(e,d);sJ(e,uib,rJ(h,uib));PX(h,null);}else {PX(g,d);}}}sJ(b,uib,null);sJ(b,Vhb,(vkb));sX(b,wX);sJ(d,(eM(),TL),Wv(rJ(b,TL),28));sJ(d,JL,Wv(rJ(b,JL),86));uU(a.b,0,d);return d}
    function NW(a,b,c,d,e,f,g){var h,i,j,k,l,m;l=c;j=new uX(g);sX(j,(CX(),xX));sJ(j,(Rib(),iib),e);sJ(j,(eM(),TL),(KM(),FM));sJ(j,tib,Wv(rJ(a,LL),15));i=Wv(rJ(a,SL),10);!i&&(i=new HI(e.a/2,e.b/2));sJ(j,SL,i);k=new RX;PX(k,j);if(!(b!=IM&&b!=JM)){h=f!=(sK(),qK)?f:pK;d>0?(l=vN(h)):(l=tN(vN(h)));sJ(a,WL,l);}switch(l.e){case 4:sJ(j,(Mjb(),vjb),(Xib(),Tib));sJ(j,dib,(Hgb(),Ggb));j.j.b=e.b;QX(k,(sN(),ZM));k.i.b=i.b;break;case 2:sJ(j,(Mjb(),vjb),(Xib(),Vib));sJ(j,dib,(Hgb(),Egb));j.j.b=e.b;QX(k,(sN(),rN));k.i.b=i.b;break;case 1:sJ(j,mib,(Hhb(),Ghb));j.j.a=e.a;QX(k,(sN(),pN));k.i.a=i.a;break;case 3:sJ(j,mib,(Hhb(),Ehb));j.j.a=e.a;QX(k,(sN(),$M));k.i.a=i.a;}if(b==EM||b==GM||b==FM){m=0;switch(l.e){case 4:case 2:m=null.cd;b==GM&&(m/=null.cd);break;case 1:case 3:m=null.cd;b==GM&&(m/=null.cd);}sJ(j,Cib,m);}sJ(j,hib,l);return j}
    function LP(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;j=new jJ;r=(mp(),new ntb);Umb(r,a,MP(a));d=(Mh(2,Vyb),new HU(2));!!a.c&&vU(d,a.c);!!a.d&&vU(d,a.d);for(n=new Tob(d);n.a<n.c.c.length;){m=Wv(Rob(n),7);b=new aJ;Ue(b,Ao(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[m.b,m.e])))))));Ve(b,a,true);if(b.b!=0){t=Wv(re(Ktb(r.d,a)),34);if(m==a.d){o=t[t.length-1];s=true;}else {o=t[0];s=false;}for(i=1;i<t.length;i++){s?(p=t[t.length-1-i]):(p=t[i]);c=WI(b,0);while(c.b!=c.d.c){k=Wv(_ub(c),12);l=Wv(re(Ktb(r.d,k)),34);if(l==null){l=MP(k);Ltb(r.d,k,l);}if(l.length<=i){bvb(c);}else {s?(q=l[l.length-1-i]):(q=l[i]);if(p.a!=q.a||p.b!=q.b){e=p.a-o.a;g=p.b-o.b;f=q.a-o.a;h=q.b-o.b;f*g==h*e&&NP(e)==NP(f)&&NP(g)==NP(h)?((e<=0?0-e:e)<(f<=0?0-f:f)||(g<=0?0-g:g)<(h<=0?0-h:h))&&(TI(j,p,j.c.b,j.c),true):i>1&&(TI(j,o,j.c.b,j.c),true);bvb(c);}}}o=p;}}}return j}
    function m1(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p;a.n=Wv(rJ(a.g,(Rib(),Jib)),15).a*Wv(rJ(a.g,(Mjb(),Ejb)),15).a;a.e=a.n*Wv(rJ(a.g,qjb),15).a;a.i=a.g.c.c.length;h=a.i-1;m=0;a.j=0;a.k=0;a.a=Co(xv(PF,Txb,24,a.i,0,1));a.b=Co(xv(HF,Txb,184,a.i,6,1));for(g=new Tob(a.g.c);g.a<g.c.c.length;){e=Wv(Rob(g),16);e.k=h;for(l=new Tob(e.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);k.k=m;++m;}--h;}a.f=xv(mw,Yyb,26,m,12,1);a.c=vv(mw,[Txb,Yyb],[52,26],12,[m,3],2);a.o=new GU;a.p=new GU;b=0;a.d=0;for(f=new Tob(a.g.c);f.a<f.c.c.length;){e=Wv(Rob(f),16);h=e.k;d=0;p=0;i=e.a.c.length;j=0;for(l=new Tob(e.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);m=k.k;a.f[m]=k.d.k;j+=k.j.b+a.n;c=tl(iX(k));o=tl(mX(k));a.c[m][0]=o-c;a.c[m][1]=c;a.c[m][2]=o;d+=c;p+=o;c>0&&vU(a.p,k);vU(a.o,k);}b-=d;n=i+b;j+=b*a.e;DU(a.a,h,Elb(n));DU(a.b,h,j);a.j=Plb(a.j,n);a.k=Nlb(a.k,j);a.d+=b;b+=p;}}
    function sN(){sN=iI;var a;qN=new uN(szb,0);$M=new uN('NORTH',1);ZM=new uN('EAST',2);pN=new uN('SOUTH',3);rN=new uN('WEST',4);dN=(ypb(),new Frb((a=Wv(Hkb(Kz),11),new atb(a,Wv(exb(a,a.length),11),0))));eN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[])));_M=Kk(Vsb(ZM,Bv(tv(Kz,1),uyb,32,0,[])));mN=Kk(Vsb(pN,Bv(tv(Kz,1),uyb,32,0,[])));oN=Kk(Vsb(rN,Bv(tv(Kz,1),uyb,32,0,[])));jN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[pN])));cN=Kk(Vsb(ZM,Bv(tv(Kz,1),uyb,32,0,[rN])));lN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[rN])));fN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[ZM])));nN=Kk(Vsb(pN,Bv(tv(Kz,1),uyb,32,0,[rN])));aN=Kk(Vsb(ZM,Bv(tv(Kz,1),uyb,32,0,[pN])));iN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[ZM,rN])));bN=Kk(Vsb(ZM,Bv(tv(Kz,1),uyb,32,0,[pN,rN])));kN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[pN,rN])));gN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[ZM,pN])));hN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[ZM,pN,rN])));}
    function q$(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C;u=new GU;for(m=new Tob(a.c);m.a<m.c.c.length;){l=Wv(Rob(m),16);for(p=new Tob(l.a);p.a<p.c.c.length;){n=Wv(Rob(p),9);if(n.g!=(CX(),xX)){continue}if(rJ(n,(Rib(),gib))==null){continue}q=null;s=null;r=null;for(A=new Tob(n.f);A.a<A.c.c.length;){w=Wv(Rob(A),7);switch(w.g.e){case 4:q=w;break;case 2:s=w;break;default:r=w;}}t=Wv(yU(r.e,0),12);i=new kJ(t.a);h=new II(r.i);vI(h,n.i);j=WI(i,0);$ub(j,h);v=lJ(t.a);k=new II(r.i);vI(k,n.i);TI(v,k,v.c.b,v.c);B=Wv(rJ(n,gib),9);C=Wv(yU(B.f,0),7);g=Wv(FU(q.b,xv(dB,gAb,12,0,0,1)),47);for(d=0,f=g.length;d<f;++d){b=g[d];eW(b,C);gJ(b.a,b.a.b,i);}g=Wv(FU(s.e,xv(dB,gAb,12,s.e.c.length,0,1)),47);for(c=0,e=g.length;c<e;++c){b=g[c];dW(b,C);gJ(b.a,0,v);}dW(t,null);eW(t,null);u.c[u.c.length]=n;}}for(o=new Tob(u);o.a<o.c.c.length;){n=Wv(Rob(o),9);rX(n,null);}}
    function _tb(){function e(){this.obj=this.createObject();}
    e.prototype.createObject=function(a){return Object.create(null)};e.prototype.get=function(a){return this.obj[a]};e.prototype.set=function(a,b){this.obj[a]=b;};e.prototype[$Ab]=function(a){delete this.obj[a];};e.prototype.keys=function(){return Object.getOwnPropertyNames(this.obj)};e.prototype.entries=function(){var b=this.keys();var c=this;var d=0;return {'next':function(){if(d>=b.length)return {'done':true};var a=b[d++];return {'value':[a,c.get(a)],'done':false}}}};if(!Ztb()){e.prototype.createObject=function(){return {}};e.prototype.get=function(a){return this.obj[':'+a]};e.prototype.set=function(a,b){this.obj[':'+a]=b;};e.prototype[$Ab]=function(a){delete this.obj[':'+a];};e.prototype.keys=function(){var a=[];for(var b in this.obj){b.charCodeAt(0)==58&&a.push(b.substring(1));}return a};}return e}
    function fQ(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;k=new kW;sJ(k,PP,b);Umb(a.e,b,k);sJ(k,(Rib(),zib),c);!!a.d&&iQ(a.d,k,false);hQ(b,k);if(Lzb in b.a){q=k.a;r=Wv(Pu(b,Lzb),69);p=Wv(Pu(r,'left'),104);!!p&&(q.b=p.a);t=Wv(Pu(r,'top'),104);!!t&&(q.d=t.a);s=Wv(Pu(r,'right'),104);!!s&&(q.c=s.a);e=Wv(Pu(r,Azb),104);!!e&&(q.a=e.a);}l=(d=Wv(Hkb(mF),11),new atb(d,Wv(exb(d,d.length),11),0));sJ(k,jib,l);a.g==null&&(a.g=Xv(rJ(k,(zQ(),yQ))));if(Mzb in b.a){u=Pu(b,Mzb);if(!u.hc()){throw new GQ("The 'children' property of nodes must be an array.",u,b)}j=u.hc();if(j.a.length>0){!!c&&sJ(c,sib,k);h=xv(qB,Nzb,9,j.a.length,0,1);for(n=0;n<j.a.length;++n){i=gu(j,n);if(!i.kc()){throw new GQ("A 'children' array contains a non-object node element.",i,b)}f=eQ(a,i.kc(),k);h[n]=f;}for(m=0;m<j.a.length;++m){o=gu(j,m).kc();g=h[m];Mzb in o.a&&!Ckb(Ixb(Xv(rJ(g,(eM(),KL)))))&&fQ(a,o,g);}}}return k}
    function LO(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;if(!Qob(new Tob(AW(a.e)))){return}for(h=new Tob(AW(a.e));h.a<h.c.c.length;){g=Wv(Rob(h),161);j=Wv(g.e,7).g.e;++a.o[j];switch(Wv(g.e,7).g.e){case 4:case 2:a.n[j]+=g.e.j.b+(b?(d=Wv(g.e,7).d,new EP(d.d,d.b,d.a,d.c)).a+(e=Wv(g.e,7).d,new EP(e.d,e.b,e.a,e.c)).d:0);break;case 1:case 3:a.n[j]+=g.e.j.a+(b?(f=Wv(g.e,7).d,new EP(f.d,f.b,f.a,f.c)).b+(c=Wv(g.e,7).d,new EP(c.d,c.b,c.a,c.c)).c:0);}}i=Wv(oW(a.e,(eM(),NL)),100);i=i==(zM(),yM)?xM:i;a.g[1]=Wv(oW(a.e,PL),100);a.g[3]=Wv(oW(a.e,QL),100);a.g[4]=Wv(oW(a.e,RL),100);a.g[2]=Wv(oW(a.e,OL),100);for(l=(sN(),Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN])),n=0,p=l.length;n<p;++n){j=l[n];a.g[j.e]=a.g[j.e]==yM?i:a.g[j.e];}a.b=oW(a.e,jL)!=null;for(k=Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]),m=0,o=k.length;m<o;++m){j=k[m];a.o[j.e]==1?(a.i[j.e]=2):!a.b&&a.g[j.e]==xM?(a.i[j.e]=a.o[j.e]+1):(a.i[j.e]=a.o[j.e]-1);}}
    function Tfb(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;i=Wv(a.a,16);p=Wv(a.b,16);j=Wv(b.a,18);q=Wv(b.b,18);if(i){for(l=new Tob(i.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);for(t=nX(k,(sN(),ZM)).mb();t.G();){s=Wv(t.H(),7);j.ib(s);for(h=new Tob(s.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);if(bW(g)){continue}c.c[c.c.length]=g;Ufb(g,d);r=g.c.f.g;(r==(CX(),AX)||r==BX)&&(e.c[e.c.length]=g,true);v=g.d;u=v.f.d;u==p?q.ib(v):u==i?j.ib(v):BU(c,g);}}}}if(p){for(l=new Tob(p.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);for(o=new Tob(k.f);o.a<o.c.c.length;){n=Wv(Rob(o),7);for(h=new Tob(n.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);bW(g)&&(m=f.a.db(g,f),m==null);}}for(t=nX(k,(sN(),rN)).mb();t.G();){s=Wv(t.H(),7);q.ib(s);for(h=new Tob(s.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);if(bW(g)){continue}c.c[c.c.length]=g;Ufb(g,d);r=g.c.f.g;(r==(CX(),AX)||r==BX)&&(e.c[e.c.length]=g,true);v=g.d;u=v.f.d;u==p?q.ib(v):u==i?j.ib(v):BU(c,g);}}}}}
    function acb(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B;t=b.c.length;e=new Cbb(a.b,c,null,null);B=xv(kw,hyb,26,t,12,1);p=xv(kw,hyb,26,t,12,1);o=xv(kw,hyb,26,t,12,1);q=0;for(h=0;h<t;h++){p[h]=$xb;o[h]=eyb;}for(i=0;i<t;i++){d=(Cxb(i,b.c.length),Wv(b.c[i],81));B[i]=Abb(d);B[q]>B[i]&&(q=i);for(l=new Tob(a.b.c);l.a<l.c.c.length;){k=Wv(Rob(l),16);for(s=new Tob(k.a);s.a<s.c.c.length;){r=Wv(Rob(s),9);w=Ixb(d.n[r.k])+Ixb(d.d[r.k]);p[i]=p[i]<w?p[i]:w;o[i]=Nlb(o[i],w+r.j.b);}}}A=xv(kw,hyb,26,t,12,1);for(j=0;j<t;j++){(Cxb(j,b.c.length),Wv(b.c[j],81)).k==(Lbb(),Jbb)?(A[j]=p[q]-p[j]):(A[j]=o[q]-o[j]);}f=xv(kw,hyb,26,t,12,1);for(n=new Tob(a.b.c);n.a<n.c.c.length;){m=Wv(Rob(n),16);for(v=new Tob(m.a);v.a<v.c.c.length;){u=Wv(Rob(v),9);for(g=0;g<t;g++){f[g]=Ixb((Cxb(g,b.c.length),Wv(b.c[g],81)).n[u.k])+Ixb((Cxb(g,b.c.length),Wv(b.c[g],81)).d[u.k])+A[g];}kpb(f);e.n[u.k]=(f[1]+f[2])/2;e.d[u.k]=0;}}return e}
    function Sfb(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;p=null;c==(fgb(),dgb)?(p=a):c==egb&&(p=b);for(r=(m=(new Snb(p.a)).a.bb().mb(),new Ynb(m));r.a.G();){q=(k=Wv(r.a.H(),21),Wv(k.yb(),7));s=MI(Bv(tv(qz,1),Fzb,10,0,[q.f.i,q.i,q.a])).b;v=new vtb;g=new vtb;for(i=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[q.b,q.e]))))));Cm(i);){h=Wv(Dm(i),12);if(Ckb(Ixb(Xv(rJ(h,(Rib(),Iib)))))!=d){continue}if(zU(e,h,0)!=-1){h.d==q?(t=h.c):(t=h.d);u=MI(Bv(tv(qz,1),Fzb,10,0,[t.f.i,t.i,t.a])).b;if((u-s<=0?0-(u-s):u-s)<0.2){continue}u<s?a.a.R(t)?stb(v,new RJ(dgb,h)):stb(v,new RJ(egb,h)):a.a.R(t)?stb(g,new RJ(dgb,h)):stb(g,new RJ(egb,h));}}if(v.a.Y()>1){vU(f,new mgb(q,v,c));for(o=(l=(new Snb(v.a)).a.bb().mb(),new Ynb(l));o.a.G();){n=(j=Wv(o.a.H(),21),Wv(j.yb(),27));BU(e,n.b);}}if(g.a.Y()>1){vU(f,new mgb(q,g,c));for(o=(l=(new Snb(g.a)).a.bb().mb(),new Ynb(l));o.a.G();){n=(j=Wv(o.a.H(),21),Wv(j.yb(),27));BU(e,n.b);}}}}
    function dab(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;e=0;s=0;r=(mp(),new ntb);d=new ntb;f=new ntb;A=new ntb;fab(a,f,A);b=null;q=0;w=0;t=true;i=true;for(m=0,o=a.length;m<o;++m){k=a[m];for(v=new Tob(k.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);switch(u.g.e){case 2:e+=cab(u,f);break;case 4:e+=cab(u,A);}}p=k.g;if(i&&(p==(CX(),AX)||p==BX)){j=Wv(rJ(k,(Rib(),nib)),9);if(!j){i=false;continue}if(b!=j){!!b&&Umb(r,b,new RJ(Elb(q),Elb(w)));b=j;q=0;w=0;t=true;}k==b&&(t=false);if(t){q+=Wv(rJ(k,aib),24).a;Umb(d,k,Elb(q));}else {w+=Wv(rJ(k,aib),24).a;Umb(d,k,Elb(w));}}}!!b&&Umb(r,b,new RJ(Elb(q),Elb(w)));if(i){h=null;g=0;c=0;t=true;for(l=0,n=a.length;l<n;++l){k=a[l];p=k.g;switch(p.e){case 0:g=Wv(re(Ktb(d.d,k)),24).a;c=Wv(Wv(re(Ktb(r.d,k)),27).b,24).a;h=k;t=false;break;case 3:g=Wv(re(Ktb(d.d,k)),24).a;j=Wv(rJ(k,(Rib(),nib)),9);if(j!=h){c=Wv(Wv(re(Ktb(r.d,j)),27).a,24).a;h=j;t=true;}break;default:s+=t?g:c-g;}}}return e+s}
    function S4(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;l=(mp(),new ntb);j=new xk;for(d=new Tob(a.a.a.b);d.a<d.c.c.length;){b=Wv(Rob(d),25);if(aw(b,93)){k=Wv(b,93).b;Ltb(l.d,k,b);}else if(aw(b,82)){for(f=(o=(new Snb(Wv(b,82).d.a)).a.bb().mb(),new Ynb(o));f.a.G();){e=(g=Wv(f.a.H(),21),Wv(g.yb(),12));Fd(j,e,b);}}}for(c=new Tob(a.a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);if(aw(b,93)){k=Wv(b,93).b;for(i=Uh(mX(k));Cm(i);){h=Wv(Dm(i),12);if(bW(h)){continue}q=h.c;t=h.d;if((sN(),jN).kb(h.c.g)&&jN.kb(h.d.g)){continue}r=Wv(Smb(l,h.d.f),25);f7(i7(h7(j7(g7(new k7,0),100),a.c[b.f.d]),a.c[r.f.d]));if(q.g==rN&&TX((LX(),q))){for(n=Wv(Dd(j,h),18).mb();n.G();){m=Wv(n.H(),25);if(m.j.d<b.j.d){p=a.c[m.f.d];s=a.c[b.f.d];if(p==s){continue}f7(i7(h7(j7(g7(new k7,1),100),p),s));}}}if(t.g==ZM&&WX((LX(),t))){for(n=Wv(Dd(j,h),18).mb();n.G();){m=Wv(n.H(),25);if(m.j.d>b.j.d){p=a.c[b.f.d];s=a.c[m.f.d];if(p==s){continue}f7(i7(h7(j7(g7(new k7,1),100),p),s));}}}}}}}
    function t3(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;g=new z3(a);h=Ao(pl(b,g));Gpb(h,new C3);e=a.b;switch(e.c){case 2:i=new E3(e.a);c=Al(pl(h,i));od(c)?(j=Wv(pd(c),91).b):(j=15);i=new E3(Jeb(e));c=Al(pl(h,i));od(c)?(f=Wv(pd(c),91).b):(f=15);i=new E3(e.b);c=Al(pl(h,i));od(c)?(k=Wv(pd(c),91).b):(k=15);d=p3(a,j,f,k);stb(b,new w3(d,a.c,a.e,a.a.c.f,e.a));stb(b,new w3(d,a.c,a.e,a.a.c.f,Jeb(e)));stb(b,new w3(d,a.c,a.e,a.a.c.f,e.b));break;case 1:i=new E3(e.a);c=Al(pl(h,i));od(c)?(j=Wv(pd(c),91).b):(j=15);i=new E3(e.b);c=Al(pl(h,i));od(c)?(k=Wv(pd(c),91).b):(k=15);d=q3(a,j,k);stb(b,new w3(d,a.c,a.e,a.a.c.f,e.a));stb(b,new w3(d,a.c,a.e,a.a.c.f,e.b));break;case 0:i=new E3(e.a);c=Al(pl(h,i));od(c)?(j=Wv(pd(c),91).b):(j=15);d=(l=a.b,m=xfb(a.a.c,a.a.d,j),Ue(a.a.a,Veb(m)),n=s3(a.a.b,m.a,l),o=new Dfb((!m.k&&(m.k=new Efb(Xeb(m))),m.k)),zfb(o),!n?o:Gfb(o,n));stb(b,new w3(d,a.c,a.e,a.a.c.f,e.a));break;default:throw new slb('The loopside must be defined.');}return d}
    function Pbb(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;for(h=new Tob(a.a.c);h.a<h.c.c.length;){f=Wv(Rob(h),16);for(t=new Tob(f.a);t.a<t.c.c.length;){s=Wv(Rob(t),9);b.f[s.k]=s;b.a[s.k]=s;b.d[s.k]=0;}}i=a.a.c;b.c==(Gbb(),Ebb)&&(i=aw(i,87)?Ii(Wv(i,87)):aw(i,88)?Wv(i,88).a:aw(i,63)?new ap(i):new Ro(i));for(g=i.mb();g.G();){f=Wv(g.H(),16);n=-1;m=f.a;if(b.k==(Lbb(),Kbb)){n=$xb;m=aw(m,87)?Ii(Wv(m,87)):aw(m,88)?Wv(m,88).a:aw(m,63)?new ap(m):new Ro(m);}for(v=m.mb();v.G();){u=Wv(v.H(),9);b.c==Ebb?(l=Wv(yU(a.b.f,u.k),20)):(l=Wv(yU(a.b.b,u.k),20));if(l.Y()>0){d=l.Y();j=hw(Math.floor((d+1)/2))-1;e=hw(Math.ceil((d+1)/2))-1;if(b.k==Kbb){for(k=e;k>=j;k--){if(b.a[u.k]==u){p=Wv(l.sb(k),27);o=Wv(p.a,9);if(!ttb(c,p.b)&&n>a.b.e[o.k]){b.a[o.k]=u;b.f[u.k]=b.f[o.k];b.a[u.k]=b.f[u.k];n=a.b.e[o.k];}}}}else {for(k=j;k<=e;k++){if(b.a[u.k]==u){r=Wv(l.sb(k),27);q=Wv(r.a,9);if(!ttb(c,r.b)&&n<a.b.e[q.k]){b.a[q.k]=u;b.f[u.k]=b.f[q.k];b.a[u.k]=b.f[u.k];n=a.b.e[q.k];}}}}}}}}
    function Ieb(){Ieb=iI;meb=new Peb('N',0,(sN(),$M),$M,0);jeb=new Peb('EN',1,ZM,$M,1);ieb=new Peb('E',2,ZM,ZM,0);peb=new Peb('SE',3,pN,ZM,1);oeb=new Peb('S',4,pN,pN,0);Heb=new Peb('WS',5,rN,pN,1);Geb=new Peb('W',6,rN,rN,0);neb=new Peb('NW',7,$M,rN,1);keb=new Peb('ENW',8,ZM,rN,2);leb=new Peb('ESW',9,ZM,rN,2);qeb=new Peb('SEN',10,pN,$M,2);Eeb=new Peb('SWN',11,pN,$M,2);Feb=new Peb(szb,12,qN,qN,3);feb=bk(meb,jeb,ieb,peb,oeb,Heb,Bv(tv(_E,1),uyb,60,0,[Geb,neb,keb,leb,qeb,Eeb]));heb=(hi(),Zj(Bv(tv(UF,1),syb,1,4,[meb,ieb,oeb,Geb])));geb=Zj(Bv(tv(UF,1),syb,1,4,[jeb,peb,Heb,neb]));veb=new Gr($M);seb=Zj(Bv(tv(UF,1),syb,1,4,[ZM,$M]));reb=new Gr(ZM);yeb=Zj(Bv(tv(UF,1),syb,1,4,[pN,ZM]));xeb=new Gr(pN);Deb=Zj(Bv(tv(UF,1),syb,1,4,[rN,pN]));Ceb=new Gr(rN);web=Zj(Bv(tv(UF,1),syb,1,4,[$M,rN]));teb=Zj(Bv(tv(UF,1),syb,1,4,[ZM,$M,rN]));ueb=Zj(Bv(tv(UF,1),syb,1,4,[ZM,pN,rN]));Aeb=Zj(Bv(tv(UF,1),syb,1,4,[pN,rN,$M]));zeb=Zj(Bv(tv(UF,1),syb,1,4,[pN,ZM,$M]));Beb=(kr(),jr);}
    function JZ(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;s=0;if(b.e.a==0){for(q=new Tob(a);q.a<q.c.c.length;){o=Wv(Rob(q),9);s=Nlb(s,o.i.a+o.j.a+o.e.c);}}else {s=b.e.a-b.d.a;}s-=b.d.a;for(p=new Tob(a);p.a<p.c.c.length;){o=Wv(Rob(p),9);IZ(o.i,s-o.j.a);GZ(o);switch(Wv(rJ(o,(eM(),lL)),103).e){case 1:sJ(o,lL,(iK(),gK));break;case 2:sJ(o,lL,(iK(),fK));}r=o.j;for(u=new Tob(o.f);u.a<u.c.c.length;){t=Wv(Rob(u),7);IZ(t.i,r.a-t.j.a);IZ(t.a,t.j.a);QX(t,CZ(t.g));g=Wv(rJ(t,UL),24);!!g&&sJ(t,UL,Elb(-g.a));for(f=new Tob(t.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);for(d=WI(e.a,0);d.b!=d.d.c;){c=Wv(_ub(d),10);c.a=s-c.a;}j=Wv(rJ(e,CL),44);if(j){for(i=WI(j,0);i.b!=i.d.c;){h=Wv(_ub(i),10);h.a=s-h.a;}}for(m=new Tob(e.b);m.a<m.c.c.length;){k=Wv(Rob(m),33);IZ(k.i,s-k.j.a);}}for(n=new Tob(t.c);n.a<n.c.c.length;){k=Wv(Rob(n),33);IZ(k.i,-k.j.a);}}if(o.g==(CX(),xX)){sJ(o,(Rib(),hib),CZ(Wv(rJ(o,hib),32)));FZ(o);}for(l=new Tob(o.c);l.a<l.c.c.length;){k=Wv(Rob(l),33);IZ(k.i,r.a-k.j.a);}}}
    function LZ(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;s=0;if(b.e.b==0){for(q=new Tob(a);q.a<q.c.c.length;){o=Wv(Rob(q),9);s=Nlb(s,o.i.b+o.j.b+o.e.a);}}else {s=b.e.b-b.d.b;}s-=b.d.b;for(p=new Tob(a);p.a<p.c.c.length;){o=Wv(Rob(p),9);KZ(o.i,s-o.j.b);HZ(o);switch(Wv(rJ(o,(eM(),lL)),103).e){case 3:sJ(o,lL,(iK(),dK));break;case 4:sJ(o,lL,(iK(),hK));}r=o.j;for(u=new Tob(o.f);u.a<u.c.c.length;){t=Wv(Rob(u),7);KZ(t.i,r.b-t.j.b);KZ(t.a,t.j.b);QX(t,DZ(t.g));g=Wv(rJ(t,UL),24);!!g&&sJ(t,UL,Elb(-g.a));for(f=new Tob(t.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);for(d=WI(e.a,0);d.b!=d.d.c;){c=Wv(_ub(d),10);c.b=s-c.b;}j=Wv(rJ(e,CL),44);if(j){for(i=WI(j,0);i.b!=i.d.c;){h=Wv(_ub(i),10);h.b=s-h.b;}}for(m=new Tob(e.b);m.a<m.c.c.length;){k=Wv(Rob(m),33);KZ(k.i,s-k.j.b);}}for(n=new Tob(t.c);n.a<n.c.c.length;){k=Wv(Rob(n),33);KZ(k.i,-k.j.b);}}if(o.g==(CX(),xX)){sJ(o,(Rib(),hib),DZ(Wv(rJ(o,hib),32)));EZ(o);}for(l=new Tob(o.c);l.a<l.c.c.length;){k=Wv(Rob(l),33);KZ(k.i,r.b-k.j.b);}}}
    function qP(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;d=new VN(b.e.i.a,b.e.i.b,b.e.j.a,b.e.j.b);e=new UN;if(a.c){for(g=new Tob(zW(b));g.a<g.c.c.length;){f=Wv(Rob(g),129);e.d=f.e.i.a+b.e.i.a;e.e=f.e.i.b+b.e.i.b;e.c=f.e.j.a;e.b=f.e.j.b;TN(d,e);}}for(k=new Tob(AW(b));k.a<k.c.c.length;){j=Wv(Rob(k),161);l=j.e.i.a+b.e.i.a;m=j.e.i.b+b.e.i.b;if(a.e){e.d=l;e.e=m;e.c=j.e.j.a;e.b=j.e.j.b;TN(d,e);}if(a.d){for(g=new Tob(DW(j));g.a<g.c.c.length;){f=Wv(Rob(g),129);e.d=f.e.i.a+l;e.e=f.e.i.b+m;e.c=f.e.j.a;e.b=f.e.j.b;TN(d,e);}}if(a.b){n=new HI(-c,-c);if(gw(oW(b,(eM(),VL)))===gw((UM(),TM))){for(g=new Tob(DW(j));g.a<g.c.c.length;){f=Wv(Rob(g),129);n.a+=f.e.j.a+c;n.b+=f.e.j.b+c;}}n.a=Nlb(n.a,0);n.b=Nlb(n.b,0);pP(d,EW(j),CW(j),b,j,n,c);}}a.b&&pP(d,(ypb(),ypb(),vpb),(vpb),b,null,null,c);i=new FP((h=Wv(b.e,9).e,new EP(h.d,h.b,h.a,h.c)));i.d=b.e.i.b-d.e;i.a=d.e+d.b-(b.e.i.b+b.e.j.b);i.b=b.e.i.a-d.d;i.c=d.d+d.c-(b.e.i.a+b.e.j.a);Wv(b.e,9).e.b=i.b;Wv(b.e,9).e.d=i.d;Wv(b.e,9).e.c=i.c;Wv(b.e,9).e.a=i.a;}
    function XT(){XT=iI;WT=new xk;Fd(WT,(sN(),dN),hN);Fd(WT,oN,kN);Fd(WT,oN,hN);Fd(WT,_M,gN);Fd(WT,_M,hN);Fd(WT,eN,iN);Fd(WT,eN,hN);Fd(WT,mN,bN);Fd(WT,mN,hN);Fd(WT,jN,cN);Fd(WT,jN,iN);Fd(WT,jN,bN);Fd(WT,jN,hN);Fd(WT,cN,jN);Fd(WT,cN,kN);Fd(WT,cN,gN);Fd(WT,cN,hN);Fd(WT,lN,lN);Fd(WT,lN,iN);Fd(WT,lN,kN);Fd(WT,fN,fN);Fd(WT,fN,iN);Fd(WT,fN,gN);Fd(WT,nN,nN);Fd(WT,nN,bN);Fd(WT,nN,kN);Fd(WT,aN,aN);Fd(WT,aN,bN);Fd(WT,aN,gN);Fd(WT,iN,eN);Fd(WT,iN,jN);Fd(WT,iN,lN);Fd(WT,iN,fN);Fd(WT,iN,iN);Fd(WT,iN,kN);Fd(WT,iN,gN);Fd(WT,iN,hN);Fd(WT,bN,mN);Fd(WT,bN,jN);Fd(WT,bN,nN);Fd(WT,bN,aN);Fd(WT,bN,bN);Fd(WT,bN,kN);Fd(WT,bN,gN);Fd(WT,bN,hN);Fd(WT,kN,oN);Fd(WT,kN,cN);Fd(WT,kN,lN);Fd(WT,kN,nN);Fd(WT,kN,iN);Fd(WT,kN,bN);Fd(WT,kN,kN);Fd(WT,kN,hN);Fd(WT,gN,_M);Fd(WT,gN,cN);Fd(WT,gN,fN);Fd(WT,gN,aN);Fd(WT,gN,iN);Fd(WT,gN,bN);Fd(WT,gN,gN);Fd(WT,gN,hN);Fd(WT,hN,dN);Fd(WT,hN,oN);Fd(WT,hN,_M);Fd(WT,hN,eN);Fd(WT,hN,mN);Fd(WT,hN,jN);Fd(WT,hN,cN);Fd(WT,hN,iN);Fd(WT,hN,bN);Fd(WT,hN,kN);Fd(WT,hN,gN);Fd(WT,hN,hN);}
    function Tbb(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;if(c.n[b.k]!=null){return}i=true;c.n[b.k]=0;g=b;r=c.k==(Lbb(),Jbb)?Vzb:Uzb;do{e=a.b.e[g.k];f=g.d.a.c.length;h=g.g;if(c.k==Jbb&&e>0||c.k==Kbb&&e<f-1){c.k==Kbb?(j=Wv(yU(g.d.a,e+1),9)):(j=Wv(yU(g.d.a,e-1),9));l=c.f[j.k];k=j.g;Tbb(a,l,c);r=a.e.Ic(r,b,g);c.i[b.k]==b&&(c.i[b.k]=c.i[l.k]);if(c.i[b.k]==c.i[l.k]){q=Wjb(a.d,h,k);if(c.k==Kbb){d=Ixb(c.n[b.k]);n=Ixb(c.n[l.k])+Ixb(c.d[j.k])-j.e.d-q-g.e.a-g.j.b-Ixb(c.d[g.k]);if(i){i=false;c.n[b.k]=n<r?n:r;}else {c.n[b.k]=d<(n<r?n:r)?d:n<r?n:r;}}else {d=Ixb(c.n[b.k]);n=Ixb(c.n[l.k])+Ixb(c.d[j.k])+j.j.b+j.e.a+q+g.e.d-Ixb(c.d[g.k]);if(i){i=false;c.n[b.k]=n>r?n:r;}else {c.n[b.k]=d>(n>r?n:r)?d:n>r?n:r;}}}else {q=a.d.f;p=Rbb(a,c.i[b.k]);m=Rbb(a,c.i[l.k]);if(c.k==Kbb){o=Ixb(c.n[b.k])+Ixb(c.d[g.k])+g.j.b+g.e.a+q-(Ixb(c.n[l.k])+Ixb(c.d[j.k])-j.e.d);Xbb(p,m,o);}else {o=Ixb(c.n[b.k])+Ixb(c.d[g.k])-g.e.d-Ixb(c.n[l.k])-Ixb(c.d[j.k])-j.j.b-j.e.a-q;Xbb(p,m,o);}}}else {r=a.e.Ic(r,b,g);}g=c.a[g.k];}while(g!=b);ycb(a.e,b);}
    function sZ(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;m=false;l=false;if(MM(Wv(rJ(d,(eM(),TL)),28))){g=false;h=false;t:for(o=new Tob(d.f);o.a<o.c.c.length;){n=Wv(Rob(o),7);for(q=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[new fY(n),new lY(n)]))))));Cm(q);){p=Wv(Dm(q),7);if(!Ckb(Ixb(Xv(rJ(p.f,qL))))){if(n.g==(sN(),$M)){g=true;break t}if(n.g==pN){h=true;break t}}}}m=h&&!g;l=g&&!h;}if(!m&&!l&&d.c.c.length!=0){k=0;for(j=new Tob(d.c);j.a<j.c.c.length;){i=Wv(Rob(j),33);k+=i.i.b+i.j.b/2;}k/=d.c.c.length;s=k>=d.j.b/2;}else {s=!l;}if(s){r=Wv(rJ(d,(Rib(),Qib)),20);if(!r){f=new GU;sJ(d,Qib,f);}else if(m){f=r;}else {e=Wv(rJ(d,Yhb),20);if(!e){f=new GU;sJ(d,Yhb,f);}else {r.Y()<=e.Y()?(f=r):(f=e);}}}else {e=Wv(rJ(d,(Rib(),Yhb)),20);if(!e){f=new GU;sJ(d,Yhb,f);}else if(l){f=e;}else {r=Wv(rJ(d,Qib),20);if(!r){f=new GU;sJ(d,Qib,f);}else {e.Y()<=r.Y()?(f=e):(f=r);}}}f.ib(a);sJ(a,(Rib(),Zhb),c);if(b.d==c){eW(b,null);c.b.c.length+c.e.c.length==0&&PX(c,null);}else {dW(b,null);c.b.c.length+c.e.c.length==0&&PX(c,null);}_I(b.a);}
    function rU(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;c=new bV(b);c.a||kU(b);j=jU(b);i=new xk;q=new oV;for(p=new Tob(b.b);p.a<p.c.c.length;){o=Wv(Rob(p),9);for(e=Uh(mX(o));Cm(e);){d=Wv(Dm(e),12);if(d.c.f.g==(CX(),xX)||d.d.f.g==xX){k=qU(a,d,j,q);Fd(i,oU(k.d),k.a);}}}g=new GU;for(t=Wv(rJ(c.c,(Rib(),fib)),18).mb();t.G();){s=Wv(t.H(),32);n=q.c[s.e];m=q.b[s.e];h=q.a[s.e];f=null;r=null;switch(s.e){case 4:f=new VN(a.d.a,n,j.b.a-a.d.a,m-n);r=new VN(a.d.a,n,h,m-n);YU(j,new HI(f.d+f.c,f.e));YU(j,new HI(f.d+f.c,f.e+f.b));break;case 2:f=new VN(j.a.a,n,a.c.a-j.a.a,m-n);r=new VN(a.c.a-h,n,h,m-n);YU(j,new HI(f.d,f.e));YU(j,new HI(f.d,f.e+f.b));break;case 1:f=new VN(n,a.d.b,m-n,j.b.b-a.d.b);r=new VN(n,a.d.b,m-n,h);YU(j,new HI(f.d,f.e+f.b));YU(j,new HI(f.d+f.c,f.e+f.b));break;case 3:f=new VN(n,j.a.b,m-n,a.c.b-j.a.b);r=new VN(n,a.c.b-h,m-n,h);YU(j,new HI(f.d,f.e));YU(j,new HI(f.d+f.c,f.e));}if(f){l=new jV;l.d=s;l.b=f;l.c=r;l.a=pr(Wv(Dd(i,oU(s)),18));g.c[g.c.length]=l;}}xU(c.b,g);c.d=pT(tT(j));return c}
    function tt(){var a=['\\u0000','\\u0001','\\u0002','\\u0003','\\u0004','\\u0005','\\u0006','\\u0007','\\b','\\t','\\n','\\u000B','\\f','\\r','\\u000E','\\u000F','\\u0010','\\u0011','\\u0012','\\u0013','\\u0014','\\u0015','\\u0016','\\u0017','\\u0018','\\u0019','\\u001A','\\u001B','\\u001C','\\u001D','\\u001E','\\u001F'];a[34]='\\"';a[92]='\\\\';a[173]='\\u00ad';a[1536]='\\u0600';a[1537]='\\u0601';a[1538]='\\u0602';a[1539]='\\u0603';a[1757]='\\u06dd';a[1807]='\\u070f';a[6068]='\\u17b4';a[6069]='\\u17b5';a[8203]='\\u200b';a[8204]='\\u200c';a[8205]='\\u200d';a[8206]='\\u200e';a[8207]='\\u200f';a[8232]='\\u2028';a[8233]='\\u2029';a[8234]='\\u202a';a[8235]='\\u202b';a[8236]='\\u202c';a[8237]='\\u202d';a[8238]='\\u202e';a[8288]='\\u2060';a[8289]='\\u2061';a[8290]='\\u2062';a[8291]='\\u2063';a[8292]='\\u2064';a[8298]='\\u206a';a[8299]='\\u206b';a[8300]='\\u206c';a[8301]='\\u206d';a[8302]='\\u206e';a[8303]='\\u206f';a[65279]='\\ufeff';a[65529]='\\ufff9';a[65530]='\\ufffa';a[65531]='\\ufffb';return a}
    function eab(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;b=0;r=true;w=null;for(d=0;d<a.length;d++){f=a[d];q=f.g;if(q==(CX(),AX)){w=f;r=false;}else if(q==BX){if(aw(rJ(f,(Rib(),uib)),12)){continue}c=Wv(rJ(f,uib),9);if(w!=c){w=c;r=true;}if(!LM(Wv(rJ(c,(eM(),TL)),28))){continue}m=null;o=null;for(t=new Tob(f.f);t.a<t.c.c.length;){s=Wv(Rob(t),7);s.b.c.length==0?s.e.c.length==0||(o=Wv(rJ(s,uib),7)):(m=Wv(rJ(s,uib),7));}for(e=d+1;e<a.length;e++){g=a[e];l=g.g;if(l==AX){break}else if(l==BX){if(gw(rJ(g,uib))!==gw(c)){break}h=null;j=null;for(v=new Tob(g.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);u.b.c.length==0?u.e.c.length==0||(j=Wv(rJ(u,uib),7)):(h=Wv(rJ(u,uib),7));}if(r){n=false;p=false;if(!!o&&!!h&&o.k<h.k){++b;p=true;}if(!!m&&!!j&&m.k>j.k){++b;n=true;}if(!!o&&!!j&&o.k>j.k){++b;p=true;}if(!!m&&!!h&&m.k<h.k){++b;n=true;}n&&p&&m==o&&--b;}else {i=false;k=false;if(!!m&&!!j&&m.k<j.k){++b;k=true;}if(!!o&&!!h&&o.k>h.k){++b;i=true;}if(!!m&&!!h&&m.k<h.k){++b;i=true;}if(!!o&&!!j&&o.k>j.k){++b;k=true;}i&&k&&h==j&&--b;}}}}}return b}
    function Oab(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D;for(t=a.a,u=0,v=t.length;u<v;++u){s=t[u];j=$xb;k=$xb;for(o=new Tob(s.f);o.a<o.c.c.length;){m=Wv(Rob(o),9);g=!m.d?-1:zU(m.d.a,m,0);if(g>0){l=Wv(yU(m.d.a,g-1),9);B=Xjb(a.b,m,l);q=m.i.b-m.e.d-(l.i.b+l.j.b+l.e.a+B);}else {q=m.i.b-m.e.d;}j=q<j?q:j;if(g<m.d.a.c.length-1){l=Wv(yU(m.d.a,g+1),9);B=Xjb(a.b,m,l);r=l.i.b-l.e.d-(m.i.b+m.j.b+m.e.a+B);}else {r=2*m.i.b;}k=r<k?r:k;}i=$xb;f=false;e=Wv(yU(s.f,0),9);for(D=new Tob(e.f);D.a<D.c.c.length;){C=Wv(Rob(D),7);p=e.i.b+C.i.b+C.a.b;for(d=new Tob(C.b);d.a<d.c.c.length;){c=Wv(Rob(d),12);w=c.c;b=w.f.i.b+w.i.b+w.a.b-p;if((b<=0?0-b:b)<(i<=0?0-i:i)&&(b<=0?0-b:b)<(b<0?j:k)){i=b;f=true;}}}h=Wv(yU(s.f,s.f.c.length-1),9);for(A=new Tob(h.f);A.a<A.c.c.length;){w=Wv(Rob(A),7);p=h.i.b+w.i.b+w.a.b;for(d=new Tob(w.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);C=c.d;b=C.f.i.b+C.i.b+C.a.b-p;if((b<=0?0-b:b)<(i<=0?0-i:i)&&(b<=0?0-b:b)<(b<0?j:k)){i=b;f=true;}}}if(f&&i!=0){for(n=new Tob(s.f);n.a<n.c.c.length;){m=Wv(Rob(n),9);m.i.b+=i;}}}}
    function bU(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D;l=dU($T(a,(sN(),dN)),b);o=cU($T(a,eN),b);u=cU($T(a,mN),b);B=eU($T(a,oN),b);m=eU($T(a,_M),b);s=cU($T(a,lN),b);p=cU($T(a,fN),b);w=cU($T(a,nN),b);v=cU($T(a,aN),b);C=eU($T(a,cN),b);r=cU($T(a,jN),b);t=cU($T(a,iN),b);A=cU($T(a,bN),b);D=eU($T(a,kN),b);n=eU($T(a,gN),b);q=cU($T(a,hN),b);c=oJ(Bv(tv(kw,1),hyb,26,12,[s.a,B.a,w.a,D.a]));d=oJ(Bv(tv(kw,1),hyb,26,12,[o.a,l.a,u.a,q.a]));e=r.a;f=oJ(Bv(tv(kw,1),hyb,26,12,[p.a,m.a,v.a,n.a]));j=oJ(Bv(tv(kw,1),hyb,26,12,[s.b,o.b,p.b,t.b]));i=oJ(Bv(tv(kw,1),hyb,26,12,[B.b,l.b,m.b,q.b]));k=C.b;h=oJ(Bv(tv(kw,1),hyb,26,12,[w.b,u.b,v.b,A.b]));VT($T(a,dN),c+e,j+k);VT($T(a,hN),c+e,j+k);VT($T(a,eN),c+e,0);VT($T(a,mN),c+e,j+k+i);VT($T(a,oN),0,j+k);VT($T(a,_M),c+e+d,j+k);VT($T(a,fN),c+e+d,0);VT($T(a,nN),0,j+k+i);VT($T(a,aN),c+e+d,j+k+i);VT($T(a,cN),0,j);VT($T(a,jN),c,0);VT($T(a,bN),0,j+k+i);VT($T(a,gN),c+e+d,0);g=new FI;g.a=oJ(Bv(tv(kw,1),hyb,26,12,[c+d+e+f,C.a,t.a,A.a]));g.b=oJ(Bv(tv(kw,1),hyb,26,12,[j+i+k+h,r.b,D.b,n.b]));return g}
    function Nfb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;d=new jJ;j=null;o=a.c;n=o.f.g;if(n!=(CX(),AX)&&n!=BX){throw new slb('The target node of the edge must be a normal node or a northSouthPort.')}if(n==BX){m=Wv(rJ(o,(Rib(),uib)),7);j=new HI(MI(Bv(tv(qz,1),Fzb,10,0,[m.f.i,m.i,m.a])).a,MI(Bv(tv(qz,1),Fzb,10,0,[o.f.i,o.i,o.a])).b);o=m;}SI(d,MI(Bv(tv(qz,1),Fzb,10,0,[o.f.i,o.i,o.a])));g=Nlb(5,pgb(o.f,o.g));l=new GI(sgb(o.g));l.a*=g;l.b*=g;QI(d,vI(l,MI(Bv(tv(qz,1),Fzb,10,0,[o.f.i,o.i,o.a]))));!!j&&TI(d,j,d.c.b,d.c);f=a;i=a;h=null;c=false;while(f){e=f.a;if(e.b!=0){if(c){QI(d,CI(vI(h,(Bxb(e.b!=0),Wv(e.a.a.c,10))),0.5));c=false;}else {c=true;}h=xI((Bxb(e.b!=0),Wv(e.c.b.c,10)));Ue(d,e);_I(e);}i=f;f=Wv(re(Ktb(b.d,f)),12);}p=i.d;if(p.f.g==BX){m=Wv(rJ(p,(Rib(),uib)),7);QI(d,new HI(MI(Bv(tv(qz,1),Fzb,10,0,[m.f.i,m.i,m.a])).a,MI(Bv(tv(qz,1),Fzb,10,0,[p.f.i,p.i,p.a])).b));p=m;}g=Nlb(5,pgb(p.f,p.g));l=new GI(sgb(p.g));CI(l,g);QI(d,vI(l,MI(Bv(tv(qz,1),Fzb,10,0,[p.f.i,p.i,p.a]))));SI(d,MI(Bv(tv(qz,1),Fzb,10,0,[p.f.i,p.i,p.a])));k=new efb(d);Ue(a.a,Veb(k));}
    function bZ(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o;if(gw(rJ(a.c,(eM(),TL)))===gw((KM(),GM))||gw(rJ(a.c,TL))===gw(FM)){for(k=new Tob(a.c.f);k.a<k.c.c.length;){j=Wv(Rob(k),7);if(j.g==(sN(),$M)||j.g==pN){return false}}}for(d=Uh(mX(a.c));Cm(d);){c=Wv(Dm(d),12);if(c.c.f==c.d.f){return false}}if(MM(Wv(rJ(a.c,TL),28))){n=new GU;for(i=nX(a.c,(sN(),rN)).mb();i.G();){g=Wv(i.H(),7);vU(n,Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[g.b,g.e]))))));}o=(_b(n),new Vh(n));n=new GU;for(h=nX(a.c,ZM).mb();h.G();){g=Wv(h.H(),7);vU(n,Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[g.b,g.e]))))));}b=(_b(n),new Vh(n));}else {o=iX(a.c);b=mX(a.c);}f=!sl(mX(a.c));e=!sl(iX(a.c));if(!f&&!e){return false}if(!f){a.e=1;return true}if(!e){a.e=0;return true}if(Ul((Il(),new Im(Dl(ul(o.a,new yl)))))==1){l=(_b(o),Wv(Ql(new Im(Dl(ul(o.a,new yl)))),12)).c.f;if(l.g==(CX(),zX)&&Wv(rJ(l,(Rib(),qib)),7).f!=a.c){a.e=2;return true}}if(Ul(new Im(Dl(ul(b.a,new yl))))==1){m=(_b(b),Wv(Ql(new Im(Dl(ul(b.a,new yl)))),12)).d.f;if(m.g==(CX(),zX)&&Wv(rJ(m,(Rib(),rib)),7).f!=a.c){a.e=3;return true}}return false}
    function K$(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;d=new GU;e=$xb;f=$xb;g=$xb;if(c){e=a.e.a;for(p=new Tob(b.f);p.a<p.c.c.length;){o=Wv(Rob(p),7);for(i=new Tob(o.e);i.a<i.c.c.length;){h=Wv(Rob(i),12);if(h.a.b!=0){k=Wv(UI(h.a),10);if(k.a<e){f=e-k.a;g=$xb;d.c=xv(UF,syb,1,0,4,1);e=k.a;}if(k.a<=e){d.c[d.c.length]=h;h.a.b>1&&(g=Qlb(g,Jlb(Wv(tn(h.a,1),10).b-k.b)));}}}}}else {for(p=new Tob(b.f);p.a<p.c.c.length;){o=Wv(Rob(p),7);for(i=new Tob(o.b);i.a<i.c.c.length;){h=Wv(Rob(i),12);if(h.a.b!=0){m=Wv(VI(h.a),10);if(m.a>e){f=m.a-e;g=$xb;d.c=xv(UF,syb,1,0,4,1);e=m.a;}if(m.a>=e){d.c[d.c.length]=h;h.a.b>1&&(g=Qlb(g,Jlb(Wv(tn(h.a,h.a.b-2),10).b-m.b)));}}}}}if(d.c.length!=0&&f>b.j.a/2&&g>b.j.b/2){n=new RX;PX(n,b);QX(n,(sN(),$M));n.i.a=b.j.a/2;r=new RX;PX(r,b);QX(r,pN);r.i.a=b.j.a/2;r.i.b=b.j.b;for(i=new Tob(d);i.a<i.c.c.length;){h=Wv(Rob(i),12);if(c){j=Wv(YI(h.a),10);q=h.a.b==0?MX(h.d):Wv(UI(h.a),10);q.b>=j.b?dW(h,r):dW(h,n);}else {j=Wv(ZI(h.a),10);q=h.a.b==0?MX(h.c):Wv(VI(h.a),10);q.b>=j.b?eW(h,r):eW(h,n);}l=Wv(rJ(h,(eM(),CL)),44);!!l&&Ve(l,j,true);}b.i.a=e-b.j.a/2;}}
    function N2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;r=new GU;s=new GU;t=new GU;for(f=new Tob(b);f.a<f.c.c.length;){e=Wv(Rob(f),75);e.k>50?(r.c[r.c.length]=e,true):e.k>0?(s.c[s.c.length]=e,true):(t.c[t.c.length]=e,true);}if(s.c.length==1&&r.c.length==0){xU(r,s);s.c=xv(UF,syb,1,0,4,1);}r.c.length!=0&&Zsb(U2(a.a),(Ieb(),meb))&&Zsb(U2(a.a),(Ieb(),oeb))?L2(a,r):xU(s,r);s.c.length==0||M2(a,s);if(t.c.length!=0){c=V2(a.a);if(c.c!=0){k=new Tob(t);i=(_b(c),Nl((new vl(c)).a));while(k.a<k.c.c.length){e=Wv(Rob(k),75);while(k.a<k.c.c.length&&e.a.a.Y()<2){e=Wv(Rob(k),75);}if(e.a.a.Y()>1){p=Wv(nm(i),60);aeb(e,p,true);Sob(k);Y2(a.a,p);}}}m=t.c.length;d=O2(a);n=new GU;g=m/T2(a.a).c|0;for(h=0;h<g;h++){xU(n,T2(a.a));}o=m%T2(a.a).c;if(o>3){xU(n,(Ieb(),Ieb(),geb));o-=4;}switch(o){case 3:vU(n,Meb(d));case 2:q=Leb(Meb(d));do{q=Leb(q);}while(!Zsb(U2(a.a),q));n.c[n.c.length]=q;q=Neb(Meb(d));do{q=Neb(q);}while(!Zsb(U2(a.a),q));n.c[n.c.length]=q;break;case 1:vU(n,Meb(d));}l=new Tob(n);j=new Tob(t);while(l.a<l.c.c.length&&j.a<j.c.c.length){aeb(Wv(Rob(j),75),Wv(Rob(l),60),true);}}}
    function G9(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;k=b.c.c.length;a.a=xv(qB,Txb,51,k,0,2);a.b=xv(qB,Txb,51,k,0,2);a.k=xv(qB,Txb,51,k,0,2);i=xv(mw,Yyb,26,k,12,1);g=xv(KH,xAb,26,k,13,1);a.c=xv(KH,xAb,26,k,13,1);a.d=xv(KH,xAb,26,k,13,1);r=0;v=0;m=new Fnb(b.c,0);while(m.b<m.d.Y()){j=(Bxb(m.b<m.d.Y()),Wv(m.d.sb(m.c=m.b++),16));l=m.b-1;n=j.a.c.length;a.a[l]=xv(qB,Nzb,9,n,0,1);a.k[l]=xv(qB,Nzb,9,n,0,1);a.b[l]=xv(qB,Nzb,9,n,0,1);i[l]=0;g[l]=false;s=new Fnb(j.a,0);while(s.b<s.d.Y()){q=(Bxb(s.b<s.d.Y()),Wv(s.d.sb(s.c=s.b++),9));a.b[l][s.b-1]=q;q.k=r++;o=Wv(rJ(q,(Rib(),nib)),9);!!o&&(Nm(a.g,o,q,null),true);for(u=new Tob(q.f);u.a<u.c.c.length;){t=Wv(Rob(u),7);t.k=v++;for(f=new Tob(t.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);e.d.f.d==j&&++i[l];}t.g==(sN(),ZM)?t.e.c.length+t.b.c.length>1&&(a.c[l]=true):t.g==rN&&t.e.c.length+t.b.c.length>1&&(a.d[l]=true);}if(q.g==(CX(),BX)){++i[l];g[l]=true;}}}c=true;p=true;for(h=0;h<a.d.length-1;h++){d=a.c[h]||a.d[h+1];c=c&d;p=p&!d;}a.j=xv(lw,tAb,26,v,12,1);w=xv(mw,Yyb,26,v,12,1);if(!c){a.i=new iab(i,g,w);a.f=a.i;}if(!p){a.e=new mab(i,g,w);a.f=a.e;}}
    function iU(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B;a.d=new HI(Uzb,Uzb);a.c=new HI(Vzb,Vzb);for(m=b.mb();m.G();){k=Wv(m.H(),55);for(t=new Tob(k.b);t.a<t.c.c.length;){s=Wv(Rob(t),9);a.d.a=Qlb(a.d.a,s.i.a-s.e.b);a.d.b=Qlb(a.d.b,s.i.b-s.e.d);a.c.a=Nlb(a.c.a,s.i.a+s.j.a+s.e.c);a.c.b=Nlb(a.c.b,s.i.b+s.j.b+s.e.a);}}h=new cV;for(l=b.mb();l.G();){k=Wv(l.H(),55);d=rU(a,k);vU(h.a,d);d.a=d.a|!Wv(rJ(d.c,(Rib(),fib)),18).V();}a.b=(xR(),B=new HR,B.f=new kR(c),B.b=jR(B.f,h),B);BR((o=a.b,new sI,o));a.e=new FI;a.a=a.b.f.e;for(g=new Tob(h.a);g.a<g.c.c.length;){e=Wv(Rob(g),347);u=CR(a.b,e);TW(e.c,u.a,u.b);for(q=new Tob(e.c.b);q.a<q.c.c.length;){p=Wv(Rob(q),9);if(p.g==(CX(),xX)){r=mU(a,p.i,Wv(rJ(p,(Rib(),hib)),32));vI(BI(p.i),r);}}}for(f=new Tob(h.a);f.a<f.c.c.length;){e=Wv(Rob(f),347);for(j=new Tob(aV(e));j.a<j.c.c.length;){i=Wv(Rob(j),12);A=new kJ(i.a);rn(A,0,MX(i.c));QI(A,MX(i.d));n=null;for(w=WI(A,0);w.b!=w.d.c;){v=Wv(_ub(w),10);if(!n){n=v;continue}if(Xs(n.a,v.a)){a.e.a=Qlb(a.e.a,n.a);a.a.a=Nlb(a.a.a,n.a);}else if(Xs(n.b,v.b)){a.e.b=Qlb(a.e.b,n.b);a.a.b=Nlb(a.a.b,n.b);}n=v;}}}zI(a.e);vI(a.a,a.e);}
    function U1(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F;p=new HU(b.b);u=new HU(b.b);m=new HU(b.b);B=new HU(b.b);q=new HU(b.b);for(A=WI(b,0);A.b!=A.d.c;){v=Wv(_ub(A),7);for(h=new Tob(v.e);h.a<h.c.c.length;){f=Wv(Rob(h),12);if(f.c.f==f.d.f){if(v.g==f.d.g){B.c[B.c.length]=f;continue}else if(v.g==(sN(),$M)&&f.d.g==pN){q.c[q.c.length]=f;continue}}}}for(i=new Tob(q);i.a<i.c.c.length;){f=Wv(Rob(i),12);V1(a,f,c,d,(sN(),ZM));}for(g=new Tob(B);g.a<g.c.c.length;){f=Wv(Rob(g),12);C=new uX(a);sX(C,(CX(),BX));sJ(C,(eM(),TL),(KM(),FM));sJ(C,(Rib(),uib),f);D=new RX;sJ(D,uib,f.d);QX(D,(sN(),rN));PX(D,C);F=new RX;sJ(F,uib,f.c);QX(F,ZM);PX(F,C);sJ(f.c,Bib,C);sJ(f.d,Bib,C);dW(f,null);eW(f,null);c.c[c.c.length]=C;sJ(C,aib,Elb(2));}for(w=WI(b,0);w.b!=w.d.c;){v=Wv(_ub(w),7);j=v.b.c.length>0;r=v.e.c.length>0;j&&r?(m.c[m.c.length]=v,true):j?(p.c[p.c.length]=v,true):r&&(u.c[u.c.length]=v,true);}for(o=new Tob(p);o.a<o.c.c.length;){n=Wv(Rob(o),7);vU(e,T1(a,n,null,c));}for(t=new Tob(u);t.a<t.c.c.length;){s=Wv(Rob(t),7);vU(e,T1(a,null,s,c));}for(l=new Tob(m);l.a<l.c.c.length;){k=Wv(Rob(l),7);vU(e,T1(a,k,k,c));}}
    function ZP(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;u=new II(b.d);i=new GU;for(t=new Tob(b.b);t.a<t.c.c.length;){r=Wv(Rob(t),9);n=Wv(Smb(a.j,r),69);if(n){$P(a,r,n,u);for(w=new Tob(r.f);w.a<w.c.c.length;){v=Wv(Rob(w),7);o=Wv(Smb(a.n,v),69);if(o){$P(a,v,o,QP);WP(o,(eM(),WL),new lv(yc(v.g)));}if(gw(rJ(r,(eM(),VL)))!==gw((UM(),RM))){for(q=new Tob(v.c);q.a<q.c.c.length;){p=Wv(Rob(q),33);m=Wv(Smb(a.f,p),69);$P(a,p,m,QP);}}}if(Wv(rJ(r,(eM(),JL)),86).Y()!=0){for(q=new Tob(r.c);q.a<q.c.c.length;){p=Wv(Rob(q),33);m=Wv(Smb(a.f,p),69);$P(a,p,m,QP);}}for(h=Uh(mX(r));Cm(h);){f=Wv(Dm(h),12);SW(f.d.f,r)||(i.c[i.c.length]=f,true);}}}A=Wv(rJ(b,(Rib(),zib)),9);if(A){for(h=Uh(mX(A));Cm(h);){f=Wv(Dm(h),12);SW(f.d.f,A)&&(i.c[i.c.length]=f,true);}}for(g=new Tob(i);g.a<g.c.c.length;){f=Wv(Rob(g),12);l=Wv(Smb(a.b,f),69);YP(a,f,l,u);for(q=new Tob(f.b);q.a<q.c.c.length;){p=Wv(Rob(q),33);m=Wv(Smb(a.f,p),69);$P(a,p,m,u);}}c=(d=Wv(rJ(b,Xhb),15).a,new HI(b.e.a+b.a.b+b.a.c+2*d,b.e.b+b.a.d+b.a.a+2*d));k=Wv(rJ(b,zib),9);if(k){k.j.a=c.a;k.j.b=c.b;}j=Wv(rJ(b,PP),69);VP(a,j,Jzb,c.a);VP(a,j,Kzb,c.b);for(s=new Tob(b.b);s.a<s.c.c.length;){r=Wv(Rob(s),9);e=Wv(rJ(r,sib),55);!!e&&ZP(a,e);}}
    function Xfb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H;F=new aJ;B=new aJ;r=-1;for(i=new Tob(a);i.a<i.c.c.length;){g=Wv(Rob(i),77);g.i=r--;l=0;v=0;for(f=new Tob(g.j);f.a<f.c.c.length;){d=Wv(Rob(f),117);v+=d.c;}for(e=new Tob(g.d);e.a<e.c.c.length;){d=Wv(Rob(e),117);l+=d.c;}g.e=l;g.k=v;v==0?(TI(B,g,B.c.b,B.c),true):l==0&&(TI(F,g,F.c.b,F.c),true);}H=new Yub((Oh(),a));m=a.c.length;q=m+1;s=m-1;o=new GU;while(H.a.Y()!=0){while(B.b!=0){A=(Bxb(B.b!=0),Wv($I(B,B.a.a),77));H.a.eb(A)!=null;A.i=s--;agb(A,F,B);}while(F.b!=0){C=(Bxb(F.b!=0),Wv($I(F,F.a.a),77));H.a.eb(C)!=null;C.i=q++;agb(C,F,B);}p=eyb;for(j=(t=(new Snb(H.a)).a.bb().mb(),new Ynb(t));j.a.G();){g=(k=Wv(j.a.H(),21),Wv(k.yb(),77));u=g.k-g.e;if(u>=p){if(u>p){o.c=xv(UF,syb,1,0,4,1);p=u;}o.c[o.c.length]=g;}}if(o.c.length!=0){n=Wv(yU(o,vvb(b,o.c.length)),77);H.a.eb(n)!=null;n.i=q++;agb(n,F,B);o.c=xv(UF,syb,1,0,4,1);}}w=a.c.length+1;for(h=new Tob(a);h.a<h.c.c.length;){g=Wv(Rob(h),77);g.i<m&&(g.i+=w);}for(D=new Tob(a);D.a<D.c.c.length;){C=Wv(Rob(D),77);c=new Fnb(C.j,0);while(c.b<c.d.Y()){d=(Bxb(c.b<c.d.Y()),Wv(c.d.sb(c.c=c.b++),117));G=d.b;if(C.i>G.i){vnb(c);BU(G.d,d);if(d.c>0){d.a=G;vU(G.j,d);d.b=C;vU(C.d,d);}}}}}
    function OO(a){var b,c,d;for(d=new Lsb((new Fsb(a.c)).a);htb(d.a);){c=(d.b=itb(d.a),new Psb(d.c,d.b));b=Wv(c.b.b[c.a.e],62);switch(Wv(c.a,67).e){case 0:b.d=0;b.e=-(b.b+a.d);break;case 1:b.d=(a.e.e.j.a-b.c)/2;b.e=-(b.b+a.d);break;case 2:b.d=a.e.e.j.a-b.c;b.e=-(b.b+a.d);break;case 3:b.d=0;b.e=a.e.e.j.b+a.d;break;case 4:b.d=(a.e.e.j.a-b.c)/2;b.e=a.e.e.j.b+a.d;break;case 5:b.d=a.e.e.j.a-b.c;b.e=a.e.e.j.b+a.d;break;case 6:b.d=-(b.c+a.d);b.e=0;break;case 7:b.d=-(b.c+a.d);b.e=(a.e.e.j.b-b.b)/2;break;case 8:b.d=-(b.c+a.d);b.e=a.e.e.j.b-b.b;break;case 9:b.d=a.e.e.j.a+a.d;b.e=0;break;case 10:b.d=a.e.e.j.a+a.d;b.e=(a.e.e.j.b-b.b)/2;break;case 11:b.d=a.e.e.j.a+a.d;b.e=a.e.e.j.b-b.b;break;case 12:b.d=a.q.b+a.d;b.e=a.q.d+a.d;break;case 13:b.d=(a.e.e.j.a-b.c)/2;b.e=a.q.d+a.d;break;case 14:b.d=a.e.e.j.a-a.q.c-b.c-a.d;b.e=a.q.d+a.d;break;case 15:b.d=a.q.b+a.d;b.e=(a.e.e.j.b-b.b)/2;break;case 16:b.d=(a.e.e.j.a-b.c)/2;b.e=(a.e.e.j.b-b.b)/2;break;case 17:b.d=a.e.e.j.a-a.q.c-b.c-a.d;b.e=(a.e.e.j.b-b.b)/2;break;case 18:b.d=a.q.b+a.d;b.e=a.e.e.j.b-a.q.a-b.b-a.d;break;case 19:b.d=(a.e.e.j.a-b.c)/2;b.e=a.e.e.j.b-a.q.a-b.b-a.d;break;case 20:b.d=a.e.e.j.a-a.q.c-b.c-a.d;b.e=a.e.e.j.b-a.q.a-b.b-a.d;}}}
    function ddb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I;F=new aJ;B=new aJ;o=-1;for(s=new Tob(a);s.a<s.c.c.length;){q=Wv(Rob(s),80);q.d=o--;i=0;v=0;for(f=new Tob(q.e);f.a<f.c.c.length;){d=Wv(Rob(f),118);v+=d.c;}for(e=new Tob(q.b);e.a<e.c.c.length;){d=Wv(Rob(e),118);i+=d.c;}q.c=i;q.f=v;v==0?(TI(B,q,B.c.b,B.c),true):i==0&&(TI(F,q,F.c.b,F.c),true);}H=(I=new Vwb,ml(I,a),I);j=a.c.length;p=j-1;n=j+1;l=new GU;while(H.a.c!=0){while(B.b!=0){A=(Bxb(B.b!=0),Wv($I(B,B.a.a),80));cwb(H.a,A)!=null;A.d=p--;jdb(A,F,B);}while(F.b!=0){C=(Bxb(F.b!=0),Wv($I(F,F.a.a),80));cwb(H.a,C)!=null;C.d=n++;jdb(C,F,B);}m=eyb;for(t=(h=new rwb((new wwb((new Gob(H.a)).a)).b),new Mob(h));Bnb(t.a.a);){q=(g=pwb(t.a),Wv(g.yb(),80));u=q.f-q.c;if(u>=m){if(u>m){l.c=xv(UF,syb,1,0,4,1);m=u;}l.c[l.c.length]=q;}}if(l.c.length!=0){k=Wv(yU(l,vvb(b,l.c.length)),80);cwb(H.a,k)!=null;k.d=n++;jdb(k,F,B);l.c=xv(UF,syb,1,0,4,1);}}w=a.c.length+1;for(r=new Tob(a);r.a<r.c.c.length;){q=Wv(Rob(r),80);q.d<j&&(q.d+=w);}for(D=new Tob(a);D.a<D.c.c.length;){C=Wv(Rob(D),80);c=new Fnb(C.e,0);while(c.b<c.d.Y()){d=(Bxb(c.b<c.d.Y()),Wv(c.d.sb(c.c=c.b++),118));G=d.b;if(C.d>G.d){vnb(c);BU(G.b,d);if(d.c>0){d.a=G;vU(G.e,d);d.b=C;vU(C.b,d);}}}}}
    function e0(a){switch(a.e){case 14:return new wY;case 37:return new SY;case 8:return new YY;case 30:return new cZ;case 38:return new qZ;case 3:return new tZ;case 47:case 1:return new SZ((XZ(),WZ));case 4:return new wZ;case 49:return new AZ;case 23:return new $5;case 13:return new d$;case 34:return new j$;case 40:return new w$;case 35:return new F$;case 44:return new o4;case 28:return new I$;case 39:return new L$;case 27:return new N$;case 6:return new R$;case 31:return new m0;case 9:return new q0;case 43:return new w0;case 17:return new A0;case 18:return new G0;case 29:return new S0;case 11:return new q1;case 12:return new Z0;case 36:return new _0;case 46:case 0:return new SZ((XZ(),VZ));case 41:return new b1;case 15:return new e1;case 33:return new k1;case 42:return new R1;case 22:return new X1;case 19:return new k0;case 10:return new _1;case 7:return new c2;case 24:return new f2;case 21:return new h2;case 16:return new n2;case 45:return new q2;case 26:return new x2;case 20:return new A2;case 25:return new H2;case 5:return new l3;case 32:return new u3;case 48:case 2:return new SZ((XZ(),UZ));default:throw new slb('No implementation is available for the layout processor '+(a.d!=null?a.d:''+a.e));}}
    function PO(a){var b,c,d,e,f,g,h;c=a.e.e.j;a.b?(b=Wv(oW(a.e,(eM(),jL)),65)):(b=new EP(a.k,a.k,a.k,a.k));e=c.a;(a.b||a.g[1]!=(zM(),xM))&&(e-=b.b+b.c);f=c.a;(a.b||a.g[3]!=(zM(),xM))&&(f-=b.b+b.c);g=c.b;(a.b||a.g[4]!=(zM(),xM))&&(g-=b.d+b.a);d=c.b;(a.b||a.g[2]!=(zM(),xM))&&(d-=b.d+b.a);if(aP(a,(sN(),$M))==(zM(),xM)){a.j[1]=(e-dP(a,$M))/bP(a,$M);a.f=a.b?b.b+(eP(a,$M)==1?a.j[1]:0):a.j[1];}else {a.j[1]=a.k;h=dP(a,$M)+a.j[1]*(eP(a,$M)-1);switch(aP(a,$M).e){case 2:a.f=b.b;break;case 3:a.f=b.b+(e-h)/2;break;case 4:a.f=c.a-h-b.c;}}if(aP(a,pN)==xM){a.j[3]=(f-dP(a,pN))/bP(a,pN);a.r=c.a-(a.b?b.c+(eP(a,pN)==1?a.j[3]:0):a.j[3]);}else {a.j[3]=a.k;h=dP(a,pN)+a.j[3]*(eP(a,pN)-1);switch(aP(a,pN).e){case 2:a.r=h+b.b;break;case 3:a.r=c.a-(f-h)/2-b.c;break;case 4:a.r=c.a-b.c;}}if(aP(a,rN)==xM){a.j[4]=(g-dP(a,rN))/bP(a,rN);a.s=c.b-(a.b?b.a+(eP(a,rN)==1?a.j[4]:0):a.j[4]);}else {a.j[4]=a.k;h=dP(a,rN)+a.j[4]*(eP(a,rN)-1);switch(aP(a,rN).e){case 2:a.s=h+b.d;break;case 3:a.s=c.b-(g-h)/2-b.a;break;case 4:a.s=c.b-b.a;}}if(aP(a,ZM)==xM){a.j[2]=(d-dP(a,ZM))/bP(a,ZM);a.a=a.b?b.d+(eP(a,ZM)==1?a.j[2]:0):a.j[2];}else {a.j[2]=a.k;h=dP(a,ZM)+a.j[2]*(eP(a,ZM)-1);switch(aP(a,ZM).e){case 2:a.a=b.d;break;case 3:a.a=b.d+(d-h)/2;break;case 4:a.a=c.b-h-b.a;}}}
    function hab(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I;G=0;g=0;l=b[0].d;B=c[0].d;for(o=0,q=c.length;o<q;++o){m=c[o];if(LM(Wv(rJ(m,(eM(),TL)),28))){s=0;for(v=new Tob(m.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);if(u.g==(sN(),$M)){for(f=new Tob(u.b);f.a<f.c.c.length;){e=Wv(Rob(f),12);if(e.c.f.d==l){++s;break}}}else {break}}t=0;A=new Fnb(m.f,m.f.c.length);while(A.b>0){u=(Bxb(A.b>0),Wv(A.a.sb(A.c=--A.b),7));w=0;for(f=new Tob(u.b);f.a<f.c.c.length;){e=Wv(Rob(f),12);e.c.f.d==l&&++w;}if(w>0){if(u.g==(sN(),$M)){a.a[u.k]=G;++G;}else {a.a[u.k]=G+s+t;++t;}g+=w;}}G+=t;}else {r=0;for(v=new Tob(m.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);for(f=new Tob(u.b);f.a<f.c.c.length;){e=Wv(Rob(f),12);e.c.f.d==l&&++r;}a.a[u.k]=G;}if(r>0){++G;g+=r;}}}C=xv(mw,Yyb,26,g,12,1);i=0;for(n=0,p=b.length;n<p;++n){m=b[n];if(LM(Wv(rJ(m,(eM(),TL)),28))){for(v=new Tob(m.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);D=i;for(f=new Tob(u.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);F=e.d;F.f.d==B&&kab(C,D,i++,a.a[F.k]);}}}else {D=i;for(v=new Tob(m.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);for(f=new Tob(u.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);F=e.d;F.f.d==B&&kab(C,D,i++,a.a[F.k]);}}}}h=1;while(h<G){h*=2;}I=2*h-1;h-=1;H=xv(mw,Yyb,26,I,12,1);d=0;for(k=0;k<g;k++){j=C[k]+h;++H[j];while(j>0){j%2>0&&(d+=H[j+1]);j=(j-1)/2|0;++H[j];}}return d}
    function BV(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J;nI(b,'Compound graph postprocessor',1);c=Ckb(Ixb(Xv(rJ(a,(Mjb(),gjb)))));h=Wv(rJ(a,(Rib(),bib)),144);l=new vtb;for(w=h.W().mb();w.G();){v=Wv(w.H(),12);g=new IU(h.U(v));Gpb(g,new $V(a));F=VV((Cxb(0,g.c.length),Wv(g.c[0],114)));H=WV(Wv(yU(g,g.c.length-1),114));_I(v.a);C=F.f;SW(H.f,C)?(B=Wv(rJ(C,sib),55)):(B=hX(C));o=Wv(rJ(v,(eM(),CL)),44);if(ol(g,zV)){if(!o){o=new jJ;sJ(v,CL,o);}else {_I(o);}}else !!o&&sJ(v,CL,null);q=null;for(f=new Tob(g);f.a<f.c.c.length;){e=Wv(Rob(f),114);u=new FI;MW(u,e.a,B);r=e.b;d=new jJ;gJ(d,0,r.a);hJ(d,u);D=new II(MX(r.c));G=new II(MX(r.d));D.a+=u.a;D.b+=u.b;G.a+=u.a;G.b+=u.b;if(q){d.b==0?(t=G):(t=(Bxb(d.b!=0),Wv(d.a.a.c,10)));I=Jlb(q.a-t.a)>dAb;J=Jlb(q.b-t.b)>dAb;(!c&&I&&J||c&&(I||J))&&QI(v.a,D);}Ue(v.a,d);d.b==0?(q=D):(q=(Bxb(d.b!=0),Wv(d.c.b.c,10)));s=Wv(rJ(r,CL),44);if(s){n=new jJ;gJ(n,0,s);hJ(n,u);Ue(o,n);}if(WV(e)==H){if(hX(H.f)!=e.a){u=new FI;MW(u,hX(H.f),B);}sJ(v,Pib,u);}p=new Fnb(r.b,0);while(p.b<p.d.Y()){i=(Bxb(p.b<p.d.Y()),Wv(p.d.sb(p.c=p.b++),33));if(gw(rJ(i,xib))!==gw(v)){continue}MW(i.i,hX(r.c.f),B);vnb(p);vU(v.b,i);}l.a.db(r,l);}dW(v,F);eW(v,H);}for(k=(A=(new Snb(l.a)).a.bb().mb(),new Ynb(A));k.a.G();){j=(m=Wv(k.a.H(),21),Wv(m.yb(),12));dW(j,null);eW(j,null);}pI(b);}
    function c$(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I;C=Wv(rJ(a,(eM(),TL)),28);if(!(C!=(KM(),IM)&&C!=JM)){return}p=a.c;o=p.c.length;l=new HU((Mh(o+2,Uyb),$s(PH(PH(5,o+2),(o+2)/10|0))));q=new HU((Mh(o+2,Uyb),$s(PH(PH(5,o+2),(o+2)/10|0))));vU(l,new ntb);vU(l,new ntb);vU(q,new GU);vU(q,new GU);A=new vtb;for(b=0;b<o;b++){c=(Cxb(b,p.c.length),Wv(p.c[b],16));D=(Cxb(b,l.c.length),Wv(l.c[b],57));r=(mp(),new ntb);l.c[l.c.length]=r;G=(Cxb(b,q.c.length),Wv(q.c[b],20));t=new GU;q.c[q.c.length]=t;for(e=new Tob(c.a);e.a<e.c.c.length;){d=Wv(Rob(e),9);for(j=Uh(iX(d));Cm(j);){h=Wv(Dm(j),12);H=h.c.f;if(!_Z(H)){continue}A.a.db(H,A);F=Wv(D.cb(rJ(H,(Rib(),uib))),9);if(!F){F=$Z(a,H);D.db(rJ(H,uib),F);G.ib(F);}dW(h,Wv(yU(F.f,1),7));}for(i=Uh(mX(d));Cm(i);){h=Wv(Dm(i),12);I=h.d.f;if(!_Z(I)){continue}A.a.db(I,A);s=Wv(Smb(r,rJ(I,(Rib(),uib))),9);if(!s){s=$Z(a,I);Umb(r,rJ(I,uib),s);t.c[t.c.length]=s;}eW(h,Wv(yU(s.f,0),7));}}}for(m=0;m<q.c.length;m++){u=(Cxb(m,q.c.length),Wv(q.c[m],20));if(u.V()){continue}if(m==0){n=new sY(a);Fxb(0,p.c.length);fxb(p.c,0,n);}else if(m==l.c.length-1){n=new sY(a);p.c[p.c.length]=n;}else {n=(Cxb(m-1,p.c.length),Wv(p.c[m-1],16));}for(g=u.mb();g.G();){f=Wv(g.H(),9);rX(f,n);}}for(w=(B=(new Snb(A.a)).a.bb().mb(),new Ynb(B));w.a.G();){v=(k=Wv(w.a.H(),21),Wv(k.yb(),9));rX(v,null);}}
    function Pab(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K;I=new GU;for(o=new Tob(b.c);o.a<o.c.c.length;){m=Wv(Rob(o),16);for(v=new Tob(m.a);v.a<v.c.c.length;){u=Wv(Rob(v),9);u.k=-1;l=eyb;B=eyb;for(D=new Tob(u.f);D.a<D.c.c.length;){C=Wv(Rob(D),7);for(e=new Tob(C.b);e.a<e.c.c.length;){c=Wv(Rob(e),12);F=Wv(rJ(c,(Rib(),Eib)),24).a;l=l>F?l:F;}for(d=new Tob(C.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);F=Wv(rJ(c,(Rib(),Eib)),24).a;B=B>F?B:F;}}sJ(u,Fab,Elb(l));sJ(u,Gab,Elb(B));}}r=0;for(n=new Tob(b.c);n.a<n.c.c.length;){m=Wv(Rob(n),16);for(v=new Tob(m.a);v.a<v.c.c.length;){u=Wv(Rob(v),9);if(u.k<0){H=new Wab;H.b=r++;Mab(a,u,H);I.c[I.c.length]=H;}}}A=Do(I.c.length);k=Do(I.c.length);for(g=0;g<I.c.length;g++){vU(A,new GU);vU(k,Elb(0));}Kab(b,I,A,k);J=Wv(FU(I,xv(wE,NAb,111,I.c.length,0,1)),625);w=Wv(FU(A,xv(sH,{3:1,5:1,6:1,672:1},20,A.c.length,0,1)),672);j=xv(mw,Yyb,26,k.c.length,12,1);for(h=0;h<j.length;h++){j[h]=(Cxb(h,k.c.length),Wv(k.c[h],24)).a;}s=0;t=new GU;for(i=0;i<J.length;i++){j[i]==0&&vU(t,J[i]);}q=xv(mw,Yyb,26,J.length,12,1);while(t.c.length!=0){H=Wv(AU(t,0),111);q[H.b]=s++;while(!w[H.b].V()){K=Wv(w[H.b].vb(0),111);--j[K.b];j[K.b]==0&&(t.c[t.c.length]=K,true);}}a.a=xv(wE,NAb,111,J.length,0,1);for(f=0;f<J.length;f++){p=J[f];G=q[f];a.a[G]=p;p.b=G;for(v=new Tob(p.f);v.a<v.c.c.length;){u=Wv(Rob(v),9);u.k=G;}}return a.a}
    function JP(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C;nI(b,'Fixed Layout',1);i=Wv(rJ(a,(eM(),uL)),122);p=0;q=0;for(t=new Tob(a.b);t.a<t.c.c.length;){r=Wv(Rob(t),9);B=Wv(rJ(r,YL),10);if(B){r.i.a=B.a;r.i.b=B.b;if(Wv(rJ(r,aM),86).kb((DN(),zN))){C=Wv(rJ(r,IL),15).a;j=Wv(rJ(r,HL),15).a;C>0&&j>0&&WW(r,new HI(C,j),true);}}p=Nlb(p,r.i.a+r.j.a);q=Nlb(q,r.i.b+r.j.b);for(n=new Tob(r.c);n.a<n.c.c.length;){l=Wv(Rob(n),33);B=Wv(rJ(l,YL),10);if(B){l.i.a=B.a;l.i.b=B.b;}p=Nlb(p,r.i.a+l.i.a+l.j.a);q=Nlb(q,r.i.b+l.i.b+l.j.b);}for(v=new Tob(r.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);B=Wv(rJ(u,YL),10);if(B){u.i.a=B.a;u.i.b=B.b;}w=r.i.a+u.i.a;A=r.i.b+u.i.b;p=Nlb(p,w+u.j.a);q=Nlb(q,A+u.j.b);for(m=new Tob(u.c);m.a<m.c.c.length;){l=Wv(Rob(m),33);B=Wv(rJ(l,YL),10);if(B){l.i.a=B.a;l.i.b=B.b;}p=Nlb(p,w+l.i.a+l.j.a);q=Nlb(q,A+l.i.b+l.j.b);}}for(h=Uh(mX(r));Cm(h);){f=Wv(Dm(h),12);o=KP(f);p=Nlb(p,o.a);q=Nlb(q,o.b);}for(g=Uh(iX(r));Cm(g);){f=Wv(Dm(g),12);if(gw(rJ(f.c.f,(Rib(),sib)))!==gw(a)){o=KP(f);p=Nlb(p,o.a);q=Nlb(q,o.b);}}}if(i==(NK(),JK)){for(s=new Tob(a.b);s.a<s.c.c.length;){r=Wv(Rob(s),9);for(g=Uh(mX(r));Cm(g);){f=Wv(Dm(g),12);k=LP(f);k.b==0?sJ(f,CL,null):sJ(f,CL,k);}}}a.e.a=p;a.e.b=q;sJ(a,aM,(DN(),d=Wv(Hkb(Lz),11),new atb(d,Wv(exb(d,d.length),11),0)));e=Wv(rJ(a,(Rib(),zib)),9);!!e&&sJ(e,aM,(c=Wv(Hkb(Lz),11),new atb(c,Wv(exb(c,c.length),11),0)));pI(b);}
    function Y8(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G;if(!LM(Wv(rJ(b,(eM(),TL)),28))){if(b.f.c.length>1){A=xv(LF,Txb,15,a.a.length,0,1);j=Do(a.a.length);p=0;o=0;c=2*b.d.a.c.length+1;H:for(w=new Tob(b.f);w.a<w.c.c.length;){v=Wv(Rob(w),7);r=v.g==(sN(),$M)||v.g==pN;G=0;if(r){B=Wv(rJ(v,(Rib(),Bib)),9);if(!B){continue}m=false;u=false;for(D=new Tob(B.f);D.a<D.c.c.length;){C=Wv(Rob(D),7);gw(rJ(C,uib))===gw(v)&&(C.e.c.length==0?C.b.c.length==0||(m=true):(u=true));}m&&!u?(G=v.g==$M?-(!B.d?-1:zU(B.d.a,B,0)):c-(!B.d?-1:zU(B.d.a,B,0))):u&&!m?(G=(!B.d?-1:zU(B.d.a,B,0))+1):m&&u&&(G=v.g==$M?0:c/2);}else {for(t=new Tob(v.e);t.a<t.c.c.length;){s=Wv(Rob(t),12);e=s.d;if(e.f.d==b.d){j.c[j.c.length]=v;continue H}else {G+=a.a[e.k];}}for(l=new Tob(v.b);l.a<l.c.c.length;){k=Wv(Rob(l),12);e=k.c;if(e.f.d==b.d){j.c[j.c.length]=v;continue H}else {G-=a.a[e.k];}}}if(v.b.c.length+v.e.c.length>0){A[v.k]=new llb(G/(v.b.c.length+v.e.c.length));p=Rlb(p,A[v.k].a);o=Olb(o,A[v.k].a);}else r&&(A[v.k]=new llb(G));}q=(!b.d?-1:zU(b.d.a,b,0))+1;n=b.d.a.c.length+1;for(i=new Tob(j);i.a<i.c.c.length;){h=Wv(Rob(i),7);G=0;g=0;for(f=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[new fY(h),new lY(h)]))))));Cm(f);){e=Wv(Dm(f),7);if(e.f.d==b.d){G+=jX(e.f)+1;++g;}}d=G/g;F=h.g;F==(sN(),ZM)?d<q?(A[h.k]=new llb(p-d)):(A[h.k]=new llb(o+(n-d))):F==rN&&(d<q?(A[h.k]=new llb(o+d)):(A[h.k]=new llb(p-(n-d))));}Gpb(b.f,new a9(A));}sJ(b,TL,(KM(),EM));}}
    function O4(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C;B=new GU;a.a.b.c=xv(UF,syb,1,0,4,1);u=(mp(),new ntb);for(r=new Tob(a.d.c);r.a<r.c.c.length;){p=Wv(Rob(r),16);for(t=new Tob(p.a);t.a<t.c.c.length;){s=Wv(Rob(t),9);if(Ckb(Ixb(Xv(rJ(s,(eM(),qL)))))){if(!sl(gX(s))){h=Wv(ql(gX(s)),12);v=h.c.f;v==s&&(v=h.d.f);w=new RJ(v,EI(xI(s.i),v.i));Umb(a.b,s,w);continue}}f=new Q3(s,a.d);vU(a.a.b,f);Ltb(u.d,s,f);}}for(q=new Tob(a.d.c);q.a<q.c.c.length;){p=Wv(Rob(q),16);for(t=new Tob(p.a);t.a<t.c.c.length;){s=Wv(Rob(t),9);f=Wv(re(Ktb(u.d,s)),25);for(k=Uh(mX(s));Cm(k);){i=Wv(Dm(k),12);d=WI(i.a,0);l=true;o=null;if(d.b!=d.d.c){b=Wv(_ub(d),10);if(i.c.g==(sN(),$M)){C=new X4(b,new HI(b.a,f.j.e),f,i);C.c=true;B.c[B.c.length]=C;}if(i.c.g==pN){C=new X4(b,new HI(b.a,f.j.e+f.j.b),f,i);C.d=true;B.c[B.c.length]=C;}while(d.b!=d.d.c){c=Wv(_ub(d),10);if(!RR(b.b,c.b)){o=new X4(b,c,null,i);B.c[B.c.length]=o;if(l){l=false;if(c.b<f.j.e){o.c=true;}else if(c.b>f.j.e+f.j.b){o.d=true;}else {o.d=true;o.c=true;}}}d.b!=d.d.c&&(b=c);}if(o){g=Wv(Smb(u,i.d.f),25);if(b.b<g.j.e){o.c=true;}else if(b.b>g.j.e+g.j.b){o.d=true;}else {o.d=true;o.c=true;}}}}for(j=Uh(iX(s));Cm(j);){i=Wv(Dm(j),12);if(i.a.b!=0){b=Wv(VI(i.a),10);if(i.d.g==(sN(),$M)){C=new X4(b,new HI(b.a,f.j.e),f,i);C.c=true;B.c[B.c.length]=C;}if(i.d.g==pN){C=new X4(b,new HI(b.a,f.j.e+f.j.b),f,i);C.d=true;B.c[B.c.length]=C;}}}}}if(B.c.length!=0){ypb();Gpb(B,null);n=(Cxb(0,B.c.length),Wv(B.c[0],142));e=new L3(n,a.d);for(m=1;m<B.c.length;m++){A=(Cxb(m,B.c.length),Wv(B.c[m],142));if(RR(e.j.d,A.j)&&!(TR(e.j.e+e.j.b,A.k)||TR(A.n,e.j.e))){K3(e,A);}else {vU(a.a.b,e);e=new L3(A,a.d);}}vU(a.a.b,e);}B.c=xv(UF,syb,1,0,4,1);N4(a);}
    function eZ(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M;h=Wv(yU(a.d.c.c,d),16);K=new vtb;o=new vtb;for(n=0;n<h.a.c.length;++n){s=Wv(yU(h.a,n),9);n<c?(D=K.a.db(s,K),D==null):n>c&&(C=o.a.db(s,o),C==null);}L=new vtb;p=new vtb;for(u=(G=(new Snb(K.a)).a.bb().mb(),new Ynb(G));u.a.G();){s=(l=Wv(u.a.H(),21),Wv(l.yb(),9));g=b==1?mX(s):iX(s);for(j=(Il(),new Im(Dl(ul(g.a,new yl))));Cm(j);){i=Wv(Dm(j),12);rY(s.d)!=rY(i.d.f.d)&&stb(L,i.d.f);}}for(v=(H=(new Snb(o.a)).a.bb().mb(),new Ynb(H));v.a.G();){s=(l=Wv(v.a.H(),21),Wv(l.yb(),9));g=b==1?mX(s):iX(s);for(j=(Il(),new Im(Dl(ul(g.a,new yl))));Cm(j);){i=Wv(Dm(j),12);rY(s.d)!=rY(i.d.f.d)&&stb(p,i.d.f);}}if(aZ){Fmb();}B=Wv(yU(a.d.c.c,d+(b==1?1:-1)),16);q=eyb;r=$xb;for(m=0;m<B.a.c.length;m++){s=Wv(yU(B.a,m),9);L.a.R(s)?(q=q>m?q:m):p.a.R(s)&&(r=r<m?r:m);}if(q<r){for(w=(I=(new Snb(L.a)).a.bb().mb(),new Ynb(I));w.a.G();){s=(l=Wv(w.a.H(),21),Wv(l.yb(),9));for(k=Uh(mX(s));Cm(k);){i=Wv(Dm(k),12);if(rY(s.d)==rY(i.d.f.d)){return null}}for(j=Uh(iX(s));Cm(j);){i=Wv(Dm(j),12);if(rY(s.d)==rY(i.c.f.d)){return null}}}for(A=(F=(new Snb(p.a)).a.bb().mb(),new Ynb(F));A.a.G();){s=(l=Wv(A.a.H(),21),Wv(l.yb(),9));for(k=Uh(mX(s));Cm(k);){i=Wv(Dm(k),12);if(rY(s.d)==rY(i.d.f.d)){return null}}for(j=Uh(iX(s));Cm(j);){i=Wv(Dm(j),12);if(rY(s.d)==rY(i.c.f.d)){return null}}}K.a.Y()==0?(M=0):o.a.Y()==0?(M=B.a.c.length):(M=q+1);for(t=new Tob(h.a);t.a<t.c.c.length;){s=Wv(Rob(t),9);if(s.g==(CX(),BX)){return null}}if(f==1){return Co(Bv(tv(PF,1),Txb,24,0,[Elb(M)]))}else if(b==1&&d==e-2||b==0&&d==1){return Co(Bv(tv(PF,1),Txb,24,0,[Elb(M)]))}else {J=eZ(a,b,M,d+(b==1?1:-1),e,f-1);!!J&&b==1&&J.rb(0,Elb(M));return J}}return null}
    function aQ(b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;SP(c);o=(eM(),KL).b;if(o in c.a&&Pu(c,o).ic().a){return}j=Pu(c,'source');k=Pu(c,'sourcePort');l=Pu(c,'target');m=Pu(c,'targetPort');if(!j){throw new GQ("Edges must contain a 'source' property.",null,c)}else if(!j.lc()){throw new GQ("Invalid format of an edge's 'source' property. It must be a string.",j,c)}if(!l){throw new GQ("Edges must contain a 'target' property.",null,c)}else if(!l.lc()){throw new GQ("Invalid format of an edge's 'target' property. It must be a string.",l,c)}r=null;t=null;try{q=Wv(Tmb(b.i,j.lc().a),9);!!k&&!!k.lc()&&(r=Wv(Tmb(b.k,k.lc().a),7));s=Wv(Tmb(b.i,l.lc().a),9);!!m&&!!m.lc()&&(t=Wv(Tmb(b.k,m.lc().a),7));}catch(a){a=OH(a);if(aw(a,76)){throw new FQ("An edge's 'source', 'target', 'sourcePort', and 'targetPort' properties have to be strings.",c)}else throw NH(a)}if(!Ckb(Ixb(b.g))){if(!q||!s){return}else if(hX(q)!=hX(s)){return}}if(!q||!s){throw new FQ("An edge's source or target node could not be resolved.",c)}p=hX(q);e=new hW;sJ(e,(Rib(),uib),c);h=Wv(Pu(c,'id'),97);Vmb(b.a,h.a,e);Umb(b.b,e,c);hQ(c,e);dQ(b,c,e,p);f=Wv(rJ(p,jib),18);q==s&&f.ib((ohb(),nhb));if(!r){r=OW(q,new FI,(djb(),bjb),p);}else if(r.f!=q){throw new EQ('Inconsistent source port reference found.')}if(!t){t=OW(s,new FI,(djb(),ajb),p);}else if(t.f!=s){throw new EQ('Inconsistent target port reference found.')}dW(e,r);eW(e,t);(tl(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[r.b,r.e]))))))>1||tl(Sh(new gr(Ti(Bv(tv(UF,1),syb,1,4,[t.b,t.e])))))>1)&&f.ib((ohb(),ihb));if(gw(rJ(p,(Mjb(),kjb)))===gw((p9(),n9))&&!(Hzb in c.a)){d=new jJ;try{i=Pu(c,Hzb).hc();for(g=0;g<i.a.length;++g){n=gu(i,g).kc();u=new HI(Pu(n,'x').jc().a,Pu(n,'y').jc().a);TI(d,u,d.c.b,d.c);}sJ(e,vib,d);}catch(a){a=OH(a);if(aw(a,54)){throw new FQ("Invalid format of an edges 'bendPoints' property.",c)}else throw NH(a)}}sJ(e,CL,null);}
    function d0(){d0=iI;L_=new f0('LEFT_DIR_PREPROCESSOR',0);o_=new f0('DOWN_DIR_PREPROCESSOR',1);c0=new f0('UP_DIR_PREPROCESSOR',2);m_=new f0('COMMENT_PREPROCESSOR',3);p_=new f0('EDGE_AND_LAYER_CONSTRAINT_EDGE_REVERSER',4);__=new f0('SPLINE_SELF_LOOP_PREPROCESSOR',5);z_=new f0('INTERACTIVE_EXTERNAL_PORT_POSITIONER',6);T_=new f0('PARTITION_PREPROCESSOR',7);j_=new f0('BIG_NODES_PREPROCESSOR',8);D_=new f0('LABEL_DUMMY_INSERTER',9);S_=new f0('PARTITION_POSTPROCESSOR',10);P_=new f0('NODE_PROMOTION',11);I_=new f0('LAYER_CONSTRAINT_PROCESSOR',12);s_=new f0('HIERARCHICAL_PORT_CONSTRAINT_PROCESSOR',13);h_=new f0('BIG_NODES_INTERMEDIATEPROCESSOR',14);N_=new f0('LONG_EDGE_SPLITTER',15);W_=new f0('PORT_SIDE_PROCESSOR',16);F_=new f0('LABEL_DUMMY_SWITCHER',17);G_=new f0('LABEL_MANAGEMENT_PROCESSOR',18);A_=new f0('INVERTED_PORT_PROCESSOR',19);Z_=new f0('SELF_LOOP_PROCESSOR',20);V_=new f0('PORT_LIST_SORTER',21);R_=new f0('NORTH_SOUTH_PORT_PREPROCESSOR',22);r_=new f0('GREEDY_SWITCH',23);U_=new f0('PORT_DISTRIBUTER',24);$_=new f0('SPLINE_SELF_LOOP_POSITIONER',25);Y_=new f0('SAUSAGE_COMPACTION',26);B_=new f0('IN_LAYER_CONSTRAINT_PROCESSOR',27);x_=new f0('HYPEREDGE_DUMMY_MERGER',28);H_=new f0('LABEL_SIDE_SELECTOR',29);k_=new f0('BIG_NODES_SPLITTER',30);C_=new f0('LABEL_AND_NODE_SIZE_PROCESSOR',31);a0=new f0('SPLINE_SELF_LOOP_ROUTER',32);O_=new f0('NODE_MARGIN_CALCULATOR',33);t_=new f0('HIERARCHICAL_PORT_DUMMY_SIZE_PROCESSOR',34);v_=new f0('HIERARCHICAL_PORT_POSITION_PROCESSOR',35);J_=new f0('LAYER_SIZE_AND_GRAPH_HEIGHT_CALCULATOR',36);i_=new f0('BIG_NODES_POSTPROCESSOR',37);l_=new f0('COMMENT_POSTPROCESSOR',38);y_=new f0('HYPERNODE_PROCESSOR',39);u_=new f0('HIERARCHICAL_PORT_ORTHOGONAL_EDGE_ROUTER',40);M_=new f0('LONG_EDGE_JOINER',41);Q_=new f0('NORTH_SOUTH_PORT_POSTPROCESSOR',42);E_=new f0('LABEL_DUMMY_REMOVER',43);w_=new f0('HORIZONTAL_COMPACTOR',44);X_=new f0('REVERSED_EDGE_RESTORER',45);K_=new f0('LEFT_DIR_POSTPROCESSOR',46);n_=new f0('DOWN_DIR_POSTPROCESSOR',47);b0=new f0('UP_DIR_POSTPROCESSOR',48);q_=new f0('END_LABEL_PROCESSOR',49);}
    function Rib(){Rib=iI;var a,b;uib=new CJ('origin');_hb=new CJ('processingConfiguration');Fib=new CJ('processors');$hb=new DJ('compoundNode',(xkb(),xkb(),vkb));lib=new DJ('insideConnections',(vkb));sib=new CJ('nestedLGraph');zib=new CJ('parentLNode');vib=new CJ('originalBendpoints');wib=new CJ('originalDummyNodePosition');xib=new CJ('originalLabelEdge');Hib=new CJ('representedLabels');pib=new DJ('labelSide',(kP(),jP));Iib=new DJ('reversed',(vkb));Gib=new CJ('random');qib=new DJ('longEdgeSource',null);rib=new DJ('longEdgeTarget',null);dib=new DJ('edgeConstraint',(Hgb(),Fgb));nib=new CJ('inLayerLayoutUnit');mib=new DJ('inLayerConstraint',(Hhb(),Fhb));oib=new DJ('inLayerSuccessorConstraint',new GU);Bib=new CJ('portDummy');aib=new DJ('crossingHint',Elb(0));jib=new DJ('graphProperties',(b=Wv(Hkb(mF),11),new atb(b,Wv(exb(b,b.length),11),0)));hib=new DJ('externalPortSide',(sN(),qN));iib=new DJ('externalPortSize',new FI);gib=new CJ('externalPortReplacedDummy');fib=new DJ('externalPortConnections',(a=Wv(Hkb(Kz),11),new atb(a,Wv(exb(a,a.length),11),0)));Cib=new DJ(yzb,0);Shb=new CJ('barycenterAssociates');Qib=new CJ('TopSideComments');Yhb=new CJ('BottomSideComments');Zhb=new CJ('CommentConnectionPort');kib=new DJ('inputCollect',(vkb));yib=new DJ('outputCollect',(vkb));cib=new DJ('cyclic',(vkb));Whb=new DJ('bigNodeOriginalSize',new llb(0));Vhb=new DJ('bigNodeInitial',(vkb));Thb=new DJ('de.cau.cs.kieler.klay.layered.bigNodeLabels',new GU);Uhb=new DJ('de.cau.cs.kieler.klay.layered.postProcess',null);bib=new CJ('crossHierarchyMap');Pib=new CJ('targetOffset');Lib=new DJ('splineLabelSize',new FI);Mib=new DJ('splineLoopSide',(Ieb(),Feb));Nib=new DJ('splineSelfLoopComponents',new GU);Oib=new DJ('splineSelfLoopMargins',new DP);Kib=new CJ('spacings');Aib=new DJ('partitionConstraint',(vkb));tib=new AJ((eM(),LL),new llb(0));Jib=new BJ(cM,new llb(20),new llb(1));Dib=new BJ(XL,new llb(10),new llb(1));Xhb=new BJ(pL,new llb(12),new llb(0));Eib=new AJ(ZL,Elb(0));Rhb=new BJ(nL,new llb(cAb),new llb(0));eib=new AJ(uL,(NK(),JK));}
    function Mjb(){Mjb=iI;Bjb=new DJ('de.cau.cs.kieler.klay.layered.nodePromotion',(I1(),G1));Cjb=new FJ('de.cau.cs.kieler.klay.layered.nodePromotionBoundary',Elb(0),Elb(0),Elb(100));Hjb=new DJ(vzb,Elb(1));Ejb=new EJ('de.cau.cs.kieler.klay.layered.inLayerSpacingFactor',new llb(1),new llb(0));qjb=new DJ('de.cau.cs.kieler.klay.layered.edgeSpacingFactor',new llb(0.5));pjb=new DJ('de.cau.cs.kieler.klay.layered.edgeNodeSpacingFactor',new llb(IAb));njb=new DJ('de.cau.cs.kieler.klay.layered.distributeNodes',(xkb(),xkb(),vkb));Ljb=new DJ('de.cau.cs.kieler.klay.layered.wideNodesOnMultipleLayers',(ckb(),bkb));ljb=new DJ('de.cau.cs.kieler.klay.layered.cycleBreaking',(Z7(),X7));zjb=new DJ('de.cau.cs.kieler.klay.layered.nodeLayering',(x8(),w8));kjb=new DJ('de.cau.cs.kieler.klay.layered.crossMin',(p9(),o9));tjb=new DJ('de.cau.cs.kieler.klay.layered.greedySwitch',(zhb(),whb));Ajb=new DJ('de.cau.cs.kieler.klay.layered.nodePlace',(kbb(),fbb));wjb=new FJ('de.cau.cs.kieler.klay.layered.linearSegmentsDeflectionDampening',new llb(HAb),new llb(0),new llb(1));sjb=new DJ('de.cau.cs.kieler.klay.layered.fixedAlignment',(_gb(),Ygb));ojb=new DJ('de.cau.cs.kieler.klay.layered.edgeLabelSideSelection',(Pgb(),Lgb));mjb=new DJ(uzb,(vkb));Kjb=new EJ('de.cau.cs.kieler.klay.layered.thoroughness',Elb(10),Elb(1));vjb=new DJ('de.cau.cs.kieler.klay.layered.layerConstraint',(Xib(),Wib));xjb=new DJ('de.cau.cs.kieler.klay.layered.mergeEdges',(vkb));yjb=new DJ('de.cau.cs.kieler.klay.layered.mergeHierarchyEdges',(wkb));ujb=new DJ('de.cau.cs.kieler.klay.layered.interactiveReferencePoint',(Mhb(),Khb));rjb=new DJ('de.cau.cs.kieler.klay.layered.feedBackEdges',(vkb));gjb=new DJ('de.cau.cs.kieler.klay.layered.unnecessaryBendpoints',(vkb));jjb=new DJ('de.cau.cs.kieler.klay.layered.contentAlignment',(zgb(),Vsb(ygb,Bv(tv(iF,1),uyb,123,0,[ugb]))));Ijb=new DJ('de.cau.cs.kieler.klay.layered.sausageFolding',(vkb));Jjb=new DJ('de.cau.cs.kieler.klay.layered.splines.selfLoopPlacement',(Qjb(),Pjb));hjb=new DJ('de.cau.cs.kieler.klay.layered.nodeplace.compactionStrategy',(lcb(),jcb));Djb=new DJ('de.cau.cs.kieler.klay.layered.northOrSouthPort',(vkb));Fjb=new DJ('de.cau.cs.kieler.klay.layered.postCompaction',(g4(),e4));Gjb=new DJ('de.cau.cs.kieler.klay.layered.postCompaction.constraints',(X3(),W3));ijb=new DJ('de.cau.cs.kieler.klay.layered.components.compact',(vkb));}
    function uO(){uO=iI;rO=new vO('OUT_T_L',0,(Gi(),new Er(Vsb((oM(),kM),Bv(tv(Gz,1),uyb,41,0,[nM,gM])))),(DO(),BO));qO=new vO('OUT_T_C',1,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[nM,fM])),Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[nM,fM,hM]))]))),AO);sO=new vO('OUT_T_R',2,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[nM,iM]))),CO);iO=new vO('OUT_B_L',3,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[lM,gM]))),BO);hO=new vO('OUT_B_C',4,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[lM,fM])),Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[lM,fM,hM]))]))),AO);jO=new vO('OUT_B_R',5,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[lM,iM]))),CO);mO=new vO('OUT_L_T',6,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[gM,nM,hM]))),CO);lO=new vO('OUT_L_C',7,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[gM,mM])),Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[gM,mM,hM]))]))),CO);kO=new vO('OUT_L_B',8,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[gM,lM,hM]))),CO);pO=new vO('OUT_R_T',9,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[iM,nM,hM]))),BO);oO=new vO('OUT_R_C',10,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[iM,mM])),Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[iM,mM,hM]))]))),BO);nO=new vO('OUT_R_B',11,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[iM,lM,hM]))),BO);fO=new vO('IN_T_L',12,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,gM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,gM,hM]))]))),BO);eO=new vO('IN_T_C',13,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,fM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,fM,hM]))]))),AO);gO=new vO('IN_T_R',14,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,iM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,iM,hM]))]))),CO);cO=new vO('IN_C_L',15,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,gM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,gM,hM]))]))),BO);bO=new vO('IN_C_C',16,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,fM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,fM,hM]))]))),AO);dO=new vO('IN_C_R',17,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,iM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,iM,hM]))]))),CO);_N=new vO('IN_B_L',18,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,gM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,gM,hM]))]))),BO);$N=new vO('IN_B_C',19,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,fM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,fM,hM]))]))),AO);aO=new vO('IN_B_R',20,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,iM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,iM,hM]))]))),CO);tO=new vO(szb,21,(Fi),null);}
    function lab(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ab,bb,cb,db,eb,fb,gb,hb,ib;$=0;for(G=0,J=b.length;G<J;++G){D=b[G];if(LM(Wv(rJ(D,(eM(),TL)),28))){for(S=new Tob(D.f);S.a<S.c.c.length;){R=Wv(Rob(S),7);U=0;for(h=new Tob(R.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);D.d!=g.d.f.d&&++U;}U>0&&(a.a[R.k]=$++);}}else {L=0;for(S=new Tob(D.f);S.a<S.c.c.length;){R=Wv(Rob(S),7);for(h=new Tob(R.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);D.d!=g.d.f.d&&++L;}a.a[R.k]=$;}L>0&&++$;}}eb=0;for(H=0,K=c.length;H<K;++H){D=c[H];if(LM(Wv(rJ(D,(eM(),TL)),28))){M=0;for(S=new Tob(D.f);S.a<S.c.c.length;){R=Wv(Rob(S),7);if(R.g==(sN(),$M)){for(h=new Tob(R.b);h.a<h.c.c.length;){g=Wv(Rob(h),12);if(D.d!=g.c.f.d){++M;break}}}else {break}}O=0;V=new Fnb(D.f,D.f.c.length);while(V.b>0){R=(Bxb(V.b>0),Wv(V.a.sb(V.c=--V.b),7));U=0;for(h=new Tob(R.b);h.a<h.c.c.length;){g=Wv(Rob(h),12);D.d!=g.c.f.d&&++U;}if(U>0){if(R.g==(sN(),$M)){a.a[R.k]=eb;++eb;}else {a.a[R.k]=eb+M+O;++O;}}}eb+=O;}else {L=0;for(S=new Tob(D.f);S.a<S.c.c.length;){R=Wv(Rob(S),7);for(h=new Tob(R.b);h.a<h.c.c.length;){g=Wv(Rob(h),12);D.d!=g.c.f.d&&++L;}a.a[R.k]=eb;}L>0&&++eb;}}T=(mp(),new ntb);n=new Wub;for(F=0,I=b.length;F<I;++F){D=b[F];for(cb=new Tob(D.f);cb.a<cb.c.c.length;){bb=Wv(Rob(cb),7);for(h=new Tob(bb.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);gb=g.d;if(D.d!=gb.f.d){ab=Wv(re(Ktb(T.d,bb)),197);fb=Wv(re(Ktb(T.d,gb)),197);if(!ab&&!fb){m=new oab;n.a.db(m,n);vU(m.a,g);vU(m.d,bb);Ltb(T.d,bb,m);vU(m.d,gb);Ltb(T.d,gb,m);}else if(!ab){vU(fb.a,g);vU(fb.d,bb);Ltb(T.d,bb,fb);}else if(!fb){vU(ab.a,g);vU(ab.d,gb);Ltb(T.d,gb,ab);}else if(ab==fb){vU(ab.a,g);}else {vU(ab.a,g);for(Q=new Tob(fb.d);Q.a<Q.c.c.length;){P=Wv(Rob(Q),7);Ltb(T.d,P,ab);}xU(ab.a,fb.a);xU(ab.d,fb.d);n.a.eb(fb)!=null;}}}}}o=Wv(Ye(n,xv(tE,{674:1,3:1,5:1,6:1},197,n.a.Y(),0,1)),674);C=b[0].d;Z=c[0].d;for(k=0,l=o.length;k<l;++k){j=o[k];j.e=$;j.f=eb;for(S=new Tob(j.d);S.a<S.c.c.length;){R=Wv(Rob(S),7);W=a.a[R.k];if(R.f.d==C){W<j.e&&(j.e=W);W>j.b&&(j.b=W);}else if(R.f.d==Z){W<j.f&&(j.f=W);W>j.c&&(j.c=W);}}}ipb(o,0,o.length,(hsb(),hsb(),gsb));db=xv(mw,Yyb,26,o.length,12,1);d=xv(mw,Yyb,26,eb+1,12,1);for(q=0;q<o.length;q++){db[q]=o[q].f;d[db[q]]=1;}f=0;for(r=0;r<d.length;r++){d[r]==1?(d[r]=f):--f;}X=0;for(s=0;s<db.length;s++){db[s]+=d[db[s]];X=Plb(X,db[s]+1);}i=1;while(i<X){i*=2;}ib=2*i-1;i-=1;hb=xv(mw,Yyb,26,ib,12,1);e=0;for(A=0;A<db.length;A++){w=db[A]+i;++hb[w];while(w>0){w%2>0&&(e+=hb[w+1]);w=(w-1)/2|0;++hb[w];}}B=xv(sE,syb,156,o.length*2,0,1);for(t=0;t<o.length;t++){B[2*t]=new rab(o[t],o[t].e,o[t].b,(vab(),uab));B[2*t+1]=new rab(o[t],o[t].b,o[t].e,tab);}ipb(B,0,B.length,(gsb));N=0;for(u=0;u<B.length;u++){switch(B[u].d.e){case 0:++N;break;case 1:--N;e+=N;}}Y=xv(sE,syb,156,o.length*2,0,1);for(v=0;v<o.length;v++){Y[2*v]=new rab(o[v],o[v].f,o[v].c,(vab(),uab));Y[2*v+1]=new rab(o[v],o[v].c,o[v].f,tab);}ipb(Y,0,Y.length,(gsb));N=0;for(p=0;p<Y.length;p++){switch(Y[p].d.e){case 0:++N;break;case 1:--N;e+=N;}}return e}
    function eM(){eM=iI;var a,b;mL=new DJ('de.cau.cs.kieler.animate',(xkb(),xkb(),wkb));new DJ('de.cau.cs.kieler.minAnimTime',Elb(400));new DJ('de.cau.cs.kieler.maxAnimTime',Elb(4000));new DJ('de.cau.cs.kieler.animTimeFactor',Elb(100));jL=new DJ('de.cau.cs.kieler.additionalPortSpace',null);qL=new DJ('de.cau.cs.kieler.commentBox',(vkb));new CJ('de.cau.cs.kieler.diagramType');tL=new DJ('de.cau.cs.kieler.edgeLabelPlacement',(EK(),DK));vL=new DJ('de.cau.cs.kieler.edgeType',(YK(),WK));xL=new CJ('de.cau.cs.kieler.fontName');yL=new DJ('de.cau.cs.kieler.fontSize',Elb(0));AL=new DJ('de.cau.cs.kieler.hypernode',(vkb));CL=new DJ('de.cau.cs.kieler.junctionPoints',new jJ);new DJ('de.cau.cs.kieler.layoutAncestors',(vkb));GL=new DJ('de.cau.cs.kieler.margins',new DP);HL=new EJ('de.cau.cs.kieler.minHeight',new llb(0),new llb(0));IL=new EJ('de.cau.cs.kieler.minWidth',new llb(0),new llb(0));KL=new DJ('de.cau.cs.kieler.noLayout',(vkb));LL=new CJ('de.cau.cs.kieler.offset');SL=new CJ('de.cau.cs.kieler.klay.layered.portAnchor');UL=new CJ('de.cau.cs.kieler.portIndex');WL=new DJ('de.cau.cs.kieler.portSide',(sN(),qN));new DJ('de.cau.cs.kieler.progressBar',(vkb));new DJ('de.cau.cs.kieler.resetConfig',(wkb));new DJ('de.cau.cs.kieler.scaleFactor',new llb(1));dM=new DJ('de.cau.cs.kieler.thickness',new llb(1));new DJ('de.cau.cs.kieler.zoomToFit',(vkb));kL=new CJ('de.cau.cs.kieler.algorithm');lL=new DJ('de.cau.cs.kieler.alignment',(iK(),cK));nL=new DJ('de.cau.cs.kieler.aspectRatio',new llb(0));oL=new CJ('de.cau.cs.kieler.bendPoints');pL=new DJ('de.cau.cs.kieler.borderSpacing',new llb(-1));rL=new DJ(uzb,(vkb));sL=new DJ('de.cau.cs.kieler.direction',(sK(),qK));uL=new DJ('de.cau.cs.kieler.edgeRouting',(NK(),MK));wL=new DJ('de.cau.cs.kieler.expandNodes',(vkb));zL=new DJ('de.cau.cs.kieler.hierarchyHandling',(eL(),cL));BL=new DJ('de.cau.cs.kieler.interactive',(vkb));DL=new EJ('de.cau.cs.kieler.labelSpacing',new llb(3),new llb(0));EL=new DJ('de.cau.cs.kieler.layoutHierarchy',(vkb));JL=new DJ('de.cau.cs.kieler.nodeLabelPlacement',(oM(),b=Wv(Hkb(Gz),11),new atb(b,Wv(exb(b,b.length),11),0)));TL=new DJ('de.cau.cs.kieler.portConstraints',(KM(),JM));VL=new DJ('de.cau.cs.kieler.portLabelPlacement',(UM(),TM));XL=new EJ('de.cau.cs.kieler.portSpacing',new llb(-1),new llb(0));NL=new DJ('de.cau.cs.kieler.portAlignment',(zM(),xM));PL=new DJ('de.cau.cs.kieler.portAlignment.north',yM);QL=new DJ('de.cau.cs.kieler.portAlignment.south',yM);RL=new DJ('de.cau.cs.kieler.portAlignment.west',yM);OL=new DJ('de.cau.cs.kieler.portAlignment.east',yM);YL=new CJ('de.cau.cs.kieler.position');ZL=new CJ('de.cau.cs.kieler.priority');new CJ(vzb);$L=new DJ('de.cau.cs.kieler.selfLoopInside',(vkb));_L=new CJ('de.cau.cs.kieler.separateConnComp');aM=new DJ('de.cau.cs.kieler.sizeConstraint',(DN(),a=Wv(Hkb(Lz),11),new atb(a,Wv(exb(a,a.length),11),0)));bM=new DJ('de.cau.cs.kieler.sizeOptions',Vsb((MN(),KN),Bv(tv(Mz,1),uyb,139,0,[IN])));cM=new EJ('de.cau.cs.kieler.spacing',new llb(-1),new llb(0));FL=new DJ('de.cau.cs.kieler.layoutPartitions',(vkb));ML=new CJ('de.cau.cs.kieler.partition');}
    function wQ(b,c,d,e){tQ();var f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;if(!e){if((!b.n?(ypb(),ypb(),wpb):b.n).R(new xQ(c))){return}}if(Wv(rQ.a,18).kb(c)){if(!d.lc()){throw new _J(Pzb+c+Qzb+d+').')}o=Wv(Wv(rQ.b,57).cb(c),79);p=d.lc().a;sJ(b,o,p);return}else if(Wv(oQ.a,18).kb(c)){try{if(!d.jc()){throw new Xlb}o=Wv(Wv(oQ.b,57).cb(c),79);s=Elb(dlb((bmb(),''+d.jc().a)));sJ(b,o,s);return}catch(a){a=OH(a);if(aw(a,130)){throw new _J("Invalid integer format for property '"+c+Qzb+d+').')}else throw NH(a)}}else if(Wv(kQ.a,18).kb(c)){if(!d.ic()){throw new _J(Pzb+c+Qzb+d+').')}o=Wv(Wv(kQ.b,57).cb(c),79);s=(xkb(),d.ic().a?wkb:vkb);sJ(b,o,s);return}else if(Wv(nQ.a,18).kb(c)){if(!d.jc()){throw new _J("Invalid float format for property '"+c+Qzb+d+').')}o=Wv(Wv(nQ.b,57).cb(c),79);s=new klb(d.jc().a);sJ(b,o,s);return}else if(Wv(mQ.a,18).kb(c)){if(!d.lc()){throw new _J(Rzb+c+Qzb+d+').')}l=d.lc().a;m=null;try{vQ((eM(),WL),c)?(m=(sN(),Wv(Gc((yN(),xN),l),32))):vQ(lL,c)?(m=(iK(),Wv(Gc((mK(),lK),l),103))):vQ(sL,c)?(m=(sK(),Wv(Gc((zK(),yK),l),59))):vQ(uL,c)?(m=(NK(),Wv(Gc((RK(),QK),l),122))):vQ(zL,c)?(m=(eL(),Wv(Gc((iL(),hL),l),166))):vQ(NL,c)||vQ(OL,c)||vQ(PL,c)||vQ(QL,c)||vQ(RL,c)?(m=(zM(),Wv(Gc((DM(),CM),l),100))):vQ(TL,c)?(m=(KM(),Wv(Gc((QM(),PM),l),28))):vQ(VL,c)?(m=(UM(),Wv(Gc((YM(),XM),l),149))):vQ(vL,c)?(m=(YK(),Wv(Gc((aL(),_K),l),133))):vQ(tL,c)?(m=(EK(),Wv(Gc((IK(),HK),l),107))):vQ((Mjb(),ljb),c)?(m=(Z7(),Wv(Gc((c8(),b8),l),193))):vQ(zjb,c)?(m=(x8(),Wv(Gc((C8(),B8),l),173))):vQ(ojb,c)?(m=(Pgb(),Wv(Gc((Ugb(),Tgb),l),115))):vQ(hjb,c)?(m=(lcb(),Wv(Gc((pcb(),ocb),l),194))):vQ(kjb,c)?(m=(p9(),Wv(Gc((u9(),t9),l),192))):vQ(Bjb,c)?(m=(I1(),Wv(Gc((M1(),L1),l),109))):vQ(Ajb,c)?(m=(kbb(),Wv(Gc((pbb(),obb),l),141))):vQ(Fjb,c)?(m=(g4(),Wv(Gc((k4(),j4),l),125))):vQ(Gjb,c)?(m=(X3(),Wv(Gc((_3(),$3),l),175))):vQ(sjb,c)?(m=(_gb(),Wv(Gc((dhb(),chb),l),124))):vQ(tjb,c)?(m=(zhb(),Wv(Gc((Dhb(),Chb),l),110))):vQ(vjb,c)?(m=(Xib(),Wv(Gc((_ib(),$ib),l),85))):vQ(Jjb,c)?(m=(Qjb(),Wv(Gc((Ujb(),Tjb),l),153))):vQ(Ljb,c)?(m=(ckb(),Wv(Gc((gkb(),fkb),l),172))):vQ(ujb,c)&&(m=(Mhb(),Wv(Gc((Qhb(),Phb),l),174)));}catch(a){a=OH(a);if(aw(a,54)){throw new _J(Rzb+c+Qzb+d+').')}else throw NH(a)}o=Wv(Wv(mQ.b,57).cb(c),79);sJ(b,o,m);return}else if(Wv(lQ.a,18).kb(c)){if(!d.lc()){throw new _J(Rzb+c+Qzb+d+').')}k=d.lc().a;q=null;j=fmb(k,'[\\[\\]\\s,]+');for(h=0,i=j.length;h<i;++h){g=j[h];if(pmb(hmb(g))==0){continue}if(vQ((eM(),JL),c)){!q&&(q=(f=Wv(Hkb(Gz),11),new atb(f,Wv(exb(f,f.length),11),0)));Wsb(q,(oM(),Wv(Gc((sM(),rM),g),41)));}else if(vQ(aM,c)){!q&&(q=(f=Wv(Hkb(Lz),11),new atb(f,Wv(exb(f,f.length),11),0)));Wsb(q,(DN(),Wv(Gc((HN(),GN),g),150)));}else if(vQ(bM,c)){!q&&(q=(f=Wv(Hkb(Mz),11),new atb(f,Wv(exb(f,f.length),11),0)));Wsb(q,(MN(),Wv(Gc((QN(),PN),g),139)));}else if(vQ((Mjb(),jjb),c)){!q&&(q=(f=Wv(Hkb(iF),11),new atb(f,Wv(exb(f,f.length),11),0)));Wsb(q,(zgb(),Wv(Gc((Dgb(),Cgb),g),123)));}}o=Wv(Wv(lQ.b,57).cb(c),79);sJ(b,o,q);return}else if(Wv(qQ.a,18).kb(c)){if(!d.lc()){throw new _J("Invalid _other_ format for property '"+c+Qzb+d+').')}if(vQ((eM(),YL),c)||vQ(SL,c)){try{r=new FI;AI(r,d.lc().a);o=Wv(Wv(qQ.b,57).cb(c),79);sJ(b,o,r);return}catch(a){a=OH(a);if(aw(a,29)){throw new _J("Invalid KVector format for property '"+c+"' "+d+'.')}else throw NH(a)}}else if(vQ(oL,c)||vQ(CL,c)){try{t=new jJ;iJ(t,d.lc().a);o=Wv(Wv(qQ.b,57).cb(c),79);sJ(b,o,t);return}catch(a){a=OH(a);if(aw(a,29)){throw new _J("Invalid KVectorChain format for property '"+c+"' "+d+'.')}else throw NH(a)}}else if(vQ(GL,c)||vQ(jL,c)){try{n=new DP;tP(n,d.lc().a);o=Wv(Wv(qQ.b,57).cb(c),79);sJ(b,o,n);return}catch(a){a=OH(a);if(aw(a,29)){throw new _J("Invalid Margins format for property '"+c+"' "+d+'.')}else throw NH(a)}}}else if(Wv(pQ.a,18).kb(c)){return}throw new _J("Unsupported layout option '"+c+Qzb+d+').')}
    var Sxb='object',Txb={3:1,8:1,5:1,6:1},Uxb={3:1,46:1},Vxb={3:1,54:1,46:1},Wxb='null',Xxb='anonymous',Yxb='Unknown',Zxb='function',$xb=2147483647,_xb={181:1,3:1,54:1,46:1},ayb=65536,byb=65535,cyb={3:1,54:1,29:1,46:1},dyb='For input string: "',eyb=-2147483648,fyb={56:1},gyb={23:1,145:1,185:1},hyb={3:1,5:1},iyb='Invalid UTF8 sequence',jyb='fromIndex: ',kyb='java.lang',lyb='com.google.gwt.core.client',myb='com.google.gwt.core.client.impl',nyb='java.io',oyb='java.nio.charset',pyb='javaemul.internal',qyb='com.google.common.base',ryb='%s (%s) must not be negative',syb={3:1,5:1,6:1},tyb='negative size: ',uyb={3:1,8:1,5:1,11:1,6:1},vyb={68:1,136:1,3:1,23:1,17:1},wyb={108:1,35:1},xyb='com.google.common.collect',yyb={108:1,35:1,96:1},zyb={144:1,3:1},Ayb={35:1},Byb={57:1},Cyb='java.util',Dyb={22:1,19:1},Eyb={22:1,19:1,18:1},Fyb={22:1,19:1,20:1},Gyb={22:1,19:1,20:1,63:1},Hyb={35:1,96:1},Iyb={22:1,19:1,18:1,137:1},Jyb={21:1},Kyb='AbstractMapEntry',Lyb={207:1,22:1,19:1},Myb={159:1,3:1,23:1,17:1},Nyb=1073741824,Oyb={22:1},Pyb={3:1,22:1,19:1},Qyb={87:1,3:1,22:1,19:1,20:1,63:1},Ryb={3:1,57:1},Syb={3:1,22:1,19:1,18:1},Tyb={64:1},Uyb='arraySize',Vyb='initialArraySize',Wyb={64:1,188:1,3:1,23:1,17:1},Xyb='occurrences',Yyb={52:1,3:1,5:1},Zyb={205:1,3:1,23:1,17:1},$yb=1.0E-4,_yb='com.google.gwt.json.client',azb=4194303,bzb=1048575,czb=4194304,dzb=17592186044416,ezb=-17592186044416,fzb='([{"\' \t\r\n',gzb=')]}"\' \t\r\n',hzb='The given string contains parts that cannot be parsed as numbers.',izb='de.cau.cs.kieler.core.math',jzb=-1.7976931348623157E308,kzb='de.cau.cs.kieler.core.properties',lzb={79:1,23:1},mzb='de.cau.cs.kieler.core.util',nzb='de.cau.cs.kieler.kiml',ozb='LEFT',pzb='RIGHT',qzb='CENTER',rzb='de.cau.cs.kieler.kiml.options',szb='UNDEFINED',tzb='NONE',uzb='de.cau.cs.kieler.debugMode',vzb='de.cau.cs.kieler.randomSeed',wzb='de.cau.cs.kieler.kiml.util.nodespacing',xzb='de.cau.cs.kieler.kiml.util.labelspacing',yzb='portRatioOrPosition',zzb='NodeMarginCalculator',Azb='bottom',Bzb={286:1,121:1,3:1,5:1},Czb='undefined',Dzb='text',Ezb='stacktrace',Fzb={34:1,3:1,8:1,5:1,6:1},Gzb='properties',Hzb='bendPoints',Izb='junctionPoints',Jzb='width',Kzb='height',Lzb='padding',Mzb='children',Nzb={38:1,39:1,42:1,51:1,71:1,3:1,8:1,5:1,6:1},Ozb='de.cau.cs.kieler.klay.gwt.client.layout',Pzb="Invalid boolean format for property '",Qzb="' (",Rzb="Invalid enum format for property '",Szb='de.cau.cs.kieler.klay.layered',Tzb='Layered layout',Uzb=Infinity,Vzb=-Infinity,Wzb='de.cau.cs.kieler.klay.layered.compaction.components',Xzb='de.cau.cs.kieler.klay.layered.compaction.oned',Yzb=' instance has been finished already.',Zzb='de.cau.cs.kieler.klay.layered.compaction.oned.algs',$zb='de.cau.cs.kieler.klay.layered.compaction.recthull',_zb={68:1},aAb='de.cau.cs.kieler.klay.layered.components',bAb={3:1,5:1,22:1,13:1,19:1,20:1,63:1},cAb=1.600000023841858,dAb=0.001,eAb={31:1},fAb='de.cau.cs.kieler.klay.layered.compound',gAb={38:1,39:1,47:1,42:1,3:1,8:1,5:1,6:1},hAb='de.cau.cs.kieler.klay.layered.graph',iAb='Port side is undefined',jAb='de.cau.cs.kieler.klay.layered.intermediate',kAb='Big nodes pre-processing',lAb=3.4028234663852886E38,mAb={38:1,39:1,42:1,346:1,71:1,3:1,8:1,5:1,6:1},nAb="Node '",oAb="' has its layer constraint set to FIRST or FIRST_SEPARATE, but has ",pAb='at least one incoming edge. Connections between nodes with these ',qAb='layer constraints are not supported.',rAb=1.7976931348623157E308,sAb='Odd port side processing',tAb={250:1,3:1,5:1},uAb=1.0E-8,vAb='de.cau.cs.kieler.klay.layered.intermediate.compaction',wAb='de.cau.cs.kieler.klay.layered.intermediate.greedyswitch',xAb={227:1,3:1,5:1},yAb='de.cau.cs.kieler.klay.layered.networksimplex',zAb='INTERACTIVE',AAb='de.cau.cs.kieler.klay.layered.p1cycles',BAb={106:1,31:1},CAb='de.cau.cs.kieler.klay.layered.p2layers',DAb='NETWORK_SIMPLEX',EAb='de.cau.cs.kieler.klay.layered.p3order',FAb=5.9604644775390625E-8,GAb='Port type is undefined',HAb=0.30000001192092896,IAb=0.699999988079071,JAb=0.8999999761581421,KAb='de.cau.cs.kieler.klay.layered.p3order.constraints',LAb='de.cau.cs.kieler.klay.layered.p3order.counting',MAb='de.cau.cs.kieler.klay.layered.p4nodes',NAb={625:1,3:1,5:1,6:1},OAb='de.cau.cs.kieler.klay.layered.p4nodes.bk',PAb='de.cau.cs.kieler.klay.layered.p5edges',QAb='de.cau.cs.kieler.klay.layered.p5edges.splines',RAb=1.0E-6,SAb=-1.0E-6,TAb='The list of vectors may not be empty.',UAb=0.09999999999999998,VAb='de.cau.cs.kieler.klay.layered.properties',WAb='_gwt_modCount',XAb={3:1,22:1,19:1,20:1,63:1},YAb={3:1,5:1,57:1},ZAb={3:1,5:1,22:1,19:1,50:1,18:1},$Ab='delete',_Ab=15525485,aBb=16777216,bBb=16777215,cBb={3:1,5:1,22:1,19:1,20:1,63:1},dBb={3:1,23:1,17:1,138:1};var _,fI,aI;gI();hI(1,null,{},pb);_.t=function qb(a){return this===a};_.u=function sb(){return this.$c};_.v=function ub(){return txb(this)};_.w=function wb(){return ob(this)};_.toString=function(){return this.w()};hI(46,1,Uxb);_.bc=function ct(){return this.f};_.w=function dt(){var a,b;return a=Ikb(this.$c),b=this.bc(),b!=null?a+': '+b:a};hI(54,46,Vxb);hI(72,54,Vxb,gt);hI(164,72,{164:1,3:1,54:1,46:1},kt);_.bc=function nt(){jt(this);return this.c};_.cc=function ot(){return gw(this.b)===gw(ht)?null:this.b};var ht;var Mt;hI(642,1,{});hI(356,642,{},Tt);_.dc=function Ut(a,b){var c={};var d=[];a.__gwt$backingJsError={'fnStack':d};var e=arguments.callee.caller;while(e){var f=(Nt(),e.name||(e.name=Rt(e.toString())));d.push(f);var g=':'+f;var h=c[g];if(h){var i,j;for(i=0,j=h.length;i<j;i++){if(h[i]===e){return}}}(h||(c[g]=[])).push(e);e=e.caller;}};_.ec=function Vt(a){var b,c,d,e,f;d=(Nt(),f=a.__gwt$backingJsError,f&&f.fnStack?f.fnStack:[]);c=d.length;e=xv(WF,Txb,146,c,0,1);for(b=0;b<c;b++){e[b]=new Zlb(d[b],null,-1);}return e};hI(643,642,{});_.dc=function Yt(c,d){function e(b){if(!('stack' in b)){try{throw b}catch(a){}}return b}
    var f;typeof d=='string'?(f=e(new Error(d.replace('\n',' ')))):d&&typeof d==Sxb&&'stack' in d?(f=d):(f=e(new Error));c.__gwt$backingJsError=f;};_.fc=function Zt(a,b,c,d){return new Zlb(b,a+'@'+d,c<0?-1:c)};_.ec=function $t(a){var b,c,d,e,f,g,h;e=(Nt(),h=a.__gwt$backingJsError,h&&h.stack?h.stack.split('\n'):[]);f=xv(WF,Txb,146,0,0,1);b=0;d=e.length;if(d==0){return f}g=Xt(this,e[0]);emb(g.d,Xxb)||(f[b++]=g);for(c=1;c<d;c++){f[b++]=Xt(this,e[c]);}return f};hI(357,643,{},_t);_.fc=function au(a,b,c,d){return new Zlb(b,a,-1)};var Sv,Tv,Uv;hI(181,54,_xb);hI(351,181,_xb,ikb);hI(288,1,{},Kkb);_.Oc=function Lkb(a){var b;b=new Kkb;b.g=4;a>1?(b.c=Skb(this,a-1)):(b.c=this);return b};_.Pc=function Rkb(){Gkb(this);return this.b};_.Qc=function Tkb(){return Ikb(this)};_.Rc=function Vkb(){return Jkb(this)};_.Sc=function Xkb(){return (this.g&4)!=0};_.Tc=function Ykb(){return (this.g&1)!=0};_.w=function _kb(){return ((this.g&2)!=0?'interface ':(this.g&1)!=0?'':'class ')+(Gkb(this),this.n)};_.g=0;hI(119,72,{3:1,119:1,54:1,46:1},alb);hI(29,72,cyb,rlb,slb);hI(95,72,Vxb,nkb,okb);hI(231,1,{3:1,231:1});var blb;hI(24,231,{3:1,23:1,24:1,231:1},wlb);_.F=function ylb(a){return vlb(this,Wv(a,24))};_.t=function zlb(a){return aw(a,24)&&Wv(a,24).a==this.a};_.v=function Alb(){return this.a};_.w=function Clb(){return Dlb(this.a)};_.a=0;Uv={3:1,345:1,23:1,2:1};hI(350,1,fyb,smb);_.$b=function tmb(a,b){return rmb($v(a),$v(b))};hI(257,95,Vxb,Cmb);hI(145,1,{23:1,145:1});_.F=function Kmb(a){return Jmb(this,Wv(a,145))};_.t=function Lmb(a){var b;if(a===this){return true}if(!aw(a,145)){return false}b=Wv(a,145);return emb(this.a,b.a)};_.v=function Mmb(){return Pxb(this.a)};_.w=function Nmb(){return this.a};hI(358,29,cyb,Omb);hI(256,29,{3:1,54:1,29:1,46:1,256:1},Pmb);hI(185,145,gyb);hI(289,185,gyb,oxb);_.Zc=function pxb(a,b,c){var d,e;d=xv(jw,hyb,26,c,12,1);for(e=0;e<c;++e){d[e]=a[b+e]&255&byb;}return d};hI(355,185,gyb,qxb);_.Zc=function rxb(a,b,c){var d,e,f,g,h,i,j,k;f=0;for(j=0;j<c;){++f;e=a[b+j];if((e&192)==128){throw new slb(iyb)}else if((e&128)==0){++j;}else if((e&224)==192){j+=2;}else if((e&240)==224){j+=3;}else if((e&248)==240){j+=4;}else {throw new slb(iyb)}if(j>c){throw new okb(iyb)}}g=xv(jw,hyb,26,f,12,1);k=0;h=0;for(i=0;i<c;){e=a[b+i++];if((e&128)==0){h=1;e&=127;}else if((e&224)==192){h=2;e&=31;}else if((e&240)==224){h=3;e&=15;}else if((e&248)==240){h=4;e&=7;}else if((e&252)==248){h=5;e&=3;}while(--h>0){d=a[b+i++];if((d&192)!=128){throw new slb('Invalid UTF8 sequence at '+(b+i-1)+', byte='+(d>>>0).toString(16))}e=e<<6|d&63;}k+=Ekb(e,g,k);}return g};var UF=Nkb(kyb,'Object',1);var _F=Nkb(kyb,'Throwable',46);Nkb(kyb,'Exception',54);Nkb(kyb,'RuntimeException',72);Nkb(lyb,'JavaScriptException',164);Nkb(myb,'StackTraceCreator/Collector',642);Nkb(myb,'StackTraceCreator/CollectorLegacy',356);Nkb(myb,'StackTraceCreator/CollectorModern',643);Nkb(myb,'StackTraceCreator/CollectorModernNoSourceMap',357);Nkb(nyb,'IOException',181);Nkb(nyb,'UnsupportedEncodingException',351);Nkb(kyb,'Class',288);Nkb(kyb,'ClassCastException',119);Nkb(kyb,'IllegalArgumentException',29);Nkb(kyb,'IndexOutOfBoundsException',95);Nkb(kyb,'Number',231);var PF=Nkb(kyb,'Integer',24);var $F=Nkb(kyb,'String',2);Nkb(kyb,'String/1',350);Nkb(kyb,'StringIndexOutOfBoundsException',257);Nkb(oyb,'Charset',145);Nkb(oyb,'IllegalCharsetNameException',358);Nkb(oyb,'UnsupportedCharsetException',256);Nkb(pyb,'EmulatedCharset',185);Nkb(pyb,'EmulatedCharset/LatinCharset',289);Nkb(pyb,'EmulatedCharset/UtfCharset',355);hI(669,1,{3:1});Nkb(qyb,'Optional',669);hI(601,669,{3:1},Ab);_.t=function Bb(a){return a===this};_.v=function Cb(){return 2040732332};_.w=function Db(){return 'Optional.absent()'};_.A=function Eb(a){_b(a);return zb(),yb};var yb;Nkb(qyb,'Absent',601);var ow=Pkb(qyb,'Function');hI(208,1,{},Kb);_.C=function Lb(a){return Ib(a)};Nkb(qyb,'Joiner',208);hI(363,208,{},Nb);_.C=function Ob(a){return Mb(this,a)};Nkb(qyb,'Joiner/1',363);hI(362,1,{},Rb);Nkb(qyb,'Joiner/MapJoiner',362);var tw=Pkb(qyb,'Predicate');var gc;hI(244,1,{68:1,244:1,3:1},ic);_.D=function jc(a){var b;for(b=0;b<this.a.a.length;b++){if(!Wv(mpb(this.a,b),68).D(a)){return false}}return true};_.t=function kc(a){var b;if(aw(a,244)){b=Wv(a,244);return cn(this.a,b.a)}return false};_.v=function lc(){return Bpb(this.a)+306654252};_.w=function mc(){return 'Predicates.and('+Hb((hc(),gc),new wnb(this.a))+')'};Nkb(qyb,'Predicates/AndPredicate',244);hI(246,1,{68:1,246:1,3:1},nc);_.D=function oc(b){try{return this.a.kb(b)}catch(a){a=OH(a);if(aw(a,76)){return false}else if(aw(a,119)){return false}else throw NH(a)}};_.t=function pc(a){var b;if(aw(a,246)){b=Wv(a,246);return this.a.t(b.a)}return false};_.v=function qc(){return this.a.v()};_.w=function rc(){return 'Predicates.in('+this.a+')'};Nkb(qyb,'Predicates/InPredicate',246);hI(245,1,{68:1,245:1,3:1},sc);_.D=function tc(a){return rb(this.a,a)};_.t=function uc(a){var b;if(aw(a,245)){b=Wv(a,245);return rb(this.a,b.a)}return false};_.v=function vc(){return vb(this.a)};_.w=function wc(){return 'Predicates.equalTo('+this.a+')'};Nkb(qyb,'Predicates/IsEqualToPredicate',245);hI(17,1,{3:1,23:1,17:1});_.F=function Bc(a){return xc(this,Wv(a,17))};_.t=function Dc(a){return this===a};_.v=function Ec(){return txb(this)};_.w=function Fc(){return zc(this)};_.e=0;var IF=Nkb(kyb,'Enum',17);hI(136,17,vyb);var Hc,Ic,Jc,Kc;var Bw=Okb(qyb,'Predicates/ObjectPredicate',136,IF,Nc);hI(591,136,vyb,Oc);_.D=function Pc(a){return true};_.w=function Qc(){return 'Predicates.alwaysTrue()'};Okb(qyb,'Predicates/ObjectPredicate/1',591,Bw,null);hI(592,136,vyb,Rc);_.D=function Sc(a){return false};_.w=function Tc(){return 'Predicates.alwaysFalse()'};Okb(qyb,'Predicates/ObjectPredicate/2',592,Bw,null);hI(593,136,vyb,Uc);_.D=function Vc(a){return a==null};_.w=function Wc(){return 'Predicates.isNull()'};Okb(qyb,'Predicates/ObjectPredicate/3',593,Bw,null);hI(594,136,vyb,Xc);_.D=function Yc(a){return a!=null};_.w=function Zc(){return 'Predicates.notNull()'};Okb(qyb,'Predicates/ObjectPredicate/4',594,Bw,null);hI(177,669,{177:1,3:1},$c);_.t=function _c(a){var b;if(aw(a,177)){b=Wv(a,177);return rb(this.a,b.a)}return false};_.v=function ad(){return 1502476572+vb(this.a)};_.w=function bd(){return 'Optional.of('+this.a+')'};_.A=function cd(a){return new $c(ac(a.B(this.a),'the Function passed to Optional.transform() must not return null.'))};Nkb(qyb,'Present',177);hI(108,1,wyb);_.I=function ed(){dd();};Nkb(xyb,'UnmodifiableIterator',108);hI(651,108,yyb);_.J=function fd(a){throw new Hmb};_.O=function gd(a){throw new Hmb};Nkb(xyb,'UnmodifiableListIterator',651);hI(378,651,yyb);_.G=function hd(){return this.b<this.c};_.K=function jd(){return this.b>0};_.H=function kd(){if(this.b>=this.c){throw new nvb}return Lk(this,this.b++)};_.L=function ld(){return this.b};_.M=function md(){if(this.b<=0){throw new nvb}return Lk(this,--this.b)};_.N=function nd(){return this.b-1};_.b=0;_.c=0;Nkb(xyb,'AbstractIndexedListIterator',378);hI(428,108,wyb);_.G=function rd(){return od(this)};_.H=function sd(){return pd(this)};_.d=1;Nkb(xyb,'AbstractIterator',428);hI(653,1,{144:1});_.P=function vd(){var a;return a=this.f,!a?(this.f=this.S()):a};_.T=function wd(){return new Bf(this.P())};_.t=function xd(a){return Mp(this,a)};_.v=function yd(){return this.P().v()};_.V=function zd(){return this.Y()==0};_.W=function Ad(){return ud(this)};_.w=function Bd(){return this.P().w()};Nkb(xyb,'AbstractMultimap',653);hI(294,653,zyb);_.Q=function Nd(){Cd(this);};_.R=function Od(a){return Qmb(this.b,a)};_.S=function Pd(){return new Ie(this,this.b)};_.T=function Qd(){return new If(this,this.b)};_.$=function Rd(){return Id(this.Z())};_.U=function Sd(a){return Dd(this,a)};_.X=function Td(a){return Gd(this,a)};_.Y=function Ud(){return this.c};_.c=0;Nkb(xyb,'AbstractMapBasedMultimap',294);hI(600,294,zyb);_.Z=function Xd(){return new HU(this.a)};_.$=function Yd(){return Gi(),Gi(),Fi};_.U=function $d(a){return Wv(Dd(this,a),20)};_.X=function _d(a){return Wv(Gd(this,a),20)};_.P=function Wd(){var a;return a=this.f,!a?(this.f=new Ie(this,this.b)):a};_.t=function Zd(a){return Mp(this,a)};Nkb(xyb,'AbstractListMultimap',600);hI(388,1,Ayb);_.G=function ae(){return this.b.b||this.d.G()};_.H=function be(){var a;if(!this.d.G()){a=pnb(this.b);a.yb();this.a=Wv(a.zb(),19);this.d=this.a.mb();}return this.d.H()};_.I=function ce(){this.d.I();this.a.V()&&qnb(this.b);--this.c.c;};Nkb(xyb,'AbstractMapBasedMultimap/Itr',388);hI(389,388,Ayb,de);Nkb(xyb,'AbstractMapBasedMultimap/1',389);hI(638,1,Byb);_.Q=function ke(){this.bb().Q();};_._=function le(a){return ee(this,a)};_.R=function me(a){return !!ge(this,a,false)};_.ab=function ne(a){var b,c,d;for(c=this.bb().mb();c.G();){b=Wv(c.H(),21);d=b.zb();if(gw(a)===gw(d)||a!=null&&rb(a,d)){return true}}return false};_.t=function oe(a){return fe(this,a)};_.cb=function pe(a){return re(ge(this,a,false))};_.v=function se(){return Apb(this.bb())};_.V=function te(){return this.Y()==0};_.W=function ue(){return new Snb(this)};_.db=function ve(a,b){throw new Imb('Put not supported on this map')};_.eb=function we(a){return re(ge(this,a,true))};_.Y=function xe(){return this.bb().Y()};_.w=function ye(){return ie(this)};_.fb=function ze(){return new aob(this)};Nkb(Cyb,'AbstractMap',638);hI(654,638,Byb);_.bb=function Ce(){return Ae(this)};_.W=function De(){var a;a=this.d;return !a?(this.d=new Bf(this)):a};_.fb=function Ee(){return Be(this)};Nkb(xyb,'Maps/ViewCachingAbstractMap',654);hI(262,654,Byb,Ie);_.cb=function Ne(a){return Fe(this,a)};_.eb=function Qe(a){return Ge(this,a)};_.Q=function Je(){this.a==this.b.b?Cd(this.b):Ml(new xf(this));};_.R=function Ke(a){return qp(this.a,a)};_.hb=function Le(){return new sf(this)};_.gb=function(){return this.hb()};_.t=function Me(a){return this===a||fe(this.a,a)};_.v=function Oe(){return Apb(new inb(this.a))};_.W=function Pe(){return ud(this.b)};_.Y=function Re(){return Zmb(this.a)};_.w=function Se(){return ie(this.a)};Nkb(xyb,'AbstractMapBasedMultimap/AsMap',262);hI(640,1,Dyb);_.ib=function $e(a){return Te()};_.jb=function _e(a){return Ue(this,a)};_.Q=function af(){We(this);};_.kb=function bf(a){return Ve(this,a,false)};_.lb=function cf(a){return Xe(this,a)};_.V=function df(){return this.Y()==0};_.nb=function ef(a){return Ve(this,a,true)};_.ob=function ff(){return this.pb(xv(UF,syb,1,this.Y(),4,1))};_.pb=function gf(a){return Ye(this,a)};_.w=function hf(){return Ze(this)};Nkb(Cyb,'AbstractCollection',640);hI(641,640,Eyb);_.t=function kf(a){return jf(this,a)};_.v=function lf(){return Apb(this)};Nkb(Cyb,'AbstractSet',641);hI(649,641,Eyb);Nkb(xyb,'Sets/ImprovedAbstractSet',649);hI(655,649,Eyb);_.Q=function nf(){this.qb().Q();};_.kb=function of(a){return mf(this,a)};_.V=function pf(){return this.qb().V()};_.nb=function qf(a){var b;if(this.kb(a)){b=Wv(a,21);return this.qb().W().nb(b.yb())}return false};_.Y=function rf(){return this.qb().Y()};Nkb(xyb,'Maps/EntrySet',655);hI(387,655,Eyb,sf);_.kb=function tf(a){return Qh(new inb(this.a.a),a)};_.mb=function uf(){return new xf(this.a)};_.qb=function vf(){return this.a};_.nb=function wf(a){var b;if(!Qh(new inb(this.a.a),a)){return false}b=Wv(a,21);Hd(this.a.b,b.yb());return true};Nkb(xyb,'AbstractMapBasedMultimap/AsMap/AsMapEntries',387);hI(299,1,Ayb,xf);_.H=function zf(){var a;return a=pnb(this.b),this.a=Wv(a.zb(),19),He(this.c,a)};_.G=function yf(){return this.b.b};_.I=function Af(){qnb(this.b);this.c.b.c-=this.a.Y();this.a.Q();};Nkb(xyb,'AbstractMapBasedMultimap/AsMap/AsMapIterator',299);hI(260,649,Eyb,Bf);_.Q=function Cf(){this.b.Q();};_.kb=function Df(a){return this.b.R(a)};_.V=function Ef(){return this.b.V()};_.mb=function Ff(){return mp(),Wl(this.b.bb().mb(),(xp(),vp))};_.nb=function Gf(a){if(this.b.R(a)){this.b.eb(a);return true}return false};_.Y=function Hf(){return this.b.Y()};Nkb(xyb,'Maps/KeySet',260);hI(386,260,Eyb,If);_.Q=function Jf(){var a;Ml((a=this.b.bb().mb(),new Pf(this,a)));};_.lb=function Kf(a){return this.b.W().lb(a)};_.t=function Lf(a){return this===a||this.b.W().t(a)};_.v=function Mf(){return this.b.W().v()};_.mb=function Nf(){var a;return a=this.b.bb().mb(),new Pf(this,a)};_.nb=function Of(a){var b,c;c=0;b=Wv(this.b.eb(a),19);if(b){c=b.Y();b.Q();this.a.c-=c;}return c>0};Nkb(xyb,'AbstractMapBasedMultimap/KeySet',386);hI(300,1,Ayb,Pf);_.G=function Qf(){return this.c.G()};_.H=function Rf(){this.a=Wv(this.c.H(),21);return this.a.yb()};_.I=function Sf(){var a;ec(!!this.a);a=Wv(this.a.zb(),19);this.c.I();this.b.a.c-=a.Y();a.Q();};Nkb(xyb,'AbstractMapBasedMultimap/KeySet/1',300);hI(216,640,Dyb,_f);_.ib=function ag(a){return Tf(this,a)};_.jb=function bg(a){return Uf(this,a)};_.Q=function cg(){Wf(this);};_.kb=function dg(a){return Yf(this),this.d.kb(a)};_.lb=function eg(a){return Yf(this),this.d.lb(a)};_.t=function fg(a){return Xf(this,a)};_.v=function gg(){return Yf(this),this.d.v()};_.mb=function hg(){return Yf(this),new xg(this)};_.nb=function ig(a){return Zf(this,a)};_.Y=function jg(){return Yf(this),this.d.Y()};_.w=function kg(){Yf(this);return xb(this.d)};Nkb(xyb,'AbstractMapBasedMultimap/WrappedCollection',216);var sH=Pkb(Cyb,'List');hI(297,216,Fyb,mg);_.rb=function ng(a,b){var c;Yf(this);c=this.d.V();Wv(this.d,20).rb(a,b);++this.a.c;c&&Vf(this);};_.sb=function og(a){Yf(this);return Wv(this.d,20).sb(a)};_.tb=function pg(){Yf(this);return new Cg(this)};_.ub=function qg(a){Yf(this);return new Dg(this,a)};_.vb=function rg(a){var b;Yf(this);b=Wv(this.d,20).vb(a);--this.a.c;$f(this);return b};_.wb=function sg(a,b){Yf(this);return Wv(this.d,20).wb(a,b)};_.xb=function tg(a,b){Yf(this);return Ld(this.a,this.e,Wv(this.d,20).xb(a,b),!this.b?this:this.b)};Nkb(xyb,'AbstractMapBasedMultimap/WrappedList',297);hI(385,297,Gyb,ug);Nkb(xyb,'AbstractMapBasedMultimap/RandomAccessWrappedList',385);hI(189,1,Ayb,xg);_.G=function zg(){return wg(this),this.b.G()};_.H=function Ag(){return wg(this),this.b.H()};_.I=function Bg(){this.b.I();--this.d.f.c;$f(this.d);};Nkb(xyb,'AbstractMapBasedMultimap/WrappedCollection/WrappedIterator',189);hI(298,189,Hyb,Cg,Dg);_.J=function Eg(a){var b;b=lg(this.a)==0;(wg(this),Wv(this.b,96)).J(a);++this.a.a.c;b&&Vf(this.a);};_.K=function Fg(){return (wg(this),Wv(this.b,96)).K()};_.L=function Gg(){return (wg(this),Wv(this.b,96)).L()};_.M=function Hg(){return (wg(this),Wv(this.b,96)).M()};_.N=function Ig(){return (wg(this),Wv(this.b,96)).N()};_.O=function Jg(a){(wg(this),Wv(this.b,96)).O(a);};Nkb(xyb,'AbstractMapBasedMultimap/WrappedList/WrappedListIterator',298);hI(295,216,Eyb,Kg);Nkb(xyb,'AbstractMapBasedMultimap/WrappedSet',295);hI(296,216,Iyb,Lg);Nkb(xyb,'AbstractMapBasedMultimap/WrappedSortedSet',296);hI(668,1,Jyb);_.t=function Mg(a){var b;if(aw(a,21)){b=Wv(a,21);return Tb(this.yb(),b.yb())&&Tb(this.zb(),b.zb())}return false};_.v=function Ng(){var a,b;a=this.yb();b=this.zb();return (a==null?0:vb(a))^(b==null?0:vb(b))};_.Ab=function Og(a){throw new Hmb};_.w=function Pg(){return this.yb()+'='+this.zb()};Nkb(xyb,Kyb,668);hI(390,640,Dyb,Qg);_.Q=function Rg(){Cd(this.a);};_.kb=function Sg(a){return td(this.a,a)};_.mb=function Tg(){return new de(this.a)};_.Y=function Ug(){return this.a.c};Nkb(xyb,'AbstractMultimap/Values',390);hI(656,640,Lyb);_.ib=function Wg(a){return this.Bb(a,1),true};_.Bb=function Xg(a,b){throw new Hmb};_.jb=function Yg(a){return Eq(this,a)};_.Q=function Zg(){Ml(this.Eb());};_.kb=function $g(a){return this.Cb(a)>0};_.Cb=function _g(a){var b,c;for(c=Vg(this).mb();c.G();){b=Wv(c.H(),83);if(Tb(b.Zb(),a)){return b.Yb()}}return 0};_.gb=function ah(){return new qh(this)};_.bb=function bh(){return Vg(this)};_.t=function dh(a){return Fq(this,a)};_.v=function eh(){return Vg(this).v()};_.V=function fh(){return Vg(this).V()};_.mb=function gh(){return Dq(),new Oq(this,Vg(this).mb())};_.nb=function hh(a){return this.Fb(a,1)>0};_.Fb=function ih(a,b){throw new Hmb};_.Gb=function jh(a,b){var c,d;return Dq(),Mh(b,'count'),c=this.Cb(a),d=b-c,d>0?this.Bb(a,d):d<0&&this.Fb(a,-d),c};_.Hb=function kh(a,b,c){return Gq(this,a,b,c)};_.Y=function lh(){return Hq(this)};_.w=function mh(){return xb(Vg(this))};Nkb(xyb,'AbstractMultiset',656);hI(657,649,Eyb);_.Q=function nh(){this.Ib().Q();};_.kb=function oh(a){var b,c;if(aw(a,83)){c=Wv(a,83);if(c.Yb()<=0){return false}b=this.Ib().Cb(c.Zb());return b==c.Yb()}return false};_.nb=function ph(a){var b,c,d,e;if(aw(a,83)){c=Wv(a,83);b=c.Zb();d=c.Yb();if(d!=0){e=this.Ib();return e.Hb(b,d,0)}}return false};Nkb(xyb,'Multisets/EntrySet',657);hI(396,657,Eyb,qh);_.mb=function rh(){return this.a.Eb()};_.Ib=function sh(){return this.a};_.Y=function th(){return this.a.Db()};Nkb(xyb,'AbstractMultiset/EntrySet',396);hI(384,294,zyb);_.Z=function wh(){return new wtb(op(this.a))};_.$=function xh(){return hi(),kr(),jr};_.U=function zh(a){return Wv(Dd(this,a),18)};_.X=function Ah(a){return Wv(Gd(this,a),18)};_.P=function vh(){var a;return a=this.f,!a?(this.f=new Ie(this,this.b)):a};_.t=function yh(a){return Mp(this,a)};Nkb(xyb,'AbstractSetMultimap',384);hI(342,656,Lyb);Nkb(xyb,'AbstractSortedMultiset',342);hI(280,600,zyb,Dh);_.a=0;Nkb(xyb,'ArrayListMultimap',280);hI(159,17,Myb);var Eh,Fh;var dx=Okb(xyb,'BoundType',159,IF,Ih);hI(623,159,Myb,Jh);Okb(xyb,'BoundType/1',623,dx,null);hI(624,159,Myb,Kh);Okb(xyb,'BoundType/2',624,dx,null);var Nh;hI(234,1,Oyb);_.w=function Th(){return Vl(this.c.mb())};Nkb(xyb,'FluentIterable',234);hI(170,234,Oyb,Vh);_.mb=function Wh(){return Uh(this)};Nkb(xyb,'FluentIterable/2',170);hI(664,1,{});_.w=function Xh(){return xb(irb(this.a.d).b)};Nkb(xyb,'ForwardingObject',664);hI(665,664,Dyb);_.ib=function Yh(a){return irb(this.a.d),vqb()};_.jb=function Zh(a){return irb(this.a.d),wqb()};_.Q=function $h(){irb(this.a.d);xqb();};_.kb=function _h(a){return Irb(irb(this.a.d),a)};_.lb=function ai(a){return Jrb(irb(this.a.d),a)};_.V=function bi(){return irb(this.a.d).b.V()};_.mb=function ci(){var a;return a=irb(this.a.d).b.mb(),new Trb(a)};_.nb=function di(a){return irb(this.a.d),yqb()};_.Y=function ei(){return irb(this.a.d).b.Y()};_.ob=function fi(){return Krb(irb(this.a.d))};_.pb=function gi(a){return Lrb(irb(this.a.d),a)};Nkb(xyb,'ForwardingCollection',665);hI(660,640,Pyb);_.mb=function ti(){return this.Kb()};_.ib=function oi(a){return ii()};_.jb=function pi(a){return ji()};_.Q=function qi(){li();};_.kb=function ri(a){return a!=null&&Ve(this,a,false)};_.Jb=function si(){switch(this.Y()){case 0:return Gi(),Gi(),Fi;case 1:return Gi(),new Er(this.Kb().H());default:return new Zq(this,this.ob());}};_.nb=function ui(a){return mi()};Nkb(xyb,'ImmutableCollection',660);hI(316,660,Pyb,vi);_.mb=function Ai(){return Xl(this.a.mb())};_.kb=function wi(a){return a!=null&&this.a.kb(a)};_.lb=function xi(a){return this.a.lb(a)};_.V=function yi(){return this.a.V()};_.Kb=function zi(){return Xl(this.a.mb())};_.Y=function Bi(){return this.a.Y()};_.ob=function Ci(){return this.a.ob()};_.pb=function Di(a){return this.a.pb(a)};_.w=function Ei(){return xb(this.a)};Nkb(xyb,'ForwardingImmutableCollection',316);hI(87,660,Qyb);_.mb=function Pi(){return this.Kb()};_.tb=function Qi(){return this.Lb(0)};_.ub=function Si(a){return this.Lb(a)};_.xb=function Xi(a,b){return this.Mb(a,b)};_.rb=function Ji(a,b){throw new Hmb};_.t=function Mi(a){return yo(this,a)};_.v=function Ni(){return zo(this)};_.Kb=function Oi(){return this.Lb(0)};_.Lb=function Ri(a){return Hi(this,a)};_.vb=function Ui(a){throw new Hmb};_.wb=function Vi(a,b){throw new Hmb};_.Mb=function Wi(a,b){var c;return Yi((c=new Mo(this),new Mnb(c,a,b)))};var Fi;Nkb(xyb,'ImmutableList',87);hI(667,87,Qyb);_.mb=function gj(){return Xl(this.Nb().mb())};_.xb=function jj(a,b){return Yi(this.Nb().xb(a,b))};_.kb=function _i(a){return Zi(this,a)};_.lb=function aj(a){return this.Nb().lb(a)};_.t=function bj(a){return this.Nb().t(a)};_.sb=function cj(a){return $i(this,a)};_.v=function dj(){return this.Nb().v()};_.V=function ej(){return this.Nb().V()};_.Kb=function fj(){return Xl(this.Nb().mb())};_.Y=function hj(){return this.Nb().Y()};_.Mb=function ij(a,b){return Yi(this.Nb().xb(a,b))};_.ob=function kj(){return this.Nb().pb(xv(UF,syb,1,this.Nb().Y(),4,1))};_.pb=function lj(a){return this.Nb().pb(a)};_.w=function mj(){return xb(this.Nb())};Nkb(xyb,'ForwardingImmutableList',667);hI(524,1,Ryb);_.bb=function wj(){return nj(this)};_.W=function Aj(){return oj(this)};_.fb=function Gj(){return this.Rb()};_.Q=function qj(){throw new Hmb};_.R=function rj(a){return this.cb(a)!=null};_.ab=function sj(a){return this.Rb().kb(a)};_.Pb=function uj(){return new Uk(this)};_.Qb=function vj(){return new Zk(this)};_.t=function xj(a){return pp(this,a)};_.v=function yj(){return nj(this).v()};_.V=function zj(){return this.Y()==0};_.db=function Cj(a,b){return pj()};_.eb=function Dj(a){throw new Hmb};_.w=function Ej(){var a;return mp(),a=umb(Ph(this.Y()),123),Qb(lp,a,nj(this).mb()),a.a+='}',a.a};_.Rb=function Fj(){if(this.g){return this.g}return this.g=this.Qb()};_.e=null;_.f=null;_.g=null;Nkb(xyb,'ImmutableMap',524);hI(320,524,Ryb);_.R=function Ij(a){return qp(this.d,a)};_.ab=function Jj(a){return hrb(this.d,a)};_.Ob=function Kj(){return ck(new Vj(this))};_.Pb=function Lj(){return ck(krb(this.d))};_.Qb=function Mj(){return hi(),new vi(lrb(this.d))};_.t=function Nj(a){return jrb(this.d,a)};_.cb=function Oj(a){return a==null?null:rp(this.d,a)};_.v=function Pj(){return this.d.c.v()};_.V=function Qj(){return this.d.c.V()};_.Y=function Rj(){return this.d.c.Y()};_.w=function Sj(){return xb(this.d.c)};Nkb(xyb,'ForwardingImmutableMap',320);hI(666,665,Eyb);_.t=function Tj(a){return a===this||Drb(irb(this.a.d),a)};_.v=function Uj(){return irb(this.a.d).b.v()};Nkb(xyb,'ForwardingSet',666);hI(523,666,Eyb,Vj);_.kb=function Wj(b){if(aw(b,21)&&Wv(b,21).yb()==null){return false}try{return Irb(irb(this.a.d),b)}catch(a){a=OH(a);if(aw(a,119)){return false}else throw NH(a)}};_.pb=function Xj(a){var b;b=Lrb(irb(this.a.d),a);irb(this.a.d).b.Y()<b.length&&Av(b,irb(this.a.d).b.Y(),null);return b};Nkb(xyb,'ForwardingImmutableMap/1',523);hI(663,660,Syb);_.mb=function ak(){return this.Kb()};_.t=function $j(a){return mr(this,a)};_.v=function _j(){return nr(this)};Nkb(xyb,'ImmutableSet',663);hI(315,663,Syb);_.mb=function jk(){return Xl(new Nqb(this.a.b.mb()))};_.kb=function ek(a){return a!=null&&Brb(this.a,a)};_.lb=function fk(a){return Crb(this.a,a)};_.v=function gk(){return this.a.b.v()};_.V=function hk(){return this.a.b.V()};_.Kb=function ik(){return Xl(new Nqb(this.a.b.mb()))};_.Y=function kk(){return this.a.b.Y()};_.ob=function lk(){return this.a.b.ob()};_.pb=function mk(a){return Erb(this.a,a)};_.w=function nk(){return xb(this.a.b)};Nkb(xyb,'ForwardingImmutableSet',315);hI(178,1,{178:1,3:1},sk);_.t=function tk(a){var b;if(aw(a,178)){b=Wv(a,178);return this.a.t(b.a)&&this.b==b.b&&this.c==b.c&&this.d==b.d&&this.f==b.f&&Tb(this.e,b.e)&&Tb(this.g,b.g)}return false};_.v=function uk(){return fpb(Bv(tv(UF,1),syb,1,4,[this.a,this.e,this.d,this.g,this.f]))};_.w=function vk(){return umb(xmb(umb(xmb(umb(ymb(xmb(new zmb,this.a),':'),this.d==(Gh(),Eh)?91:40),this.b?this.e:'-\u221E'),44),this.c?this.g:'\u221E'),this.f==Eh?93:41).a};_.b=false;_.c=false;Nkb(xyb,'GeneralRange',178);hI(215,384,zyb,xk);_.a=2;Nkb(xyb,'HashMultimap',215);hI(661,87,Qyb);_.kb=function yk(a){return this.Sb().kb(a)};_.V=function zk(){return this.Sb().V()};_.Y=function Ak(){return this.Sb().Y()};Nkb(xyb,'ImmutableAsList',661);hI(275,320,Ryb);_.Rb=function Ck(){return this.Ub()};_.fb=function Ek(){return this.Ub()};_.Ub=function Dk(){return oj(this.Tb())};Nkb(xyb,'ImmutableBiMap',275);hI(341,668,{3:1,21:1},Fk);_.yb=function Gk(){return this.a};_.zb=function Hk(){return this.b};_.Ab=function Ik(a){throw new Hmb};Nkb(xyb,'ImmutableEntry',341);hI(436,315,Syb,Jk);Nkb(xyb,'ImmutableEnumSet',436);hI(379,378,yyb,Mk);Nkb(xyb,'ImmutableList/1',379);hI(266,108,wyb,Nk);_.G=function Ok(){return this.a.G()};_.H=function Pk(){return Wv(this.a.H(),21).yb()};Nkb(xyb,'ImmutableMap/1',266);hI(670,663,Syb);_.mb=function Sk(){var a;return a=nj(this.a).Kb(),new Nk(a)};_.Jb=function Qk(){return new jl(this)};_.Kb=function Rk(){var a;return (a=this.c,!a?(this.c=new jl(this)):a).Kb()};Nkb(xyb,'ImmutableSet/Indexed',670);hI(606,670,Syb,Uk);_.mb=function Xk(){var a;return a=nj(this.a).Kb(),new Nk(a)};_.kb=function Vk(a){return this.a.R(a)};_.Kb=function Wk(){var a;return a=nj(this.a).Kb(),new Nk(a)};_.Y=function Yk(){return this.a.Y()};Nkb(xyb,'ImmutableMapKeySet',606);hI(604,660,Pyb,Zk);_.mb=function bl(){return new dl(this)};_.kb=function $k(a){return a!=null&&(Il(),Il(),Tl(new dl(this),(hc(),a==null?(Lc(),Jc):new sc(a)))!=-1)};_.Jb=function _k(){var a;a=ki(nj(this.a));return new gl(this,a)};_.Kb=function al(){return new dl(this)};_.Y=function cl(){return this.a.Y()};Nkb(xyb,'ImmutableMapValues',604);hI(282,108,wyb,dl);_.G=function el(){return this.a.G()};_.H=function fl(){return Wv(this.a.H(),21).zb()};Nkb(xyb,'ImmutableMapValues/1',282);hI(605,661,Qyb,gl);_.Sb=function hl(){return this.a};_.sb=function il(a){return Wv(this.b.sb(a),21).zb()};Nkb(xyb,'ImmutableMapValues/2',605);hI(311,661,Qyb,jl);_.Sb=function kl(){return this.a};_.sb=function ll(a){return Tk(this.a,a)};Nkb(xyb,'ImmutableSet/Indexed/1',311);hI(414,234,Oyb,vl);_.mb=function wl(){return Nl(this.a)};_.w=function xl(){return Ze(this.a)+' (cycled)'};Nkb(xyb,'Iterables/1',414);hI(105,1,Tyb,yl);_.B=function zl(a){return Wv(a,22).mb()};Nkb(xyb,'Iterables/12',105);hI(415,234,Oyb,Bl);_.mb=function Cl(){return Al(this)};Nkb(xyb,'Iterables/4',415);hI(416,234,Oyb,El);_.mb=function Fl(){return Dl(this)};Nkb(xyb,'Iterables/5',416);var Gl,Hl;hI(424,651,yyb,Yl);_.G=function Zl(){return false};_.K=function $l(){return false};_.H=function _l(){throw new nvb};_.L=function am(){return 0};_.M=function bm(){throw new nvb};_.N=function cm(){return -1};Nkb(xyb,'Iterators/1',424);hI(264,108,wyb,dm);_.G=function em(){return !this.a};_.H=function fm(){if(this.a){throw new nvb}this.a=true;return this.b};_.a=false;Nkb(xyb,'Iterators/11',264);hI(425,1,Ayb,gm);_.G=function hm(){return false};_.H=function im(){throw new nvb};_.I=function jm(){ec(false);};Nkb(xyb,'Iterators/2',425);hI(426,108,wyb,km);_.G=function lm(){return this.a.G()};_.H=function mm(){return this.a.H()};Nkb(xyb,'Iterators/3',426);hI(427,1,Ayb,om);_.G=function pm(){return this.a.G()||this.b.mb().G()};_.H=function qm(){return nm(this)};_.I=function rm(){this.a.I();};Nkb(xyb,'Iterators/4',427);hI(429,428,wyb,tm);Nkb(xyb,'Iterators/6',429);hI(261,1,Ayb);_.G=function wm(){return this.b.G()};_.H=function xm(){return um(this)};_.I=function ym(){this.b.I();};Nkb(xyb,'TransformedIterator',261);hI(430,261,Ayb,Am);_.Vb=function Bm(a){return zm(this,a)};Nkb(xyb,'Iterators/7',430);hI(313,1,Ayb);_.G=function Fm(){return Cm(this)};_.H=function Gm(){return Dm(this)};_.I=function Hm(){ec(!!this.c);this.c.I();this.c=null;};Nkb(xyb,'MultitransformedIterator',313);hI(90,313,{90:1,35:1},Im);_.Wb=function Jm(a){return Wv(a,35)};Nkb(xyb,'Iterators/ConcatenatedIterator',90);hI(314,313,Ayb,Lm);_.Wb=function Mm(a){return Km(Wv(a,35))};Nkb(xyb,'Iterators/ConcatenatedIterator/1',314);hI(329,653,zyb,Um);_.U=function $m(a){return new Bn(this,a)};_.X=function an(a){return Sm(this,a)};_.Q=function Wm(){Pm(this);};_.R=function Xm(a){return Qm(this,a)};_.S=function Ym(){return new Pp(this)};_.T=function Zm(){return new Hn(this)};_.V=function _m(){return !this.a};_.Y=function bn(){return this.d};_.c=0;_.d=0;Nkb(xyb,'LinkedListMultimap',329);hI(647,640,Fyb);_.rb=function en(a,b){throw new Imb('Add not supported on this list')};_.ib=function fn(a){this.rb(this.Y(),a);return true};_.Q=function gn(){this.Xb(0,this.Y());};_.t=function hn(a){return cn(this,a)};_.v=function jn(){return Bpb(this)};_.mb=function kn(){return new wnb(this)};_.tb=function ln(){return this.ub(0)};_.ub=function mn(a){return new Fnb(this,a)};_.vb=function nn(a){throw new Imb('Remove not supported on this list')};_.Xb=function on(a,b){var c,d;d=this.ub(a);for(c=a;c<b;++c){d.H();d.I();}};_.wb=function pn(a,b){throw new Imb('Set not supported on this list')};_.xb=function qn(a,b){return new Mnb(this,a,b)};_.d=0;Nkb(Cyb,'AbstractList',647);hI(648,647,Fyb);_.rb=function vn(a,b){rn(this,a,b);};_.sb=function wn(a){return tn(this,a)};_.mb=function xn(){return this.ub(0)};_.vb=function yn(a){return un(this,a)};_.wb=function zn(b,c){var d,e;d=this.ub(b);try{e=d.H();d.O(c);return e}catch(a){a=OH(a);if(aw(a,74)){throw new okb("Can't set element "+b)}else throw NH(a)}};Nkb(Cyb,'AbstractSequentialList',648);hI(276,648,Fyb,Bn);_.ub=function Cn(a){return An(this,a)};_.Y=function Dn(){var a;a=Wv(Smb(this.a.b,this.b),126);return !a?0:a.a};Nkb(xyb,'LinkedListMultimap/1',276);hI(330,648,Fyb,En);_.ub=function Fn(a){return new _n(this.a,a)};_.Y=function Gn(){return this.a.d};Nkb(xyb,'LinkedListMultimap/1EntriesImpl',330);hI(563,649,Eyb,Hn);_.kb=function In(a){return Qm(this.a,a)};_.mb=function Jn(){return new Nn(this.a)};_.nb=function Kn(a){return !Sm(this.a,a).a.V()};_.Y=function Ln(){return Zmb(this.a.b)};Nkb(xyb,'LinkedListMultimap/1KeySetImpl',563);hI(562,1,Ayb,Nn);_.G=function On(){Mn(this);return !!this.c};_.H=function Pn(){Mn(this);Vm(this.c);this.a=this.c;stb(this.d,this.a.a);do{this.c=this.c.b;}while(!!this.c&&!stb(this.d,this.c.a));return this.a.a};_.I=function Qn(){Mn(this);ec(!!this.a);Ml(new mo(this.e,this.a.a));this.a=null;this.b=this.e.c;};_.b=0;Nkb(xyb,'LinkedListMultimap/DistinctKeyIterator',562);hI(126,1,{126:1},Rn);_.a=0;Nkb(xyb,'LinkedListMultimap/KeyList',126);hI(560,668,Jyb,Sn);_.yb=function Tn(){return this.a};_.zb=function Un(){return this.f};_.Ab=function Vn(a){var b;b=this.f;this.f=a;return b};Nkb(xyb,'LinkedListMultimap/Node',560);hI(561,1,Hyb,_n);_.J=function ao(a){Wv(a,21);Wn();};_.H=function eo(){return Yn(this)};_.M=function go(){return Zn(this)};_.O=function jo(a){Wv(a,21);$n();};_.G=function bo(){Xn(this);return !!this.c};_.K=function co(){Xn(this);return !!this.e};_.L=function fo(){return this.d};_.N=function ho(){return this.d-1};_.I=function io(){Xn(this);ec(!!this.a);if(this.a!=this.c){this.e=this.a.d;--this.d;}else {this.c=this.a.b;}Tm(this.f,this.a);this.a=null;this.b=this.f.c;};_.b=0;_.d=0;Nkb(xyb,'LinkedListMultimap/NodeIterator',561);hI(241,1,Hyb,mo,no);_.J=function oo(a){this.e=Nm(this.f,this.b,a,this.c);++this.d;this.a=null;};_.G=function po(){return !!this.c};_.K=function qo(){return !!this.e};_.H=function ro(){return ko(this)};_.L=function so(){return this.d};_.M=function to(){return lo(this)};_.N=function uo(){return this.d-1};_.I=function vo(){ec(!!this.a);if(this.a!=this.c){this.e=this.a.e;--this.d;}else {this.c=this.a.c;}Tm(this.f,this.a);this.a=null;};_.O=function wo(a){dc(!!this.a);this.a.f=a;};_.d=0;Nkb(xyb,'LinkedListMultimap/ValueForKeyIterator',241);hI(419,647,Fyb);_.rb=function Go(a,b){this.a.rb(a,b);};_.kb=function Ho(a){return this.a.kb(a)};_.sb=function Io(a){return this.a.sb(a)};_.vb=function Jo(a){return this.a.vb(a)};_.wb=function Ko(a,b){return this.a.wb(a,b)};_.Y=function Lo(){return this.a.Y()};Nkb(xyb,'Lists/AbstractListWrapper',419);hI(420,419,Gyb);Nkb(xyb,'Lists/RandomAccessListWrapper',420);hI(422,420,Gyb,Mo);_.ub=function No(a){return this.a.ub(a)};Nkb(xyb,'Lists/1',422);hI(88,647,{88:1,22:1,19:1,20:1},Ro);_.rb=function So(a,b){this.a.rb(Qo(this,a),b);};_.Q=function To(){this.a.Q();};_.sb=function Uo(a){return this.a.sb(Po(this,a))};_.mb=function Vo(){return Oo(this,0)};_.ub=function Wo(a){return Oo(this,a)};_.vb=function Xo(a){return this.a.vb(Po(this,a))};_.Xb=function Yo(a,b){(cc(a,b,this.a.Y()),Fo(this.a.xb(Qo(this,b),Qo(this,a)))).Q();};_.wb=function Zo(a,b){return this.a.wb(Po(this,a),b)};_.Y=function $o(){return this.a.Y()};_.xb=function _o(a,b){return cc(a,b,this.a.Y()),Fo(this.a.xb(Qo(this,b),Qo(this,a)))};Nkb(xyb,'Lists/ReverseList',88);hI(220,88,{88:1,22:1,19:1,20:1,63:1},ap);Nkb(xyb,'Lists/RandomAccessReverseList',220);hI(421,1,Hyb,bp);_.J=function cp(a){this.c.J(a);this.c.M();this.a=false;};_.G=function dp(){return this.c.K()};_.K=function ep(){return this.c.G()};_.H=function fp(){if(!this.c.K()){throw new nvb}this.a=true;return this.c.M()};_.L=function gp(){return Qo(this.b,this.c.L())};_.M=function hp(){if(!this.c.G()){throw new nvb}this.a=true;return this.c.H()};_.N=function ip(){return Qo(this.b,this.c.L())-1};_.I=function jp(){ec(this.a);this.c.I();this.a=false;};_.O=function kp(a){dc(this.a);this.c.O(a);};_.a=false;Nkb(xyb,'Lists/ReverseList/1',421);var lp;hI(376,261,Ayb,tp);_.Vb=function up(a){return mp(),new Fk(a,aq(this.a,a))};Nkb(xyb,'Maps/1',376);hI(188,17,Wyb);var vp,wp;var jy=Okb(xyb,'Maps/EntryFunction',188,IF,zp);hI(374,188,Wyb,Ap);_.B=function Bp(a){return Wv(a,21).yb()};Okb(xyb,'Maps/EntryFunction/1',374,jy,null);hI(375,188,Wyb,Cp);_.B=function Dp(a){return Wv(a,21).zb()};Okb(xyb,'Maps/EntryFunction/2',375,jy,null);hI(373,640,Dyb,Fp);_.Q=function Gp(){this.a.Q();};_.kb=function Hp(a){return this.a.ab(a)};_.V=function Ip(){return this.a.V()};_.mb=function Jp(){return Ep(this)};_.nb=function Kp(b){var c,d;try{return Ve(this,b,true)}catch(a){a=OH(a);if(aw(a,45)){for(d=this.a.bb().mb();d.G();){c=Wv(d.H(),21);if(Tb(b,c.zb())){this.a.eb(c.yb());return true}}return false}else throw NH(a)}};_.Y=function Lp(){return this.a.Y()};Nkb(xyb,'Maps/Values',373);hI(301,654,Byb,Pp);_.cb=function Tp(a){return this.a.R(a)?this.a.U(a):null};_.eb=function Wp(a){return this.a.R(a)?this.a.X(a):null};_.Q=function Qp(){this.a.Q();};_.R=function Rp(a){return this.a.R(a)};_.hb=function Sp(){return new Yp(this)};_.gb=function(){return this.hb()};_.V=function Up(){return this.a.V()};_.W=function Vp(){return this.a.W()};_.Y=function Xp(){return this.a.W().Y()};Nkb(xyb,'Multimaps/AsMap',301);hI(393,655,Eyb,Yp);_.mb=function Zp(){return np(this.a.a.W(),new bq(this))};_.qb=function $p(){return this.a};_.nb=function _p(a){var b;if(!mf(this,a)){return false}b=Wv(a,21);Op(this.a,b.yb());return true};Nkb(xyb,'Multimaps/AsMap/EntrySet',393);hI(395,1,Tyb,bq);_.B=function cq(a){return aq(this,a)};Nkb(xyb,'Multimaps/AsMap/EntrySet/1',395);hI(391,656,Lyb,eq);_.Q=function fq(){Pm(this.a);};_.kb=function gq(a){return Qm(this.a,a)};_.Cb=function hq(a){var b;return b=Wv(rp(Om(this.a),a),19),!b?0:b.Y()};_.gb=function iq(){return new wq(this)};_.Db=function jq(){return Om(this.a).Y()};_.Eb=function kq(){return new nq(Ae(Om(this.a)).mb())};_.mb=function lq(){return dq(this)};_.Fb=function mq(a,b){var c,d,e,f,g;Mh(b,Xyb);if(b==0){return g=Wv(rp(Om(this.a),a),19),!g?0:g.Y()}f=Wv(rp(Om(this.a),a),19);if(!f){return 0}e=f.Y();if(b>=e){f.Q();}else {d=f.mb();for(c=0;c<b;c++){d.H();d.I();}}return e};Nkb(xyb,'Multimaps/Keys',391);hI(302,261,Ayb,nq);_.Vb=function oq(a){return new tq(Wv(a,21))};Nkb(xyb,'Multimaps/Keys/1',302);hI(658,1,{83:1});_.t=function qq(a){var b;if(aw(a,83)){b=Wv(a,83);return this.Yb()==b.Yb()&&Tb(this.Zb(),b.Zb())}return false};_.v=function rq(){var a;a=this.Zb();return (a==null?0:vb(a))^this.Yb()};_.w=function sq(){return pq(this)};Nkb(xyb,'Multisets/AbstractEntry',658);hI(394,658,{83:1},tq);_.Yb=function uq(){return Wv(this.a.zb(),19).Y()};_.Zb=function vq(){return this.a.yb()};Nkb(xyb,'Multimaps/Keys/1/1',394);hI(392,657,Eyb,wq);_.kb=function xq(a){var b,c;if(aw(a,83)){c=Wv(a,83);b=Wv(Om(this.a.a).cb(c.Zb()),19);return !!b&&b.Y()==c.Yb()}return false};_.V=function yq(){return !this.a.a.a};_.mb=function zq(){return new nq(Ae(Om(this.a.a)).mb())};_.Ib=function Aq(){return this.a};_.nb=function Bq(a){var b,c;if(aw(a,83)){c=Wv(a,83);b=Wv(Om(this.a.a).cb(c.Zb()),19);if(!!b&&b.Y()==c.Yb()){b.Q();return true}}return false};_.Y=function Cq(){return Om(this.a.a).Y()};Nkb(xyb,'Multimaps/Keys/KeysEntrySet',392);hI(659,1,fyb);Nkb(xyb,'Ordering',659);hI(398,659,fyb,Jq);_.$b=function Kq(a,b){return Iq(Wv(a,83),Wv(b,83))};Nkb(xyb,'Multisets/1',398);hI(397,658,{83:1,3:1},Lq);_.Yb=function Mq(){return this.a};_.Zb=function Nq(){return this.b};_.a=0;Nkb(xyb,'Multisets/ImmutableEntry',397);hI(303,1,Ayb,Oq);_.G=function Pq(){return this.d>0||this.c.G()};_.H=function Qq(){if(!(this.d>0||this.c.G())){throw new nvb}if(this.d==0){this.b=Wv(this.c.H(),83);this.f=this.d=this.b.Yb();}--this.d;this.a=true;return this.b.Zb()};_.I=function Rq(){ec(this.a);this.f==1?this.c.I():this.e.Fb(this.b.Zb(),1)>0;--this.f;this.a=false;};_.a=false;_.d=0;_.f=0;Nkb(xyb,'Multisets/MultisetIteratorImpl',303);hI(622,659,{3:1,56:1},Vq);_.$b=function Wq(a,b){return Uq(Wv(a,23),Wv(b,23))};_.w=function Xq(){return 'Ordering.natural()'};var Sq;Nkb(xyb,'NaturalOrdering',622);hI(343,661,Qyb,Zq);_.ub=function br(a){return Hi(this.b,a)};_.Sb=function $q(){return this.a};_.sb=function _q(a){return $i(this.b,a)};_.Lb=function ar(a){return Hi(this.b,a)};Nkb(xyb,'RegularImmutableAsList',343);hI(559,275,Ryb,er);_.Tb=function fr(){return this.a};var cr;Nkb(xyb,'RegularImmutableBiMap',559);hI(53,667,Qyb,gr);_.Nb=function hr(){return this.a};Nkb(xyb,'RegularImmutableList',53);hI(321,320,Ryb,ir);Nkb(xyb,'RegularImmutableMap',321);hI(265,315,Syb,lr);var jr;Nkb(xyb,'RegularImmutableSet',265);hI(650,641,Eyb);Nkb(xyb,'Sets/SetView',650);hI(377,650,Eyb,tr);_.kb=function ur(a){return ttb(this.b,a)&&ttb(this.c,a)};_.lb=function vr(a){return Xe(this.b,a)&&Xe(this.c,a)};_.V=function wr(){return sr(this)};_.mb=function xr(){var a;return Pl((a=(new Snb(this.b.a)).a.bb().mb(),new Ynb(a)),this.a)};_.Y=function yr(){var a;return Ul(Pl((a=(new Snb(this.b.a)).a.bb().mb(),new Ynb(a)),this.a))};Nkb(xyb,'Sets/2',377);hI(328,275,Ryb,zr,Ar);_.fb=function Dr(){return hi(),new Gr(this.c)};_.Tb=function Br(){var a;a=this.a;return !a?(this.a=new Ar(this.c,this.b,this)):a};_.Ub=function Cr(){return hi(),new Gr(this.c)};Nkb(xyb,'SingletonImmutableBiMap',328);hI(127,667,Qyb,Er);_.Nb=function Fr(){return this.a};Nkb(xyb,'SingletonImmutableList',127);hI(135,663,Syb,Gr);_.mb=function Jr(){return Il(),new dm(this.a)};_.kb=function Hr(a){return rb(this.a,a)};_.Kb=function Ir(){return Il(),new dm(this.a)};_.Y=function Kr(){return 1};Nkb(xyb,'SingletonImmutableSet',135);hI(285,342,{207:1,3:1,22:1,19:1},Ur,Vr);_.Bb=function Wr(a,b){return Lr(this,a,b)};_.Cb=function Xr(a){return Pr(this,a)};_.Db=function Yr(){return $s(Or(this,(qs(),os)))};_.Eb=function $r(){return new ks(this)};_.Fb=function _r(a,b){return Sr(this,a,b)};_.Gb=function as(a,b){return Tr(this,a,b)};_.Hb=function bs(a,b,c){var d,e,f;Mh(c,'newCount');Mh(b,'oldCount');Xb(ok(this.b,a));f=this.c.a;if(!f){if(b==0){c>0&&Lr(this,a,c);return true}else {return false}}e=xv(mw,Yyb,26,1,12,1);d=Ms(f,this.d,a,b,c,e);Us(this.c,f,d);return e[0]==b};_.Y=function cs(){return $s(Or(this,(qs(),ps)))};Nkb(xyb,'TreeMultiset',285);hI(619,658,{83:1},fs);_.Yb=function gs(){var a;a=this.b.c;return a==0?Pr(this.a,this.b.b):a};_.Zb=function hs(){return this.b.b};Nkb(xyb,'TreeMultiset/1',619);hI(620,1,Ayb,ks);_.H=function ms(){return js(this)};_.G=function ls(){return is(this)};_.I=function ns(){ec(!!this.b);Tr(this.c,this.b.b.b,0);this.b=null;};Nkb(xyb,'TreeMultiset/2',620);hI(205,17,Zyb);var os,ps;var Ty=Okb(xyb,'TreeMultiset/Aggregate',205,IF,ss);hI(617,205,Zyb,ts);_._b=function us(a){return a.c};_.ac=function vs(a){return !a?0:a.j};Okb(xyb,'TreeMultiset/Aggregate/1',617,Ty,null);hI(618,205,Zyb,ws);_._b=function xs(a){return 1};_.ac=function ys(a){return !a?0:a.a};Okb(xyb,'TreeMultiset/Aggregate/2',618,Ty,null);hI(206,658,{83:1,206:1},Os);_.Yb=function Ps(){return this.c};_.Zb=function Qs(){return this.b};_.w=function Ss(){return Dq(),pq(new Lq(this.b,this.c))};_.a=0;_.c=0;_.d=0;_.j=0;Nkb(xyb,'TreeMultiset/AvlNode',206);hI(616,1,{},Vs);Nkb(xyb,'TreeMultiset/Reference',616);var $y=Nkb(lyb,'JavaScriptObject$',0);var qt;hI(628,1,{});Nkb(lyb,'Scheduler',628);var ut=0,vt=0,wt=-1;hI(360,628,{},Jt);var Ft;Nkb(myb,'SchedulerImpl',360);hI(646,1,{});_.hc=function bu(){return null};_.ic=function cu(){return null};_.jc=function du(){return null};_.kc=function eu(){return null};_.lc=function fu(){return null};Nkb(_yb,'JSONValue',646);hI(214,646,{214:1},ju,ku);_.t=function lu(a){if(!aw(a,214)){return false}return this.a==Wv(a,214).a};_.gc=function mu(){return qu};_.v=function nu(){return txb(this.a)};_.hc=function ou(){return this};_.w=function pu(){var a,b,c;c=new Bmb('[');for(b=0,a=this.a.length;b<a;b++){b>0&&(c.a+=',',c);xmb(c,gu(this,b));}c.a+=']';return c.a};Nkb(_yb,'JSONArray',214);hI(292,646,{},uu);_.gc=function vu(){return yu};_.ic=function wu(){return this};_.w=function xu(){return Bkb(this.a)};_.a=false;var ru,su;Nkb(_yb,'JSONBoolean',292);hI(371,72,Vxb,zu);Nkb(_yb,'JSONException',371);hI(435,646,{},Cu);_.gc=function Du(){return Fu};_.w=function Eu(){return Wxb};var Au;Nkb(_yb,'JSONNull',435);hI(104,646,{104:1},Gu);_.t=function Hu(a){if(!aw(a,104)){return false}return this.a==Wv(a,104).a};_.gc=function Iu(){return Mu};_.v=function Ju(){return hw(Ixb(this.a))};_.jc=function Ku(){return this};_.w=function Lu(){return this.a+''};_.a=0;Nkb(_yb,'JSONNumber',104);hI(69,646,{69:1},Tu,Uu);_.t=function Vu(a){if(!aw(a,69)){return false}return this.a==Wv(a,69).a};_.gc=function Wu(){return $u};_.v=function Xu(){return txb(this.a)};_.kc=function Yu(){return this};_.w=function Zu(){var a,b,c,d,e,f;f=new Bmb('{');a=true;e=Nu(this,xv($F,Txb,2,0,5,1));for(c=0,d=e.length;c<d;++c){b=e[c];a?(a=false):(f.a+=', ',f);ymb(f,st(b));f.a+=':';xmb(f,Pu(this,b));}f.a+='}';return f.a};Nkb(_yb,'JSONObject',69);hI(361,641,Eyb,_u);_.kb=function av(a){return ew(a)&&Ou(this.a,$v(a))};_.mb=function bv(){return new wnb(new opb(this.b))};_.Y=function cv(){return this.b.length};Nkb(_yb,'JSONObject/1',361);var dv;hI(97,646,{97:1},lv);_.t=function mv(a){if(!aw(a,97)){return false}return emb(this.a,Wv(a,97).a)};_.gc=function nv(){return rv};_.v=function ov(){return Pxb(this.a)};_.lc=function pv(){return this};_.w=function qv(){return st(this.a)};Nkb(_yb,'JSONString',97);var Ov,Pv,Qv;hI(186,1,{},sI,tI);_.b=false;_.c=0;_.d=-1;_.e=0;_.f=false;_.j=0;Nkb('de.cau.cs.kieler.core.alg','BasicProgressMonitor',186);hI(10,1,{10:1,286:1,3:1,5:1},FI,GI,HI,II);_.t=function JI(a){return yI(this,a)};_.v=function KI(){return hw(Ixb(this.a))+Blb(hw(Ixb(this.b)))};_.w=function NI(){return '('+this.a+','+this.b+')'};_.a=0;_.b=0;var qz=Nkb(izb,'KVector',10);hI(58,648,{3:1,5:1,22:1,19:1,58:1,20:1},aJ);_.ib=function bJ(a){return QI(this,a)};_.Q=function cJ(){_I(this);};_.ub=function dJ(a){return WI(this,a)};_.Y=function eJ(){return this.b};_.b=0;Nkb(Cyb,'LinkedList',58);hI(44,58,{44:1,286:1,3:1,5:1,22:1,19:1,58:1,20:1},jJ,kJ);_.w=function mJ(){var a,b,c;a=new Bmb('(');b=WI(this,0);while(b.b!=b.d.c){c=Wv(_ub(b),10);ymb(a,c.a+','+c.b);b.b!=b.d.c&&(a.a+='; ',a);}return a.a+=')',a.a};Nkb(izb,'KVectorChain',44);var rz=Pkb(kzb,'IProperty');hI(131,1,{179:1,131:1,3:1},tJ);Nkb(kzb,'MapPropertyHolder',131);hI(14,1,lzb,AJ,BJ,CJ,DJ,EJ,FJ);_.F=function GJ(a){return xJ(this,Wv(a,79))};_.t=function HJ(a){return yJ(this,a)};_.mc=function IJ(){return this.b};_.nc=function JJ(){return this.c};_.oc=function KJ(){return this.d};_.v=function LJ(){return Pxb(this.b)};_.w=function MJ(){return this.b};var uJ,vJ;Nkb(kzb,'Property',14);hI(366,1,{23:1},NJ);_.F=function OJ(a){return -1};Nkb(kzb,'Property/1',366);hI(367,1,{23:1},PJ);_.F=function QJ(a){return 1};Nkb(kzb,'Property/2',367);hI(27,1,{27:1,22:1},RJ);_.t=function SJ(a){var b,c,d;if(aw(a,27)){c=Wv(a,27);b=this.a==null?c.a==null:rb(this.a,c.a);d=this.b==null?c.b==null:rb(this.b,c.b);return b&&d}else {return false}};_.v=function TJ(){var a,b,c,d,e,f;c=this.a==null?0:vb(this.a);a=c&byb;b=c&-65536;f=this.b==null?0:vb(this.b);d=f&byb;e=f&-65536;return a^e>>16&byb|b^d<<16};_.mb=function UJ(){return new WJ(this)};_.w=function VJ(){return this.a==null&&this.b==null?'pair(null,null)':this.a==null?'pair(null,'+xb(this.b)+')':this.b==null?'pair('+xb(this.a)+',null)':'pair('+xb(this.a)+','+xb(this.b)+')'};Nkb(mzb,'Pair',27);hI(431,1,Ayb,WJ);_.G=function XJ(){return !this.c&&(!this.b&&this.a.a!=null||this.a.b!=null)};_.H=function YJ(){if(!this.c&&!this.b&&this.a.a!=null){this.b=true;return this.a.a}else if(!this.c&&this.a.b!=null){this.c=true;return this.a.b}throw new nvb};_.I=function ZJ(){this.c&&this.a.b!=null?(this.a.b=null):this.b&&this.a.a!=null&&(this.a.a=null);throw new tlb};_.b=false;_.c=false;Nkb(mzb,'Pair/1',431);hI(228,72,Vxb,$J);Nkb(nzb,'UnsupportedConfigurationException',228);hI(99,72,Vxb,_J);Nkb(nzb,'UnsupportedGraphException',99);var aK;hI(103,17,{103:1,3:1,23:1,17:1},jK);var cK,dK,eK,fK,gK,hK;var Az=Okb(rzb,'Alignment',103,IF,kK);var lK;hI(59,17,{59:1,3:1,23:1,17:1},wK);var nK,oK,pK,qK,rK;var Bz=Okb(rzb,'Direction',59,IF,xK);var yK;hI(107,17,{107:1,3:1,23:1,17:1},FK);var AK,BK,CK,DK;var Cz=Okb(rzb,'EdgeLabelPlacement',107,IF,GK);var HK;hI(122,17,{122:1,3:1,23:1,17:1},OK);var JK,KK,LK,MK;var Dz=Okb(rzb,'EdgeRouting',122,IF,PK);var QK;hI(133,17,{133:1,3:1,23:1,17:1},ZK);var SK,TK,UK,VK,WK,XK;var Ez=Okb(rzb,'EdgeType',133,IF,$K);var _K;hI(166,17,{166:1,3:1,23:1,17:1},fL);var bL,cL,dL;var Fz=Okb(rzb,'HierarchyHandling',166,IF,gL);var hL;var jL,kL,lL,mL,nL,oL,pL,qL,rL,sL,tL,uL,vL,wL,xL,yL,zL,AL,BL,CL,DL,EL,FL,GL,HL,IL,JL,KL,LL,ML,NL,OL,PL,QL,RL,SL,TL,UL,VL,WL,XL,YL,ZL,$L,_L,aM,bM,cM,dM;hI(41,17,{41:1,3:1,23:1,17:1},pM);var fM,gM,hM,iM,jM,kM,lM,mM,nM;var Gz=Okb(rzb,'NodeLabelPlacement',41,IF,qM);var rM;hI(100,17,{100:1,3:1,23:1,17:1},AM);var uM,vM,wM,xM,yM;var Hz=Okb(rzb,'PortAlignment',100,IF,BM);var CM;hI(28,17,{28:1,3:1,23:1,17:1},NM);var EM,FM,GM,HM,IM,JM;var Iz=Okb(rzb,'PortConstraints',28,IF,OM);var PM;hI(149,17,{149:1,3:1,23:1,17:1},VM);var RM,SM,TM;var Jz=Okb(rzb,'PortLabelPlacement',149,IF,WM);var XM;hI(32,17,{32:1,3:1,23:1,17:1},uN);var ZM,$M,_M,aN,bN,cN,dN,eN,fN,gN,hN,iN,jN,kN,lN,mN,nN,oN,pN,qN,rN;var Kz=Okb(rzb,'PortSide',32,IF,wN);var xN;hI(150,17,{150:1,3:1,23:1,17:1},EN);var zN,AN,BN,CN;var Lz=Okb(rzb,'SizeConstraint',150,IF,FN);var GN;hI(139,17,{139:1,3:1,23:1,17:1},NN);var IN,JN,KN,LN;var Mz=Okb(rzb,'SizeOptions',139,IF,ON);var PN;hI(62,1,{62:1},UN,VN);_.t=function WN(a){var b;if(a==null||!aw(a,62)){return false}b=Wv(a,62);return ovb(this.d,b.d)&&ovb(this.e,b.e)&&ovb(this.c,b.c)&&ovb(this.b,b.b)};_.v=function XN(){return fpb(Bv(tv(UF,1),syb,1,4,[this.d,this.e,this.c,this.b]))};_.w=function YN(){return 'Rect[x='+this.d+',y='+this.e+',w='+this.c+',h='+this.b+']'};_.b=0;_.c=0;_.d=0;_.e=0;Nkb(wzb,'Rectangle',62);hI(283,62,{283:1,62:1},ZN);_.a=0;Nkb(xzb,'LabelGroup',283);hI(67,17,{67:1,3:1,23:1,17:1},vO);var $N,_N,aO,bO,cO,dO,eO,fO,gO,hO,iO,jO,kO,lO,mO,nO,oO,pO,qO,rO,sO,tO;var Oz=Okb(xzb,'LabelLocation',67,IF,xO);hI(225,17,{225:1,3:1,23:1,17:1},EO);var AO,BO,CO;var Pz=Okb(xzb,'TextAlignment',225,IF,FO);var HO;hI(589,1,{},fP);_.a=0;_.b=false;_.d=0;_.f=0;_.k=0;_.r=0;_.s=0;Nkb(wzb,'LabelAndNodeSizeProcessor/NodeData',589);hI(171,17,{171:1,3:1,23:1,17:1},lP);var gP,hP,iP,jP;var Rz=Okb(wzb,'LabelSide',171,IF,mP);hI(590,1,{},rP);_.b=true;_.c=true;_.d=true;_.e=true;Nkb(wzb,zzb,590);hI(121,1,Bzb);_.t=function wP(a){var b;if(aw(a,121)){b=Wv(a,121);return this.d==b.d&&this.a==b.a&&this.b==b.b&&this.c==b.c}else {return false}};_.v=function xP(){var a,b;a=hw(Ixb(this.b))<<16;a|=hw(Ixb(this.a))&byb;b=hw(Ixb(this.c))<<16;b|=hw(Ixb(this.d))&byb;return a^b};_.w=function zP(){return '[top='+this.d+',left='+this.b+',bottom='+this.a+',right='+this.c+']'};_.a=0;_.b=0;_.c=0;_.d=0;Nkb(wzb,'Spacing',121);hI(232,121,Bzb,AP,BP,CP);Nkb(wzb,'Spacing/Insets',232);hI(65,121,{286:1,121:1,65:1,3:1,5:1},DP,EP,FP);Nkb(wzb,'Spacing/Margins',65);hI(364,1,{},jQ);_.c=false;_.d=null;_.g=null;var OP,PP,QP;Nkb(Ozb,'JsonGraphImporter',364);var kQ,lQ,mQ,nQ,oQ,pQ,qQ,rQ,sQ;hI(417,14,lzb,xQ);Nkb(Ozb,'LayoutOptionResolver/DummyProperty',417);hI(348,1,{},CQ);var yQ;Nkb(Ozb,'RecursiveLGraphLayout',348);hI(73,99,{73:1,3:1,54:1,46:1},EQ,FQ,GQ);var $z=Nkb(Ozb,'UnsupportedJsonGraphException',73);hI(380,1,{},OQ);var HQ,IQ;Nkb(Szb,'GraphConfigurator',380);hI(49,1,{},WQ);Nkb(Szb,'IntermediateProcessingConfiguration',49);hI(365,1,{},dR);Nkb(Szb,'KlayLayered',365);hI(577,1,{},kR);_.i=0;var eR;Nkb(Wzb,'ComponentsToCGraphTransformer',577);var UR;hI(578,1,{},lR);_.tc=function mR(a,b){return Qlb(a.wc(),b.wc())};_.uc=function nR(a,b){return Qlb(a.xc(),b.xc())};Nkb(Wzb,'ComponentsToCGraphTransformer/1',578);hI(25,1,{25:1});_.k=0;_.o=null;_.p=true;_.r=Vzb;var kA=Nkb(Xzb,'CNode',25);hI(198,25,{198:1,25:1},pR,qR);_.vc=function rR(){this.b.d=this.j.d;this.b.e=this.j.e;};_.wc=function sR(){return this.a!=null?Ixb(this.a):this.c.i};_.xc=function tR(){return this.a!=null?Ixb(this.a):this.c.i};_.w=function uR(){return ''};Nkb(Wzb,'ComponentsToCGraphTransformer/CRectNode',198);hI(549,1,{},HR);var vR,wR;Nkb(Wzb,'OneDimensionalComponentsCompaction',549);hI(550,1,Tyb,IR);_.B=function JR(a){return xR(),xkb(),Wv(Wv(a,27).a,25).f.f!=0?wkb:vkb};Nkb(Wzb,'OneDimensionalComponentsCompaction/lambda$0$Type',550);hI(551,1,Tyb,KR);_.B=function LR(a){return xR(),xkb(),uS(Wv(Wv(a,27).a,25).n,Wv(Wv(a,27).b,59))||Wv(Wv(a,27).a,25).f.f!=0&&uS(Wv(Wv(a,27).a,25).n,Wv(Wv(a,27).b,59))?wkb:vkb};Nkb(Wzb,'OneDimensionalComponentsCompaction/lambda$1$Type',551);hI(324,1,{},NR);Nkb(Xzb,'CGraph',324);hI(78,1,{78:1},QR);_.b=0;_.c=0;_.d=0;_.f=0;_.i=true;_.j=Vzb;Nkb(Xzb,'CGroup',78);hI(470,1,{},WR);_.tc=function XR(a,b){return Nlb(a.wc(),b.wc())};_.uc=function YR(a,b){return Nlb(a.xc(),b.xc())};Nkb(Xzb,'ISpacingsHandler/1',470);hI(323,1,{},rS);_.e=false;var ZR,$R,_R;var nA=Nkb(Xzb,'OneDimensionalCompactor',323);hI(554,1,Tyb,sS);_.B=function tS(a){return aS(),xkb(),Wv(Wv(a,27).a,25).f.f!=0?wkb:vkb};Nkb(Xzb,'OneDimensionalCompactor/lambda$0$Type',554);hI(335,1,{},xS);_.a=false;_.b=false;_.c=false;_.d=false;Nkb(Xzb,'Quadruplet',335);hI(587,1,{},yS);_.Cc=function zS(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;k=Uzb;for(d=new Tob(a.a.b);d.a<d.c.c.length;){b=Wv(Rob(d),25);k=Qlb(k,b.f.g.j.d+b.g.a);}q=new aJ;for(h=new Tob(a.a.a);h.a<h.c.c.length;){g=Wv(Rob(h),78);g.j=k;g.f==0&&(TI(q,g,q.c.b,q.c),true);}while(q.b!=0){g=Wv(q.b==0?null:(Bxb(q.b!=0),$I(q,q.a.a)),78);e=g.g.j.d;for(n=(p=(new Snb(g.a.a)).a.bb().mb(),new Ynb(p));n.a.G();){l=(f=Wv(n.a.H(),21),Wv(f.yb(),25));s=g.j+l.g.a;l.f.i||l.j.d<s?(l.r=s):(l.r=l.j.d);}e-=g.g.r;g.b+=e;a.d==(sK(),pK)||a.d==nK?(g.c+=e):(g.c-=e);for(m=(o=(new Snb(g.a.a)).a.bb().mb(),new Ynb(o));m.a.G();){l=(f=Wv(m.a.H(),21),Wv(f.yb(),25));for(j=l.i.mb();j.G();){i=Wv(j.H(),25);tK(a.d)?(r=a.g.tc(l,i)):(r=a.g.uc(l,i));i.f.j=Nlb(i.f.j,l.r+l.j.c+r-i.g.a);i.p||(i.f.j=Nlb(i.f.j,i.j.d-i.g.a));--i.f.f;i.f.f==0&&QI(q,i.f);}}}for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.j.d=b.r;}};Nkb(Zzb,'LongestPathCompaction',587);hI(588,1,{},AS);_.Dc=function BS(a){var b,c,d,e,f,g,h;for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.i.Q();}for(e=new Tob(a.a.b);e.a<e.c.c.length;){d=Wv(Rob(e),25);for(g=new Tob(a.a.b);g.a<g.c.c.length;){f=Wv(Rob(g),25);if(d==f){continue}if(!!d.f&&d.f==f.f){continue}tK(a.d)?(h=a.g.uc(d,f)):(h=a.g.tc(d,f));d!=f.o&&(f.j.d>d.j.d||d.j.d==f.j.d&&d.j.c<f.j.c)&&SR(f.j.e+f.j.b+h,d.j.e)&&TR(f.j.e,d.j.e+d.j.b+h)&&d.i.ib(f);}}};Nkb(Zzb,'QuadraticConstraintCalculation',588);hI(317,1,{},FS);_.Dc=function GS(a){this.b=a;ES(this,new RS,new TS);};Nkb(Zzb,'ScanlineConstraintCalculator',317);var JA=Pkb($zb,'Scanline/EventHandler');hI(464,1,{160:1},KS);_.Ec=function LS(a){IS(this,Wv(a,235));};Nkb(Zzb,'ScanlineConstraintCalculator/ConstraintsScanlineHandler',464);hI(465,1,fyb,MS);_.$b=function NS(a,b){return glb((Wv(a,25).j.d+Wv(a,25).j.c)/2,(Wv(b,25).j.d+Wv(b,25).j.c)/2)};Nkb(Zzb,'ScanlineConstraintCalculator/ConstraintsScanlineHandler/lambda$0$Type',465);hI(235,1,{235:1},OS);_.a=false;Nkb(Zzb,'ScanlineConstraintCalculator/Timestamp',235);hI(466,1,fyb,PS);_.$b=function QS(a,b){return HS(a,b)};Nkb(Zzb,'ScanlineConstraintCalculator/lambda$0$Type',466);hI(467,1,_zb,RS);_.D=function SS(a){return true};Nkb(Zzb,'ScanlineConstraintCalculator/lambda$1$Type',467);hI(468,1,Tyb,TS);_.B=function US(a){return 0};Nkb(Zzb,'ScanlineConstraintCalculator/lambda$2$Type',468);hI(48,1,{48:1},VS,WS);_.t=function XS(a){var b;if(a==null){return false}if(zA!=tb(a)){return false}b=Wv(a,48);return ovb(this.c,b.c)&&ovb(this.d,b.d)};_.v=function YS(){return fpb(Bv(tv(UF,1),syb,1,4,[this.c,this.d]))};_.w=function ZS(){return '('+this.c+', '+this.d+(this.a?'cx':'')+this.b+')'};_.a=true;_.c=0;_.d=0;var zA=Nkb($zb,'Point',48);hI(201,17,{201:1,3:1,23:1,17:1},fT);var $S,_S,aT,bT;var yA=Okb($zb,'Point/Quadrant',201,IF,iT);hI(569,1,{},qT);_.b=null;_.c=null;_.d=null;_.e=null;_.f=null;var jT,kT,lT,mT,nT;Nkb($zb,'RectilinearConvexHull',569);hI(243,1,{160:1},xT);_.Ec=function yT(a){wT(this,Wv(a,48));};_.b=0;var uT;Nkb($zb,'RectilinearConvexHull/MaximalElementsEventHandler',243);hI(571,1,fyb,AT);_.$b=function BT(a,b){return zT(a,b)};Nkb($zb,'RectilinearConvexHull/MaximalElementsEventHandler/lambda$0$Type',571);hI(570,1,{160:1},DT);_.Ec=function ET(a){CT(this,Wv(a,48));};_.a=0;_.b=null;_.c=null;_.d=null;_.e=null;Nkb($zb,'RectilinearConvexHull/RectangleEventHandler',570);hI(572,1,fyb,FT);_.$b=function GT(a,b){return oT(),Wv(a,48).c==Wv(b,48).c?glb(Wv(b,48).d,Wv(a,48).d):glb(Wv(a,48).c,Wv(b,48).c)};Nkb($zb,'RectilinearConvexHull/lambda$0$Type',572);hI(573,1,fyb,HT);_.$b=function IT(a,b){return oT(),Wv(a,48).c==Wv(b,48).c?glb(Wv(a,48).d,Wv(b,48).d):glb(Wv(a,48).c,Wv(b,48).c)};Nkb($zb,'RectilinearConvexHull/lambda$1$Type',573);hI(574,1,fyb,JT);_.$b=function KT(a,b){return oT(),Wv(a,48).c==Wv(b,48).c?glb(Wv(b,48).d,Wv(a,48).d):glb(Wv(b,48).c,Wv(a,48).c)};Nkb($zb,'RectilinearConvexHull/lambda$2$Type',574);hI(575,1,fyb,LT);_.$b=function MT(a,b){return oT(),Wv(a,48).c==Wv(b,48).c?glb(Wv(a,48).d,Wv(b,48).d):glb(Wv(b,48).c,Wv(a,48).c)};Nkb($zb,'RectilinearConvexHull/lambda$3$Type',575);hI(576,1,fyb,NT);_.$b=function OT(a,b){return sT(a,b)};Nkb($zb,'RectilinearConvexHull/lambda$4$Type',576);hI(469,1,{},QT);Nkb($zb,'Scanline',469);hI(662,1,{});Nkb(aAb,'AbstractGraphPlacer',662);hI(222,1,{222:1},_T);var WT;Nkb(aAb,'ComponentGroup',222);hI(434,662,{},fU);_.Fc=function gU(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;this.a.c=xv(UF,syb,1,0,4,1);b.b.c=xv(UF,syb,1,0,4,1);if(a.V()){b.e.a=0;b.e.b=0;return}f=Wv(a.sb(0),55);qJ(b,f);for(e=a.mb();e.G();){d=Wv(e.H(),55);aU(this,d);}n=new FI;o=2*Wv(rJ(f,(Rib(),Jib)),15).a;for(i=new Tob(this.a);i.a<i.c.c.length;){g=Wv(Rob(i),222);j=bU(g,o);VT(Jd(g.a),n.a,n.b);n.a+=j.a;n.b+=j.b;}b.e.a=n.a-o;b.e.b=n.b-o;if(Ckb(Ixb(Xv(rJ(f,(Mjb(),ijb)))))&&gw(rJ(f,(eM(),uL)))===gw((NK(),JK))){for(m=a.mb();m.G();){k=Wv(m.H(),55);UT(k,k.d.a,k.d.b);}c=new sU;iU(c,a,o);for(l=a.mb();l.G();){k=Wv(l.H(),55);vI(BI(k.d),c.e);}vI(BI(b.e),c.a);}for(h=new Tob(this.a);h.a<h.c.c.length;){g=Wv(Rob(h),222);TT(b,Jd(g.a));}};Nkb(aAb,'ComponentGroupGraphPlacer',434);hI(322,1,{},sU);Nkb(aAb,'ComponentsCompactor',322);hI(13,647,bAb,GU,HU,IU);_.rb=function JU(a,b){uU(this,a,b);};_.ib=function KU(a){return vU(this,a)};_.jb=function LU(a){return xU(this,a)};_.Q=function MU(){this.c=xv(UF,syb,1,0,4,1);};_.kb=function NU(a){return zU(this,a,0)!=-1};_.sb=function OU(a){return yU(this,a)};_.V=function PU(){return this.c.length==0};_.mb=function QU(){return new Tob(this)};_.vb=function RU(a){return AU(this,a)};_.nb=function SU(a){return BU(this,a)};_.Xb=function TU(a,b){CU(this,a,b);};_.wb=function UU(a,b){return DU(this,a,b)};_.Y=function VU(){return this.c.length};_.ob=function WU(){return EU(this)};_.pb=function XU(a){return FU(this,a)};Nkb(Cyb,'ArrayList',13);hI(532,13,bAb,$U);_.ib=function _U(a){return ZU(this,Wv(a,48))};Nkb(aAb,'ComponentsCompactor/Hullpoints',532);hI(529,1,{347:1},bV);_.a=false;Nkb(aAb,'ComponentsCompactor/InternalComponent',529);hI(528,1,Oyb,cV);_.mb=function dV(){return new Tob(this.a)};Nkb(aAb,'ComponentsCompactor/InternalConnectedComponents',528);hI(531,1,{251:1},eV);_.zc=function gV(){return null};_.Ac=function hV(){return this.a};_.yc=function fV(){return oU(this.d)};_.Bc=function iV(){return this.b};Nkb(aAb,'ComponentsCompactor/InternalExternalExtension',531);hI(530,1,{251:1},jV);_.Ac=function mV(){return this.a};_.yc=function kV(){return oU(this.d)};_.zc=function lV(){return this.c};_.Bc=function nV(){return this.b};Nkb(aAb,'ComponentsCompactor/InternalUnionExternalExtension',530);hI(534,1,{},oV);Nkb(aAb,'ComponentsCompactor/OuterSegments',534);hI(533,1,{},pV);Nkb(aAb,'ComponentsCompactor/Segments',533);hI(381,1,{},tV);Nkb(aAb,'ComponentsProcessor',381);hI(432,662,{},uV);_.Fc=function vV(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;if(a.Y()==1){t=Wv(a.sb(0),55);if(t!=b){b.b.c=xv(UF,syb,1,0,4,1);ST(b,t,0,0);qJ(b,t);YW(b.a,t.a);b.e.a=t.e.a;b.e.b=t.e.b;}return}else if(a.V()){b.b.c=xv(UF,syb,1,0,4,1);b.e.a=0;b.e.b=0;return}for(h=a.mb();h.G();){f=Wv(h.H(),55);q=0;for(o=new Tob(f.b);o.a<o.c.c.length;){n=Wv(Rob(o),9);q+=Wv(rJ(n,(Rib(),Eib)),24).a;}f.k=q;}Gpb(a,new xV);e=Wv(a.sb(0),55);b.b.c=xv(UF,syb,1,0,4,1);qJ(b,e);m=0;v=0;for(i=a.mb();i.G();){f=Wv(i.H(),55);s=f.e;m=Nlb(m,s.a);v+=s.a*s.b;}m=Nlb(m,Math.sqrt(v)*Wv(rJ(b,(Rib(),Rhb)),15).a);u=cAb*Wv(rJ(b,Jib),15).a;w=0;A=0;l=0;c=u;for(g=a.mb();g.G();){f=Wv(g.H(),55);s=f.e;if(w+s.a>m){w=0;A+=l+u;l=0;}p=f.d;UT(f,w+p.a,A+p.b);p.a=0;p.b=0;c=Nlb(c,w+s.a);l=Nlb(l,s.b);w+=s.a+u;}b.e.a=c;b.e.b=A+l;r=Wv(rJ(b,Jib),15).a;if(Ckb(Ixb(Xv(rJ(e,(Mjb(),ijb)))))){d=new sU;iU(d,a,r);for(k=a.mb();k.G();){j=Wv(k.H(),55);vI(BI(j.d),d.e);}vI(BI(b.e),d.a);}TT(b,a);};Nkb(aAb,'SimpleRowGraphPlacer',432);hI(433,1,fyb,xV);_.$b=function yV(a,b){return wV(Wv(a,55),Wv(b,55))};Nkb(aAb,'SimpleRowGraphPlacer/1',433);hI(369,1,eAb,CV);_.sc=function DV(a,b){BV(a,b);};var zV;Nkb(fAb,'CompoundGraphPostprocessor',369);hI(370,1,_zb,EV);_.D=function FV(a){var b;return b=Wv(rJ(Wv(a,114).b,(eM(),CL)),44),!!b&&b.b!=0};Nkb(fAb,'CompoundGraphPostprocessor/1',370);hI(368,1,eAb,SV);_.sc=function TV(a,b){NV(this,a,b);};Nkb(fAb,'CompoundGraphPreprocessor',368);hI(187,1,{187:1},UV);_.c=false;Nkb(fAb,'CompoundGraphPreprocessor/ExternalPort',187);hI(114,1,{114:1},XV);_.w=function YV(){return zc(this.c)+':'+gW(this.b)};Nkb(fAb,'CrossHierarchyEdge',114);hI(310,1,fyb,$V);_.$b=function _V(a,b){return ZV(this,Wv(a,114),Wv(b,114))};Nkb(fAb,'CrossHierarchyEdgeComparator',310);hI(147,131,{179:1,131:1,147:1,3:1});_.k=0;Nkb(hAb,'LGraphElement',147);hI(12,147,{179:1,131:1,12:1,147:1,3:1},hW);_.w=function iW(){return gW(this)};var dB=Nkb(hAb,'LEdge',12);hI(55,147,{179:1,131:1,55:1,147:1,3:1,22:1},kW);_.mb=function lW(){return new Tob(this.c)};_.w=function mW(){if(this.c.c.length==0){return 'G-unlayered'+Ze(this.b)}else if(this.b.c.length==0){return 'G-layered'+Ze(this.c)}return 'G[layerless'+Ze(this.b)+', layers'+Ze(this.c)+']'};var mB=Nkb(hAb,'LGraph',55);hI(273,1,{});_.pc=function rW(){return this.e.j};Nkb(hAb,'LGraphAdapters/AbstractLShapeAdapter',273);hI(240,1,{627:1},tW);_.b=null;Nkb(hAb,'LGraphAdapters/LEdgeAdapter',240);hI(325,1,{},wW);_.pc=function xW(){return this.a.e};_.b=null;_.c=false;Nkb(hAb,'LGraphAdapters/LGraphAdapter',325);hI(224,273,{129:1,224:1},yW);Nkb(hAb,'LGraphAdapters/LLabelAdapter',224);hI(555,273,{626:1},BW);_.a=null;_.b=null;_.c=false;Nkb(hAb,'LGraphAdapters/LNodeAdapter',555);hI(556,273,{161:1},FW);_.a=null;_.b=null;_.c=null;_.d=false;Nkb(hAb,'LGraphAdapters/LPortAdapter',556);hI(557,1,fyb,HW);_.$b=function IW(a,b){return GW(Wv(a,7),Wv(b,7))};Nkb(hAb,'LGraphAdapters/PortComparator',557);hI(168,1,{168:1},ZW,$W);_.t=function _W(a){var b;if(aw(a,168)){b=Wv(a,168);return this.d==b.d&&this.a==b.a&&this.b==b.b&&this.c==b.c}else {return false}};_.v=function aX(){var a,b;a=hw(Ixb(this.b))<<16;a|=hw(Ixb(this.a))&byb;b=hw(Ixb(this.c))<<16;b|=hw(Ixb(this.d))&byb;return a^b};_.w=function bX(){return 'Insets[top='+this.d+',left='+this.b+',bottom='+this.a+',right='+this.c+']'};_.a=0;_.b=0;_.c=0;_.d=0;Nkb(hAb,'LInsets',168);hI(165,147,{179:1,131:1,147:1,165:1,3:1});Nkb(hAb,'LShape',165);hI(33,165,{179:1,131:1,147:1,33:1,165:1,3:1},dX);_.w=function eX(){return this.a==null?'l_'+this.k:'l_'+this.a};Nkb(hAb,'LLabel',33);hI(9,165,{179:1,131:1,147:1,9:1,165:1,3:1},uX);_.w=function vX(){return tX(this)};var qB=Nkb(hAb,'LNode',9);hI(132,17,{132:1,3:1,23:1,17:1},DX);var wX,xX,yX,zX,AX,BX;var pB=Okb(hAb,'LNode/NodeType',132,IF,EX);hI(7,165,{179:1,131:1,147:1,7:1,165:1,3:1},RX);_.w=function SX(){var a;return a=OX(this),a==null?'p_'+this.k:'p_'+a};var FX,GX,HX,IX,JX,KX;var BB=Nkb(hAb,'LPort',7);hI(399,1,_zb,UX);_.D=function VX(a){return TX(a)};Nkb(hAb,'LPort/1',399);hI(400,1,_zb,XX);_.D=function YX(a){return WX(a)};Nkb(hAb,'LPort/2',400);hI(401,1,_zb,ZX);_.D=function $X(a){return Wv(a,7).g==(sN(),$M)};Nkb(hAb,'LPort/3',401);hI(402,1,_zb,_X);_.D=function aY(a){return Wv(a,7).g==(sN(),ZM)};Nkb(hAb,'LPort/4',402);hI(403,1,_zb,bY);_.D=function cY(a){return Wv(a,7).g==(sN(),pN)};Nkb(hAb,'LPort/5',403);hI(404,1,_zb,dY);_.D=function eY(a){return Wv(a,7).g==(sN(),rN)};Nkb(hAb,'LPort/6',404);hI(190,1,Oyb,fY);_.mb=function gY(){var a;a=new Tob(this.a.b);return new hY(a)};Nkb(hAb,'LPort/7',190);hI(405,1,Ayb,hY);_.H=function jY(){return Wv(Rob(this.a),12).c};_.G=function iY(){return Qob(this.a)};_.I=function kY(){Sob(this.a);};Nkb(hAb,'LPort/7/1',405);hI(169,1,Oyb,lY);_.mb=function mY(){var a;return a=new Tob(this.a.e),new nY(a)};Nkb(hAb,'LPort/8',169);hI(304,1,Ayb,nY);_.H=function pY(){return Wv(Rob(this.a),12).d};_.G=function oY(){return Qob(this.a)};_.I=function qY(){Sob(this.a);};Nkb(hAb,'LPort/8/1',304);hI(16,147,{179:1,131:1,147:1,16:1,3:1,22:1},sY);_.mb=function tY(){return new Tob(this.a)};_.w=function uY(){return 'L_'+zU(this.b.c,this,0)+Ze(this.a)};Nkb(hAb,'Layer',16);hI(437,1,eAb,wY);_.sc=function xY(a,b){var c,d,e,f,g,h,i;nI(b,'Big nodes intermediate-processing',1);this.a=a;for(f=new Tob(this.a.c);f.a<f.c.c.length;){e=Wv(Rob(f),16);i=Eo(e.a);c=pl(i,new zY);for(h=Pl(c.b.mb(),c.a);od(h);){g=Wv(pd(h),9);if(gw(rJ(g,(Mjb(),vjb)))===gw((Xib(),Uib))||gw(rJ(g,vjb))===gw(Vib)){d=vY(this,g,false);sJ(d,vjb,Wv(rJ(g,vjb),85));sJ(g,vjb,Wib);}else {vY(this,g,true);}}}pI(b);};Nkb(jAb,'BigNodesIntermediateProcessor',437);hI(438,1,_zb,zY);_.D=function AY(a){return yY(Wv(a,9))};Nkb(jAb,'BigNodesIntermediateProcessor/1',438);hI(582,1,Tyb,CY);_.B=function DY(a){var b;return BY((b=this,iw(a),b))};Nkb(jAb,'BigNodesLabelHandler/CompoundFunction',582);hI(332,1,{},HY);_.a=0;_.e=null;_.f=0;Nkb(jAb,'BigNodesLabelHandler/Handler',332);hI(583,1,Tyb,JY);_.B=function KY(a){var b;return IY((b=this,iw(a),b))};Nkb(jAb,'BigNodesLabelHandler/Handler/1',583);hI(584,1,Tyb,MY);_.B=function NY(a){var b;return LY((b=this,iw(a),b))};Nkb(jAb,'BigNodesLabelHandler/Handler/2',584);hI(585,1,Tyb,PY);_.B=function QY(a){var b;return OY((b=this,iw(a),b))};Nkb(jAb,'BigNodesLabelHandler/Handler/3',585);hI(439,1,eAb,SY);_.sc=function TY(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,'Big nodes post-processing',1);this.a=a;for(h=new Tob(this.a.c);h.a<h.c.c.length;){g=Wv(Rob(h),16);c=pl(g.a,new VY);for(j=Pl(c.b.mb(),c.a);od(j);){i=Wv(pd(j),9);l=Wv(rJ(i,(Rib(),Whb)),15);f=RY(this,i);p=new GU;for(o=nX(f,(sN(),ZM)).mb();o.G();){m=Wv(o.H(),7);p.c[p.c.length]=m;k=m.i.a-f.j.a;m.i.a=l.a+k;}i.j.a=l.a;for(n=new Tob(p);n.a<n.c.c.length;){m=Wv(Rob(n),7);PX(m,i);}this.a.e.a<i.i.a+i.j.a&&(this.a.e.a=i.i.a+i.j.a);e=Wv(rJ(i,Thb),20);xU(i.c,e);d=Wv(rJ(i,Uhb),64);!!d&&d.B(null);}}pI(b);};Nkb(jAb,'BigNodesPostProcessor',439);hI(440,1,_zb,VY);_.D=function WY(a){return UY(Wv(a,9))};Nkb(jAb,'BigNodesPostProcessor/1',440);hI(441,1,eAb,YY);_.sc=function ZY(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;nI(b,kAb,1);this.c=a;l=this.c.b;e=0;for(i=new Tob(l);i.a<i.c.c.length;){g=Wv(Rob(i),9);g.k=e++;}this.d=Wv(rJ(this.c,(Rib(),Jib)),15).a;this.a=Wv(rJ(this.c,(eM(),sL)),59);this.b=l.c.length;f=lAb;for(j=new Tob(l);j.a<j.c.c.length;){g=Wv(Rob(j),9);g.g==(CX(),AX)&&g.j.a<f&&(f=g.j.a);}f=50>f?50:f;c=new GU;n=f+this.d;for(k=new Tob(l);k.a<k.c.c.length;){g=Wv(Rob(k),9);if(g.g==(CX(),AX)&&g.j.a>n){m=1;d=g.j.a;while(d>f){++m;d=(g.j.a-(m-1)*this.d)/m;}vU(c,new _Y(this,g,m,d));}}for(h=new Tob(c);h.a<h.c.c.length;){g=Wv(Rob(h),267);XY(g.d)&&$Y(g);}pI(b);};_.b=0;_.d=0;Nkb(jAb,'BigNodesPreProcessor',441);hI(267,1,{267:1},_Y);_.a=0;_.c=0;Nkb(jAb,'BigNodesPreProcessor/BigNode',267);hI(442,1,eAb,cZ);_.sc=function dZ(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,kAb,1);aZ=Ckb(Ixb(Xv(rJ(a,(eM(),rL)))));this.c=a;n=new GU;for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);xU(n,f.a);}e=0;for(k=new Tob(n);k.a<k.c.c.length;){i=Wv(Rob(k),9);i.k=e++;}this.d=Wv(rJ(this.c,(Rib(),Jib)),15).a;this.a=Wv(rJ(this.c,sL),59);this.b=n.c.length;h=lAb;for(l=new Tob(n);l.a<l.c.c.length;){i=Wv(Rob(l),9);i.g==(CX(),AX)&&i.j.a<h&&(h=i.j.a);}h=50>h?50:h;c=new GU;p=h+this.d;for(m=new Tob(n);m.a<m.c.c.length;){i=Wv(Rob(m),9);if(i.g==(CX(),AX)&&i.j.a>p){o=1;d=i.j.a;while(d>h){++o;d=(i.j.a-(o-1)*this.d)/o;}vU(c,new nZ(this,i,o));}}for(j=new Tob(c);j.a<j.c.c.length;){i=Wv(Rob(j),268);bZ(i)&&gZ(i);}pI(b);};_.b=0;_.d=0;var aZ=false;Nkb(jAb,'BigNodesSplitter',442);hI(268,1,{268:1},nZ);_.a=0;_.e=4;Nkb(jAb,'BigNodesSplitter/BigNode',268);hI(443,1,eAb,qZ);_.sc=function rZ(a,b){var c,d,e,f,g,h,i,j;nI(b,'Comment post-processing',1);i=Wv(rJ(a,(Rib(),Jib)),15).a;for(f=new Tob(a.c);f.a<f.c.c.length;){e=Wv(Rob(f),16);d=new GU;for(h=new Tob(e.a);h.a<h.c.c.length;){g=Wv(Rob(h),9);j=Wv(rJ(g,Qib),20);c=Wv(rJ(g,Yhb),20);if(!!j||!!c){pZ(g,j,c,i);!!j&&xU(d,j);!!c&&xU(d,c);}}xU(e.a,d);}pI(b);};Nkb(jAb,'CommentPostprocessor',443);hI(444,1,eAb,tZ);_.sc=function uZ(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q;nI(b,'Comment pre-processing',1);h=new Tob(a.b);while(h.a<h.c.c.length){g=Wv(Rob(h),9);if(Ckb(Ixb(Xv(rJ(g,(eM(),qL)))))){d=0;c=null;i=null;for(n=new Tob(g.f);n.a<n.c.c.length;){l=Wv(Rob(n),7);d+=l.b.c.length+l.e.c.length;if(l.b.c.length==1){c=Wv(yU(l.b,0),12);i=c.c;}if(l.e.c.length==1){c=Wv(yU(l.e,0),12);i=c.d;}}if(d==1&&i.b.c.length+i.e.c.length==1&&!Ckb(Ixb(Xv(rJ(i.f,qL))))){sZ(g,c,i,i.f);Sob(h);}else {q=new GU;for(m=new Tob(g.f);m.a<m.c.c.length;){l=Wv(Rob(m),7);for(k=new Tob(l.e);k.a<k.c.c.length;){j=Wv(Rob(k),12);j.d.e.c.length==0||(q.c[q.c.length]=j,true);}for(f=new Tob(l.b);f.a<f.c.c.length;){e=Wv(Rob(f),12);e.c.b.c.length==0||(q.c[q.c.length]=e,true);}}for(p=new Tob(q);p.a<p.c.c.length;){o=Wv(Rob(p),12);cW(o,true);}}}}pI(b);};Nkb(jAb,'CommentPreprocessor',444);hI(445,1,eAb,wZ);_.sc=function xZ(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Edge and layer constraint edge reversal',1);for(j=new Tob(a.b);j.a<j.c.c.length;){i=Wv(Rob(j),9);g=Wv(rJ(i,(Mjb(),vjb)),85);f=null;switch(g.e){case 1:case 2:f=(Hgb(),Ggb);break;case 3:case 4:f=(Hgb(),Egb);}if(f){sJ(i,(Rib(),dib),(Hgb(),Ggb));f==Egb?vZ(i,g,(djb(),bjb)):f==Ggb&&vZ(i,g,(djb(),ajb));}else {if(MM(Wv(rJ(i,(eM(),TL)),28))&&i.f.c.length!=0){c=true;for(l=new Tob(i.f);l.a<l.c.c.length;){k=Wv(Rob(l),7);if(!(k.g==(sN(),ZM)&&k.b.c.length-k.e.c.length>0||k.g==rN&&k.b.c.length-k.e.c.length<0)){c=false;break}if(k.g==rN){for(e=new Tob(k.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);h=Wv(rJ(d.d.f,vjb),85);if(h==(Xib(),Uib)||h==Vib){c=false;break}}}if(k.g==ZM){for(e=new Tob(k.b);e.a<e.c.c.length;){d=Wv(Rob(e),12);h=Wv(rJ(d.c.f,vjb),85);if(h==(Xib(),Sib)||h==Tib){c=false;break}}}}c&&vZ(i,g,(djb(),cjb));}}}pI(b);};Nkb(jAb,'EdgeAndLayerConstraintEdgeReverser',445);hI(446,1,eAb,AZ);_.sc=function BZ(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'End label placement',1);g=Wv(rJ(a,(eM(),DL)),15).a;this.a=(mp(),new ntb);this.c=new ntb;this.b=new ntb;for(i=new Tob(a.c);i.a<i.c.c.length;){h=Wv(Rob(i),16);for(k=new Tob(h.a);k.a<k.c.c.length;){j=Wv(Rob(k),9);for(d=Uh(mX(j));Cm(d);){c=Wv(Dm(d),12);for(f=new Tob(c.b);f.a<f.c.c.length;){e=Wv(Rob(f),33);(gw(rJ(e,tL))===gw((EK(),CK))||gw(rJ(e,tL))===gw(BK))&&(l=null,gw(rJ(e,tL))===gw(CK)?(l=c.c):gw(rJ(e,tL))===gw(BK)&&(l=c.d),Qmb(this.a,l.f)||Umb(this.a,l.f,0),Qmb(this.c,l.f)||Umb(this.c,l.f,0),Qmb(this.b,l)||Umb(this.b,l,0),gw(rJ(e,(Rib(),pib)))===gw((kP(),gP))?zZ(e,l,g):yZ(e,l,g),undefined);}}}}pI(b);};Nkb(jAb,'EndLabelProcessor',446);hI(269,1,eAb,SZ);_.sc=function TZ(a,b){var c,d,e,f,g;nI(b,'Graph transformation ('+this.a+')',1);e=Ao(a.b);for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);xU(e,c.a);}switch(this.a.e){case 0:JZ(e,a);break;case 1:NZ(e);g=Wv(rJ(a,(Mjb(),ojb)),115);!!g&&sJ(a,ojb,Qgb(g));MZ(a.d);MZ(a.e);break;case 2:JZ(e,a);LZ(e,a);NZ(e);f=Wv(rJ(a,(Mjb(),ojb)),115);!!f&&sJ(a,ojb,Qgb(f));MZ(a.d);MZ(a.e);}pI(b);};Nkb(jAb,'GraphTransformer',269);hI(221,17,{221:1,3:1,23:1,17:1},YZ);var UZ,VZ,WZ;var VB=Okb(jAb,'GraphTransformer/Mode',221,IF,ZZ);hI(448,1,eAb,d$);_.sc=function e$(a,b){nI(b,'Hierarchical port constraint processing',1);a$(a);c$(a);pI(b);};Nkb(jAb,'HierarchicalPortConstraintProcessor',448);hI(449,1,fyb,g$);_.$b=function h$(a,b){return f$(Wv(a,9),Wv(b,9))};Nkb(jAb,'HierarchicalPortConstraintProcessor/NodeComparator',449);hI(450,1,eAb,j$);_.sc=function k$(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Hierarchical port dummy size processing',1);i=new GU;l=new GU;h=Wv(rJ(a,(Rib(),Jib)),15).a;k=h*Wv(rJ(a,(Mjb(),qjb)),15).a;c=k*2;for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);i.c=xv(UF,syb,1,0,4,1);l.c=xv(UF,syb,1,0,4,1);for(g=new Tob(d.a);g.a<g.c.c.length;){f=Wv(Rob(g),9);if(f.g==(CX(),xX)){j=Wv(rJ(f,hib),32);j==(sN(),$M)?(i.c[i.c.length]=f,true):j==pN&&(l.c[l.c.length]=f,true);}}i$(i,true,c);i$(l,false,c);}pI(b);};Nkb(jAb,'HierarchicalPortDummySizeProcessor',450);hI(451,1,eAb,w$);_.sc=function x$(a,b){var c,d,e,f;nI(b,'Orthogonally routing hierarchical port edges',1);this.a=0;c=s$(a);v$(a,c);u$(this,a,c);q$(a);d=Wv(rJ(a,(eM(),TL)),28);e=a.c;p$((Cxb(0,e.c.length),Wv(e.c[0],16)),d,a);p$(Wv(yU(e,e.c.length-1),16),d,a);f=a.c;n$((Cxb(0,f.c.length),Wv(f.c[0],16)));n$(Wv(yU(f,f.c.length-1),16));pI(b);};_.a=0;Nkb(jAb,'HierarchicalPortOrthogonalEdgeRouter',451);hI(452,1,fyb,z$);_.$b=function A$(a,b){return y$(Wv(a,9),Wv(b,9))};Nkb(jAb,'HierarchicalPortOrthogonalEdgeRouter/1',452);hI(453,1,fyb,C$);_.$b=function D$(a,b){return B$(Wv(a,9),Wv(b,9))};Nkb(jAb,'HierarchicalPortOrthogonalEdgeRouter/2',453);hI(454,1,eAb,F$);_.sc=function G$(a,b){var c;nI(b,'Hierarchical port position processing',1);c=a.c;c.c.length>0&&E$((Cxb(0,c.c.length),Wv(c.c[0],16)),a);c.c.length>1&&E$(Wv(yU(c,c.c.length-1),16),a);pI(b);};Nkb(jAb,'HierarchicalPortPositionProcessor',454);hI(471,1,eAb,I$);_.sc=function J$(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,'Hyperedge merging',1);n=new Fnb(a.c,0);while(n.b<n.d.Y()){m=(Bxb(n.b<n.d.Y()),Wv(n.d.sb(n.c=n.b++),16));p=m.a;if(p.c.length==0){continue}h=null;l=null;for(o=0;o<p.c.length;o++){c=(Cxb(o,p.c.length),Wv(p.c[o],9));g=c.g;if(g==(CX(),zX)&&l==zX){e=Wv(rJ(c,(Rib(),qib)),7);j=Wv(rJ(h,qib),7);f=Wv(rJ(c,rib),7);k=Wv(rJ(h,rib),7);d=!!e||!!f;i=!!j||!!k;if(d&&i&&(e==j||f==k)){H$(c,h,e==j,f==k);Cxb(o,p.c.length);hxb(p.c,o,1);--o;c=h;g=l;}}h=c;l=g;}}pI(b);};Nkb(jAb,'HyperedgeDummyMerger',471);hI(472,1,eAb,L$);_.sc=function M$(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Hypernodes processing',1);for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);for(h=new Tob(d.a);h.a<h.c.c.length;){g=Wv(Rob(h),9);if(Ckb(Ixb(Xv(rJ(g,(eM(),AL)))))&&g.f.c.length<=2){l=0;k=0;c=0;f=0;for(j=new Tob(g.f);j.a<j.c.c.length;){i=Wv(Rob(j),7);switch(i.g.e){case 1:++l;break;case 2:++k;break;case 3:++c;break;case 4:++f;}}l==0&&c==0&&K$(a,g,f<=k);}}}pI(b);};Nkb(jAb,'HypernodesProcessor',472);hI(473,1,eAb,N$);_.sc=function O$(a,b){var c,d,e,f,g,h,i,j,k;nI(b,'Layer constraint edge reversal',1);for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);k=-1;c=new GU;j=Wv(FU(f.a,xv(qB,Nzb,9,f.a.c.length,0,1)),51);for(e=0;e<j.length;e++){d=Wv(rJ(j[e],(Rib(),mib)),140);if(k==-1){d!=(Hhb(),Ghb)&&(k=e);}else {if(d==(Hhb(),Ghb)){rX(j[e],null);qX(j[e],k++,f);}}d==(Hhb(),Ehb)&&vU(c,j[e]);}for(i=new Tob(c);i.a<i.c.c.length;){h=Wv(Rob(i),9);rX(h,null);rX(h,f);}}pI(b);};Nkb(jAb,'InLayerConstraintProcessor',473);hI(474,1,eAb,R$);_.sc=function W$(a,b){var c,d,e,f,g,h;if(!Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))){return}for(h=new Tob(a.b);h.a<h.c.c.length;){f=Wv(Rob(h),9);if(f.g==(CX(),AX)){e=Wv(rJ(f,(eM(),GL)),65);this.c=Qlb(this.c,f.i.a-e.b);this.a=Nlb(this.a,f.i.a+f.j.a+e.c);this.d=Qlb(this.d,f.i.b-e.d);this.b=Nlb(this.b,f.i.b+f.j.b+e.a);}}for(g=new Tob(a.b);g.a<g.c.c.length;){f=Wv(Rob(g),9);if(f.g!=(CX(),AX)){switch(f.g.e){case 2:d=Wv(rJ(f,(Mjb(),vjb)),85);if(d==(Xib(),Tib)){f.i.a=this.c-10;Q$(f,new X$).A(new Z$(f));break}if(d==Vib){f.i.a=this.a+10;Q$(f,new _$).A(new b_(f));break}c=Wv(rJ(f,mib),140);if(c==(Hhb(),Ghb)){P$(f).A(new d_(f));f.i.b=this.d-10;break}if(c==Ehb){P$(f).A(new f_(f));f.i.b=this.b+10;break}break;default:throw new slb('The node type '+f.g+' is not supported by the '+lC);}}}};_.a=Vzb;_.b=Vzb;_.c=Uzb;_.d=Uzb;var lC=Nkb(jAb,'InteractiveExternalPortPositioner',474);hI(475,1,Tyb,X$);_.B=function Y$(a){return Wv(a,12).d.f};Nkb(jAb,'InteractiveExternalPortPositioner/lambda$0$Type',475);hI(476,1,Tyb,Z$);_.B=function $$(a){return S$(this.a,a)};Nkb(jAb,'InteractiveExternalPortPositioner/lambda$1$Type',476);hI(477,1,Tyb,_$);_.B=function a_(a){return Wv(a,12).c.f};Nkb(jAb,'InteractiveExternalPortPositioner/lambda$2$Type',477);hI(478,1,Tyb,b_);_.B=function c_(a){return T$(this.a,a)};Nkb(jAb,'InteractiveExternalPortPositioner/lambda$3$Type',478);hI(479,1,Tyb,d_);_.B=function e_(a){return U$(this.a,a)};Nkb(jAb,'InteractiveExternalPortPositioner/lambda$4$Type',479);hI(480,1,Tyb,f_);_.B=function g_(a){return V$(this.a,a)};Nkb(jAb,'InteractiveExternalPortPositioner/lambda$5$Type',480);hI(37,17,{37:1,3:1,23:1,17:1},f0);var h_,i_,j_,k_,l_,m_,n_,o_,p_,q_,r_,s_,t_,u_,v_,w_,x_,y_,z_,A_,B_,C_,D_,E_,F_,G_,H_,I_,J_,K_,L_,M_,N_,O_,P_,Q_,R_,S_,T_,U_,V_,W_,X_,Y_,Z_,$_,__,a0,b0,c0;var mC=Okb(jAb,'IntermediateProcessorStrategy',37,IF,g0);hI(503,1,eAb,k0);_.sc=function l0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;nI(b,'Inverted port preprocessing',1);j=a.c;i=new Fnb(j,0);c=null;s=new GU;while(i.b<i.d.Y()){r=c;c=(Bxb(i.b<i.d.Y()),Wv(i.d.sb(i.c=i.b++),16));for(m=new Tob(s);m.a<m.c.c.length;){k=Wv(Rob(m),9);rX(k,r);}s.c=xv(UF,syb,1,0,4,1);for(n=new Tob(c.a);n.a<n.c.c.length;){k=Wv(Rob(n),9);if(k.g!=(CX(),AX)){continue}if(!MM(Wv(rJ(k,(eM(),TL)),28))){continue}for(q=pX(k,(djb(),ajb),(sN(),ZM)).mb();q.G();){o=Wv(q.H(),7);h=o.b;g=Wv(FU(h,xv(dB,gAb,12,h.c.length,0,1)),47);for(e=0,f=g.length;e<f;++e){d=g[e];h0(a,o,d,s);}}for(p=pX(k,bjb,rN).mb();p.G();){o=Wv(p.H(),7);h=o.e;g=Wv(FU(h,xv(dB,gAb,12,h.c.length,0,1)),47);for(e=0,f=g.length;e<f;++e){d=g[e];i0(a,o,d,s);}}}}for(l=new Tob(s);l.a<l.c.c.length;){k=Wv(Rob(l),9);rX(k,c);}pI(b);};Nkb(jAb,'InvertedPortProcessor',503);hI(481,1,eAb,m0);_.sc=function n0(a,b){nI(b,'Node and Port Label Placement and Node Sizing',1);GO((nW(),nW(),new wW(a,false)));pI(b);};Nkb(jAb,'LabelAndNodeSizeProcessor',481);hI(482,1,eAb,q0);_.sc=function r0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;nI(b,'Label dummy insertions',1);m=new GU;k=Wv(rJ(a,(eM(),DL)),15).a;l=Wv(rJ(a,sL),59);for(o=new Tob(a.b);o.a<o.c.c.length;){n=Wv(Rob(o),9);for(q=new Tob(n.f);q.a<q.c.c.length;){p=Wv(Rob(q),7);for(h=new Tob(p.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);if(g.c.f!=g.d.f&&ol(g.b,o0)){s=Do(g.b.c.length);c=new uX(a);sX(c,(CX(),yX));sJ(c,(Rib(),uib),g);sJ(c,Hib,s);sJ(c,TL,(KM(),FM));sJ(c,qib,g.c);sJ(c,rib,g.d);m.c[m.c.length]=c;i1(g,c);t=Wv(rJ(g,dM),15).a;if(t<0){t=0;sJ(g,dM,new llb(t));}r=Math.floor(t/2);for(e=new Tob(c.f);e.a<e.c.c.length;){d=Wv(Rob(e),7);d.i.b=r;}f=c.j;i=new Fnb(g.b,0);while(i.b<i.d.Y()){j=(Bxb(i.b<i.d.Y()),Wv(i.d.sb(i.c=i.b++),33));if(gw(rJ(j,tL))===gw((EK(),AK))){if(l==(sK(),rK)||l==nK){f.a+=j.j.a+k;f.b=Nlb(f.b,j.j.b);}else {f.a=Nlb(f.a,j.j.a);f.b+=j.j.b+k;}s.c[s.c.length]=j;vnb(i);}}if(l==(sK(),rK)||l==nK){f.a-=k;f.b+=k+t;}else {f.b+=k+t;}}}}}xU(a.b,m);pI(b);};var o0;Nkb(jAb,'LabelDummyInserter',482);hI(483,1,_zb,s0);_.D=function t0(a){return gw(rJ(Wv(a,33),(eM(),tL)))===gw((EK(),AK))};Nkb(jAb,'LabelDummyInserter/1',483);hI(484,1,eAb,w0);_.sc=function x0(a,b){var c,d,e,f,g,h,i,j,k,l,m;nI(b,'Label dummy removal',1);e=Wv(rJ(a,(eM(),DL)),15).a;h=Wv(rJ(a,sL),59);for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);j=new Fnb(f.a,0);while(j.b<j.d.Y()){i=(Bxb(j.b<j.d.Y()),Wv(j.d.sb(j.c=j.b++),9));if(i.g==(CX(),yX)){k=Wv(rJ(i,(Rib(),uib)),12);m=Wv(rJ(k,dM),15).a;c=new II(i.i);gw(rJ(i,pib))===gw((kP(),hP))&&(c.b+=m+e);d=new HI(i.j.a,i.j.b-m-e);l=Wv(rJ(i,Hib),20);h==(sK(),rK)||h==nK?v0(l,c,e,d,gw(rJ(i,pib))!==gw(gP)):u0(l,c,e,d);xU(k.b,l);c1(i,false);vnb(j);}}}pI(b);};Nkb(jAb,'LabelDummyRemover',484);hI(485,1,eAb,A0);_.sc=function B0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;nI(b,'Label dummy switching',1);c=new GU;l=new GU;h=new GU;n=new GU;for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);for(k=new Tob(f.a);k.a<k.c.c.length;){j=Wv(Rob(k),9);if(j.g==(CX(),yX)){c.c[c.c.length]=j;h.c=xv(UF,syb,1,0,4,1);n.c=xv(UF,syb,1,0,4,1);p=j;do{p=Wv(Dm(Uh(iX(p))),12).c.f;p.g==zX&&(h.c[h.c.length]=p,true);}while(p.g==zX);s=j;do{s=Wv(Dm(Uh(mX(s))),12).d.f;s.g==zX&&(n.c[n.c.length]=s,true);}while(s.g==zX);i=h.c.length;o=n.c.length;if(i>o+1){m=(i+o)/2|0;vU(l,new RJ(j,(Cxb(m,h.c.length),Wv(h.c[m],9))));}else if(o>i+1){m=((o-i)/2|0)-1;vU(l,new RJ(j,(Cxb(m,n.c.length),Wv(n.c[m],9))));}}}}for(r=new Tob(l);r.a<r.c.c.length;){q=Wv(Rob(r),27);z0(Wv(q.a,9),Wv(q.b,9));}for(e=new Tob(c);e.a<e.c.c.length;){d=Wv(Rob(e),9);y0(d,new C0,(Rib(),rib));y0(d,new E0,qib);}pI(b);};Nkb(jAb,'LabelDummySwitcher',485);hI(486,1,Tyb,C0);_.B=function D0(a){return Wv(Dm(Uh(iX(Wv(a,9)))),12).c.f};Nkb(jAb,'LabelDummySwitcher/lambda$0$Type',486);hI(487,1,Tyb,E0);_.B=function F0(a){return Wv(Dm(Uh(mX(Wv(a,9)))),12).d.f};Nkb(jAb,'LabelDummySwitcher/lambda$1$Type',487);hI(488,1,eAb,G0);_.sc=function H0(a,b){nI(b,'Label management',1);iw(rJ(a,(bK(),aK)));pI(b);};Nkb(jAb,'LabelManagementProcessor',488);hI(489,1,eAb,S0);_.sc=function T0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;i=Wv(rJ(a,(Mjb(),ojb)),115);nI(b,'Label side selection ('+i+')',1);j=(_b(a),new Vh(a));switch(i.e){case 0:L0(j);break;case 1:K0(j);break;case 2:O0(j);break;case 3:N0(j);break;case 4:R0(j);}for(h=new Tob(a.c);h.a<h.c.c.length;){g=Wv(Rob(h),16);for(d=new Tob(g.a);d.a<d.c.c.length;){c=Wv(Rob(d),9);for(n=new Tob(c.f);n.a<n.c.c.length;){l=Wv(Rob(n),7);for(f=new Tob(l.c);f.a<f.c.c.length;){e=Wv(Rob(f),33);gw(rJ(e,(Rib(),pib)))===gw((kP(),jP))&&sJ(e,pib,I0);}}if(c.g==(CX(),yX)){if(gw(rJ(c,(Rib(),pib)))===gw((kP(),gP))){k=Wv(rJ(c,uib),12);p=Wv(rJ(k,(eM(),dM)),15).a;o=c.j.b-Math.ceil(p/2);for(m=new Tob(c.f);m.a<m.c.c.length;){l=Wv(Rob(m),7);l.i.b=o;}}}}}pI(b);};var I0;Nkb(jAb,'LabelSideSelector',489);hI(490,1,fyb,V0);_.$b=function W0(a,b){return U0(Wv(a,7),Wv(b,7))};Nkb(jAb,'LabelSideSelector/1',490);hI(495,1,eAb,Z0);_.sc=function $0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;nI(b,'Layer constraint application',1);j=a.c;if(j.c.length==0){pI(b);return}f=(Cxb(0,j.c.length),Wv(j.c[0],16));g=Wv(yU(j,j.c.length-1),16);s=new sY(a);t=new sY(a);for(i=new Tob(j);i.a<i.c.c.length;){h=Wv(Rob(i),16);p=Wv(FU(h.a,xv(qB,Nzb,9,h.a.c.length,0,1)),51);for(m=0,o=p.length;m<o;++m){l=p[m];c=Wv(rJ(l,(Mjb(),vjb)),85);switch(c.e){case 1:rX(l,f);X0(l,false);break;case 2:rX(l,s);X0(l,true);break;case 3:rX(l,g);Y0(l);break;case 4:rX(l,t);Y0(l);}}}if(j.c.length>=2){k=true;q=(Cxb(1,j.c.length),Wv(j.c[1],16));for(n=new Tob(f.a);n.a<n.c.c.length;){l=Wv(Rob(n),9);if(gw(rJ(l,(Mjb(),vjb)))===gw((Xib(),Wib))){k=false;break}for(e=Uh(mX(l));Cm(e);){d=Wv(Dm(e),12);if(d.d.f.d==q){k=false;break}}if(!k){break}}if(k){p=Wv(FU(f.a,xv(qB,Nzb,9,f.a.c.length,0,1)),51);for(m=0,o=p.length;m<o;++m){l=p[m];rX(l,q);}BU(j,f);}}if(j.c.length>=2){k=true;r=Wv(yU(j,j.c.length-2),16);for(n=new Tob(g.a);n.a<n.c.c.length;){l=Wv(Rob(n),9);if(gw(rJ(l,(Mjb(),vjb)))===gw((Xib(),Wib))){k=false;break}for(e=Uh(iX(l));Cm(e);){d=Wv(Dm(e),12);if(d.c.f.d==r){k=false;break}}if(!k){break}}if(k){p=Wv(FU(g.a,xv(qB,Nzb,9,g.a.c.length,0,1)),51);for(m=0,o=p.length;m<o;++m){l=p[m];rX(l,r);}BU(j,g);}}j.c.length==1&&(Cxb(0,j.c.length),Wv(j.c[0],16)).a.c.length==0&&AU(j,0);s.a.c.length==0||(Fxb(0,j.c.length),fxb(j.c,0,s));t.a.c.length==0||(j.c[j.c.length]=t,true);pI(b);};Nkb(jAb,'LayerConstraintProcessor',495);hI(496,1,eAb,_0);_.sc=function a1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;nI(b,'Layer size calculation',1);j=rAb;i=4.9E-324;for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);h=f.c;h.a=0;h.b=0;if(f.a.c.length==0){continue}for(l=new Tob(f.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);n=k.j;m=k.e;h.a=Nlb(h.a,n.a+m.b+m.c);}d=Wv(yU(f.a,0),9);o=d.i.b-d.e.d;e=Wv(yU(f.a,f.a.c.length-1),9);c=e.i.b+e.j.b+e.e.a;h.b=c-o;j=j<o?j:o;i=i>c?i:c;}a.e.b=i-j;a.d.b-=j;pI(b);};Nkb(jAb,'LayerSizeAndGraphHeightCalculator',496);hI(497,1,eAb,b1);_.sc=function d1(a,b){var c,d,e,f,g;nI(b,'Edge joining',1);c=Ckb(Ixb(Xv(rJ(a,(Mjb(),gjb)))));for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);g=new Fnb(d.a,0);while(g.b<g.d.Y()){f=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),9));if(f.g==(CX(),zX)){c1(f,c);vnb(g);}}}pI(b);};Nkb(jAb,'LongEdgeJoiner',497);hI(498,1,eAb,e1);_.sc=function g1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;nI(b,'Edge splitting',1);if(a.c.c.length<=2){pI(b);return}f=new Fnb(a.c,0);g=(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),16));while(f.b<f.d.Y()){e=g;g=(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),16));for(i=new Tob(e.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);for(k=new Tob(h.f);k.a<k.c.c.length;){j=Wv(Rob(k),7);for(d=new Tob(j.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);m=c.d;l=m.f.d;l!=e&&l!=g&&i1(c,(n=new uX(a),sX(n,(CX(),zX)),sJ(n,(Rib(),uib),c),sJ(n,(eM(),TL),(KM(),FM)),rX(n,g),n));}}}}pI(b);};Nkb(jAb,'LongEdgeSplitter',498);hI(499,1,eAb,k1);_.sc=function l1(a,b){var c,d,e,f,g,h,i,j;nI(b,'Node margin calculation',1);c=new rP((nW(),new wW(a,true)));oP(c);h=Wv(rJ(a,(Rib(),Jib)),15).a;for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);for(g=new Tob(d.a);g.a<g.c.c.length;){f=Wv(Rob(g),9);j1(f,h);i=f.e;j=Wv(rJ(f,Oib),65);i.b=Nlb(i.b,j.b);i.c=Nlb(i.c,j.c);i.a=Nlb(i.a,j.a);i.d=Nlb(i.d,j.d);}}pI(b);};Nkb(jAb,zzb,499);hI(491,1,eAb,q1);_.sc=function t1(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Node promotion heuristic',1);this.g=a;m1(this);this.q=Wv(rJ(a,(Mjb(),Bjb)),109);j=Wv(rJ(this.g,Cjb),24).a;e=new u1;switch(this.q.e){case 2:case 1:o1(this,e);break;case 3:this.q=(I1(),H1);o1(this,e);h=0;for(g=new Tob(this.a);g.a<g.c.c.length;){f=Wv(Rob(g),24);h=Plb(h,f.a);}if(h>this.j){this.q=B1;o1(this,e);}break;case 4:this.q=(I1(),H1);o1(this,e);i=0;for(d=new Tob(this.b);d.a<d.c.c.length;){c=Yv(Rob(d));i=Nlb(i,(Dxb(c),c));}if(i>this.k){this.q=E1;o1(this,e);}break;case 6:l=hw(Llb(this.f.length*j/100));o1(this,new w1(l));break;case 5:k=hw(Llb(this.d*j/100));o1(this,new y1(k));break;default:o1(this,e);}p1(this,a);pI(b);};_.d=0;_.e=0;_.i=0;_.j=0;_.k=0;_.n=0;Nkb(jAb,'NodePromotion',491);hI(492,1,Tyb,u1);_.B=function v1(a){return xkb(),xkb(),wkb};Nkb(jAb,'NodePromotion/lambda$0$Type',492);hI(493,1,Tyb,w1);_.B=function x1(a){return r1(this.a,a)};_.a=0;Nkb(jAb,'NodePromotion/lambda$1$Type',493);hI(494,1,Tyb,y1);_.B=function z1(a){return s1(this.a,a)};_.a=0;Nkb(jAb,'NodePromotion/lambda$2$Type',494);hI(109,17,{109:1,3:1,23:1,17:1},J1);var A1,B1,C1,D1,E1,F1,G1,H1;var GC=Okb(jAb,'NodePromotionStrategy',109,IF,K1);var L1;hI(500,1,eAb,R1);_.sc=function S1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;nI(b,sAb,1);n=Wv(rJ(a,(eM(),uL)),122);for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);i=Wv(FU(d.a,xv(qB,Nzb,9,d.a.c.length,0,1)),51);for(g=0,h=i.length;g<h;++g){f=i[g];if(f.g!=(CX(),BX)){continue}if(n==(NK(),LK)){for(k=new Tob(f.f);k.a<k.c.c.length;){j=Wv(Rob(k),7);j.b.c.length==0||P1(j);j.e.c.length==0||Q1(j);}}else if(aw(rJ(f,(Rib(),uib)),12)){p=Wv(rJ(f,uib),12);q=Wv(nX(f,(sN(),rN)).mb().H(),7);r=Wv(nX(f,ZM).mb().H(),7);s=Wv(rJ(q,uib),7);t=Wv(rJ(r,uib),7);dW(p,t);eW(p,s);u=new II(r.f.i);u.a=MI(Bv(tv(qz,1),Fzb,10,0,[t.f.i,t.i,t.a])).a;QI(p.a,u);u=new II(q.f.i);u.a=MI(Bv(tv(qz,1),Fzb,10,0,[s.f.i,s.i,s.a])).a;QI(p.a,u);}else {if(f.f.c.length>=2){o=true;l=new Tob(f.f);c=Wv(Rob(l),7);while(l.a<l.c.c.length){m=c;c=Wv(Rob(l),7);if(!rb(rJ(m,uib),rJ(c,uib))){o=false;break}}}else {o=false;}for(k=new Tob(f.f);k.a<k.c.c.length;){j=Wv(Rob(k),7);j.b.c.length==0||N1(j,o);j.e.c.length==0||O1(j,o);}}rX(f,null);}}pI(b);};Nkb(jAb,'NorthSouthPortPostprocessor',500);hI(501,1,eAb,X1);_.sc=function Y1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;nI(b,sAb,1);o=new GU;u=new GU;for(j=new Tob(a.c);j.a<j.c.c.length;){i=Wv(Rob(j),16);q=-1;n=Wv(FU(i.a,xv(qB,Nzb,9,i.a.c.length,0,1)),51);for(l=0,m=n.length;l<m;++l){k=n[l];++q;if(!(k.g==(CX(),AX)&&MM(Wv(rJ(k,(eM(),TL)),28)))){continue}LM(Wv(rJ(k,(eM(),TL)),28))||W1(k);sJ(k,(Rib(),nib),k);o.c=xv(UF,syb,1,0,4,1);u.c=xv(UF,syb,1,0,4,1);c=new GU;t=new aJ;ml(t,nX(k,(sN(),$M)));U1(a,t,o,u,c);h=q;for(f=new Tob(o);f.a<f.c.c.length;){d=Wv(Rob(f),9);qX(d,h,i);++q;sJ(d,nib,k);g=Wv(yU(d.f,0),7);p=Wv(rJ(g,uib),7);Ckb(Ixb(Xv(rJ(p,(Mjb(),Djb)))))||Wv(rJ(d,oib),20).ib(k);}_I(t);for(s=nX(k,pN).mb();s.G();){r=Wv(s.H(),7);TI(t,r,t.a,t.a.a);}U1(a,t,u,null,c);for(e=new Tob(u);e.a<e.c.c.length;){d=Wv(Rob(e),9);qX(d,++q,i);sJ(d,nib,k);g=Wv(yU(d.f,0),7);p=Wv(rJ(g,uib),7);Ckb(Ixb(Xv(rJ(p,(Mjb(),Djb)))))||Wv(rJ(k,oib),20).ib(d);}c.c.length==0||sJ(k,Shb,c);}}pI(b);};Nkb(jAb,'NorthSouthPortPreprocessor',501);hI(502,1,fyb,Z1);_.$b=function $1(a,b){var c,d;return c=a.g,d=b.g,c!=d?c.e-d.e:a.k==b.k?0:c==(sN(),$M)?a.k-b.k:b.k-a.k};Nkb(jAb,'NorthSouthPortPreprocessor/lambda$0$Type',502);hI(504,1,eAb,_1);_.sc=function a2(a,b){var c,d,e,f,g,h;nI(b,'Removing partition constraint edges',1);for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);for(f=new Tob(c.a);f.a<f.c.c.length;){e=Wv(Rob(f),9);h=new Tob(e.f);while(h.a<h.c.c.length){g=Wv(Rob(h),7);Ckb(Ixb(Xv(rJ(g,(Rib(),Aib)))))&&Sob(h);}}}pI(b);};Nkb(jAb,'PartitionPostprocessor',504);hI(505,1,eAb,c2);_.sc=function d2(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Adding partition constraint edges',1);this.a=new GU;for(h=new Tob(a.b);h.a<h.c.c.length;){f=Wv(Rob(h),9);e=Wv(rJ(f,(eM(),ML)),24);b2(this,e.a).ib(f);}for(d=0;d<this.a.c.length-1;d++){for(g=Wv(yU(this.a,d),20).mb();g.G();){f=Wv(g.H(),9);k=new RX;PX(k,f);QX(k,(sN(),ZM));sJ(k,(Rib(),Aib),(xkb(),xkb(),wkb));for(j=Wv(yU(this.a,d+1),20).mb();j.G();){i=Wv(j.H(),9);l=new RX;PX(l,i);QX(l,rN);sJ(l,Aib,(wkb));c=new hW;sJ(c,Aib,(wkb));sJ(c,(eM(),ZL),Elb(20));dW(c,k);eW(c,l);}}}this.a=null;pI(b);};Nkb(jAb,'PartitionPreprocessor',505);hI(506,1,eAb,f2);_.sc=function g2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,'Port distribution',1);c=jW(a);n=0;k=0;for(e=0,g=c.length;e<g;++e){d=c[e];for(i=0,j=d.length;i<j;++i){h=d[i];h.k=k++;for(m=new Tob(h.f);m.a<m.c.c.length;){l=Wv(Rob(m),7);l.k=n++;}}}for(f=new Tob(a.c);f.a<f.c.c.length;){d=Wv(Rob(f),16);e2(d);}p=Wv(rJ(a,(Rib(),Gib)),154);o=wvb(p,1)!=0?new P9(xv(lw,tAb,26,n,12,1)):new M9(xv(lw,tAb,26,n,12,1));Z8(o,c);pI(b);};Nkb(jAb,'PortDistributionProcessor',506);hI(507,1,eAb,h2);_.sc=function i2(a,b){var c,d,e,f,g;nI(b,'Port order processing',1);g=new k2;for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);for(f=new Tob(c.a);f.a<f.c.c.length;){e=Wv(Rob(f),9);MM(Wv(rJ(e,(eM(),TL)),28))&&Gpb(e.f,g);}}pI(b);};Nkb(jAb,'PortListSorter',507);hI(508,1,fyb,k2);_.$b=function l2(a,b){return j2(Wv(a,7),Wv(b,7))};Nkb(jAb,'PortListSorter/PortComparator',508);hI(509,1,eAb,n2);_.sc=function o2(a,b){var c,d,e,f,g;nI(b,'Port side processing',1);for(g=new Tob(a.b);g.a<g.c.c.length;){e=Wv(Rob(g),9);m2(e);}for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);for(f=new Tob(c.a);f.a<f.c.c.length;){e=Wv(Rob(f),9);m2(e);}}pI(b);};Nkb(jAb,'PortSideProcessor',509);hI(510,1,eAb,q2);_.sc=function r2(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Restoring reversed edges',1);for(h=new Tob(a.c);h.a<h.c.c.length;){g=Wv(Rob(h),16);for(j=new Tob(g.a);j.a<j.c.c.length;){i=Wv(Rob(j),9);for(l=new Tob(i.f);l.a<l.c.c.length;){k=Wv(Rob(l),7);f=Wv(FU(k.e,xv(dB,gAb,12,k.e.c.length,0,1)),47);for(d=0,e=f.length;d<e;++d){c=f[d];Ckb(Ixb(Xv(rJ(c,(Rib(),Iib)))))&&cW(c,false);}}}}pI(b);};Nkb(jAb,'ReversedEdgeRestorer',510);hI(511,1,eAb,x2);_.sc=function y2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J;nI(b,'Sausage Folding',1);this.b=Wv(rJ(a,(Rib(),Jib)),15).a;this.a=this.b*Wv(rJ(a,(Mjb(),Ejb)),15).a;o=t2(this,a);n=a.c.c.length;p=u2(this,a);G=n*p;e=Wv(rJ(a,(eM(),sL)),59);e==(sK(),oK)||e==pK||e==qK?(d=Wv(rJ(a,Rhb),15).a):(d=1/Wv(rJ(a,Rhb),15).a);c=G/o;if(d>c){pI(b);return}D=0;f=rAb;do{++D;c=G/D/(o*D);m=f;f=c-d<=0?0-(c-d):c-d;}while(c>d);m<f&&--D;B=n/(1>D?1:D)|0;j=B;u=B;J=true;while(j<n){l=Wv(yU(a.c,j),16);C=true;s=null;t=null;K:for(I=new Tob(l.a);I.a<I.c.c.length;){H=Wv(Rob(I),9);for(h=Uh(iX(H));Cm(h);){g=Wv(Dm(h),12);if(!!s&&s!=H){C=false;break K}s=H;F=g.c.f;if(!!t&&t!=F){C=false;break K}t=F;}}if(J&&C){u=0;J=false;}if(j!=u){v=Wv(yU(a.c,u),16);for(r=new Tob(Ao(l.a));r.a<r.c.c.length;){q=Wv(Rob(r),9);qX(q,v.a.c.length,v);if(u==0){for(h=new Tob(Ao(iX(q)));h.a<h.c.c.length;){g=Wv(Rob(h),12);cW(g,true);sJ(a,cib,(xkb(),xkb(),wkb));v2(a,g);i=new GU;s2(a,g.c,g,i);for(A=new Tob(i);A.a<A.c.c.length;){w=Wv(Rob(A),9);qX(w,v.a.c.length-1,v);}}}}}u>=B&&(J=true);++u;++j;}k=new Fnb(a.c,0);while(k.b<k.d.Y()){l=(Bxb(k.b<k.d.Y()),Wv(k.d.sb(k.c=k.b++),16));l.a.c.length==0&&vnb(k);}pI(b);};_.a=0;_.b=0;Nkb(jAb,'SausageFolding',511);hI(512,1,eAb,A2);_.sc=function B2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;nI(b,'Self-loop processing',1);c=new GU;for(k=new Tob(a.c);k.a<k.c.c.length;){j=Wv(Rob(k),16);c.c=xv(UF,syb,1,0,4,1);for(m=new Tob(j.a);m.a<m.c.c.length;){l=Wv(Rob(m),9);for(o=new Tob(l.f);o.a<o.c.c.length;){n=Wv(Rob(o),7);i=Wv(FU(n.e,xv(dB,gAb,12,n.e.c.length,0,1)),47);for(g=0,h=i.length;g<h;++g){f=i[g];if(f.c.f!=f.d.f){continue}p=f.c;r=f.d;q=p.g;s=r.g;(q==(sN(),$M)||q==pN)&&s==rN?cW(f,false):q==pN&&s==$M?cW(f,false):q==ZM&&s!=ZM&&cW(f,false);q==ZM&&s==rN?vU(c,z2(a,f,r,p)):q==rN&&s==ZM&&vU(c,z2(a,f,p,r));}}}for(e=new Tob(c);e.a<e.c.c.length;){d=Wv(Rob(e),9);rX(d,j);}}pI(b);};Nkb(jAb,'SelfLoopProcessor',512);hI(513,1,eAb,H2);_.sc=function I2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;nI(b,'Spline SelfLoop positioning',1);k=Wv(rJ(a,(Mjb(),Jjb)),153);for(j=new Tob(a.c);j.a<j.c.c.length;){i=Wv(Rob(j),16);for(m=new Tob(i.a);m.a<m.c.c.length;){l=Wv(Rob(m),9);g=Wv(rJ(l,(Rib(),Nib)),20);h=new GU;for(e=g.mb();e.G();){c=Wv(e.H(),75);ceb(c);if((n=pr(c.g),Ue(n,c.i),n).a.Y()==0){h.c[h.c.length]=c;}else {G2(c);c.g.a.Y()==0||C2(c);}}switch(k.e){case 0:o=new Q2(l);P2(o);N2(o,h);break;case 2:for(f=new Tob(h);f.a<f.c.c.length;){c=Wv(Rob(f),75);aeb(c,(Ieb(),meb),true);}break;case 1:for(d=new Tob(h);d.a<d.c.c.length;){c=Wv(Rob(d),75);aeb(c,(Ieb(),meb),true);}}switch(k.e){case 0:case 1:F2(g);break;case 2:E2(g);}}}pI(b);};Nkb(jAb,'SplineSelfLoopPositioner',513);hI(515,1,{},Q2);Nkb(jAb,'SplineSelfLoopPositioner/DistributedLoopSidesCalculator',515);hI(516,1,{},$2);_.d=true;Nkb(jAb,'SplineSelfLoopPositioner/DistributedLoopSidesCalculator/SortedLoopSides',516);hI(116,1,{116:1},_2);_.a=0;_.b=0;Nkb(jAb,'SplineSelfLoopPositioner/DistributedLoopSidesCalculator/SortedLoopSides/SizeOfSide',116);hI(318,1,{},g3);var a3;Nkb(jAb,'SplineSelfLoopPositioner/PortReadder',318);hI(514,1,fyb,i3);_.$b=function j3(a,b){return h3(Wv(a,75),Wv(b,75))};Nkb(jAb,'SplineSelfLoopPositioner/TextWidthComparator',514);hI(517,1,eAb,l3);_.sc=function o3(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;nI(b,'Spline SelfLoop pre-processing.',1);k=new Wub;for(m=new Tob(a.b);m.a<m.c.c.length;){l=Wv(Rob(m),9);k3(l);k.a.Q();for(h=Uh(mX(l));Cm(h);){f=Wv(Dm(h),12);bW(f)&&(n=k.a.db(f,k),n==null);}for(g=(o=(new Snb(k.a)).a.bb().mb(),new Ynb(o));g.a.G();){f=(i=Wv(g.a.H(),21),Wv(i.yb(),12));r=f.c.g;s=f.d.g;(r==(sN(),$M)&&(s==ZM||s==pN)||r==ZM&&s==pN||r==pN&&s==rN||r==rN&&(s==$M||s==ZM))&&cW(f,false);}c=n3(k,l);sJ(l,(Rib(),Nib),c);if(!LM(Wv(rJ(l,(eM(),TL)),28))){q=new vtb;for(e=new Tob(c);e.a<e.c.c.length;){d=Wv(Rob(e),75);Ue(q,Zdb(d));Ue(q,d.i);}j=new Fnb(l.f,0);while(j.b<j.d.Y()){p=(Bxb(j.b<j.d.Y()),Wv(j.d.sb(j.c=j.b++),7));q.a.R(p)&&vnb(j);}}}pI(b);};Nkb(jAb,'SplineSelfLoopPreProcessor',517);hI(518,1,eAb,u3);_.sc=function v3(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I;nI(b,'Spline SelfLoop routing',1);D=new I3;for(m=new Tob(a.c);m.a<m.c.c.length;){l=Wv(Rob(m),16);for(s=new Tob(l.a);s.a<s.c.c.length;){r=Wv(Rob(s),9);u=r.f;n=new Wub;for(d=Wv(rJ(r,(Rib(),Nib)),20).mb();d.G();){c=Wv(d.H(),75);Ue(n,c.a);}v=new GU;for(g=(t=(new Snb(n.a)).a.bb().mb(),new Ynb(t));g.a.G();){f=(h=Wv(g.a.H(),21),Wv(h.yb(),12));B=f.c;G=f.d;k=new Tob(f.c.f.f);A=0;F=0;i=0;j=0;while(i<2){e=Wv(Rob(k),7);if(B==e){A=j;++i;}if(G==e){F=j;++i;}++j;}w=Wv(rJ(f,Mib),60);C=w==(Ieb(),neb)||w==keb?u.c.length-(F-A<0?-(F-A):F-A)+1:F-A<0?-(F-A):F-A;vU(v,new G3(A,F,C,w,f));}Gpb(v,D);p=new vtb;o=new Tob(v);if(o.a<o.c.c.length){q=t3(Wv(Rob(o),195),p);while(o.a<o.c.c.length){Afb(q,t3(Wv(Rob(o),195),p));}sJ(r,Oib,(H=new DP,I=new Bfb(r.j.a,r.j.b),H.d=Nlb(0,I.d-q.d),H.b=Nlb(0,I.b-q.b),H.a=Nlb(0,q.a-I.a),H.c=Nlb(0,q.c-I.c),H));}}}pI(b);};Nkb(jAb,'SplineSelfLoopRouter',518);hI(91,1,{91:1},w3);_.w=function x3(){return this.b+': '+this.d+' -> '+this.a+' '+zc(this.c)};_.a=0;_.b=0;_.d=0;Nkb(jAb,'SplineSelfLoopRouter/LoopPadding',91);hI(521,1,_zb,z3);_.D=function A3(a){return y3(this,Wv(a,91))};_.a=0;_.c=0;Nkb(jAb,'SplineSelfLoopRouter/LoopPadding/EnclosingPredicate',521);hI(520,1,fyb,C3);_.$b=function D3(a,b){return B3(Wv(a,91),Wv(b,91))};Nkb(jAb,'SplineSelfLoopRouter/LoopPadding/MarginComparator',520);hI(196,1,_zb,E3);_.D=function F3(a){return Wv(a,91).c==this.a};Nkb(jAb,'SplineSelfLoopRouter/LoopPadding/PortSidePredicate',196);hI(195,1,{195:1},G3);_.c=0;_.d=0;_.e=0;Nkb(jAb,'SplineSelfLoopRouter/SelfLoopEdge',195);hI(519,1,fyb,I3);_.$b=function J3(a,b){return H3(Wv(a,195),Wv(b,195))};Nkb(jAb,'SplineSelfLoopRouter/SelfLoopEdge/StepSizeComparator',519);hI(82,25,{25:1,82:1},L3);_.vc=function M3(){var a,b,c,d;for(b=WI(this.a,0);b.b!=b.d.c;){a=Wv(_ub(b),10);a.a=this.j.d;}for(d=WI(this.c,0);d.b!=d.d.c;){c=Wv(_ub(d),10);c.a=this.j.d;}};_.wc=function N3(){return this.b};_.xc=function O3(){return this.e};_.w=function P3(){return Ze(new Snb(this.d.a))};_.b=0;_.e=0;Nkb(vAb,'CLEdge',82);hI(93,25,{25:1,93:1},Q3);_.vc=function R3(){this.b.i.a=this.j.d+this.b.e.b;};_.wc=function S3(){if(this.b.g==(CX(),xX)){return 0}return this.a};_.xc=function T3(){if(this.b.g==(CX(),xX)){return 0}return this.c};_.w=function U3(){return xb(rJ(this.b,(Rib(),uib)))};_.a=0;_.c=0;Nkb(vAb,'CLNode',93);hI(175,17,{175:1,3:1,23:1,17:1},Y3);var V3,W3;var iD=Okb(vAb,'ConstraintCalculationStrategy',175,IF,Z3);var $3;hI(125,17,{125:1,3:1,23:1,17:1},h4);var a4,b4,c4,d4,e4,f4;var jD=Okb(vAb,'GraphCompactionStrategy',125,IF,i4);var j4;hI(455,1,eAb,o4);_.sc=function p4(a,b){var c,d,e;d=Wv(rJ(a,(Mjb(),Fjb)),125);if(d==(g4(),e4)){return}nI(b,'Horizontal Compaction',1);this.a=a;e=new Q4;c=new rS(P4(e,a));pS(c,this.b);switch(Wv(rJ(a,Gjb),175).e){case 1:nS(c,l4);break;default:nS(c,(aS(),$R));}switch(d.e){case 1:hS(c);break;case 2:hS(gS(c,(sK(),pK)));break;case 3:hS(bS(gS(hS(c),(sK(),pK))));break;case 4:hS(bS(oS(gS(hS(c),(sK(),pK)),new H4)));break;case 5:hS(mS(c,m4));}gS(c,(sK(),oK));c.e=true;L4(e);pI(b);};var l4,m4;Nkb(vAb,'HorizontalGraphCompactor',455);hI(462,1,{},q4);_.tc=function r4(a,b){var c,d,e;if(aw(a,82)&&aw(b,82)&&!sr(or(Wv(a,82).d,Wv(b,82).d))){return 0}c=null;aw(a,93)&&(c=Wv(a,93).b);d=null;aw(b,93)&&(d=Wv(b,93).b);if(!!c&&c.g==(CX(),xX)||!!d&&d.g==(CX(),xX)){return 0}e=Wv(rJ(this.a.a,(Rib(),Kib)),134);return Vjb(e,c?c.g:(CX(),zX),d?d.g:(CX(),zX))};_.uc=function s4(a,b){if(aw(a,82)&&aw(b,82)&&!sr(or(Wv(a,82).d,Wv(b,82).d))){return 1}return Qlb(a.xc(),b.xc())};Nkb(vAb,'HorizontalGraphCompactor/1',462);hI(456,317,{},u4);_.Dc=function v4(a){var b,c,d;this.b=a;ES(this,new z4,this.a);ES(this,new B4,this.a);b=Uzb;for(d=new Tob(this.b.a.b);d.a<d.c.c.length;){c=Wv(Rob(d),25);if(aw(c,93)&&Wv(c,93).b.g==(CX(),xX)){continue}b=Qlb(b,Ixb(w4(this.a,c)));}b==Uzb&&(b=0);ES(this,new D4,new F4(b));};Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation',456);hI(457,1,Tyb,x4);_.B=function y4(a){return w4(this,a)};Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$0$Type',457);hI(458,1,_zb,z4);_.D=function A4(a){return aw(Wv(a,25),82)};Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$1$Type',458);hI(459,1,_zb,B4);_.D=function C4(a){return aw(Wv(a,25),93)};Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$2$Type',459);hI(460,1,_zb,D4);_.D=function E4(a){return true};Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$3$Type',460);hI(461,1,Tyb,F4);_.B=function G4(a){return this.a};_.a=0;Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$4$Type',461);hI(463,1,Tyb,H4);_.B=function I4(a){return n4(),xkb(),uS(Wv(Wv(a,27).a,25).n,Wv(Wv(a,27).b,59))?vkb:wkb};Nkb(vAb,'HorizontalGraphCompactor/lambda$0$Type',463);hI(553,1,{},Q4);_.c=false;Nkb(vAb,'LGraphToCGraphTransformer',553);hI(552,1,{},U4);_.Cc=function V4(a){var b,c,d,e,f;this.a=a;this.d=new l7;this.c=xv(UD,syb,61,this.a.a.a.c.length,0,1);this.b=0;for(c=new Tob(this.a.a.a);c.a<c.c.c.length;){b=Wv(Rob(c),78);b.d=this.b;f=x7(z7(y7(new A7,this.b),b),this.d);this.c[this.b]=f;++this.b;}T4(this);S4(this);R4(this);F7(W7(this.d),new sI);for(e=new Tob(this.a.a.b);e.a<e.c.c.length;){d=Wv(Rob(e),25);d.r=this.c[d.f.d].e+d.g.a;d.j.d=d.r;}};_.b=0;Nkb(vAb,'NetworkSimplexCompaction',552);hI(142,1,{142:1,23:1},X4);_.F=function Y4(a){return W4(this,Wv(a,142))};_.c=false;_.d=true;_.i=0;_.j=0;_.k=0;_.n=0;Nkb(vAb,'VerticalSegment',142);hI(586,1,{},_4);_.e=false;Nkb(wAb,'AllCrossingsCounter',586);hI(339,1,{});Nkb(wAb,'BetweenLayerEdgeAllCrossingsCounter',339);hI(613,1,{},k5);_.c=0;_.e=0;_.i=0;Nkb(wAb,'BetweenLayerEdgeTwoNodeCrossingsCounter',613);hI(284,1,{284:1},r5);_.w=function s5(){return 'AdjacencyList [node='+this.d+', adjacencies= '+this.a+']'};_.b=0;_.c=0;_.f=0;Nkb(wAb,'BetweenLayerEdgeTwoNodeCrossingsCounter/AdjacencyList',284);hI(128,1,{128:1,23:1},v5);_.F=function w5(a){return t5(this,Wv(a,128))};_.w=function x5(){return 'Adjacency [position='+this.c+', cardinality='+this.a+', currentCardinality='+this.b+']'};_.a=0;_.b=0;_.c=0;Nkb(wAb,'BetweenLayerEdgeTwoNodeCrossingsCounter/AdjacencyList/Adjacency',128);hI(610,339,{},y5);_.Gc=function z5(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb;eb=0;for(I=0,L=a.length;I<L;++I){G=a[I];if(LM(Wv(rJ(G,(eM(),TL)),28))){for(U=new Tob(G.f);U.a<U.c.c.length;){T=Wv(Rob(U),7);W=0;for(g=new Tob(T.e);g.a<g.c.c.length;){f=Wv(Rob(g),12);G.d!=f.d.f.d&&++W;}W>0&&(this.a[T.k]=eb++);}}else {N=0;for(U=new Tob(G.f);U.a<U.c.c.length;){T=Wv(Rob(U),7);for(g=new Tob(T.e);g.a<g.c.c.length;){f=Wv(Rob(g),12);G.d!=f.d.f.d&&++N;}this.a[T.k]=eb;}N>0&&++eb;}}jb=0;for(J=0,M=b.length;J<M;++J){G=b[J];if(LM(Wv(rJ(G,(eM(),TL)),28))){O=0;for(U=new Tob(G.f);U.a<U.c.c.length;){T=Wv(Rob(U),7);if(T.g==(sN(),$M)){for(g=new Tob(T.b);g.a<g.c.c.length;){f=Wv(Rob(g),12);if(G.d!=f.c.f.d){++O;break}}}else {break}}Q=0;X=new Fnb(G.f,G.f.c.length);while(X.b>0){T=(Bxb(X.b>0),Wv(X.a.sb(X.c=--X.b),7));W=0;for(g=new Tob(T.b);g.a<g.c.c.length;){f=Wv(Rob(g),12);G.d!=f.c.f.d&&++W;}if(W>0){if(T.g==(sN(),$M)){this.a[T.k]=jb;++jb;}else {this.a[T.k]=jb+O+Q;++Q;}}}jb+=Q;}else {N=0;for(U=new Tob(G.f);U.a<U.c.c.length;){T=Wv(Rob(U),7);for(g=new Tob(T.b);g.a<g.c.c.length;){f=Wv(Rob(g),12);G.d!=f.c.f.d&&++N;}this.a[T.k]=jb;}N>0&&++jb;}}V=new ntb;p=new vtb;for(H=0,K=a.length;H<K;++H){G=a[H];for(hb=new Tob(G.f);hb.a<hb.c.c.length;){gb=Wv(Rob(hb),7);for(g=new Tob(gb.e);g.a<g.c.c.length;){f=Wv(Rob(g),12);lb=f.d;if(G.d!=lb.f.d){fb=Wv(re(Ktb(V.d,gb)),204);kb=Wv(re(Ktb(V.d,lb)),204);if(!fb&&!kb){o=new B5;p.a.db(o,p);QI(o.a,f);QI(o.e,gb);Ltb(V.d,gb,o);QI(o.e,lb);Ltb(V.d,lb,o);}else if(!fb){QI(kb.a,f);QI(kb.e,gb);Ltb(V.d,gb,kb);}else if(!kb){QI(fb.a,f);QI(fb.e,lb);Ltb(V.d,lb,fb);}else if(fb==kb){QI(fb.a,f);}else {QI(fb.a,f);for(S=WI(kb.e,0);S.b!=S.d.c;){R=Wv(_ub(S),7);Ltb(V.d,R,fb);}Ue(fb.a,kb.a);Ue(fb.e,kb.e);p.a.eb(kb)!=null;}}}}}q=Wv(Ye(p,xv(CD,{675:1,3:1,5:1,6:1},204,p.a.Y(),0,1)),675);F=a[0].d;db=b[0].d;for(m=0,n=q.length;m<n;++m){l=q[m];l.f=eb;l.g=jb;for(U=WI(l.e,0);U.b!=U.d.c;){T=Wv(_ub(U),7);Y=this.a[T.k];if(T.f.d==F){if(Y<l.f){l.f=Y;l.b=txb(T);}Y>l.c&&(l.c=Y);}else if(T.f.d==db){Y<l.g&&(l.g=Y);Y>l.d&&(l.d=Y);}}}ipb(q,0,q.length,(hsb(),hsb(),gsb));ib=xv(mw,Yyb,26,q.length,12,1);c=xv(mw,Yyb,26,jb+1,12,1);for(s=0;s<q.length;s++){ib[s]=q[s].g;c[ib[s]]=1;}e=0;for(t=0;t<c.length;t++){c[t]==1?(c[t]=e):--e;}Z=0;for(u=0;u<ib.length;u++){ib[u]+=c[ib[u]];Z=Plb(Z,ib[u]+1);}k=1;while(k<Z){k*=2;}nb=2*k-1;k-=1;mb=xv(mw,Yyb,26,nb,12,1);d=0;for(i=0,j=ib.length;i<j;++i){h=ib[i];w=h+k;++mb[w];while(w>0){w%2>0&&(d+=mb[w+1]);w=(w-1)/2|0;++mb[w];}}D=xv(BD,syb,158,q.length*2,0,1);for(v=0;v<q.length;v++){D[2*v]=new E5(q[v],q[v].f,q[v].c,0);D[2*v+1]=new E5(q[v],q[v].c,q[v].f,1);}ipb(D,0,D.length,(gsb));P=0;for(B=0,C=D.length;B<C;++B){A=D[B];switch(A.d){case 0:++P;break;case 1:--P;d+=P;}}cb=xv(BD,syb,158,q.length*2,0,1);for(r=0;r<q.length;r++){cb[2*r]=new E5(q[r],q[r].g,q[r].d,0);cb[2*r+1]=new E5(q[r],q[r].d,q[r].g,1);}ipb(cb,0,cb.length,(gsb));P=0;for(ab=0,bb=cb.length;ab<bb;++ab){$=cb[ab];switch($.d){case 0:++P;break;case 1:--P;d+=P;}}return d};Nkb(wAb,'BetweenLayerHyperedgeAllCrossingsCounter',610);hI(204,1,{204:1,23:1},B5);_.F=function C5(a){return A5(this,Wv(a,204))};_.b=0;_.c=0;_.d=0;_.f=0;_.g=0;var CD=Nkb(wAb,'BetweenLayerHyperedgeAllCrossingsCounter/Hyperedge',204);hI(158,1,{158:1,23:1},E5);_.F=function F5(a){return D5(this,Wv(a,158))};_.b=0;_.c=0;_.d=0;var BD=Nkb(wAb,'BetweenLayerHyperedgeAllCrossingsCounter/HyperedgeCorner',158);hI(611,339,{},H5);_.Gc=function J5(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B;B=0;f=0;h=a[0].d;u=b[0].d;for(k=0,m=b.length;k<m;++k){i=b[k];if(LM(Wv(rJ(i,(eM(),TL)),28))){o=0;for(r=new Tob(i.f);r.a<r.c.c.length;){q=Wv(Rob(r),7);if(q.g==(sN(),$M)){for(e=new Tob(q.b);e.a<e.c.c.length;){d=Wv(Rob(e),12);if(d.c.f.d==h){++o;break}}}else {break}}p=0;t=new Fnb(i.f,i.f.c.length);while(t.b>0){q=(Bxb(t.b>0),Wv(t.a.sb(t.c=--t.b),7));s=0;for(e=new Tob(q.b);e.a<e.c.c.length;){d=Wv(Rob(e),12);d.c.f.d==h&&++s;}if(s>0){if(q.g==(sN(),$M)){this.a[q.k]=B;++B;}else {this.a[q.k]=B+o+p;++p;}f+=s;}}B+=p;}else {n=0;for(r=new Tob(i.f);r.a<r.c.c.length;){q=Wv(Rob(r),7);for(e=new Tob(q.b);e.a<e.c.c.length;){d=Wv(Rob(e),12);d.c.f.d==h&&++n;}this.a[q.k]=B;}if(n>0){++B;f+=n;}}}v=xv(mw,Yyb,26,f,12,1);g=0;for(j=0,l=a.length;j<l;++j){i=a[j];if(LM(Wv(rJ(i,(eM(),TL)),28))){for(r=new Tob(i.f);r.a<r.c.c.length;){q=Wv(Rob(r),7);w=g;for(e=new Tob(q.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);A=d.d;A.f.d==u&&K5(v,w,g++,this.a[A.k]);}}}else {w=g;for(r=new Tob(i.f);r.a<r.c.c.length;){q=Wv(Rob(r),7);for(e=new Tob(q.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);A=d.d;A.f.d==u&&K5(v,w,g++,this.a[A.k]);}}}}c=G5(B,f,v);return c};Nkb(wAb,'BetweenLayerStraightEdgeAllCrossingsCounter',611);hI(338,1,{},N5);_.b=0;_.e=false;Nkb(wAb,'CrossingMatrixFiller',338);hI(447,1,eAb,$5);_.sc=function _5(a,b){var c,d,e,f;nI(b,'Greedy switch crossing reduction',1);this.e=Wv(rJ(a,(Mjb(),tjb)),110);c=a.c.c.length;if(c<2||this.e==(zhb(),rhb)){pI(b);return}Q5(this,a);this.e.b?(this.e.a?R5(this):Z5(this),d=P5(this),e=this.e.a?this.c:Z4(this.b,this.d),this.i=!this.i,this.d=this.g,this.e.a?R5(this):Z5(this),f=this.e.a?this.c:Z4(this.b,this.d),e<=f&&S5(this,d),undefined):this.e.a?R5(this):Z5(this);T5(this,this.a);pI(b);};_.c=0;_.i=true;Nkb(wAb,'GreedySwitchProcessor',447);hI(340,1,{},k6);Nkb(wAb,'InLayerEdgeAllCrossingsCounter',340);hI(614,340,{},r6);_.b=0;_.d=0;Nkb(wAb,'InLayerEdgeTwoNodeCrossingCounter',614);hI(226,1,{226:1,23:1},t6);_.F=function u6(a){return s6(this,Wv(a,226))};_.w=function v6(){return 'ComparableEdgeAndPort [port='+this.b+', edge='+this.a+', portPosition='+this.c+']'};_.c=0;Nkb(wAb,'InLayerEdgeTwoNodeCrossingCounter/ComparableEdgeAndPort',226);hI(612,1,{},F6);_.e=true;_.f=0;_.g=0;_.k=false;Nkb(wAb,'NorthSouthEdgeAllCrossingsCounter',612);hI(615,1,{},R6);_.b=0;_.d=0;_.e=false;Nkb(wAb,'NorthSouthEdgeNeighbouringNodeCrossingsCounter',615);hI(143,1,Oyb,U6);_.mb=function V6(){return T6(this)};_.b=0;Nkb(wAb,'PortIterable',143);hI(344,1,Ayb,W6);_.H=function Y6(){return Wv(Dnb(this.a),7)};_.G=function X6(){return this.a.b>0};_.I=function Z6(){throw new Hmb};Nkb(wAb,'PortIterable/1',344);hI(336,1,{},b7);Nkb(wAb,'SwitchDecider',336);hI(89,1,{89:1},d7);_.w=function e7(){return 'NEdge[id='+this.b+' w='+this.f+' d='+this.a+']'};_.a=1;_.b=0;_.e=false;_.f=0;var QD=Nkb(yAb,'NEdge',89);hI(157,1,{},k7);Nkb(yAb,'NEdge/NEdgeBuilder',157);hI(278,1,{},l7);Nkb(yAb,'NGraph',278);hI(61,1,{61:1},n7);_.b=0;_.d=-1;_.e=0;_.i=-1;_.j=false;var UD=Nkb(yAb,'NNode',61);hI(333,13,bAb,q7);_.rb=function r7(a,b){++this.d;Fxb(a,this.c.length);fxb(this.c,a,b);};_.ib=function s7(a){return o7(this,a)};_.jb=function t7(a){++this.d;return xU(this,a)};_.Q=function u7(){++this.d;this.c=xv(UF,syb,1,0,4,1);};_.vb=function v7(a){++this.d;return AU(this,a)};_.nb=function w7(a){return p7(this,a)};Nkb(yAb,'NNode/ChangeAwareArrayList',333);hI(199,1,{},A7);Nkb(yAb,'NNode/NNodeBuilder',199);hI(595,1,{},V7);_.a=false;_.f=$xb;_.j=0;Nkb(yAb,'NetworkSimplex',595);hI(193,17,{180:1,193:1,3:1,23:1,17:1},$7);_.rc=function _7(){switch(this.e){case 0:return new g8;case 1:return new m8;default:throw new slb('No implementation is available for the cycle breaker '+(this.d!=null?this.d:''+this.e));}};var X7,Y7;var WD=Okb(AAb,'CycleBreakingStrategy',193,IF,a8);var b8;hI(539,1,BAb,g8);_.qc=function h8(a){return d8};_.sc=function i8(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J;nI(b,'Greedy cycle removal',1);r=a.b;J=r.c.length;this.a=xv(mw,Yyb,26,J,12,1);this.c=xv(mw,Yyb,26,J,12,1);this.b=xv(mw,Yyb,26,J,12,1);h=0;for(p=new Tob(r);p.a<p.c.c.length;){n=Wv(Rob(p),9);n.k=h;for(w=new Tob(n.f);w.a<w.c.c.length;){u=Wv(Rob(w),7);for(f=new Tob(u.b);f.a<f.c.c.length;){c=Wv(Rob(f),12);if(c.c.f==n){continue}C=Wv(rJ(c,(Rib(),Eib)),24).a;this.a[h]+=C>0?C+1:1;}for(e=new Tob(u.e);e.a<e.c.c.length;){c=Wv(Rob(e),12);if(c.d.f==n){continue}C=Wv(rJ(c,(Rib(),Eib)),24).a;this.c[h]+=C>0?C+1:1;}}this.c[h]==0?QI(this.d,n):this.a[h]==0&&QI(this.e,n);++h;}m=-1;l=1;j=new GU;D=Wv(rJ(a,(Rib(),Gib)),154);while(J>0){while(this.d.b!=0){G=Wv(YI(this.d),9);this.b[G.k]=m--;f8(this,G);--J;}while(this.e.b!=0){H=Wv(YI(this.e),9);this.b[H.k]=l++;f8(this,H);--J;}if(J>0){k=eyb;for(q=new Tob(r);q.a<q.c.c.length;){n=Wv(Rob(q),9);if(this.b[n.k]==0){s=this.c[n.k]-this.a[n.k];if(s>=k){if(s>k){j.c=xv(UF,syb,1,0,4,1);k=s;}j.c[j.c.length]=n;}}}i=Wv(yU(j,vvb(D,j.c.length)),9);this.b[i.k]=l++;f8(this,i);--J;}}F=r.c.length+1;for(h=0;h<r.c.length;h++){this.b[h]<0&&(this.b[h]+=F);}for(o=new Tob(r);o.a<o.c.c.length;){n=Wv(Rob(o),9);B=Wv(FU(n.f,xv(BB,mAb,7,n.f.c.length,0,1)),346);for(v=0,A=B.length;v<A;++v){u=B[v];t=Wv(FU(u.e,xv(dB,gAb,12,u.e.c.length,0,1)),47);for(d=0,g=t.length;d<g;++d){c=t[d];I=c.d.f.k;if(this.b[n.k]>this.b[I]){cW(c,true);sJ(a,cib,(xkb(),xkb(),wkb));}}}}this.a=null;this.c=null;this.b=null;_I(this.e);_I(this.d);pI(b);};var d8;Nkb(AAb,'GreedyCycleBreaker',539);hI(540,1,BAb,m8);_.qc=function n8(a){return j8};_.sc=function o8(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,'Interactive cycle breaking',1);k=new GU;for(m=new Tob(a.b);m.a<m.c.c.length;){l=Wv(Rob(m),9);l.k=1;n=kX(l).a;for(j=oX(l,(djb(),bjb)).mb();j.G();){i=Wv(j.H(),7);for(e=new Tob(i.e);e.a<e.c.c.length;){c=Wv(Rob(e),12);o=c.d.f;if(o!=l){p=kX(o).a;p<n&&(k.c[k.c.length]=c,true);}}}}for(f=new Tob(k);f.a<f.c.c.length;){c=Wv(Rob(f),12);cW(c,true);}k.c=xv(UF,syb,1,0,4,1);for(h=new Tob(a.b);h.a<h.c.c.length;){g=Wv(Rob(h),9);g.k>0&&l8(this,g,k);}for(d=new Tob(k);d.a<d.c.c.length;){c=Wv(Rob(d),12);cW(c,true);}k.c=xv(UF,syb,1,0,4,1);pI(b);};var j8;Nkb(AAb,'InteractiveCycleBreaker',540);hI(543,1,BAb,q8);_.qc=function r8(a){return TQ(RQ(new WQ,(d0(),z_)),I_)};_.sc=function s8(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,'Interactive node layering',1);c=new GU;for(l=new Tob(a.b);l.a<l.c.c.length;){j=Wv(Rob(l),9);h=j.i.a;g=h+j.j.a;g=h+1>g?h+1:g;p=new Fnb(c,0);d=null;while(p.b<p.d.Y()){n=(Bxb(p.b<p.d.Y()),Wv(p.d.sb(p.c=p.b++),239));if(n.c>=g){Bxb(p.b>0);p.a.sb(p.c=--p.b);break}else if(n.a>h){if(!d){vU(n.b,j);n.c=Qlb(n.c,h);n.a=Nlb(n.a,g);d=n;}else {xU(d.b,n.b);d.a=Nlb(d.a,n.a);vnb(p);}}}if(!d){d=new t8;d.c=h;d.a=g;Anb(p,d);vU(d.b,j);}}f=a.c;i=0;for(o=new Tob(c);o.a<o.c.c.length;){n=Wv(Rob(o),239);e=new sY(a);e.k=i++;f.c[f.c.length]=e;for(m=new Tob(n.b);m.a<m.c.c.length;){j=Wv(Rob(m),9);rX(j,e);j.k=0;}}for(k=new Tob(a.b);k.a<k.c.c.length;){j=Wv(Rob(k),9);j.k==0&&p8(this,j,a);}while((Cxb(0,f.c.length),Wv(f.c[0],16)).a.c.length==0){Cxb(0,f.c.length);f.c.splice(0,1);}a.b.c=xv(UF,syb,1,0,4,1);pI(b);};Nkb(CAb,'InteractiveLayerer',543);hI(239,1,{239:1},t8);_.a=0;_.c=0;Nkb(CAb,'InteractiveLayerer/LayerSpan',239);hI(173,17,{180:1,173:1,3:1,23:1,17:1},y8);_.rc=function z8(){switch(this.e){case 0:return new U8;case 1:return new J8;case 2:return new q8;default:throw new slb('No implementation is available for the layerer '+(this.d!=null?this.d:''+this.e));}};var u8,v8,w8;var _D=Okb(CAb,'LayeringStrategy',173,IF,A8);var B8;hI(542,1,BAb,J8);_.qc=function K8(a){var b;b=XQ(D8);Ckb(Ixb(Xv(rJ(a,(Mjb(),njb)))))||gw(rJ(a,Ljb))===gw((ckb(),_jb))?QQ(b,E8):gw(rJ(a,Ljb))===gw((ckb(),akb))&&QQ(b,F8);Ckb(Ixb(Xv(rJ(a,Ijb))))&&UQ(b,(d0(),Y_));return b};_.sc=function L8(a,b){var c,d,e,f,g;nI(b,'Longest path layering',1);this.a=a;g=this.a.b;this.b=xv(mw,Yyb,26,g.c.length,12,1);c=0;for(f=new Tob(g);f.a<f.c.c.length;){d=Wv(Rob(f),9);d.k=c;this.b[c]=-1;++c;}for(e=new Tob(g);e.a<e.c.c.length;){d=Wv(Rob(e),9);I8(this,d);}g.c=xv(UF,syb,1,0,4,1);this.a=null;this.b=null;pI(b);};var D8,E8,F8;Nkb(CAb,'LongestPathLayerer',542);hI(541,1,BAb,U8);_.qc=function V8(a){var b;b=XQ(M8);if(Ckb(Ixb(Xv(rJ(a,(Mjb(),njb)))))||gw(rJ(a,Ljb))===gw((ckb(),_jb))){QQ(b,N8);this.d=(ckb(),_jb);}else if(gw(rJ(a,Ljb))===gw((ckb(),akb))){QQ(b,O8);this.d=akb;}return b};_.sc=function W8(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Network simplex layering',1);this.b=a;l=Wv(rJ(a,(Mjb(),Kjb)),24).a*4;k=this.b.b;if(k.c.length<1){pI(b);return}for(d=WI(Q8(this,k),0);d.b!=d.d.c;){c=Wv(_ub(d),20);f=l*hw(Tlb(c.Y()));e=T8(c);F7(S7(U7(T7(W7(e),f),this.b),this.d==(ckb(),_jb)),rI(b,1));h=this.b.c;for(j=new Tob(e.a);j.a<j.c.c.length;){i=Wv(Rob(j),61);while(h.c.length<=i.e){uU(h,h.c.length,new sY(this.b));}g=Wv(i.f,9);rX(g,Wv(yU(h,i.e),16));}}k.c=xv(UF,syb,1,0,4,1);this.a=null;this.b=null;this.c=null;pI(b);};var M8,N8,O8;Nkb(CAb,'NetworkSimplexLayerer',541);hI(326,1,{});Nkb(EAb,'AbstractPortDistributor',326);hI(558,1,fyb,a9);_.$b=function b9(a,b){return _8(this,Wv(a,7),Wv(b,7))};Nkb(EAb,'AbstractPortDistributor/1',558);hI(564,1,{},j9);Nkb(EAb,'BarycenterHeuristic',564);hI(272,1,{272:1},k9);_.b=0;_.d=0;_.e=false;var eE=Nkb(EAb,'BarycenterHeuristic/BarycenterState',272);hI(565,1,fyb,l9);_.$b=function m9(a,b){return f9(this.a,a,b)};Nkb(EAb,'BarycenterHeuristic/lambda$0$Type',565);hI(192,17,{180:1,192:1,3:1,23:1,17:1},q9);_.rc=function r9(){switch(this.e){case 0:return new I9;case 1:return new y9;default:throw new slb('No implementation is available for the crossing minimizer '+(this.d!=null?this.d:''+this.e));}};var n9,o9;var hE=Okb(EAb,'CrossingMinimizationStrategy',192,IF,s9);var t9;hI(526,1,BAb,y9);_.qc=function z9(a){var b;b=XQ(v9);Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),khb))&&TQ(b,(d0(),V_));return b};_.sc=function A9(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;nI(b,'Interactive crossing minimization',1);m=0;for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);c=0;j=0;for(i=new Tob(d.a);i.a<i.c.c.length;){g=Wv(Rob(i),9);if(g.i.a>0){c+=g.i.a+g.j.a/2;++j;}for(l=new Tob(g.f);l.a<l.c.c.length;){k=Wv(Rob(l),7);k.k=m++;}}c/=j;o=xv(kw,hyb,26,d.a.c.length,12,1);f=0;for(h=new Tob(d.a);h.a<h.c.c.length;){g=Wv(Rob(h),9);g.k=f++;o[g.k]=x9(g,c);g.g==(CX(),zX)&&sJ(g,(Rib(),wib),o[g.k]);}Gpb(d.a,new C9(o));}n=new P9(xv(lw,tAb,26,m,12,1));Z8(n,jW(a));pI(b);};var v9;Nkb(EAb,'InteractiveCrossingMinimizer',526);hI(527,1,fyb,C9);_.$b=function D9(a,b){return B9(this,Wv(a,9),Wv(b,9))};Nkb(EAb,'InteractiveCrossingMinimizer/1',527);hI(525,1,BAb,I9);_.qc=function K9(a){var b;b=XQ(E9);Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),khb))&&TQ(b,(d0(),V_));return b};_.sc=function L9(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H;nI(b,'Layer sweep crossing minimization',1);F=Wv(rJ(a,(Rib(),Gib)),154);q=a.c.c.length;if(q<2){pI(b);return}G9(this,a);d=$xb;H=Wv(rJ(a,(Mjb(),Kjb)),24).a;c=xv(eE,Txb,671,a.c.c.length,0,2);m=0;for(p=new Tob(a.c);p.a<p.c.c.length;){o=Wv(Rob(p),16);o.k=m;c[m]=xv(eE,{671:1,3:1,5:1,6:1},272,o.a.c.length,0,1);n=0;for(v=new Tob(o.a);v.a<v.c.c.length;){u=Wv(Rob(v),9);u.k=n;c[m][n]=new k9(u);++n;}++m;}e=new X9(c,this.g);f=new j9(c,e,F,this.j);A=new P9(this.j);t=new M9(this.j);for(G=0;G<H&&d>0;G++){k=wvb(F,1)!=0;j=k?0:q-1;i=this.b[j];C=wvb(F,1)!=0?A:t;H9(i,f,k,false,true);g=$xb;h=true;do{J9(this.b,this.k);D=g;g=0;g+=bab(this.f,i,j);if(k){for(r=1;r<q;r++){l=this.b[r];X8(C,i,(djb(),bjb));H9(l,f,true,!h,false);g+=bab(this.f,l,r);this.d[r]||this.c[r-1]?(g+=lab(this.e,i,l)):(g+=hab(this.i,i,l));i=l;}j=q-1;}else {for(r=q-2;r>=0;r--){l=this.b[r];X8(C,i,(djb(),ajb));H9(l,f,false,!h,false);g+=bab(this.f,l,r);this.c[r]||this.d[r+1]?(g+=lab(this.e,l,i)):(g+=hab(this.i,l,i));i=l;}j=0;}h=false;k=!k;}while(g<D&&g>0);if(g<d||D<d){if(g<=D){J9(this.b,this.a);d=g;}else {J9(this.k,this.a);d=D;}}}s=new Fnb(a.c,0);while(s.b<s.d.Y()){o=(Bxb(s.b<s.d.Y()),Wv(s.d.sb(s.c=s.b++),16));B=this.a[s.b-1];w=new Fnb(o.a,0);while(w.b<w.d.Y()){Bxb(w.b<w.d.Y());w.d.sb(w.c=w.b++);Enb(w,B[w.b-1]);}}this.j=null;this.a=null;this.b=null;this.k=null;this.i=null;this.e=null;this.c=null;this.d=null;Pm(this.g);pI(b);};var E9;Nkb(EAb,'LayerSweepCrossingMinimizer',525);hI(327,326,{},M9);_.Hc=function N9(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;m=this.a;if(LM(Wv(rJ(a,(eM(),TL)),28))){switch(c.e){case 1:{e=0;h=0;for(l=new Tob(a.f);l.a<l.c.c.length;){j=Wv(Rob(l),7);if(j.b.c.length!=0){++e;j.g==(sN(),$M)&&++h;}}i=b+h;o=b+e;for(k=oX(a,(djb(),ajb)).mb();k.G();){j=Wv(k.H(),7);if(j.g==(sN(),$M)){m[j.k]=i;--i;}else {m[j.k]=o;--o;}}return e}case 2:{n=0;for(k=oX(a,(djb(),bjb)).mb();k.G();){j=Wv(k.H(),7);++n;m[j.k]=b+n;}return n}default:throw new rlb;}}else {g=4;f=0;for(l=oX(a,c).mb();l.G();){j=Wv(l.H(),7);d=O9(c,j.g);g=g<d-1?g:d-1;f=f>d?f:d;}if(f>g){for(k=oX(a,c).mb();k.G();){j=Wv(k.H(),7);m[j.k]=b+O9(c,j.g)-g;}return f-g}return 0}};Nkb(EAb,'LayerTotalPortDistributor',327);hI(274,326,{},P9);_.Hc=function Q9(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;l=this.a;if(LM(Wv(rJ(a,(eM(),TL)),28))){switch(c.e){case 1:{e=0;f=0;for(k=new Tob(a.f);k.a<k.c.c.length;){i=Wv(Rob(k),7);if(i.b.c.length!=0){++e;i.g==(sN(),$M)&&++f;}}d=1/(e+1);g=b+f*d;n=b+1-d;for(j=oX(a,(djb(),ajb)).mb();j.G();){i=Wv(j.H(),7);if(i.g==(sN(),$M)){l[i.k]=g;g-=d;}else {l[i.k]=n;n-=d;}}break}case 2:{h=0;for(k=new Tob(a.f);k.a<k.c.c.length;){i=Wv(Rob(k),7);i.e.c.length==0||++h;}d=1/(h+1);m=b+d;for(j=oX(a,(djb(),bjb)).mb();j.G();){i=Wv(j.H(),7);l[i.k]=m;m+=d;}break}default:throw new slb(GAb);}}else {for(j=oX(a,c).mb();j.G();){i=Wv(j.H(),7);l[i.k]=b+R9(c,i.g);}}return 1};Nkb(EAb,'NodeRelativePortDistributor',274);hI(566,1,{},X9);Nkb(KAb,'ForsterConstraintResolver',566);hI(102,1,{102:1},$9,_9);_.w=function aab(){var a,b;b=new zmb;b.a+='[';for(a=0;a<this.d.length;a++){ymb(b,tX(this.d[a]));W9(this.g,this.d[0]).a!=null&&ymb(ymb((b.a+='<',b),ilb(Ixb(W9(this.g,this.d[0]).a))),'>');a<this.d.length-1&&(b.a+=', ',b);}return b.a+=']',b.a};_.a=0;_.c=0;_.f=0;var nE=Nkb(KAb,'ForsterConstraintResolver/ConstraintGroup',102);hI(331,1,{});Nkb(LAb,'AbstractCrossingsCounter',331);hI(568,331,{},iab);Nkb(LAb,'BarthJuengerMutzelCrossingsCounter',568);hI(567,331,{},mab);Nkb(LAb,'HyperedgeCrossingsCounter',567);hI(197,1,{197:1,23:1},oab);_.F=function pab(a){return nab(this,Wv(a,197))};_.b=0;_.c=0;_.e=0;_.f=0;var tE=Nkb(LAb,'HyperedgeCrossingsCounter/Hyperedge',197);hI(156,1,{156:1,23:1},rab);_.F=function sab(a){return qab(this,Wv(a,156))};_.b=0;_.c=0;var sE=Nkb(LAb,'HyperedgeCrossingsCounter/HyperedgeCorner',156);hI(242,17,{242:1,3:1,23:1,17:1},wab);var tab,uab;var rE=Okb(LAb,'HyperedgeCrossingsCounter/HyperedgeCorner/Type',242,IF,xab);hI(545,1,BAb,Bab);_.qc=function Cab(a){return Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))?yab:null};_.sc=function Dab(a,b){var c,d;nI(b,'Interactive node placement',1);this.a=Wv(rJ(a,(Rib(),Kib)),134);for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);Aab(this,c);}pI(b);};var yab;Nkb(MAb,'InteractiveNodePlacer',545);hI(546,1,BAb,Qab);_.qc=function Rab(a){return Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))?Eab:null};_.sc=function Sab(a,b){nI(b,'Linear segments node placement',1);this.b=Wv(rJ(a,(Rib(),Kib)),134);Pab(this,a);Lab(this,a);Iab(this,a);Oab(this);this.a=null;this.b=null;pI(b);};var Eab,Fab,Gab;Nkb(MAb,'LinearSegmentsNodePlacer',546);hI(111,1,{111:1,23:1},Wab);_.F=function Xab(a){return Tab(this,Wv(a,111))};_.t=function Yab(a){var b;if(aw(a,111)){b=Wv(a,111);return this.b==b.b}return false};_.v=function Zab(){return this.b};_.w=function $ab(){return 'ls'+Ze(this.f)};_.a=0;_.b=0;_.c=-1;_.d=-1;_.i=0;var wE=Nkb(MAb,'LinearSegmentsNodePlacer/LinearSegment',111);hI(548,1,BAb,cbb);_.qc=function dbb(a){return Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))?_ab:null};_.sc=function ebb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J;H=Wv(rJ(a,(Rib(),Kib)),134);u=(mp(),new ntb);t=0;e=new l7;for(i=new Tob(a.c);i.a<i.c.c.length;){g=Wv(Rob(i),16);D=null;C=null;for(n=new Tob(g.a);n.a<n.c.c.length;){m=Wv(Rob(n),9);++t;s=x7(new A7,e);s.f=m;Ltb(u.d,m,s);m.e.d=Llb(m.e.d);if(C){r=new d7;r.f=0;r.a=hw(Mlb(D.e.d+D.j.b+D.e.a+Xjb(H,Wv(C.f,9),m)));r.c=C;r.d=s;o7(C.g,r);o7(s.c,r);}D=m;C=s;}}for(j=new Tob(a.c);j.a<j.c.c.length;){g=Wv(Rob(j),16);for(n=new Tob(g.a);n.a<n.c.c.length;){m=Wv(Rob(n),9);for(A=new Tob(m.f);A.a<A.c.c.length;){w=Wv(Rob(A),7);J=w.i.b+w.a.b;if(J!=Math.floor(J)){v=J-ZH(TH(Math.round(J)));w.i.b-=v;}}}}for(h=new Tob(a.c);h.a<h.c.c.length;){g=Wv(Rob(h),16);for(n=new Tob(g.a);n.a<n.c.c.length;){m=Wv(Rob(n),9);for(l=Uh(mX(m));Cm(l);){k=Wv(Dm(l),12);if(bW(k)){continue}if(k.d.f.d==g){continue}G=k.c.f.e.d+k.c.i.b+k.c.a.b;I=k.d.f.e.d+k.d.i.b+k.d.a.b;c=I-G;B=hw(c);d=x7(new A7,e);o=new d7;o.f=bbb(k);o.a=B>0?B:0;o.c=d;o.d=Wv(Smb(u,k.c.f),61);o7(o.c.g,o);o7(o.d.c,o);F=new d7;F.f=bbb(k);F.a=B<0?-B:0;F.c=d;F.d=Wv(Smb(u,k.d.f),61);o7(F.c.g,F);o7(F.d.c,F);}}}f=Wv(rJ(a,(Mjb(),Kjb)),24).a*hw(Math.sqrt(t));F7(S7(T7(W7(e),f),false),rI(b,1));for(q=new Tob(e.a);q.a<q.c.c.length;){p=Wv(Rob(q),61);if(p.f!=null){m=Wv(p.f,9);m.i.b=p.e+m.e.d;}}};var _ab;Nkb(MAb,'NetworkSimplexPlacer',548);hI(141,17,{180:1,141:1,3:1,23:1,17:1},lbb);_.rc=function mbb(){switch(this.e){case 0:return new sbb;case 1:return new Bab;case 2:return new Qab;case 3:return new dcb;case 4:return new cbb;default:throw new slb('No implementation is available for the node placer '+(this.d!=null?this.d:''+this.e));}};var fbb,gbb,hbb,ibb,jbb;var zE=Okb(MAb,'NodePlacementStrategy',141,IF,nbb);var obb;hI(544,1,BAb,sbb);_.qc=function tbb(a){return Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))?qbb:null};_.sc=function ubb(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Simple node placement',1);l=Wv(rJ(a,(Rib(),Kib)),134);h=0;for(f=new Tob(a.c);f.a<f.c.c.length;){d=Wv(Rob(f),16);g=d.c;g.b=0;c=null;for(j=new Tob(d.a);j.a<j.c.c.length;){i=Wv(Rob(j),9);!!c&&(g.b+=Vjb(l,i.g,c.g)*l.d);g.b+=i.e.d+i.j.b+i.e.a;c=i;}h=Nlb(h,g.b);}for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);g=d.c;k=(h-g.b)/2;c=null;for(j=new Tob(d.a);j.a<j.c.c.length;){i=Wv(Rob(j),9);!!c&&(k+=Vjb(l,i.g,c.g)*l.d);k+=i.e.d;i.i.b=k;k+=i.j.b+i.e.a;c=i;}}pI(b);};var qbb;Nkb(MAb,'SimpleNodePlacer',544);hI(81,1,{81:1},Cbb);_.w=function Dbb(){var a;a='';this.c==(Gbb(),Fbb)?(a+=pzb):this.c==Ebb&&(a+=ozb);this.k==(Lbb(),Jbb)?(a+='DOWN'):this.k==Kbb?(a+='UP'):(a+='BALANCED');return a};Nkb(OAb,'BKAlignedLayout',81);hI(248,17,{248:1,3:1,23:1,17:1},Hbb);var Ebb,Fbb;var BE=Okb(OAb,'BKAlignedLayout/HDirection',248,IF,Ibb);hI(247,17,{247:1,3:1,23:1,17:1},Mbb);var Jbb,Kbb;var CE=Okb(OAb,'BKAlignedLayout/VDirection',247,IF,Nbb);hI(596,1,{},Qbb);Nkb(OAb,'BKAligner',596);hI(599,1,{},Vbb);Nkb(OAb,'BKCompactor',599);hI(279,1,{279:1},Wbb);_.a=0;Nkb(OAb,'BKCompactor/ClassEdge',279);hI(200,1,{200:1},Ybb);_.a=0;_.b=0;Nkb(OAb,'BKCompactor/ClassNode',200);hI(547,1,BAb,dcb);_.qc=function hcb(a){return Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))?Zbb:null};_.sc=function icb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;nI(b,'Brandes & Koepf node placement',1);this.b=a;this.d=scb(a);this.a=Ckb(Ixb(Xv(rJ(a,(Mjb(),mjb)))));this.e=gw(rJ(a,sjb))===gw((_gb(),Vgb));ccb(this,a);n=(Mh(4,Vyb),new HU(4));switch(Wv(rJ(a,sjb),124).e){case 3:o=new Cbb(a,this.d.d,(Lbb(),Jbb),(Gbb(),Ebb));n.c[n.c.length]=o;break;case 1:p=new Cbb(a,this.d.d,(Lbb(),Kbb),(Gbb(),Ebb));n.c[n.c.length]=p;break;case 4:s=new Cbb(a,this.d.d,(Lbb(),Jbb),(Gbb(),Fbb));n.c[n.c.length]=s;break;case 2:t=new Cbb(a,this.d.d,(Lbb(),Kbb),(Gbb(),Fbb));n.c[n.c.length]=t;break;default:o=new Cbb(a,this.d.d,(Lbb(),Jbb),(Gbb(),Ebb));p=new Cbb(a,this.d.d,Kbb,Ebb);s=new Cbb(a,this.d.d,Jbb,Fbb);t=new Cbb(a,this.d.d,Kbb,Fbb);n.c[n.c.length]=s;n.c[n.c.length]=t;n.c[n.c.length]=o;n.c[n.c.length]=p;}c=new Qbb(a,this.d);for(f=new Tob(n);f.a<f.c.c.length;){d=Wv(Rob(f),81);Pbb(c,d,this.c);Obb(d);}k=new Vbb(a,this.d);for(g=new Tob(n);g.a<g.c.c.length;){d=Wv(Rob(g),81);Sbb(k,d);}if(this.a){for(h=new Tob(n);h.a<h.c.c.length;){d=Wv(Rob(h),81);Fmb();d+' size is '+Abb(d);}}j=null;if(this.e){i=acb(this,n,this.d.d);_bb(this,a,i)&&(j=i);}if(!j){for(h=new Tob(n);h.a<h.c.c.length;){d=Wv(Rob(h),81);_bb(this,a,d)&&(!j||Abb(j)>Abb(d))&&(j=d);}}!j&&(j=(Cxb(0,n.c.length),Wv(n.c[0],81)));for(m=new Tob(a.c);m.a<m.c.c.length;){l=Wv(Rob(m),16);for(r=new Tob(l.a);r.a<r.c.c.length;){q=Wv(Rob(r),9);q.i.b=Ixb(j.n[q.k])+Ixb(j.d[q.k]);}}if(this.a){Fmb();'Blocks: '+ecb(j);'Classes: '+fcb(j);}for(e=new Tob(n);e.a<e.c.c.length;){d=Wv(Rob(e),81);d.f=null;d.b=null;d.a=null;d.d=null;d.i=null;d.g=null;d.n=null;}qcb(this.d);this.c.a.Q();pI(b);};_.a=false;_.e=false;var Zbb;Nkb(OAb,'BKNodePlacer',547);hI(194,17,{194:1,3:1,23:1,17:1},mcb);var jcb,kcb;var JE=Okb(OAb,'CompactionStrategy',194,IF,ncb);var ocb;hI(597,1,{},rcb);_.d=0;Nkb(OAb,'NeighborhoodInformation',597);hI(598,1,fyb,wcb);_.$b=function xcb(a,b){return vcb(this,Wv(a,27),Wv(b,27))};Nkb(OAb,'NeighborhoodInformation/NeighborComparator',598);hI(334,1,{});Nkb(OAb,'ThresholdStrategy',334);hI(602,334,{},Ccb);_.Ic=function Dcb(a,b,c){return this.a.k==(Lbb(),Kbb)?Uzb:Vzb};_.Jc=function Ecb(){};Nkb(OAb,'ThresholdStrategy/NullThresholdStrategy',602);hI(249,1,{249:1},Fcb);_.c=false;_.d=false;Nkb(OAb,'ThresholdStrategy/Postprocessable',249);hI(603,334,{},Jcb);_.Ic=function Kcb(a,b,c){var d,e,f;e=b==c;d=this.a.a[c.k]==b;if(!(e||d)){return a}f=a;if(this.a.c==(Gbb(),Fbb)){e&&(f=Gcb(this,b,true));(f==Infinity||f==-Infinity)&&d&&(f=Gcb(this,c,false));}else {e&&(f=Gcb(this,b,true));(f==Infinity||f==-Infinity)&&d&&(f=Gcb(this,c,false));}return f};_.Jc=function Lcb(){var a,b,c,d;while(this.d.b!=0){d=Wv(XI(this.d),249);c=Hcb(this,d);if(!c.a){continue}a=c.a;if(this.c.a[a.c.f.d.k]===this.c.a[a.d.f.d.k]){continue}b=Icb(this,d);b||Tvb(this.e,d);}while(this.e.a.c.length!=0){Icb(this,Wv(Svb(this.e),249));}};Nkb(OAb,'ThresholdStrategy/SimpleThresholdStrategy',603);hI(423,1,{180:1},Mcb);_.rc=function Ncb(){switch(this.a.e){case 1:return new Rdb;case 3:return new Wfb;default:return new Ycb;}};Nkb(PAb,'EdgeRouterFactory',423);hI(538,1,BAb,Ycb);_.qc=function Zcb(a){var b,c;c=Wv(rJ(a,(Rib(),jib)),18);b=new WQ;if(c.kb((ohb(),ihb))){QQ(b,Scb);QQ(b,Ucb);}if(c.kb(khb)||Ckb(Ixb(Xv(rJ(a,(Mjb(),rjb)))))){QQ(b,Ucb);c.kb(lhb)&&QQ(b,Vcb);}c.kb(hhb)&&QQ(b,Rcb);c.kb(nhb)&&QQ(b,Wcb);c.kb(jhb)&&QQ(b,Tcb);c.kb(ehb)&&QQ(b,Pcb);c.kb(ghb)&&QQ(b,Qcb);return b};_.sc=function $cb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;nI(b,'Orthogonal edge routing',1);m=Wv(rJ(a,(Rib(),Kib)),134);Ckb(Ixb(Xv(rJ(a,(eM(),rL)))));k=new cdb(0,m.a);o=0;f=new Fnb(a.c,0);g=null;h=null;do{i=f.b<f.d.Y()?(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),16)):null;j=!i?null:i.a;if(g){UW(g,o);o+=g.c.a;}n=!g?o:o+m.b;l=bdb(k,a,h,j,n);d=!g||nl(h,(Ndb(),Mdb));e=!i||nl(j,(Ndb(),Mdb));if(l>0){c=m.b+(l-1)*m.a;!!i&&(c+=m.b);c<m.f&&!d&&!e&&(c=m.f);o+=c;}else !d&&!e&&(o+=m.f);g=i;h=j;}while(i);a.e.a=o;pI(b);};var Pcb,Qcb,Rcb,Scb,Tcb,Ucb,Vcb,Wcb;Nkb(PAb,'OrthogonalEdgeRouter',538);hI(277,1,{},cdb);_.a=0;_.c=0;Nkb(PAb,'OrthogonalRoutingGenerator',277);hI(118,1,{118:1},kdb);_.w=function ldb(){return this.a+'->'+this.b};_.c=0;Nkb(PAb,'OrthogonalRoutingGenerator/Dependency',118);hI(80,1,{80:1,23:1},odb);_.F=function pdb(a){return ndb(this,Wv(a,80))};_.t=function qdb(a){var b;if(aw(a,80)){b=Wv(a,80);return this.d==b.d}return false};_.v=function rdb(){return this.d};_.w=function sdb(){var a,b,c,d;a=new Bmb('{');d=new Tob(this.g);while(d.a<d.c.c.length){c=Wv(Rob(d),7);b=lX(c.f);b==null&&(b='n'+jX(c.f));a.a+=''+b;d.a<d.c.c.length&&(a.a+=',',a);}a.a+='}';return a.a};_.a=NaN;_.c=0;_.d=0;_.f=0;_.i=0;_.k=NaN;Nkb(PAb,'OrthogonalRoutingGenerator/HyperNode',80);hI(580,1,{},tdb);_.Kc=function udb(a,b){var c,d,e,f,g,h,i,j,k,l;l=b+a.i*this.a.c;for(h=new Tob(a.g);h.a<h.c.c.length;){g=Wv(Rob(h),7);i=MI(Bv(tv(qz,1),Fzb,10,0,[g.f.i,g.i,g.a])).a;for(d=new Tob(g.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);j=c.d;k=MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).a;if((i-k<=0?0-(i-k):i-k)>dAb){e=new HI(i,l);QI(c.a,e);_cb(this.a,c,a,e,false);f=new HI(k,l);QI(c.a,f);_cb(this.a,c,a,f,false);}}}};_.Lc=function vdb(a){return a.f.i.a+a.i.a+a.a.a};_.Mc=function wdb(){return sN(),pN};_.Nc=function xdb(){return sN(),$M};Nkb(PAb,'OrthogonalRoutingGenerator/NorthToSouthRoutingStrategy',580);hI(581,1,{},ydb);_.Kc=function zdb(a,b){var c,d,e,f,g,h,i,j,k,l;l=b-a.i*this.a.c;for(h=new Tob(a.g);h.a<h.c.c.length;){g=Wv(Rob(h),7);i=MI(Bv(tv(qz,1),Fzb,10,0,[g.f.i,g.i,g.a])).a;for(d=new Tob(g.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);j=c.d;k=MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).a;if((i-k<=0?0-(i-k):i-k)>dAb){e=new HI(i,l);QI(c.a,e);_cb(this.a,c,a,e,false);f=new HI(k,l);QI(c.a,f);_cb(this.a,c,a,f,false);}}}};_.Lc=function Adb(a){return a.f.i.a+a.i.a+a.a.a};_.Mc=function Bdb(){return sN(),$M};_.Nc=function Cdb(){return sN(),pN};Nkb(PAb,'OrthogonalRoutingGenerator/SouthToNorthRoutingStrategy',581);hI(579,1,{},Ddb);_.Kc=function Edb(a,b){var c,d,e,f,g,h,i,j,k,l;l=b+a.i*this.a.c;for(h=new Tob(a.g);h.a<h.c.c.length;){g=Wv(Rob(h),7);i=MI(Bv(tv(qz,1),Fzb,10,0,[g.f.i,g.i,g.a])).b;for(d=new Tob(g.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);j=c.d;k=MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b;if((i-k<=0?0-(i-k):i-k)>dAb){e=new HI(l,i);QI(c.a,e);_cb(this.a,c,a,e,true);f=new HI(l,k);QI(c.a,f);_cb(this.a,c,a,f,true);}}}};_.Lc=function Fdb(a){return a.f.i.b+a.i.b+a.a.b};_.Mc=function Gdb(){return sN(),ZM};_.Nc=function Hdb(){return sN(),rN};Nkb(PAb,'OrthogonalRoutingGenerator/WestToEastRoutingStrategy',579);hI(535,1,BAb,Rdb);_.qc=function Sdb(a){var b,c;c=Wv(rJ(a,(Rib(),jib)),18);b=new WQ;if(c.kb((ohb(),khb))||Ckb(Ixb(Xv(rJ(a,(Mjb(),rjb)))))){QQ(b,Kdb);c.kb(lhb)&&QQ(b,Ldb);}c.kb(ehb)&&QQ(b,Idb);c.kb(ghb)&&QQ(b,Jdb);return b};_.sc=function Tdb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;nI(b,'Polyline edge routing',1);l=Wv(rJ(a,(Rib(),Jib)),15).a;c=Wv(rJ(a,(Mjb(),qjb)),15).a;q=0;if(a.c.c.length!=0){r=Pdb(Wv(yU(a.c,0),16));q=0.4*c*r;}f=new Fnb(a.c,0);while(f.b<f.d.Y()){e=(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),16));d=nl(e,Mdb);d&&q>0&&(q-=l);UW(e,q);i=0;for(k=new Tob(e.a);k.a<k.c.c.length;){j=Wv(Rob(k),9);h=0;for(n=Uh(mX(j));Cm(n);){m=Wv(Dm(n),12);o=MX(m.c).b;p=MX(m.d).b;if(e==m.d.f.d){s=m.c;t=m.d;u=(MI(Bv(tv(qz,1),Fzb,10,0,[s.f.i,s.i,s.a])).b+MI(Bv(tv(qz,1),Fzb,10,0,[t.f.i,t.i,t.a])).b)/2;s.g==(sN(),ZM)?(v=new HI(q+s.f.d.c.a+0.4*c*(o-p<=0?0-(o-p):o-p),u)):(v=new HI(q-0.4*c*(o-p<=0?0-(o-p):o-p),u));rn(m.a,0,v);if(m.c.g==rN){o=0;p=0;}}h=h>(p-o<=0?0-(p-o):p-o)?h:p-o<=0?0-(p-o):p-o;}switch(j.g.e){case 0:case 4:case 1:case 3:Qdb(this,j,q);}i=i>h?i:h;}if(f.b<f.d.Y()){r=Pdb((Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),16)));i=i>r?i:r;Bxb(f.b>0);f.a.sb(f.c=--f.b);}g=0.4*c*i;!d&&f.b<f.d.Y()&&(g+=l);q+=e.c.a+g;}this.a.a.Q();a.e.a=q;pI(b);};var Idb,Jdb,Kdb,Ldb,Mdb;Nkb(PAb,'PolylineEdgeRouter',535);hI(536,1,_zb,Vdb);_.D=function Wdb(a){return Udb(Wv(a,9))};Nkb(PAb,'PolylineEdgeRouter/1',536);hI(75,1,{75:1},deb);_.w=function eeb(){var a,b,c,d;c=new zmb;!!this.e&&ymb(ymb(c,zc(this.e)),': ');for(b=WI(Zdb(this),0);b.b!=b.d.c;){a=Wv(_ub(b),7);ymb(ymb(umb(ymb(c,(d=OX(a),d==null?'p_'+a.k:'p_'+d)),32),zc(a.g)),' / ');}return kkb(c,pmb(c.a)-2-1)};_.j=0;_.k=0;Nkb(QAb,'ConnectedSelfLoopComponent',75);hI(60,17,{60:1,3:1,23:1,17:1},Peb);_.c=0;var feb,geb,heb,ieb,jeb,keb,leb,meb,neb,oeb,peb,qeb,reb,seb,teb,ueb,veb,web,xeb,yeb,zeb,Aeb,Beb,Ceb,Deb,Eeb,Feb,Geb,Heb;var _E=Okb(QAb,'LoopSide',60,IF,Seb);hI(203,1,{},dfb,efb,ffb);_.w=function pfb(){return this.b.w()};_.c=0;_.d=false;_.e=false;_.f=false;_.i=0;_.j=0;Nkb(QAb,'NubSpline',203);hI(92,1,{92:1},sfb,tfb);Nkb(QAb,'NubSpline/PolarCP',92);hI(281,203,{},ufb);Nkb(QAb,'NubsSelfLoop',281);hI(112,1,{},Bfb,Cfb,Dfb,Efb,Ffb);_.a=jzb;_.b=rAb;_.c=jzb;_.d=rAb;Nkb(QAb,'Rectangle',112);hI(537,1,BAb,Wfb);_.qc=function Yfb(a){var b,c;b=new WQ;c=Wv(rJ(a,(Rib(),jib)),18);c.kb((ohb(),nhb))&&QQ(b,Lfb);c.kb(ehb)&&QQ(b,Hfb);if(c.kb(khb)||Ckb(Ixb(Xv(rJ(a,(Mjb(),rjb)))))){QQ(b,Jfb);c.kb(lhb)&&QQ(b,Kfb);}c.kb(ghb)&&QQ(b,Ifb);return b};_.sc=function $fb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L;nI(b,'Spline edge routing',1);u=Wv(rJ(a,(Rib(),Jib)),15).a;this.a=u*Wv(rJ(a,(Mjb(),qjb)),15).a;L=0;q=new Tob(a.c);r=null;J=(mp(),new ntb);I=new GU;i=true;j=true;do{A=q.a<q.c.c.length?Wv(Rob(q),16):null;m=new GU;g=new GU;s=new Wub;C=new Wub;G=new Wub;Tfb(new RJ(r,A),new RJ(s,C),g,J,I,G);Sfb(s,C,(fgb(),dgb),true,g,m);Sfb(s,C,dgb,false,g,m);Sfb(s,C,egb,true,g,m);Sfb(s,C,egb,false,g,m);Rfb(g,s,C,m);H=new Fnb(m,0);while(H.b<H.d.Y()){k=(Bxb(H.b<H.d.Y()),Wv(H.d.sb(H.c=H.b++),77));K=new Fnb(m,H.b);while(K.b<K.d.Y()){l=(Bxb(K.b<K.d.Y()),Wv(K.d.sb(K.c=K.b++),77));Qfb(k,l);}}Xfb(m,Wv(rJ(a,Gib),154));_fb(m);B=L+10;if(A){j=!A||nl(A.a,(Ndb(),Mdb));t=-1;for(e=new Tob(m);e.a<e.c.c.length;){c=Wv(Rob(e),77);t=Plb(t,c.n);}++t;if(t>0){n=(t+1)*this.a;n<u&&!i&&!j&&(n=u);B+=n;}else i||j||Vfb(r)||Vfb(A)||(B+=u);UW(A,B);}for(F=(w=(new Snb(G.a)).a.bb().mb(),new Ynb(w));F.a.G();){D=(h=Wv(F.a.H(),21),Wv(h.yb(),12));v=D.c.f.i;hJ(D.a,v);for(p=new Tob(D.b);p.a<p.c.c.length;){o=Wv(Rob(p),33);vI(o.i,v);}}for(f=new Tob(m);f.a<f.c.c.length;){c=Wv(Rob(f),77);c.f?Ofb(c,L):Pfb(this,c,L,B);}if(A){L=B+A.c.a+10;}else {t=-1;for(e=new Tob(m);e.a<e.c.c.length;){c=Wv(Rob(e),77);t=Plb(t,c.n);}t>=0&&(L+=(t+2)*this.a);}r=A;i=j;}while(A);for(d=new Tob(I);d.a<d.c.c.length;){c=Wv(Rob(d),12);Nfb(c,J);}a.e.a=L;pI(b);};_.a=3;var Hfb,Ifb,Jfb,Kfb,Lfb;Nkb(QAb,'SplineEdgeRouter',537);hI(117,1,{117:1},bgb);_.w=function cgb(){return this.a+' ->('+this.c+') '+this.b};_.c=0;Nkb(QAb,'SplineEdgeRouter/Dependency',117);hI(223,17,{223:1,3:1,23:1,17:1},ggb);var dgb,egb;var fF=Okb(QAb,'SplineEdgeRouter/SideToProcess',223,IF,hgb);hI(77,1,{77:1,23:1},lgb,mgb);_.F=function ngb(a){return jgb(this,Wv(a,77))};_.a=0;_.b=0;_.e=0;_.f=false;_.i=0;_.k=0;_.n=0;_.p=0;Nkb(QAb,'SplineEdgeRouter/SplineHyperEdge',77);hI(123,17,{123:1,3:1,23:1,17:1},Agb);var tgb,ugb,vgb,wgb,xgb,ygb;var iF=Okb(VAb,'ContentAlignment',123,IF,Bgb);var Cgb;hI(218,17,{218:1,3:1,23:1,17:1},Igb);var Egb,Fgb,Ggb;var jF=Okb(VAb,'EdgeConstraint',218,IF,Jgb);hI(115,17,{115:1,3:1,23:1,17:1},Rgb);var Kgb,Lgb,Mgb,Ngb,Ogb;var kF=Okb(VAb,'EdgeLabelSideSelection',115,IF,Sgb);var Tgb;hI(124,17,{124:1,3:1,23:1,17:1},ahb);var Vgb,Wgb,Xgb,Ygb,Zgb,$gb;var lF=Okb(VAb,'FixedAlignment',124,IF,bhb);var chb;hI(113,17,{113:1,3:1,23:1,17:1},phb);var ehb,fhb,ghb,hhb,ihb,jhb,khb,lhb,mhb,nhb;var mF=Okb(VAb,'GraphProperties',113,IF,qhb);hI(110,17,{110:1,3:1,23:1,17:1},Ahb);_.a=false;_.b=false;_.c=false;var rhb,shb,thb,uhb,vhb,whb,xhb,yhb;var nF=Okb(VAb,'GreedySwitchType',110,IF,Bhb);var Chb;hI(140,17,{140:1,3:1,23:1,17:1},Ihb);var Ehb,Fhb,Ghb;var oF=Okb(VAb,'InLayerConstraint',140,IF,Jhb);hI(174,17,{174:1,3:1,23:1,17:1},Nhb);var Khb,Lhb;var pF=Okb(VAb,'InteractiveReferencePoint',174,IF,Ohb);var Phb;var Rhb,Shb,Thb,Uhb,Vhb,Whb,Xhb,Yhb,Zhb,$hb,_hb,aib,bib,cib,dib,eib,fib,gib,hib,iib,jib,kib,lib,mib,nib,oib,pib,qib,rib,sib,tib,uib,vib,wib,xib,yib,zib,Aib,Bib,Cib,Dib,Eib,Fib,Gib,Hib,Iib,Jib,Kib,Lib,Mib,Nib,Oib,Pib,Qib;hI(85,17,{85:1,3:1,23:1,17:1},Yib);var Sib,Tib,Uib,Vib,Wib;var qF=Okb(VAb,'LayerConstraint',85,IF,Zib);var $ib;hI(219,17,{219:1,3:1,23:1,17:1},ejb);var ajb,bjb,cjb;var rF=Okb(VAb,'PortType',219,IF,fjb);var gjb,hjb,ijb,jjb,kjb,ljb,mjb,njb,ojb,pjb,qjb,rjb,sjb,tjb,ujb,vjb,wjb,xjb,yjb,zjb,Ajb,Bjb,Cjb,Djb,Ejb,Fjb,Gjb,Hjb,Ijb,Jjb,Kjb,Ljb;hI(153,17,{153:1,3:1,23:1,17:1},Rjb);var Njb,Ojb,Pjb;var sF=Okb(VAb,'SelfLoopPlacement',153,IF,Sjb);var Tjb;hI(134,1,{134:1},$jb);_.a=0;_.b=0;_.c=0;_.d=0;_.e=0;_.f=0;Nkb(VAb,'Spacings',134);hI(172,17,{172:1,3:1,23:1,17:1},dkb);var _jb,akb,bkb;var uF=Okb(VAb,'WideNodesStrategy',172,IF,ekb);var fkb;hI(644,1,{});Nkb(nyb,'OutputStream',644);hI(645,644,{});Nkb(nyb,'FilterOutputStream',645);hI(291,645,{},hkb);Nkb(nyb,'PrintStream',291);hI(255,1,{});_.w=function mkb(){return this.a};Nkb(kyb,'AbstractStringBuilder',255);hI(621,95,Vxb,pkb);Nkb(kyb,'ArrayIndexOutOfBoundsException',621);hI(290,72,Vxb,qkb,rkb);Nkb(kyb,'ArrayStoreException',290);hI(252,46,Uxb);Nkb(kyb,'Error',252);hI(84,252,Uxb,tkb,ukb);Nkb(kyb,'AssertionError',84);Sv={3:1,349:1,23:1};var vkb,wkb;var EF=Nkb(kyb,'Boolean',349);Tv={3:1,23:1,184:1,231:1};var HF=Nkb(kyb,'Double',184);hI(15,231,{3:1,23:1,15:1,231:1},klb,llb);_.F=function mlb(a){return jlb(this,Wv(a,15))};_.t=function nlb(a){return aw(a,15)&&Wv(a,15).a==this.a};_.v=function olb(){return hw(this.a)};_.w=function plb(){return qlb(this.a)};_.a=0;var LF=Nkb(kyb,'Float',15);hI(101,72,Vxb,tlb,ulb);Nkb(kyb,'IllegalStateException',101);var Flb;var Hlb;hI(608,72,Vxb,Ulb);Nkb(kyb,'NegativeArraySizeException',608);hI(76,72,{3:1,54:1,76:1,46:1},Vlb,Wlb);Nkb(kyb,'NullPointerException',76);hI(130,29,{3:1,54:1,29:1,130:1,46:1},Xlb,Ylb);Nkb(kyb,'NumberFormatException',130);hI(146,1,{3:1,146:1},Zlb);_.t=function $lb(a){var b;if(aw(a,146)){b=Wv(a,146);return this.c==b.c&&ovb(this.d,b.d)&&ovb(this.a,b.a)&&ovb(this.b,b.b)}return false};_.v=function _lb(){return fpb(Bv(tv(UF,1),syb,1,4,[Elb(this.c),this.a,this.d,this.b]))};_.w=function amb(){return this.a+'.'+this.d+'('+(this.b!=null?this.b:'Unknown Source')+(this.c>=0?':'+this.c:'')+')'};_.c=0;var WF=Nkb(kyb,'StackTraceElement',146);hI(98,255,{345:1},zmb,Amb,Bmb);Nkb(kyb,'StringBuilder',98);var Dmb,Emb;hI(45,72,{3:1,54:1,46:1,45:1},Hmb,Imb);Nkb(kyb,'UnsupportedOperationException',45);hI(213,638,Byb);_.Q=function _mb(){Ymb(this);};_.R=function anb(a){return Qmb(this,a)};_.ab=function bnb(a){return Rmb(this,a,this.e)||Rmb(this,a,this.d)};_.bb=function cnb(){return new inb(this)};_.cb=function dnb(a){return Smb(this,a)};_.db=function enb(a,b){return Umb(this,a,b)};_.eb=function fnb(a){return Wmb(this,a)};_.Y=function gnb(){return Zmb(this)};Nkb(Cyb,'AbstractHashMap',213);hI(120,641,Eyb,inb);_.Q=function jnb(){this.a.Q();};_.kb=function knb(a){return hnb(this,a)};_.mb=function lnb(){return new rnb(this.a)};_.nb=function mnb(a){var b;if(hnb(this,a)){b=Wv(a,21).yb();this.a.eb(b);return true}return false};_.Y=function nnb(){return this.a.Y()};Nkb(Cyb,'AbstractHashMap/EntrySet',120);hI(148,1,Ayb,rnb);_.H=function tnb(){return pnb(this)};_.G=function snb(){return this.b};_.I=function unb(){qnb(this);};_.b=false;Nkb(Cyb,'AbstractHashMap/EntrySetIterator',148);hI(162,1,Ayb,wnb);_.G=function xnb(){return this.b<this.d.Y()};_.H=function ynb(){return Bxb(this.G()),this.d.sb(this.c=this.b++)};_.I=function znb(){vnb(this);};_.b=0;_.c=-1;Nkb(Cyb,'AbstractList/IteratorImpl',162);hI(43,162,Hyb,Fnb);_.J=function Gnb(a){Anb(this,a);};_.K=function Hnb(){return this.b>0};_.L=function Inb(){return this.b};_.M=function Jnb(){return Dnb(this)};_.N=function Knb(){return this.b-1};_.O=function Lnb(a){Enb(this,a);};Nkb(Cyb,'AbstractList/ListIteratorImpl',43);hI(258,647,Fyb,Mnb);_.rb=function Nnb(a,b){Fxb(a,this.b);this.c.rb(this.a+a,b);++this.b;};_.sb=function Onb(a){Cxb(a,this.b);return this.c.sb(this.a+a)};_.vb=function Pnb(a){var b;Cxb(a,this.b);b=this.c.vb(this.a+a);--this.b;return b};_.wb=function Qnb(a,b){Cxb(a,this.b);return this.c.wb(this.a+a,b)};_.Y=function Rnb(){return this.b};_.a=0;_.b=0;Nkb(Cyb,'AbstractList/SubList',258);hI(36,641,Eyb,Snb);_.Q=function Tnb(){this.a.Q();};_.kb=function Unb(a){return this.a.R(a)};_.mb=function Vnb(){var a;return a=this.a.bb().mb(),new Ynb(a)};_.nb=function Wnb(a){if(this.a.R(a)){this.a.eb(a);return true}return false};_.Y=function Xnb(){return this.a.Y()};Nkb(Cyb,'AbstractMap/1',36);hI(40,1,Ayb,Ynb);_.G=function Znb(){return this.a.G()};_.H=function $nb(){var a;return a=Wv(this.a.H(),21),a.yb()};_.I=function _nb(){this.a.I();};Nkb(Cyb,'AbstractMap/1/1',40);hI(211,640,Dyb,aob);_.Q=function bob(){this.a.Q();};_.kb=function cob(a){return this.a.ab(a)};_.mb=function dob(){var a;return a=this.a.bb().mb(),new fob(a)};_.Y=function eob(){return this.a.Y()};Nkb(Cyb,'AbstractMap/2',211);hI(212,1,Ayb,fob);_.G=function gob(){return this.a.G()};_.H=function hob(){var a;return a=Wv(this.a.H(),21),a.zb()};_.I=function iob(){this.a.I();};Nkb(Cyb,'AbstractMap/2/1',212);hI(210,1,{210:1,21:1});_.t=function kob(a){var b;if(!aw(a,21)){return false}b=Wv(a,21);return ovb(this.d,b.yb())&&ovb(this.e,b.zb())};_.yb=function lob(){return this.d};_.zb=function mob(){return this.e};_.v=function nob(){return pvb(this.d)^pvb(this.e)};_.Ab=function oob(a){return job(this,a)};_.w=function pob(){return this.d+'='+this.e};Nkb(Cyb,'AbstractMap/AbstractEntry',210);hI(163,210,{210:1,163:1,21:1},qob);Nkb(Cyb,'AbstractMap/SimpleEntry',163);hI(652,1,Jyb);_.t=function rob(a){var b;if(!aw(a,21)){return false}b=Wv(a,21);return ovb(this.yb(),b.yb())&&ovb(this.zb(),b.zb())};_.v=function sob(){return pvb(this.yb())^pvb(this.zb())};_.w=function tob(){return this.yb()+'='+this.zb()};Nkb(Cyb,Kyb,652);hI(639,638,Byb);_._=function wob(a){return uob(this,a)};_.R=function xob(a){return vob(this,a)};_.bb=function yob(){return new Bob(this)};_.cb=function zob(a){return re(Wvb(this,a))};_.W=function Aob(){return new Gob(this)};Nkb(Cyb,'AbstractNavigableMap',639);hI(287,641,Eyb,Bob);_.kb=function Cob(a){return aw(a,21)&&uob(this.b,Wv(a,21))};_.mb=function Dob(){return new rwb(this.b)};_.nb=function Eob(a){var b;if(aw(a,21)){b=Wv(a,21);return dwb(this.b,b)}return false};_.Y=function Fob(){return this.b.c};Nkb(Cyb,'AbstractNavigableMap/EntrySet',287);hI(229,641,Iyb,Gob);_.Q=function Hob(){Vvb(this.a);};_.kb=function Iob(a){return vob(this.a,a)};_.mb=function Job(){var a;return a=new rwb((new wwb(this.a)).b),new Mob(a)};_.nb=function Kob(a){if(vob(this.a,a)){cwb(this.a,a);return true}return false};_.Y=function Lob(){return this.a.c};Nkb(Cyb,'AbstractNavigableMap/NavigableKeySet',229);hI(230,1,Ayb,Mob);_.G=function Nob(){return Bnb(this.a.a)};_.H=function Oob(){var a;return a=pwb(this.a),a.yb()};_.I=function Pob(){qwb(this.a);};Nkb(Cyb,'AbstractNavigableMap/NavigableKeySet/1',230);hI(4,1,Ayb,Tob);_.G=function Uob(){return Qob(this)};_.H=function Vob(){return Rob(this)};_.I=function Wob(){Sob(this);};_.a=0;_.b=-1;Nkb(Cyb,'ArrayList/1',4);hI(94,647,XAb,opb);_.kb=function ppb(a){return dn(this,a)!=-1};_.sb=function qpb(a){return mpb(this,a)};_.wb=function rpb(a,b){var c;c=(Cxb(a,this.a.length),this.a[a]);Av(this.a,a,b);return c};_.Y=function spb(){return this.a.length};_.ob=function tpb(){return npb(this,xv(UF,syb,1,this.a.length,4,1))};_.pb=function upb(a){return npb(this,a)};Nkb(Cyb,'Arrays/ArrayList',94);var vpb,wpb,xpb;hI(413,1,fyb,Ipb);_.$b=function Jpb(a,b){return zT(b,a)};Nkb(Cyb,'Collections/2',413);hI(406,647,XAb,Kpb);_.kb=function Lpb(a){return false};_.sb=function Mpb(a){Cxb(a,0);return null};_.mb=function Npb(){return ypb(),Rpb(),Qpb};_.tb=function Opb(){return ypb(),Rpb(),Qpb};_.Y=function Ppb(){return 0};Nkb(Cyb,'Collections/EmptyList',406);hI(407,1,Hyb,Spb);_.J=function Tpb(a){throw new Hmb};_.G=function Upb(){return false};_.K=function Vpb(){return false};_.H=function Wpb(){throw new nvb};_.L=function Xpb(){return 0};_.M=function Ypb(){throw new nvb};_.N=function Zpb(){return -1};_.I=function $pb(){throw new tlb};_.O=function _pb(a){throw new tlb};var Qpb;Nkb(Cyb,'Collections/EmptyListIterator',407);hI(409,638,Ryb,aqb);_.R=function bqb(a){return false};_.ab=function cqb(a){return false};_.bb=function dqb(){return ypb(),xpb};_.cb=function eqb(a){return null};_.W=function fqb(){return ypb(),xpb};_.Y=function gqb(){return 0};_.fb=function hqb(){return ypb(),vpb};Nkb(Cyb,'Collections/EmptyMap',409);hI(408,641,Syb,iqb);_.kb=function jqb(a){return false};_.mb=function kqb(){return ypb(),Rpb(),Qpb};_.Y=function lqb(){return 0};Nkb(Cyb,'Collections/EmptySet',408);hI(410,1,fyb,pqb);_.$b=function qqb(a,b){return oqb(Wv(a,23),Wv(b,23))};var mqb;Nkb(Cyb,'Collections/ReverseComparator',410);hI(411,647,{3:1,22:1,19:1,20:1},rqb);_.kb=function sqb(a){return ovb(this.a,a)};_.sb=function tqb(a){Cxb(a,1);return this.a};_.Y=function uqb(){return 1};Nkb(Cyb,'Collections/SingletonList',411);hI(217,1,Dyb,zqb);_.ib=function Aqb(a){return vqb()};_.jb=function Bqb(a){return wqb()};_.Q=function Cqb(){xqb();};_.kb=function Dqb(a){return this.b.kb(a)};_.lb=function Eqb(a){return this.b.lb(a)};_.V=function Fqb(){return this.b.V()};_.mb=function Gqb(){return new Nqb(this.b.mb())};_.nb=function Hqb(a){return yqb()};_.Y=function Iqb(){return this.b.Y()};_.ob=function Jqb(){return this.b.ob()};_.pb=function Kqb(a){return this.b.pb(a)};_.w=function Lqb(){return xb(this.b)};Nkb(Cyb,'Collections/UnmodifiableCollection',217);hI(152,1,Ayb,Nqb);_.G=function Oqb(){return this.b.G()};_.H=function Pqb(){return this.b.H()};_.I=function Qqb(){Mqb();};Nkb(Cyb,'Collections/UnmodifiableCollectionIterator',152);hI(233,217,Fyb,Rqb);_.rb=function Sqb(a,b){throw new Hmb};_.t=function Tqb(a){return this.a.t(a)};_.sb=function Uqb(a){return this.a.sb(a)};_.v=function Vqb(){return this.a.v()};_.V=function Wqb(){return this.a.V()};_.tb=function Xqb(){return new arb(this.a.ub(0))};_.ub=function Yqb(a){return new arb(this.a.ub(a))};_.vb=function Zqb(a){throw new Hmb};_.wb=function $qb(a,b){throw new Hmb};_.xb=function _qb(a,b){return new Rqb(this.a.xb(a,b))};Nkb(Cyb,'Collections/UnmodifiableList',233);hI(309,152,Hyb,arb);_.J=function brb(a){throw new Hmb};_.K=function crb(){return this.a.K()};_.L=function drb(){return this.a.L()};_.M=function erb(){return this.a.M()};_.N=function frb(){return this.a.N()};_.O=function grb(a){throw new Hmb};Nkb(Cyb,'Collections/UnmodifiableListIterator',309);hI(305,1,Byb,mrb);_.Q=function nrb(){throw new Hmb};_.R=function orb(a){return this.c.R(a)};_.ab=function prb(a){return hrb(this,a)};_.bb=function qrb(){return irb(this)};_.t=function rrb(a){return jrb(this,a)};_.cb=function srb(a){return this.c.cb(a)};_.v=function trb(){return this.c.v()};_.V=function urb(){return this.c.V()};_.W=function vrb(){return krb(this)};_.db=function wrb(a,b){throw new Hmb};_.eb=function xrb(a){throw new Hmb};_.Y=function yrb(){return this.c.Y()};_.w=function zrb(){return xb(this.c)};_.fb=function Arb(){return lrb(this)};Nkb(Cyb,'Collections/UnmodifiableMap',305);hI(151,217,Eyb,Frb);_.t=function Grb(a){return Drb(this,a)};_.v=function Hrb(){return this.b.v()};Nkb(Cyb,'Collections/UnmodifiableSet',151);hI(412,151,Eyb,Nrb);_.kb=function Orb(a){return Irb(this,a)};_.lb=function Prb(a){return Jrb(this,a)};_.mb=function Qrb(){var a;return a=this.b.mb(),new Trb(a)};_.ob=function Rrb(){return Krb(this)};_.pb=function Srb(a){return Lrb(this,a)};Nkb(Cyb,'Collections/UnmodifiableMap/UnmodifiableEntrySet',412);hI(263,1,Ayb,Trb);_.H=function Vrb(){return new Xrb(Wv(this.a.H(),21))};_.G=function Urb(){return this.a.G()};_.I=function Wrb(){throw new Hmb};Nkb(Cyb,'Collections/UnmodifiableMap/UnmodifiableEntrySet/1',263);hI(306,1,Jyb,Xrb);_.t=function Yrb(a){return this.a.t(a)};_.yb=function Zrb(){return this.a.yb()};_.zb=function $rb(){return this.a.zb()};_.v=function _rb(){return this.a.v()};_.Ab=function asb(a){throw new Hmb};_.w=function bsb(){return xb(this.a)};Nkb(Cyb,'Collections/UnmodifiableMap/UnmodifiableEntrySet/UnmodifiableEntry',306);hI(307,233,Gyb,csb);Nkb(Cyb,'Collections/UnmodifiableRandomAccessList',307);hI(308,151,Iyb,dsb);_.t=function esb(a){return this.a.t(a)};_.v=function fsb(){return this.a.v()};Nkb(Cyb,'Collections/UnmodifiableSortedSet',308);var gsb;hI(522,1,fyb,isb);_.$b=function jsb(a,b){Dxb(a);Dxb(b);return Akb(Wv(a,23),b)};Nkb(Cyb,'Comparators/1',522);hI(202,72,Vxb,nsb);Nkb(Cyb,'ConcurrentModificationException',202);hI(609,72,Vxb,osb);Nkb(Cyb,'EmptyStackException',609);hI(319,638,Byb,vsb);_.db=function Bsb(a,b){return ssb(this,a,b)};_.Q=function wsb(){psb(this);};_.R=function xsb(a){return Ysb(this.a,a)};_.ab=function ysb(a){var b,c;for(c=new jtb(this.a);c.a<c.c.a.length;){b=itb(c);if(ovb(a,this.b[b.e])){return true}}return false};_.bb=function zsb(){return new Fsb(this)};_.cb=function Asb(a){return qsb(this,a)};_.eb=function Csb(a){return tsb(this,a)};_.Y=function Dsb(){return this.a.c};Nkb(Cyb,'EnumMap',319);hI(236,641,Eyb,Fsb);_.Q=function Gsb(){psb(this.a);};_.kb=function Hsb(a){return Esb(this,a)};_.mb=function Isb(){return new Lsb(this.a)};_.nb=function Jsb(a){var b;if(Esb(this,a)){b=Wv(a,21).yb();tsb(this.a,b);return true}return false};_.Y=function Ksb(){return this.a.a.c};Nkb(Cyb,'EnumMap/EntrySet',236);hI(237,1,Ayb,Lsb);_.H=function Nsb(){return this.b=itb(this.a),new Psb(this.c,this.b)};_.G=function Msb(){return htb(this.a)};_.I=function Osb(){uxb(!!this.b);tsb(this.c,this.b);this.b=null;};Nkb(Cyb,'EnumMap/EntrySetIterator',237);hI(238,652,Jyb,Psb);_.yb=function Qsb(){return this.a};_.zb=function Rsb(){return this.b.b[this.a.e]};_.Ab=function Ssb(a){return usb(this.b,this.a.e,a)};Nkb(Cyb,'EnumMap/MapEntry',238);hI(86,641,{22:1,19:1,86:1,18:1});Nkb(Cyb,'EnumSet',86);hI(66,86,{22:1,19:1,86:1,66:1,18:1},atb);_.ib=function btb(a){return Wsb(this,Wv(a,17))};_.kb=function ctb(a){return Ysb(this,a)};_.mb=function dtb(){return new jtb(this)};_.nb=function etb(a){return $sb(this,a)};_.Y=function ftb(){return this.c};_.c=0;Nkb(Cyb,'EnumSet/EnumSetImpl',66);hI(167,1,Ayb,jtb);_.H=function ltb(){return itb(this)};_.G=function ktb(){return htb(this)};_.I=function mtb(){uxb(this.b!=-1);Av(this.c.b,this.b,null);--this.c.c;this.b=-1;};_.a=-1;_.b=-1;Nkb(Cyb,'EnumSet/EnumSetImpl/IteratorImpl',167);hI(30,213,YAb,ntb,otb,ptb);_.Uc=function qtb(a,b){return gw(a)===gw(b)||a!=null&&rb(a,b)};_.Vc=function rtb(a){var b;b=vb(a);return b|0};Nkb(Cyb,'HashMap',30);hI(50,641,ZAb,vtb,wtb,xtb);_.ib=function ztb(a){return stb(this,a)};_.Q=function Atb(){this.a.Q();};_.Wc=function Btb(){return new xtb(this)};_.kb=function Ctb(a){return ttb(this,a)};_.V=function Dtb(){return this.a.Y()==0};_.mb=function Etb(){var a;return a=(new Snb(this.a)).a.bb().mb(),new Ynb(a)};_.nb=function Ftb(a){return utb(this,a)};_.Y=function Gtb(){return this.a.Y()};_.w=function Htb(){return Ze(new Snb(this.a))};Nkb(Cyb,'HashSet',50);hI(418,1,Oyb,Ntb);_.mb=function Otb(){return new Ptb(this)};_.c=0;Nkb(Cyb,'InternalHashCodeMap',418);hI(312,1,Ayb,Ptb);_.H=function Rtb(){return this.d=this.a[this.c++],this.d};_.G=function Qtb(){var a;if(this.c<this.a.length){return true}a=this.b.next();if(!a.done){this.a=a.value[1];this.c=0;return true}return false};_.I=function Stb(){Mtb(this.e,this.d.yb());this.c!=0&&--this.c;};_.c=0;_.d=null;Nkb(Cyb,'InternalHashCodeMap/1',312);var Xtb;hI(382,1,Oyb,fub);_.mb=function gub(){return new hub(this)};_.c=0;_.d=0;Nkb(Cyb,'InternalStringMap',382);hI(293,1,Ayb,hub);_.H=function jub(){return this.c=this.a,this.a=this.b.next(),new lub(this.d,this.c,this.d.d)};_.G=function iub(){return !this.a.done};_.I=function kub(){eub(this.d,this.c.value[0]);};Nkb(Cyb,'InternalStringMap/1',293);hI(383,652,Jyb,lub);_.yb=function mub(){return this.b.value[0]};_.zb=function nub(){if(this.a.d!=this.c){return cub(this.a,this.b.value[0])}return this.b.value[1]};_.Ab=function oub(a){return dub(this.a,this.b.value[0],a)};_.c=0;Nkb(Cyb,'InternalStringMap/2',383);hI(155,30,YAb,wub,xub);_.Q=function yub(){qub(this);};_.R=function zub(a){return Qmb(this.c,a)};_.ab=function Aub(a){var b;b=this.b.a;while(b!=this.b){if(ovb(b.e,a)){return true}b=b.a;}return false};_.bb=function Bub(){return new Lub(this)};_.cb=function Cub(a){return rub(this,a)};_.db=function Dub(a,b){return tub(this,a,b)};_.eb=function Eub(a){return vub(this,a)};_.Y=function Fub(){return Zmb(this.c)};_.a=false;Nkb(Cyb,'LinkedHashMap',155);hI(176,163,{210:1,163:1,176:1,21:1},Iub,Jub);Nkb(Cyb,'LinkedHashMap/ChainEntry',176);hI(270,641,Eyb,Lub);_.Q=function Mub(){qub(this.a);};_.kb=function Nub(a){return Kub(this,a)};_.mb=function Oub(){return new Sub(this)};_.nb=function Pub(a){var b;if(Kub(this,a)){b=Wv(a,21).yb();vub(this.a,b);return true}return false};_.Y=function Qub(){return Zmb(this.a.c)};Nkb(Cyb,'LinkedHashMap/EntrySet',270);hI(271,1,Ayb,Sub);_.H=function Uub(){return Rub(this)};_.G=function Tub(){return this.b!=this.c.a.b};_.I=function Vub(){uxb(!!this.a);ksb(this.c.a.c,this);Hub(this.a);Wmb(this.c.a.c,this.a.d);lsb(this.c.a.c,this);this.a=null;};Nkb(Cyb,'LinkedHashMap/EntrySet/EntryIterator',271);hI(70,50,ZAb,Wub,Xub,Yub);_.Wc=function Zub(){return new Yub(this)};Nkb(Cyb,'LinkedHashSet',70);hI(372,1,Hyb,cvb);_.J=function dvb(a){$ub(this,a);};_.G=function evb(){return this.b!=this.d.c};_.K=function fvb(){return this.b.b!=this.d.a};_.H=function gvb(){return _ub(this)};_.L=function hvb(){return this.a};_.M=function ivb(){return avb(this)};_.N=function jvb(){return this.a-1};_.I=function kvb(){bvb(this);};_.O=function lvb(a){uxb(!!this.c);this.c.c=a;};_.a=0;_.c=null;Nkb(Cyb,'LinkedList/ListIteratorImpl',372);hI(259,1,{},mvb);Nkb(Cyb,'LinkedList/Node',259);hI(74,72,{3:1,54:1,46:1,74:1},nvb);Nkb(Cyb,'NoSuchElementException',74);hI(154,1,{154:1},yvb,zvb);_.a=0;_.b=0;var qvb,rvb,svb=0;Nkb(Cyb,'Random',154);hI(607,647,cBb);_.rb=function Avb(a,b){Dvb(a,this.a.c.length+1);uU(this.a,a,b);};_.ib=function Bvb(a){return vU(this.a,a)};_.jb=function Cvb(a){return xU(this.a,a)};_.Q=function Evb(){this.a.c=xv(UF,syb,1,0,4,1);};_.kb=function Fvb(a){return zU(this.a,a,0)!=-1};_.lb=function Gvb(a){return Xe(this.a,a)};_.sb=function Hvb(a){Dvb(a,this.a.c.length);return yU(this.a,a)};_.V=function Ivb(){return this.a.c.length==0};_.mb=function Jvb(){return new Tob(this.a)};_.vb=function Kvb(a){return Dvb(a,this.a.c.length),AU(this.a,a)};_.Xb=function Lvb(a,b){CU(this.a,a,b);};_.wb=function Mvb(a,b){Dvb(a,this.a.c.length);return DU(this.a,a,b)};_.Y=function Nvb(){return this.a.c.length};_.xb=function Ovb(a,b){return new Mnb(this.a,a,b)};_.ob=function Pvb(){return EU(this.a)};_.pb=function Qvb(a){return FU(this.a,a)};_.w=function Rvb(){return Ze(this.a)};Nkb(Cyb,'Vector',607);hI(337,607,cBb,Uvb);Nkb(Cyb,'Stack',337);hI(253,639,Ryb,iwb,jwb);_.Q=function kwb(){Vvb(this);};_.bb=function lwb(){return new wwb(this)};_.db=function mwb(a,b){return bwb(this,a,b)};_.eb=function nwb(a){return cwb(this,a)};_.Y=function owb(){return this.c};_.c=0;Nkb(Cyb,'TreeMap',253);hI(182,1,Ayb,rwb);_.H=function uwb(){return pwb(this)};_.G=function twb(){return Bnb(this.a)};_.I=function vwb(){qwb(this);};Nkb(Cyb,'TreeMap/EntryIterator',182);hI(209,287,Eyb,wwb);_.Q=function xwb(){Vvb(this.a);};Nkb(Cyb,'TreeMap/EntrySet',209);hI(183,163,{210:1,163:1,21:1,183:1},ywb);_.b=false;var yH=Nkb(Cyb,'TreeMap/Node',183);hI(254,1,{},zwb);_.w=function Awb(){return 'State: mv='+this.c+' value='+this.d+' done='+this.a+' found='+this.b};_.a=false;_.b=false;_.c=false;Nkb(Cyb,'TreeMap/State',254);hI(138,17,dBb,Gwb);_.Xc=function Hwb(){return false};_.Yc=function Iwb(){return false};var Bwb,Cwb,Dwb,Ewb;var DH=Okb(Cyb,'TreeMap/SubMapType',138,IF,Jwb);hI(352,138,dBb,Kwb);_.Yc=function Lwb(){return true};Okb(Cyb,'TreeMap/SubMapType/1',352,DH,null);hI(353,138,dBb,Mwb);_.Xc=function Nwb(){return true};_.Yc=function Owb(){return true};Okb(Cyb,'TreeMap/SubMapType/2',353,DH,null);hI(354,138,dBb,Pwb);_.Xc=function Qwb(){return true};Okb(Cyb,'TreeMap/SubMapType/3',354,DH,null);hI(191,641,{3:1,22:1,19:1,18:1,137:1,191:1},Vwb,Wwb);_.ib=function Xwb(a){return Rwb(this,a)};_.Q=function Ywb(){Vvb(this.a);};_.kb=function Zwb(a){return vob(this.a,a)};_.mb=function $wb(){var a;return a=new rwb((new wwb((new Gob(this.a)).a)).b),new Mob(a)};_.nb=function _wb(a){return Uwb(this,a)};_.Y=function axb(){return this.a.c};Nkb(Cyb,'TreeSet',191);var sxb=0;var Kxb,Lxb=0,Mxb;var mw=Qkb('int','I');var KH=Qkb('boolean','Z');var jw=Qkb('char','C');var kw=Qkb('double','D');var lw=Qkb('float','F');var Rxb=zt;var gwtOnLoad=gwtOnLoad=dI;bI(lI);eI('permProps',[[['locale','default'],['user.agent','gecko1_8']]]);
    gwtOnLoad(null,'klay',null);
    })();
    }(klay$1));

    (function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory(klay$1.exports);
    })(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_4__) {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId]) {
    /******/ 			return installedModules[moduleId].exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			i: moduleId,
    /******/ 			l: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.l = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// identity function for calling harmony imports with the correct context
    /******/ 	__webpack_require__.i = function(value) { return value; };
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
    /******/ 		if(!__webpack_require__.o(exports, name)) {
    /******/ 			Object.defineProperty(exports, name, {
    /******/ 				configurable: false,
    /******/ 				enumerable: true,
    /******/ 				get: getter
    /******/ 			});
    /******/ 		}
    /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
    /******/ 		var getter = module && module.__esModule ?
    /******/ 			function getDefault() { return module['default']; } :
    /******/ 			function getModuleExports() { return module; };
    /******/ 		__webpack_require__.d(getter, 'a', getter);
    /******/ 		return getter;
    /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 3);
    /******/ })
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ (function(module, exports, __webpack_require__) {


    var klay = __webpack_require__(4);
    var assign = __webpack_require__(1);
    var defaults = __webpack_require__(2);

    var klayNSLookup = {
      'addUnnecessaryBendpoints': 'de.cau.cs.kieler.klay.layered.unnecessaryBendpoints',
      'alignment': 'de.cau.cs.kieler.alignment',
      'aspectRatio': 'de.cau.cs.kieler.aspectRatio',
      'borderSpacing': 'borderSpacing',
      'compactComponents': 'de.cau.cs.kieler.klay.layered.components.compact',
      'compactionStrategy': 'de.cau.cs.kieler.klay.layered.nodeplace.compactionStrategy',
      'contentAlignment': 'de.cau.cs.kieler.klay.layered.contentAlignment',
      'crossingMinimization': 'de.cau.cs.kieler.klay.layered.crossMin',
      'cycleBreaking': 'de.cau.cs.kieler.klay.layered.cycleBreaking',
      'debugMode': 'de.cau.cs.kieler.debugMode',
      'direction': 'de.cau.cs.kieler.direction',
      'edgeLabelSideSelection': 'de.cau.cs.kieler.klay.layered.edgeLabelSideSelection',
      // <broken> 'de.cau.cs.kieler.klay.layered.edgeNodeSpacingFactor': options.edgeNodeSpacingFactor,
      'edgeRouting': 'de.cau.cs.kieler.edgeRouting',
      'edgeSpacingFactor': 'de.cau.cs.kieler.klay.layered.edgeSpacingFactor',
      'feedbackEdges': 'de.cau.cs.kieler.klay.layered.feedBackEdges',
      'fixedAlignment': 'de.cau.cs.kieler.klay.layered.fixedAlignment',
      'greedySwitchCrossingMinimization': 'de.cau.cs.kieler.klay.layered.greedySwitch',
      'hierarchyHandling': 'de.cau.cs.kieler.hierarchyHandling',
      'inLayerSpacingFactor': 'de.cau.cs.kieler.klay.layered.inLayerSpacingFactor',
      'interactiveReferencePoint': 'de.cau.cs.kieler.klay.layered.interactiveReferencePoint',
      'layerConstraint': 'de.cau.cs.kieler.klay.layered.layerConstraint',
      'layoutHierarchy': 'de.cau.cs.kieler.layoutHierarchy',
      'linearSegmentsDeflectionDampening': 'de.cau.cs.kieler.klay.layered.linearSegmentsDeflectionDampening',
      'mergeEdges': 'de.cau.cs.kieler.klay.layered.mergeEdges',
      'mergeHierarchyCrossingEdges': 'de.cau.cs.kieler.klay.layered.mergeHierarchyEdges',
      'noLayout': 'de.cau.cs.kieler.noLayout',
      'nodeLabelPlacement': 'de.cau.cs.kieler.nodeLabelPlacement',
      'nodeLayering': 'de.cau.cs.kieler.klay.layered.nodeLayering',
      'nodePlacement': 'de.cau.cs.kieler.klay.layered.nodePlace',
      'portAlignment': 'de.cau.cs.kieler.portAlignment',
      'portAlignmentEastern': 'de.cau.cs.kieler.portAlignment.east',
      'portAlignmentNorth': 'de.cau.cs.kieler.portAlignment.north',
      'portAlignmentSouth': 'de.cau.cs.kieler.portAlignment.south',
      'portAlignmentWest': 'de.cau.cs.kieler.portAlignment.west',
      'portConstraints': 'de.cau.cs.kieler.portConstraints',
      'portLabelPlacement': 'de.cau.cs.kieler.portLabelPlacement',
      'portOffset': 'de.cau.cs.kieler.offset',
      'portSide': 'de.cau.cs.kieler.portSide',
      'portSpacing': 'de.cau.cs.kieler.portSpacing',
      'postCompaction': 'de.cau.cs.kieler.klay.layered.postCompaction',
      'priority': 'de.cau.cs.kieler.priority',
      'randomizationSeed': 'de.cau.cs.kieler.randomSeed',
      'routeSelfLoopInside': 'de.cau.cs.kieler.selfLoopInside',
      'separateConnectedComponents': 'de.cau.cs.kieler.separateConnComp',
      'sizeConstraint': 'de.cau.cs.kieler.sizeConstraint',
      'sizeOptions': 'de.cau.cs.kieler.sizeOptions',
      'spacing': 'de.cau.cs.kieler.spacing',
      'splineSelfLoopPlacement': 'de.cau.cs.kieler.klay.layered.splines.selfLoopPlacement',
      'thoroughness': 'de.cau.cs.kieler.klay.layered.thoroughness',
      'wideNodesOnMultipleLayers': 'de.cau.cs.kieler.klay.layered.wideNodesOnMultipleLayers'
    };

    var mapToKlayNS = function mapToKlayNS(klayOpts) {
      var keys = Object.keys(klayOpts);
      var ret = {};

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var nsKey = klayNSLookup[key];
        var val = klayOpts[key];

        ret[nsKey] = val;
      }

      return ret;
    };

    var klayOverrides = {
      interactiveReferencePoint: 'CENTER' // Determines which point of a node is considered by interactive layout phases.
    };

    var getPos = function getPos(ele) {
      var parent = ele.parent();
      var k = ele.scratch('klay');
      var p = {
        x: k.x,
        y: k.y
      };

      while (parent.nonempty()) {
        var kp = parent.scratch('klay');
        p.x += kp.x;
        p.y += kp.y;
        parent = parent.parent();
      }

      return p;
    };

    var makeNode = function makeNode(node, options) {
      var dims = node.layoutDimensions(options);
      var padding = node.numericStyle('padding');

      var k = {
        _cyEle: node,
        id: node.id(),
        padding: {
          top: padding,
          left: padding,
          bottom: padding,
          right: padding
        }
      };

      if (!node.isParent()) {
        k.width = dims.w;
        k.height = dims.h;
      }

      node.scratch('klay', k);

      return k;
    };

    var makeEdge = function makeEdge(edge, options) {
      var k = {
        _cyEle: edge,
        id: edge.id(),
        source: edge.data('source'),
        target: edge.data('target'),
        properties: {}
      };

      var priority = options.priority(edge);

      if (priority != null) {
        k.properties.priority = priority;
      }

      edge.scratch('klay', k);

      return k;
    };

    var makeGraph = function makeGraph(nodes, edges, options) {
      var klayNodes = [];
      var klayEdges = [];
      var klayEleLookup = {};
      var graph = {
        id: 'root',
        children: [],
        edges: []
      };

      // map all nodes
      for (var i = 0; i < nodes.length; i++) {
        var n = nodes[i];
        var k = makeNode(n, options);

        klayNodes.push(k);

        klayEleLookup[n.id()] = k;
      }

      // map all edges
      for (var _i = 0; _i < edges.length; _i++) {
        var e = edges[_i];
        var _k = makeEdge(e, options);

        klayEdges.push(_k);

        klayEleLookup[e.id()] = _k;
      }

      // make hierarchy
      for (var _i2 = 0; _i2 < klayNodes.length; _i2++) {
        var _k2 = klayNodes[_i2];
        var _n = _k2._cyEle;

        if (!_n.isChild()) {
          graph.children.push(_k2);
        } else {
          var parent = _n.parent();
          var parentK = klayEleLookup[parent.id()];

          var children = parentK.children = parentK.children || [];

          children.push(_k2);
        }
      }

      for (var _i3 = 0; _i3 < klayEdges.length; _i3++) {
        var _k3 = klayEdges[_i3];
        var _e = _k3._cyEle;
        _e.source().parent();
        _e.target().parent();

        // put all edges in the top level for now
        // TODO does this cause issues in certain edgecases?
        {
          graph.edges.push(_k3);
        }
      }

      return graph;
    };

    function Layout(options) {
      var klayOptions = options.klay;

      this.options = assign({}, defaults, options);

      this.options.klay = assign({}, defaults.klay, klayOptions, klayOverrides);
    }

    Layout.prototype.run = function () {
      var layout = this;
      var options = this.options;

      var eles = options.eles;
      var nodes = eles.nodes();
      var edges = eles.edges();

      var graph = makeGraph(nodes, edges, options);

      klay.layout({
        graph: graph,
        options: mapToKlayNS(options.klay),
        success: function success() {},
        error: function error(_error) {
          throw _error;
        }
      });

      nodes.filter(function (n) {
        return !n.isParent();
      }).layoutPositions(layout, options, getPos);

      return this;
    };

    Layout.prototype.stop = function () {
      return this; // chaining
    };

    Layout.prototype.destroy = function () {
      return this; // chaining
    };

    module.exports = Layout;

    /***/ }),
    /* 1 */
    /***/ (function(module, exports, __webpack_require__) {


    // Simple, internal Object.assign() polyfill for options objects etc.

    module.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
      for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        srcs[_key - 1] = arguments[_key];
      }

      srcs.filter(function (src) {
        return src != null;
      }).forEach(function (src) {
        Object.keys(src).forEach(function (k) {
          return tgt[k] = src[k];
        });
      });

      return tgt;
    };

    /***/ }),
    /* 2 */
    /***/ (function(module, exports, __webpack_require__) {


    var defaults = {
      nodeDimensionsIncludeLabels: false, // Boolean which changes whether label dimensions are included when calculating node dimensions
      fit: true, // Whether to fit
      padding: 20, // Padding on fit
      animate: false, // Whether to transition the node positions
      animateFilter: function animateFilter(node, i) {
        return true;
      }, // Whether to animate specific nodes when animation is on; non-animated nodes immediately go to their final positions
      animationDuration: 500, // Duration of animation in ms if enabled
      animationEasing: undefined, // Easing of animation if enabled
      transform: function transform(node, pos) {
        return pos;
      }, // A function that applies a transform to the final node position
      ready: undefined, // Callback on layoutready
      stop: undefined, // Callback on layoutstop
      klay: {
        // Following descriptions taken from http://layout.rtsys.informatik.uni-kiel.de:9444/Providedlayout.html?algorithm=de.cau.cs.kieler.klay.layered
        addUnnecessaryBendpoints: false, // Adds bend points even if an edge does not change direction.
        aspectRatio: 1.6, // The aimed aspect ratio of the drawing, that is the quotient of width by height
        borderSpacing: 20, // Minimal amount of space to be left to the border
        compactComponents: false, // Tries to further compact components (disconnected sub-graphs).
        crossingMinimization: 'LAYER_SWEEP', // Strategy for crossing minimization.
        /* LAYER_SWEEP The layer sweep algorithm iterates multiple times over the layers, trying to find node orderings that minimize the number of crossings. The algorithm uses randomization to increase the odds of finding a good result. To improve its results, consider increasing the Thoroughness option, which influences the number of iterations done. The Randomization seed also influences results.
        INTERACTIVE Orders the nodes of each layer by comparing their positions before the layout algorithm was started. The idea is that the relative order of nodes as it was before layout was applied is not changed. This of course requires valid positions for all nodes to have been set on the input graph before calling the layout algorithm. The interactive layer sweep algorithm uses the Interactive Reference Point option to determine which reference point of nodes are used to compare positions. */
        cycleBreaking: 'GREEDY', // Strategy for cycle breaking. Cycle breaking looks for cycles in the graph and determines which edges to reverse to break the cycles. Reversed edges will end up pointing to the opposite direction of regular edges (that is, reversed edges will point left if edges usually point right).
        /* GREEDY This algorithm reverses edges greedily. The algorithm tries to avoid edges that have the Priority property set.
        INTERACTIVE The interactive algorithm tries to reverse edges that already pointed leftwards in the input graph. This requires node and port coordinates to have been set to sensible values.*/
        direction: 'UNDEFINED', // Overall direction of edges: horizontal (right / left) or vertical (down / up)
        /* UNDEFINED, RIGHT, LEFT, DOWN, UP */
        edgeRouting: 'ORTHOGONAL', // Defines how edges are routed (POLYLINE, ORTHOGONAL, SPLINES)
        edgeSpacingFactor: 0.5, // Factor by which the object spacing is multiplied to arrive at the minimal spacing between edges.
        feedbackEdges: false, // Whether feedback edges should be highlighted by routing around the nodes.
        fixedAlignment: 'NONE', // Tells the BK node placer to use a certain alignment instead of taking the optimal result.  This option should usually be left alone.
        /* NONE Chooses the smallest layout from the four possible candidates.
        LEFTUP Chooses the left-up candidate from the four possible candidates.
        RIGHTUP Chooses the right-up candidate from the four possible candidates.
        LEFTDOWN Chooses the left-down candidate from the four possible candidates.
        RIGHTDOWN Chooses the right-down candidate from the four possible candidates.
        BALANCED Creates a balanced layout from the four possible candidates. */
        inLayerSpacingFactor: 1.0, // Factor by which the usual spacing is multiplied to determine the in-layer spacing between objects.
        layoutHierarchy: false, // Whether the selected layouter should consider the full hierarchy
        linearSegmentsDeflectionDampening: 0.3, // Dampens the movement of nodes to keep the diagram from getting too large.
        mergeEdges: false, // Edges that have no ports are merged so they touch the connected nodes at the same points.
        mergeHierarchyCrossingEdges: true, // If hierarchical layout is active, hierarchy-crossing edges use as few hierarchical ports as possible.
        nodeLayering: 'NETWORK_SIMPLEX', // Strategy for node layering.
        /* NETWORK_SIMPLEX This algorithm tries to minimize the length of edges. This is the most computationally intensive algorithm. The number of iterations after which it aborts if it hasn't found a result yet can be set with the Maximal Iterations option.
        LONGEST_PATH A very simple algorithm that distributes nodes along their longest path to a sink node.
        INTERACTIVE Distributes the nodes into layers by comparing their positions before the layout algorithm was started. The idea is that the relative horizontal order of nodes as it was before layout was applied is not changed. This of course requires valid positions for all nodes to have been set on the input graph before calling the layout algorithm. The interactive node layering algorithm uses the Interactive Reference Point option to determine which reference point of nodes are used to compare positions. */
        nodePlacement: 'BRANDES_KOEPF', // Strategy for Node Placement
        /* BRANDES_KOEPF Minimizes the number of edge bends at the expense of diagram size: diagrams drawn with this algorithm are usually higher than diagrams drawn with other algorithms.
        LINEAR_SEGMENTS Computes a balanced placement.
        INTERACTIVE Tries to keep the preset y coordinates of nodes from the original layout. For dummy nodes, a guess is made to infer their coordinates. Requires the other interactive phase implementations to have run as well.
        SIMPLE Minimizes the area at the expense of... well, pretty much everything else. */
        randomizationSeed: 1, // Seed used for pseudo-random number generators to control the layout algorithm; 0 means a new seed is generated
        routeSelfLoopInside: false, // Whether a self-loop is routed around or inside its node.
        separateConnectedComponents: true, // Whether each connected component should be processed separately
        spacing: 20, // Overall setting for the minimal amount of space to be left between objects
        thoroughness: 7 // How much effort should be spent to produce a nice layout..
      },
      priority: function priority(edge) {
        return null;
      } // Edges with a non-nil value are skipped when geedy edge cycle breaking is enabled
    };

    module.exports = defaults;

    /***/ }),
    /* 3 */
    /***/ (function(module, exports, __webpack_require__) {


    var impl = __webpack_require__(0);

    // registers the extension on a cytoscape lib ref
    var register = function register(cytoscape) {
      if (!cytoscape) {
        return;
      } // can't register if cytoscape unspecified

      cytoscape('layout', 'klay', impl); // register with cytoscape.js
    };

    if (typeof cytoscape !== 'undefined') {
      // expose to global cytoscape (i.e. window.cytoscape)
      register(cytoscape);
    }

    module.exports = register;

    /***/ }),
    /* 4 */
    /***/ (function(module, exports) {

    module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

    /***/ })
    /******/ ]);
    });
    }(cytoscapeKlay));

    var klay = /*@__PURE__*/getDefaultExportFromCjs(cytoscapeKlay.exports);

    var cytoscapeCompoundDragAndDrop = {exports: {}};

    (function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory();
    })(commonjsGlobal, function() {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId]) {
    /******/ 			return installedModules[moduleId].exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			i: moduleId,
    /******/ 			l: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.l = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// identity function for calling harmony imports with the correct context
    /******/ 	__webpack_require__.i = function(value) { return value; };
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
    /******/ 		if(!__webpack_require__.o(exports, name)) {
    /******/ 			Object.defineProperty(exports, name, {
    /******/ 				configurable: false,
    /******/ 				enumerable: true,
    /******/ 				get: getter
    /******/ 			});
    /******/ 		}
    /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
    /******/ 		var getter = module && module.__esModule ?
    /******/ 			function getDefault() { return module['default']; } :
    /******/ 			function getModuleExports() { return module; };
    /******/ 		__webpack_require__.d(getter, 'a', getter);
    /******/ 		return getter;
    /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 6);
    /******/ })
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ (function(module, exports, __webpack_require__) {


    var assign = __webpack_require__(1);
    var defaults = __webpack_require__(2);
    var toggle = __webpack_require__(4);
    var listeners = __webpack_require__(3);

    var DragAndDrop = function DragAndDrop(cy, options) {
      this.cy = cy;
      this.options = assign({}, defaults, options);
      this.listeners = [];
      this.enabled = true;

      this.addListeners();
    };

    var destroy = function destroy() {
      this.removeListeners();
    };

    [toggle, listeners, { destroy: destroy }].forEach(function (def) {
      assign(DragAndDrop.prototype, def);
    });

    module.exports = function (options) {
      var cy = this;

      return new DragAndDrop(cy, options);
    };

    /***/ }),
    /* 1 */
    /***/ (function(module, exports, __webpack_require__) {


    // Simple, internal Object.assign() polyfill for options objects etc.

    module.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
      for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        srcs[_key - 1] = arguments[_key];
      }

      srcs.filter(function (src) {
        return src != null;
      }).forEach(function (src) {
        Object.keys(src).forEach(function (k) {
          return tgt[k] = src[k];
        });
      });

      return tgt;
    };

    /***/ }),
    /* 2 */
    /***/ (function(module, exports, __webpack_require__) {


    /* eslint-disable no-unused-vars */

    module.exports = {
      grabbedNode: function grabbedNode(node) {
        return true;
      }, // filter function to specify which nodes are valid to grab and drop into other nodes
      dropTarget: function dropTarget(node) {
        return true;
      }, // filter function to specify which parent nodes are valid drop targets
      dropSibling: function dropSibling(node) {
        return true;
      }, // filter function to specify which orphan nodes are valid drop siblings
      newParentNode: function newParentNode(grabbedNode, dropSibling) {
        return {};
      }, // specifies element json for parent nodes added by dropping an orphan node on another orphan (a drop sibling)
      overThreshold: 10, // make dragging over a drop target easier by expanding the hit area by this amount on all sides
      outThreshold: 10 // make dragging out of a drop target a bit harder by expanding the hit area by this amount on all sides
    };

    /***/ }),
    /* 3 */
    /***/ (function(module, exports, __webpack_require__) {


    var _require = __webpack_require__(5),
        isParent = _require.isParent,
        isChild = _require.isChild,
        isOnlyChild = _require.isOnlyChild,
        getBounds = _require.getBounds,
        getBoundsTuple = _require.getBoundsTuple,
        boundsOverlap = _require.boundsOverlap,
        expandBounds = _require.expandBounds,
        getBoundsCopy = _require.getBoundsCopy,
        setParent = _require.setParent,
        removeParent = _require.removeParent;

    var addListener = function addListener(event, selector, callback) {
      this.listeners.push({ event: event, selector: selector, callback: callback });

      if (selector == null) {
        this.cy.on(event, callback);
      } else {
        this.cy.on(event, selector, callback);
      }
    };

    var addListeners = function addListeners() {
      var _this = this;

      var options = this.options,
          cy = this.cy;


      var isMultiplySelected = function isMultiplySelected(n) {
        return n.selected() && cy.elements('node:selected').length > 1;
      };
      var canBeGrabbed = function canBeGrabbed(n) {
        return !isParent(n) && !isMultiplySelected(n) && options.grabbedNode(n);
      };
      var canBeDropTarget = function canBeDropTarget(n) {
        return !isChild(n) && !n.same(_this.grabbedNode) && options.dropTarget(n);
      };
      var canBeDropSibling = function canBeDropSibling(n) {
        return isChild(n) && !n.same(_this.grabbedNode) && options.dropSibling(n);
      };
      var canPullFromParent = function canPullFromParent(n) {
        return isChild(n);
      };
      var canBeInBoundsTuple = function canBeInBoundsTuple(n) {
        return (canBeDropTarget(n) || canBeDropSibling(n)) && !n.same(_this.dropTarget);
      };
      var updateBoundsTuples = function updateBoundsTuples() {
        return _this.boundsTuples = cy.nodes(canBeInBoundsTuple).map(getBoundsTuple);
      };

      var reset = function reset() {
        _this.grabbedNode.removeClass('cdnd-grabbed-node');
        _this.dropTarget.removeClass('cdnd-drop-target');
        _this.dropSibling.removeClass('cdnd-drop-sibling');

        _this.grabbedNode = cy.collection();
        _this.dropTarget = cy.collection();
        _this.dropSibling = cy.collection();
        _this.dropTargetBounds = null;
        _this.boundsTuples = [];
        _this.inGesture = false;
      };

      this.addListener('grab', 'node', function (e) {
        var node = e.target;

        if (!_this.enabled || !canBeGrabbed(node)) {
          return;
        }

        _this.inGesture = true;
        _this.grabbedNode = node;
        _this.dropTarget = cy.collection();
        _this.dropSibling = cy.collection();

        if (canPullFromParent(node)) {
          _this.dropTarget = node.parent();
          _this.dropTargetBounds = getBoundsCopy(_this.dropTarget);
        }

        updateBoundsTuples();

        _this.grabbedNode.addClass('cdnd-grabbed-node');
        _this.dropTarget.addClass('cdnd-drop-target');

        node.emit('cdndgrab');
      });

      this.addListener('add', 'node', function (e) {
        if (!_this.inGesture || !_this.enabled) {
          return;
        }

        var newNode = e.target;

        if (canBeInBoundsTuple(newNode)) {
          _this.boundsTuples.push(getBoundsTuple(newNode));
        }
      });

      this.addListener('remove', 'node', function (e) {
        if (!_this.inGesture || !_this.enabled) {
          return;
        }

        var rmedNode = e.target;
        var rmedIsTarget = rmedNode.same(_this.dropTarget);
        var rmedIsSibling = rmedNode.same(_this.dropSibling);
        var rmedIsGrabbed = rmedNode.same(_this.grabbedNode);

        // try to clean things up if one of the drop nodes is removed
        if (rmedIsTarget || rmedIsSibling || rmedIsGrabbed) {
          if (rmedIsGrabbed) {
            reset();
          } else {
            _this.dropTarget = cy.collection();
            _this.dropSibling = cy.collection();

            updateBoundsTuples();
          }
        }
      });

      this.addListener('drag', 'node', function () {
        if (!_this.inGesture || !_this.enabled) {
          return;
        }

        if (_this.dropTarget.nonempty()) {
          // already in a parent
          var bb = expandBounds(getBounds(_this.grabbedNode), options.outThreshold);
          var parent = _this.dropTarget;
          var sibling = _this.dropSibling;
          var rmFromParent = !boundsOverlap(_this.dropTargetBounds, bb);
          var grabbedIsOnlyChild = isOnlyChild(_this.grabbedNode);

          if (rmFromParent) {
            removeParent(_this.grabbedNode);
            removeParent(_this.dropSibling);

            _this.dropTarget.removeClass('cdnd-drop-target');
            _this.dropSibling.removeClass('cdnd-drop-sibling');

            if (_this.dropSibling.nonempty() // remove extension-created parents on out
            || grabbedIsOnlyChild // remove empty parents
            ) {
                _this.dropTarget.remove();
              }

            _this.dropTarget = cy.collection();
            _this.dropSibling = cy.collection();
            _this.dropTargetBounds = null;

            updateBoundsTuples();

            _this.grabbedNode.emit('cdndout', [parent, sibling]);
          }
        } else {
          // not in a parent
          var _bb = expandBounds(getBounds(_this.grabbedNode), options.overThreshold);
          var tupleOverlaps = function tupleOverlaps(t) {
            return !t.node.removed() && boundsOverlap(_bb, t.bb);
          };
          var overlappingNodes = _this.boundsTuples.filter(tupleOverlaps).map(function (t) {
            return t.node;
          });

          if (overlappingNodes.length > 0) {
            // potential parent
            var overlappingParents = overlappingNodes.filter(isParent);
            var _parent = void 0,
                _sibling = void 0;

            if (overlappingParents.length > 0) {
              _sibling = cy.collection();
              _parent = overlappingParents[0]; // TODO maybe use a metric here to select which one
            } else {
              _sibling = overlappingNodes[0]; // TODO maybe use a metric here to select which one
              _parent = cy.add(options.newParentNode(_this.grabbedNode, _sibling));
            }

            _parent.addClass('cdnd-drop-target');
            _sibling.addClass('cdnd-drop-sibling');

            setParent(_sibling, _parent);

            _this.dropTargetBounds = getBoundsCopy(_parent);

            setParent(_this.grabbedNode, _parent);

            _this.dropTarget = _parent;
            _this.dropSibling = _sibling;

            _this.grabbedNode.emit('cdndover', [_parent, _sibling]);
          }
        }
      });

      this.addListener('free', 'node', function () {
        if (!_this.inGesture || !_this.enabled) {
          return;
        }

        var grabbedNode = _this.grabbedNode,
            dropTarget = _this.dropTarget,
            dropSibling = _this.dropSibling;


        reset();

        grabbedNode.emit('cdnddrop', [dropTarget, dropSibling]);
      });
    };

    var removeListeners = function removeListeners() {
      var cy = this.cy;


      this.listeners.forEach(function (lis) {
        var event = lis.event,
            selector = lis.selector,
            callback = lis.callback;


        if (selector == null) {
          cy.removeListener(event, callback);
        } else {
          cy.removeListener(event, selector, callback);
        }
      });

      this.listeners = [];
    };

    module.exports = { addListener: addListener, addListeners: addListeners, removeListeners: removeListeners };

    /***/ }),
    /* 4 */
    /***/ (function(module, exports, __webpack_require__) {


    function enable() {
      this.enabled = true;
    }

    function disable() {
      this.enabled = false;
    }

    module.exports = { enable: enable, disable: disable };

    /***/ }),
    /* 5 */
    /***/ (function(module, exports, __webpack_require__) {


    var isParent = function isParent(n) {
      return n.isParent();
    };
    var isChild = function isChild(n) {
      return n.isChild();
    };
    var isOnlyChild = function isOnlyChild(n) {
      return isChild(n) && n.parent().children().length === 1;
    };

    var getBounds = function getBounds(n) {
      return n.boundingBox({ includeOverlays: false });
    };
    var getBoundsTuple = function getBoundsTuple(n) {
      return { node: n, bb: copyBounds(getBounds(n)) };
    };
    var copyBounds = function copyBounds(bb) {
      return { x1: bb.x1, x2: bb.x2, y1: bb.y1, y2: bb.y2, w: bb.w, h: bb.h };
    };
    var getBoundsCopy = function getBoundsCopy(n) {
      return copyBounds(getBounds(n));
    };

    var removeParent = function removeParent(n) {
      return n.move({ parent: null });
    };
    var setParent = function setParent(n, parent) {
      return n.move({ parent: parent.id() });
    };

    var boundsOverlap = function boundsOverlap(bb1, bb2) {
      // case: one bb to right of other
      if (bb1.x1 > bb2.x2) {
        return false;
      }
      if (bb2.x1 > bb1.x2) {
        return false;
      }

      // case: one bb to left of other
      if (bb1.x2 < bb2.x1) {
        return false;
      }
      if (bb2.x2 < bb1.x1) {
        return false;
      }

      // case: one bb above other
      if (bb1.y2 < bb2.y1) {
        return false;
      }
      if (bb2.y2 < bb1.y1) {
        return false;
      }

      // case: one bb below other
      if (bb1.y1 > bb2.y2) {
        return false;
      }
      if (bb2.y1 > bb1.y2) {
        return false;
      }

      // otherwise, must have some overlap
      return true;
    };

    var expandBounds = function expandBounds(bb, padding) {
      return {
        x1: bb.x1 - padding,
        x2: bb.x2 + padding,
        w: bb.w + 2 * padding,
        y1: bb.y1 - padding,
        y2: bb.y2 + padding,
        h: bb.h + 2 * padding
      };
    };

    module.exports = {
      isParent: isParent, isChild: isChild, isOnlyChild: isOnlyChild,
      getBoundsTuple: getBoundsTuple, boundsOverlap: boundsOverlap, getBounds: getBounds, expandBounds: expandBounds, copyBounds: copyBounds, getBoundsCopy: getBoundsCopy,
      removeParent: removeParent, setParent: setParent
    };

    /***/ }),
    /* 6 */
    /***/ (function(module, exports, __webpack_require__) {


    var impl = __webpack_require__(0);

    // registers the extension on a cytoscape lib ref
    var register = function register(cytoscape) {
      if (!cytoscape) {
        return;
      } // can't register if cytoscape unspecified

      cytoscape('core', 'compoundDragAndDrop', impl); // register with cytoscape.js
    };

    if (typeof cytoscape !== 'undefined') {
      // expose to global cytoscape (i.e. window.cytoscape)
      register(cytoscape);
    }

    module.exports = register;

    /***/ })
    /******/ ]);
    });
    }(cytoscapeCompoundDragAndDrop));

    var compoundDragAndDrop = /*@__PURE__*/getDefaultExportFromCjs(cytoscapeCompoundDragAndDrop.exports);

    var cytoscapePopper = {exports: {}};

    var top = 'top';
    var bottom = 'bottom';
    var right = 'right';
    var left = 'left';
    var auto = 'auto';
    var basePlacements = [top, bottom, right, left];
    var start$1 = 'start';
    var end = 'end';
    var clippingParents = 'clippingParents';
    var viewport = 'viewport';
    var popper$1 = 'popper';
    var reference = 'reference';
    var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
      return acc.concat([placement + "-" + start$1, placement + "-" + end]);
    }, []);
    var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
      return acc.concat([placement, placement + "-" + start$1, placement + "-" + end]);
    }, []); // modifiers that need to read the DOM

    var beforeRead = 'beforeRead';
    var read = 'read';
    var afterRead = 'afterRead'; // pure-logic modifiers

    var beforeMain = 'beforeMain';
    var main = 'main';
    var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

    var beforeWrite = 'beforeWrite';
    var write = 'write';
    var afterWrite = 'afterWrite';
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

    function getNodeName(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
    }

    function getWindow(node) {
      if (node == null) {
        return window;
      }

      if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }

      return node;
    }

    function isElement$1(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }

    function isHTMLElement(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }

    function isShadowRoot(node) {
      // IE 11 has no ShadowRoot
      if (typeof ShadowRoot === 'undefined') {
        return false;
      }

      var OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }

    // and applies them to the HTMLElements such as popper and arrow

    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]


        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
          var value = attributes[name];

          if (value === false) {
            element.removeAttribute(name);
          } else {
            element.setAttribute(name, value === true ? '' : value);
          }
        });
      });
    }

    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }

      return function () {
        Object.keys(state.elements).forEach(function (name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

          var style = styleProperties.reduce(function (style, property) {
            style[property] = '';
            return style;
          }, {}); // arrow is optional + virtual elements

          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }

          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function (attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    } // eslint-disable-next-line import/no-unused-modules


    var applyStyles$1 = {
      name: 'applyStyles',
      enabled: true,
      phase: 'write',
      fn: applyStyles,
      effect: effect$2,
      requires: ['computeStyles']
    };

    function getBasePlacement$1(placement) {
      return placement.split('-')[0];
    }

    var max = Math.max;
    var min = Math.min;
    var round = Math.round;

    function getBoundingClientRect(element, includeScale) {
      if (includeScale === void 0) {
        includeScale = false;
      }

      var rect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;

      if (isHTMLElement(element) && includeScale) {
        var offsetHeight = element.offsetHeight;
        var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
        // Fallback to 1 in case both values are `0`

        if (offsetWidth > 0) {
          scaleX = round(rect.width) / offsetWidth || 1;
        }

        if (offsetHeight > 0) {
          scaleY = round(rect.height) / offsetHeight || 1;
        }
      }

      return {
        width: rect.width / scaleX,
        height: rect.height / scaleY,
        top: rect.top / scaleY,
        right: rect.right / scaleX,
        bottom: rect.bottom / scaleY,
        left: rect.left / scaleX,
        x: rect.left / scaleX,
        y: rect.top / scaleY
      };
    }

    // means it doesn't take into account transforms.

    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
      // Fixes https://github.com/popperjs/popper-core/issues/1223

      var width = element.offsetWidth;
      var height = element.offsetHeight;

      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }

      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }

      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
      };
    }

    function contains(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

      if (parent.contains(child)) {
        return true;
      } // then fallback to custom implementation with Shadow DOM support
      else if (rootNode && isShadowRoot(rootNode)) {
          var next = child;

          do {
            if (next && parent.isSameNode(next)) {
              return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...


            next = next.parentNode || next.host;
          } while (next);
        } // Give up, the result is false


      return false;
    }

    function getComputedStyle(element) {
      return getWindow(element).getComputedStyle(element);
    }

    function isTableElement(element) {
      return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
    }

    function getDocumentElement(element) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return ((isElement$1(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
      element.document) || window.document).documentElement;
    }

    function getParentNode(element) {
      if (getNodeName(element) === 'html') {
        return element;
      }

      return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
        isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element) // fallback

      );
    }

    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle(element).position === 'fixed') {
        return null;
      }

      return element.offsetParent;
    } // `.offsetParent` reports `null` for fixed elements, while absolute elements
    // return the containing block


    function getContainingBlock(element) {
      var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
      var isIE = navigator.userAgent.indexOf('Trident') !== -1;

      if (isIE && isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle(element);

        if (elementCss.position === 'fixed') {
          return null;
        }
      }

      var currentNode = getParentNode(element);

      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }

      while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }

      return null;
    } // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.


    function getOffsetParent(element) {
      var window = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);

      while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
      }

      if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
        return window;
      }

      return offsetParent || getContainingBlock(element) || window;
    }

    function getMainAxisFromPlacement(placement) {
      return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    }

    function within(min$1, value, max$1) {
      return max(min$1, min(value, max$1));
    }
    function withinMaxClamp(min, value, max) {
      var v = within(min, value, max);
      return v > max ? max : v;
    }

    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }

    function expandToHashMap(value, keys) {
      return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }

    var toPaddingObject = function toPaddingObject(padding, state) {
      padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    };

    function arrow(_ref) {
      var _state$modifiersData$;

      var state = _ref.state,
          name = _ref.name,
          options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement$1(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? 'height' : 'width';

      if (!arrowElement || !popperOffsets) {
        return;
      }

      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === 'y' ? top : left;
      var maxProp = axis === 'y' ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
      var startDiff = popperOffsets[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
      // outside of the popper bounds

      var min = paddingObject[minProp];
      var max = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset = within(min, center, max); // Prevents breaking syntax highlighting...

      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
    }

    function effect$1(_ref2) {
      var state = _ref2.state,
          options = _ref2.options;
      var _options$element = options.element,
          arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

      if (arrowElement == null) {
        return;
      } // CSS selector


      if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);

        if (!arrowElement) {
          return;
        }
      }

      {
        if (!isHTMLElement(arrowElement)) {
          console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
        }
      }

      if (!contains(state.elements.popper, arrowElement)) {
        {
          console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
        }

        return;
      }

      state.elements.arrow = arrowElement;
    } // eslint-disable-next-line import/no-unused-modules


    var arrow$1 = {
      name: 'arrow',
      enabled: true,
      phase: 'main',
      fn: arrow,
      effect: effect$1,
      requires: ['popperOffsets'],
      requiresIfExists: ['preventOverflow']
    };

    function getVariation(placement) {
      return placement.split('-')[1];
    }

    var unsetSides = {
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
    }; // Round the offsets to the nearest suitable subpixel based on the DPR.
    // Zooming can change the DPR, but it seems to report a value that will
    // cleanly divide the values into the appropriate subpixels.

    function roundOffsetsByDPR(_ref) {
      var x = _ref.x,
          y = _ref.y;
      var win = window;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round(x * dpr) / dpr || 0,
        y: round(y * dpr) / dpr || 0
      };
    }

    function mapToStyles(_ref2) {
      var _Object$assign2;

      var popper = _ref2.popper,
          popperRect = _ref2.popperRect,
          placement = _ref2.placement,
          variation = _ref2.variation,
          offsets = _ref2.offsets,
          position = _ref2.position,
          gpuAcceleration = _ref2.gpuAcceleration,
          adaptive = _ref2.adaptive,
          roundOffsets = _ref2.roundOffsets,
          isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x,
          x = _offsets$x === void 0 ? 0 : _offsets$x,
          _offsets$y = offsets.y,
          y = _offsets$y === void 0 ? 0 : _offsets$y;

      var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref3.x;
      y = _ref3.y;
      var hasX = offsets.hasOwnProperty('x');
      var hasY = offsets.hasOwnProperty('y');
      var sideX = left;
      var sideY = top;
      var win = window;

      if (adaptive) {
        var offsetParent = getOffsetParent(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';

        if (offsetParent === getWindow(popper)) {
          offsetParent = getDocumentElement(popper);

          if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
            heightProp = 'scrollHeight';
            widthProp = 'scrollWidth';
          }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


        offsetParent = offsetParent;

        if (placement === top || (placement === left || placement === right) && variation === end) {
          sideY = bottom;
          var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
          offsetParent[heightProp];
          y -= offsetY - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }

        if (placement === left || (placement === top || placement === bottom) && variation === end) {
          sideX = right;
          var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
          offsetParent[widthProp];
          x -= offsetX - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }

      var commonStyles = Object.assign({
        position: position
      }, adaptive && unsetSides);

      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref4.x;
      y = _ref4.y;

      if (gpuAcceleration) {
        var _Object$assign;

        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }

      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
    }

    function computeStyles(_ref5) {
      var state = _ref5.state,
          options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration,
          gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
          _options$adaptive = options.adaptive,
          adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
          _options$roundOffsets = options.roundOffsets,
          roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

      {
        var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

        if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
          return transitionProperty.indexOf(property) >= 0;
        })) {
          console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
        }
      }

      var commonStyles = {
        placement: getBasePlacement$1(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
      };

      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive: adaptive,
          roundOffsets: roundOffsets
        })));
      }

      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: 'absolute',
          adaptive: false,
          roundOffsets: roundOffsets
        })));
      }

      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var computeStyles$1 = {
      name: 'computeStyles',
      enabled: true,
      phase: 'beforeWrite',
      fn: computeStyles,
      data: {}
    };

    var passive = {
      passive: true
    };

    function effect(_ref) {
      var state = _ref.state,
          instance = _ref.instance,
          options = _ref.options;
      var _options$scroll = options.scroll,
          scroll = _options$scroll === void 0 ? true : _options$scroll,
          _options$resize = options.resize,
          resize = _options$resize === void 0 ? true : _options$resize;
      var window = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.addEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.addEventListener('resize', instance.update, passive);
      }

      return function () {
        if (scroll) {
          scrollParents.forEach(function (scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
          });
        }

        if (resize) {
          window.removeEventListener('resize', instance.update, passive);
        }
      };
    } // eslint-disable-next-line import/no-unused-modules


    var eventListeners = {
      name: 'eventListeners',
      enabled: true,
      phase: 'write',
      fn: function fn() {},
      effect: effect,
      data: {}
    };

    var hash$1 = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash$1[matched];
      });
    }

    var hash = {
      start: 'end',
      end: 'start'
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function (matched) {
        return hash[matched];
      });
    }

    function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }

    function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }

    function getViewportRect(element) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
      // can be obscured underneath it.
      // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
      // if it isn't open, so if this isn't available, the popper will be detected
      // to overflow the bottom of the screen too early.

      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent

        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }

      return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
      };
    }

    // of the `<html>` and `<body>` rect bounds if horizontally scrollable

    function getDocumentRect(element) {
      var _element$ownerDocumen;

      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;

      if (getComputedStyle(body || html).direction === 'rtl') {
        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
      }

      return {
        width: width,
        height: height,
        x: x,
        y: y
      };
    }

    function isScrollParent(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = getComputedStyle(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }

    function getScrollParent(node) {
      if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
      }

      if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
      }

      return getScrollParent(getParentNode(node));
    }

    /*
    given a DOM element, return the list of all scroll parents, up the list of ancesors
    until we get to the top window object. This list is what we attach scroll listeners
    to, because if any of these parent elements scroll, we'll need to re-calculate the
    reference element's position.
    */

    function listScrollParents(element, list) {
      var _element$ownerDocumen;

      if (list === void 0) {
        list = [];
      }

      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)));
    }

    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }

    function getInnerBoundingClientRect(element) {
      var rect = getBoundingClientRect(element);
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }

    function getClientRectFromMixedType(element, clippingParent) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement$1(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    } // A "clipping parent" is an overflowable container with the characteristic of
    // clipping (or hiding) overflowing elements with a position different from
    // `initial`


    function getClippingParents(element) {
      var clippingParents = listScrollParents(getParentNode(element));
      var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

      if (!isElement$1(clipperElement)) {
        return [];
      } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


      return clippingParents.filter(function (clippingParent) {
        return isElement$1(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
      });
    } // Gets the maximum area that the element is visible in due to any number of
    // clipping parents


    function getClippingRect(element, boundary, rootBoundary) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }

    function computeOffsets(_ref) {
      var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement$1(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;

      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference.y - element.height
          };
          break;

        case bottom:
          offsets = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;

        case right:
          offsets = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;

        case left:
          offsets = {
            x: reference.x - element.width,
            y: commonY
          };
          break;

        default:
          offsets = {
            x: reference.x,
            y: reference.y
          };
      }

      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

      if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';

        switch (variation) {
          case start$1:
            offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
            break;

          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
            break;
        }
      }

      return offsets;
    }

    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          _options$placement = _options.placement,
          placement = _options$placement === void 0 ? state.placement : _options$placement,
          _options$boundary = _options.boundary,
          boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext = _options$elementConte === void 0 ? popper$1 : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper$1 ? reference : popper$1;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement$1(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
      var elementClientRect = elementContext === popper$1 ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect

      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

      if (elementContext === popper$1 && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
          overflowOffsets[key] += offset[axis] * multiply;
        });
      }

      return overflowOffsets;
    }

    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          placement = _options.placement,
          boundary = _options.boundary,
          rootBoundary = _options.rootBoundary,
          padding = _options.padding,
          flipVariations = _options.flipVariations,
          _options$allowedAutoP = _options.allowedAutoPlacements,
          allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
        return getVariation(placement) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
      });

      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;

        {
          console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
        }
      } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


      var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding
        })[getBasePlacement$1(placement)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
      });
    }

    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement$1(placement) === auto) {
        return [];
      }

      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }

    function flip(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;

      if (state.modifiersData[name]._skip) {
        return;
      }

      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
          specifiedFallbackPlacements = options.fallbackPlacements,
          padding = options.padding,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          _options$flipVariatio = options.flipVariations,
          flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
          allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement$1(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement$1(placement) === auto ? computeAutoPlacement(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          flipVariations: flipVariations,
          allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements[0];

      for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];

        var _basePlacement = getBasePlacement$1(placement);

        var isStartVariation = getVariation(placement) === start$1;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          altBoundary: altBoundary,
          padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }

        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];

        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }

        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }

        if (checks.every(function (check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }

        checksMap.set(placement, checks);
      }

      if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;

        var _loop = function _loop(_i) {
          var fittingPlacement = placements.find(function (placement) {
            var checks = checksMap.get(placement);

            if (checks) {
              return checks.slice(0, _i).every(function (check) {
                return check;
              });
            }
          });

          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };

        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);

          if (_ret === "break") break;
        }
      }

      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    } // eslint-disable-next-line import/no-unused-modules


    var flip$1 = {
      name: 'flip',
      enabled: true,
      phase: 'main',
      fn: flip,
      requiresIfExists: ['offset'],
      data: {
        _skip: false
      }
    };

    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }

      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }

    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function (side) {
        return overflow[side] >= 0;
      });
    }

    function hide(_ref) {
      var state = _ref.state,
          name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: 'reference'
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
      });
    } // eslint-disable-next-line import/no-unused-modules


    var hide$1 = {
      name: 'hide',
      enabled: true,
      phase: 'main',
      requiresIfExists: ['preventOverflow'],
      fn: hide
    };

    function distanceAndSkiddingToXY(placement, rects, offset) {
      var basePlacement = getBasePlacement$1(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

      var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
          skidding = _ref[0],
          distance = _ref[1];

      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }

    function offset(_ref2) {
      var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
      var _options$offset = options.offset,
          offset = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement],
          x = _data$state$placement.x,
          y = _data$state$placement.y;

      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var offset$1 = {
      name: 'offset',
      enabled: true,
      phase: 'main',
      requires: ['popperOffsets'],
      fn: offset
    };

    function popperOffsets(_ref) {
      var state = _ref.state,
          name = _ref.name;
      // Offsets are the actual position the popper needs to have to be
      // properly positioned near its reference element
      // This is the most basic placement, and will be adjusted by
      // the modifiers in the next step
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var popperOffsets$1 = {
      name: 'popperOffsets',
      enabled: true,
      phase: 'read',
      fn: popperOffsets,
      data: {}
    };

    function getAltAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
    }

    function preventOverflow(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;
      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          padding = options.padding,
          _options$tether = options.tether,
          tether = _options$tether === void 0 ? true : _options$tether,
          _options$tetherOffset = options.tetherOffset,
          tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
      });
      var basePlacement = getBasePlacement$1(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };

      if (!popperOffsets) {
        return;
      }

      if (checkMainAxis) {
        var _offsetModifierState$;

        var mainSide = mainAxis === 'y' ? top : left;
        var altSide = mainAxis === 'y' ? bottom : right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min$1 = offset + overflow[mainSide];
        var max$1 = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start$1 ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start$1 ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds

        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)

        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
      }

      if (checkAltAxis) {
        var _offsetModifierState$2;

        var _mainSide = mainAxis === 'x' ? top : left;

        var _altSide = mainAxis === 'x' ? bottom : right;

        var _offset = popperOffsets[altAxis];

        var _len = altAxis === 'y' ? 'height' : 'width';

        var _min = _offset + overflow[_mainSide];

        var _max = _offset - overflow[_altSide];

        var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var preventOverflow$1 = {
      name: 'preventOverflow',
      enabled: true,
      phase: 'main',
      fn: preventOverflow,
      requiresIfExists: ['offset']
    };

    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }

    function getNodeScroll(node) {
      if (node === getWindow(node) || !isHTMLElement(node)) {
        return getWindowScroll(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }

    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round(rect.width) / element.offsetWidth || 1;
      var scaleY = round(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    } // Returns the composite rect of an element relative to its offsetParent.
    // Composite means it takes into account transforms as well as layout.


    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }

      var isOffsetParentAnElement = isHTMLElement(offsetParent);
      var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };

      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }

        if (isHTMLElement(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }

      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }

    function order(modifiers) {
      var map = new Map();
      var visited = new Set();
      var result = [];
      modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
      }); // On visiting object, check for its dependencies and visit them recursively

      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
          if (!visited.has(dep)) {
            var depModifier = map.get(dep);

            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }

      modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
          // check for visited object
          sort(modifier);
        }
      });
      return result;
    }

    function orderModifiers(modifiers) {
      // order based on dependencies
      var orderedModifiers = order(modifiers); // order based on phase

      return modifierPhases.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }

    function debounce$1(fn) {
      var pending;
      return function () {
        if (!pending) {
          pending = new Promise(function (resolve) {
            Promise.resolve().then(function () {
              pending = undefined;
              resolve(fn());
            });
          });
        }

        return pending;
      };
    }

    function format(str) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return [].concat(args).reduce(function (p, c) {
        return p.replace(/%s/, c);
      }, str);
    }

    var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
    var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
    var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
    function validateModifiers(modifiers) {
      modifiers.forEach(function (modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function (value, index, self) {
          return self.indexOf(value) === index;
        }).forEach(function (key) {
          switch (key) {
            case 'name':
              if (typeof modifier.name !== 'string') {
                console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
              }

              break;

            case 'enabled':
              if (typeof modifier.enabled !== 'boolean') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
              }

              break;

            case 'phase':
              if (modifierPhases.indexOf(modifier.phase) < 0) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
              }

              break;

            case 'fn':
              if (typeof modifier.fn !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'effect':
              if (modifier.effect != null && typeof modifier.effect !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'requires':
              if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
              }

              break;

            case 'requiresIfExists':
              if (!Array.isArray(modifier.requiresIfExists)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
              }

              break;

            case 'options':
            case 'data':
              break;

            default:
              console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
                return "\"" + s + "\"";
              }).join(', ') + "; but \"" + key + "\" was provided.");
          }

          modifier.requires && modifier.requires.forEach(function (requirement) {
            if (modifiers.find(function (mod) {
              return mod.name === requirement;
            }) == null) {
              console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            }
          });
        });
      });
    }

    function uniqueBy(arr, fn) {
      var identifiers = new Set();
      return arr.filter(function (item) {
        var identifier = fn(item);

        if (!identifiers.has(identifier)) {
          identifiers.add(identifier);
          return true;
        }
      });
    }

    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
      }, {}); // IE11 does not support Object.values

      return Object.keys(merged).map(function (key) {
        return merged[key];
      });
    }

    var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
    var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
    var DEFAULT_OPTIONS = {
      placement: 'bottom',
      modifiers: [],
      strategy: 'absolute'
    };

    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
      });
    }

    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }

      var _generatorOptions = generatorOptions,
          _generatorOptions$def = _generatorOptions.defaultModifiers,
          defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
          _generatorOptions$def2 = _generatorOptions.defaultOptions,
          defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper(reference, popper, options) {
        if (options === void 0) {
          options = defaultOptions;
        }

        var state = {
          placement: 'bottom',
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference,
            popper: popper
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state: state,
          setOptions: function setOptions(setOptionsAction) {
            var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options);
            state.scrollParents = {
              reference: isElement$1(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
              popper: listScrollParents(popper)
            }; // Orders the modifiers based on their dependencies and `phase`
            // properties

            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

            state.orderedModifiers = orderedModifiers.filter(function (m) {
              return m.enabled;
            }); // Validate the provided modifiers so that the consumer will get warned
            // if one of the modifiers is invalid for any reason

            {
              var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
                var name = _ref.name;
                return name;
              });
              validateModifiers(modifiers);

              if (getBasePlacement$1(state.options.placement) === auto) {
                var flipModifier = state.orderedModifiers.find(function (_ref2) {
                  var name = _ref2.name;
                  return name === 'flip';
                });

                if (!flipModifier) {
                  console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
                }
              }

              var _getComputedStyle = getComputedStyle(popper),
                  marginTop = _getComputedStyle.marginTop,
                  marginRight = _getComputedStyle.marginRight,
                  marginBottom = _getComputedStyle.marginBottom,
                  marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
              // cause bugs with positioning, so we'll warn the consumer


              if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
                return parseFloat(margin);
              })) {
                console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
              }
            }

            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }

            var _state$elements = state.elements,
                reference = _state$elements.reference,
                popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
            // anymore

            if (!areValidElements(reference, popper)) {
              {
                console.error(INVALID_ELEMENT_ERROR);
              }

              return;
            } // Store the reference and popper rects to be read by modifiers


            state.rects = {
              reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
              popper: getLayoutRect(popper)
            }; // Modifiers have the ability to reset the current update cycle. The
            // most common use case for this is the `flip` modifier changing the
            // placement, which then needs to re-run all the modifiers, because the
            // logic was previously ran for the previous placement and is therefore
            // stale/incorrect

            state.reset = false;
            state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
            // is filled with the initial data specified by the modifier. This means
            // it doesn't persist and is fresh on each update.
            // To ensure persistent data, use `${name}#persistent`

            state.orderedModifiers.forEach(function (modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });
            var __debug_loops__ = 0;

            for (var index = 0; index < state.orderedModifiers.length; index++) {
              {
                __debug_loops__ += 1;

                if (__debug_loops__ > 100) {
                  console.error(INFINITE_LOOP_ERROR);
                  break;
                }
              }

              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }

              var _state$orderedModifie = state.orderedModifiers[index],
                  fn = _state$orderedModifie.fn,
                  _state$orderedModifie2 = _state$orderedModifie.options,
                  _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                  name = _state$orderedModifie.name;

              if (typeof fn === 'function') {
                state = fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce$1(function () {
            return new Promise(function (resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };

        if (!areValidElements(reference, popper)) {
          {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return instance;
        }

        instance.setOptions(options).then(function (state) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state);
          }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.

        function runModifierEffects() {
          state.orderedModifiers.forEach(function (_ref3) {
            var name = _ref3.name,
                _ref3$options = _ref3.options,
                options = _ref3$options === void 0 ? {} : _ref3$options,
                effect = _ref3.effect;

            if (typeof effect === 'function') {
              var cleanupFn = effect({
                state: state,
                name: name,
                instance: instance,
                options: options
              });

              var noopFn = function noopFn() {};

              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }

        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function (fn) {
            return fn();
          });
          effectCleanupFns = [];
        }

        return instance;
      };
    }
    var createPopper$2 = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules

    var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
    var createPopper$1 = /*#__PURE__*/popperGenerator({
      defaultModifiers: defaultModifiers$1
    }); // eslint-disable-next-line import/no-unused-modules

    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /*#__PURE__*/popperGenerator({
      defaultModifiers: defaultModifiers
    }); // eslint-disable-next-line import/no-unused-modules

    var lib = /*#__PURE__*/Object.freeze({
        __proto__: null,
        popperGenerator: popperGenerator,
        detectOverflow: detectOverflow,
        createPopperBase: createPopper$2,
        createPopper: createPopper,
        createPopperLite: createPopper$1,
        top: top,
        bottom: bottom,
        right: right,
        left: left,
        auto: auto,
        basePlacements: basePlacements,
        start: start$1,
        end: end,
        clippingParents: clippingParents,
        viewport: viewport,
        popper: popper$1,
        reference: reference,
        variationPlacements: variationPlacements,
        placements: placements,
        beforeRead: beforeRead,
        read: read,
        afterRead: afterRead,
        beforeMain: beforeMain,
        main: main,
        afterMain: afterMain,
        beforeWrite: beforeWrite,
        write: write,
        afterWrite: afterWrite,
        modifierPhases: modifierPhases,
        applyStyles: applyStyles$1,
        arrow: arrow$1,
        computeStyles: computeStyles$1,
        eventListeners: eventListeners,
        flip: flip$1,
        hide: hide$1,
        offset: offset$1,
        popperOffsets: popperOffsets$1,
        preventOverflow: preventOverflow$1
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(lib);

    (function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory(require$$0);
    })(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_8__) {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId]) {
    /******/ 			return installedModules[moduleId].exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			i: moduleId,
    /******/ 			l: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.l = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// identity function for calling harmony imports with the correct context
    /******/ 	__webpack_require__.i = function(value) { return value; };
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
    /******/ 		if(!__webpack_require__.o(exports, name)) {
    /******/ 			Object.defineProperty(exports, name, {
    /******/ 				configurable: false,
    /******/ 				enumerable: true,
    /******/ 				get: getter
    /******/ 			});
    /******/ 		}
    /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
    /******/ 		var getter = module && module.__esModule ?
    /******/ 			function getDefault() { return module['default']; } :
    /******/ 			function getModuleExports() { return module; };
    /******/ 		__webpack_require__.d(getter, 'a', getter);
    /******/ 		return getter;
    /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 7);
    /******/ })
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ (function(module, exports, __webpack_require__) {


    // Simple, internal Object.assign() polyfill for options objects etc.

    module.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
      for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        srcs[_key - 1] = arguments[_key];
      }

      srcs.forEach(function (src) {
        if (src !== null && src !== undefined) {
          Object.keys(src).forEach(function (k) {
            return tgt[k] = src[k];
          });
        }
      });

      return tgt;
    };

    /***/ }),
    /* 1 */
    /***/ (function(module, exports, __webpack_require__) {


    var _require = __webpack_require__(5),
        getBoundingBox = _require.getBoundingBox;

    // Create a popper virtual element (aka popper v1 reference object)
    // https://popper.js.org/docs/v2/virtual-elements/


    function getRef(target, opts) {

      //Define popper reference object and cy reference  object
      var refObject = {
        getBoundingClientRect: function getBoundingClientRect() {
          return getBoundingBox(target, opts);
        }
      };

      return refObject;
    }

    module.exports = { getRef: getRef };

    /***/ }),
    /* 2 */
    /***/ (function(module, exports, __webpack_require__) {


    var assign = __webpack_require__(0);

    var _require = __webpack_require__(1),
        getRef = _require.getRef;

    var _require2 = __webpack_require__(6),
        getContent = _require2.getContent;

    var popperDefaults = {};

    var _require3 = __webpack_require__(8),
        createPopper = _require3.createPopper;

    // Create a new popper object for a core or element target


    function getPopper(target, opts) {
      var refObject = getRef(target, opts);
      var content = getContent(target, opts.content);
      var popperOpts = assign({}, popperDefaults, opts.popper);

      return createPopper(refObject, content, popperOpts);
    }

    module.exports = { getPopper: getPopper };

    /***/ }),
    /* 3 */
    /***/ (function(module, exports, __webpack_require__) {


    var assign = __webpack_require__(0);

    var _require = __webpack_require__(2),
        getPopper = _require.getPopper;

    var _require2 = __webpack_require__(1),
        getRef = _require2.getRef;

    function popper(opts) {
      checkForWarning(this);

      return getPopper(this[0], createOptionsObject(this[0], opts));
    }

    function popperRef(opts) {
      checkForWarning(this);

      return getRef(this[0], createOptionsObject(this[0], opts));
    }

    function createOptionsObject(target, opts) {
      var renderedDimensions = function renderedDimensions(el) {
        return el.isNode() ? { w: el.renderedWidth(), h: el.renderedHeight() } : { w: 3, h: 3 };
      };
      var renderedPosition = function renderedPosition(el) {
        return el.isNode() ? getRenderedCenter(el, renderedDimensions) : getRenderedMidpoint(el);
      };
      var popper = {};
      var cy = target.cy();

      var defaults = { renderedDimensions: renderedDimensions, renderedPosition: renderedPosition, popper: popper, cy: cy };

      return assign({}, defaults, opts);
    }

    //Get the rendered center
    function getRenderedCenter(target, renderedDimensions) {
      var pos = target.renderedPosition();
      var dimensions = renderedDimensions(target);
      var offsetX = dimensions.w / 2;
      var offsetY = dimensions.h / 2;

      return {
        x: pos.x - offsetX,
        y: pos.y - offsetY
      };
    }

    //Get the rendered position of the midpoint
    function getRenderedMidpoint(target) {
      var p = target.midpoint();
      var pan = target.cy().pan();
      var zoom = target.cy().zoom();

      return {
        x: p.x * zoom + pan.x,
        y: p.y * zoom + pan.y
      };
    }

    //Warn user about misuse of the plugin
    function checkForWarning(elements) {
      /* eslint-disable no-console */

      //Popper.js Should only be used on 1 element
      if (elements.length > 1) {
        console.warn("Popper.js Extension should only be used on one element.");
        console.warn("Ignoring all subsequent elements");
      }

      /* eslint-enable */
    }

    module.exports = { popper: popper, popperRef: popperRef };

    /***/ }),
    /* 4 */
    /***/ (function(module, exports, __webpack_require__) {


    var assign = __webpack_require__(0);

    var _require = __webpack_require__(2),
        getPopper = _require.getPopper;

    var _require2 = __webpack_require__(1),
        getRef = _require2.getRef;

    function popper(opts) {
      return getPopper(this, createOptionsObject(this, opts));
    }

    function popperRef(opts) {
      return getRef(this, createOptionsObject(this, opts));
    }

    //Create a options object with required default values
    function createOptionsObject(target, opts) {
      var defaults = {
        boundingBox: {
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          w: 3,
          h: 3
        },
        renderedDimensions: function renderedDimensions() {
          return { w: 3, h: 3 };
        },
        renderedPosition: function renderedPosition() {
          return { x: 0, y: 0 };
        },
        popper: {},
        cy: target
      };

      return assign({}, defaults, opts);
    }

    module.exports = { popper: popper, popperRef: popperRef };

    /***/ }),
    /* 5 */
    /***/ (function(module, exports, __webpack_require__) {


    function getBoundingBox(target, opts) {
      var renderedPosition = opts.renderedPosition,
          cy = opts.cy,
          renderedDimensions = opts.renderedDimensions;

      var offset = cy.container().getBoundingClientRect();
      var dims = renderedDimensions(target);
      var pos = renderedPosition(target);

      return {
        top: pos.y + offset.top,
        left: pos.x + offset.left,
        right: pos.x + dims.w + offset.left,
        bottom: pos.y + dims.h + offset.top,
        width: dims.w,
        height: dims.h
      };
    }

    module.exports = { getBoundingBox: getBoundingBox };

    /***/ }),
    /* 6 */
    /***/ (function(module, exports, __webpack_require__) {


    function getContent(target, content) {
      var contentObject = null;

      if (typeof content === "function") {
        //Execute function if user opted for a dyanamic target
        contentObject = content(target);
      } else if (content instanceof HTMLElement) {
        //Target option is an HTML element
        return content;
      } else {
        throw new Error("Can not create popper from 'target' with unknown type");
      }

      // Check validity of parsed target
      if (contentObject === null) {
        throw new Error("No 'target' specified to create popper");
      } else {
        return contentObject;
      }
    }

    module.exports = { getContent: getContent };

    /***/ }),
    /* 7 */
    /***/ (function(module, exports, __webpack_require__) {


    /* global cytoscape */

    var coreImpl = __webpack_require__(4);
    var collectionImpl = __webpack_require__(3);

    // registers the extension on a cytoscape lib ref
    var register = function register(cytoscape) {
      if (!cytoscape) {
        return;
      } // can't register if cytoscape unspecified

      // register with cytoscape.js
      cytoscape('core', 'popper', coreImpl.popper); //Cytoscape Core
      cytoscape('collection', 'popper', collectionImpl.popper); //Cytoscape Collections
      cytoscape('core', 'popperRef', coreImpl.popperRef); //Cytoscape Core for References
      cytoscape('collection', 'popperRef', collectionImpl.popperRef); //Cytoscape Collections for References
    };

    if (typeof cytoscape !== 'undefined') {
      // expose to global cytoscape (i.e. window.cytoscape)
      register(cytoscape);
    }

    module.exports = register;

    /***/ }),
    /* 8 */
    /***/ (function(module, exports) {

    module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

    /***/ })
    /******/ ]);
    });
    }(cytoscapePopper));

    var popper = /*@__PURE__*/getDefaultExportFromCjs(cytoscapePopper.exports);

    cytoscape_cjs.use(klay);
    cytoscape_cjs.use(compoundDragAndDrop);
    cytoscape_cjs.use(popper);
    const cy = cytoscape_cjs({
        style: [],
        wheelSensitivity: 0.4,
        maxZoom: 2,
    });
    cy.mount(bgpContainer);
    /**
     * --- HACKY ---
     * Allow events not involving buttons to work on cytoscape when it's in a shadow dom.
     * They don't work due to shadow dom event's retargeting
     * Cytoscape listen to events on window object. When the event reach window due to bubbling,
     * cytoscape handler for mouse movement handles it but event target appear to be the
     * custom component and not the canvas due to retargeting, therefore listeners are not triggered.
     * workaround found here: https://github.com/cytoscape/cytoscape.js/issues/2081
     */
    cy.on('render', () => {
        try {
            cy.renderer().hoverData.capture = true;
        }
        catch (_a) { }
    });
    let displayedNameType;
    let language;
    function setStateDisplayedNameType(newDisplayNameType) {
        displayedNameType = newDisplayNameType || displayedNameType;
    }
    function getDisplayedNameType() { return displayedNameType; }
    function setLanguage(newLanguage) {
        language = newLanguage || language;
    }
    function getLanguage() { return language; }

    const { GscapeWidget: GscapeWidget$1, GscapeHeader } = grapholscape.UI;
    /**
     * Widget extending base grapholscape widget which uses Lit-element inside
     */
    class QueryGraphWidget extends GscapeWidget$1 {
        constructor(bgpContainer) {
            super();
            this.bgpContainer = bgpContainer;
            this.collapsible = true;
            this.draggable = true;
            this.header = new GscapeHeader('Query Graph', rdfLogo);
            //super.makeDraggable()
        }
        static get styles() {
            let super_styles = super.styles;
            let colors = super_styles[1];
            return [
                super_styles[0],
                r$2 `
        :host {
          width: calc(50%);
          position: absolute;
          left: 50%;
          top: 100%;
          transform: translate(-50%, calc(-100% - 10px));
        }

        .widget-body {
          height: 300px;
          margin:0;
          border-top: none;
          border-bottom: 1px solid var(--theme-gscape-shadows, ${colors.shadows});
          border-radius: inherit;
          border-bottom-left-radius:0;
          border-bottom-right-radius:0;
        }
      `
            ];
        }
        render() {
            return $ `
      <div class="widget-body">${this.bgpContainer}</div>
      ${this.header}
    `;
        }
        firstUpdated() {
            super.firstUpdated();
            this.header.invertIcons();
            super.makeDraggableHeadTitle();
            this.hide();
        }
        createRenderRoot() {
            const root = super.createRenderRoot();
            root.addEventListener('mouseover', e => {
                /**
                 * --- HACKY ---
                 * Allow events not involving buttons to work on cytoscape when it's in a shadow dom.
                 * They don't work due to shadow dom event's retargeting
                 * Cytoscape listen to events on window object. When the event reach window due to bubbling,
                 * cytoscape handler for mouse movement handles it but event target appear to be the
                 * custom component and not the canvas due to retargeting, therefore listeners are not triggered.
                 * workaround found here: https://github.com/cytoscape/cytoscape.js/issues/2081
                 */
                try {
                    cy.renderer().hoverData.capture = true;
                }
                catch (_a) { }
            });
            return root;
        }
        blur() { }
    }
    customElements.define('query-graph', QueryGraphWidget);

    var DisplayedNameType;
    (function (DisplayedNameType) {
        DisplayedNameType["full"] = "iri";
        DisplayedNameType["prefixed"] = "prefixedIri";
        DisplayedNameType["label"] = "labels";
    })(DisplayedNameType || (DisplayedNameType = {}));

    /**
     * Get an elem by its id
     * @param elemID the node/edge ID
     * @returns a cytoscape representation of the element or null if it does not exist
     */
    function getElementById(elemID) {
        const elem = cy.$id(elemID);
        return elem.empty() ? null : elem;
    }
    function getElements() {
        return cy.elements();
    }

    /**!
    * tippy.js v6.3.7
    * (c) 2017-2021 atomiks
    * MIT License
    */
    var BOX_CLASS = "tippy-box";
    var CONTENT_CLASS = "tippy-content";
    var BACKDROP_CLASS = "tippy-backdrop";
    var ARROW_CLASS = "tippy-arrow";
    var SVG_ARROW_CLASS = "tippy-svg-arrow";
    var TOUCH_OPTIONS = {
      passive: true,
      capture: true
    };
    var TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO() {
      return document.body;
    };

    function hasOwnProperty(obj, key) {
      return {}.hasOwnProperty.call(obj, key);
    }
    function getValueAtIndexOrReturn(value, index, defaultValue) {
      if (Array.isArray(value)) {
        var v = value[index];
        return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
      }

      return value;
    }
    function isType(value, type) {
      var str = {}.toString.call(value);
      return str.indexOf('[object') === 0 && str.indexOf(type + "]") > -1;
    }
    function invokeWithArgsOrReturn(value, args) {
      return typeof value === 'function' ? value.apply(void 0, args) : value;
    }
    function debounce(fn, ms) {
      // Avoid wrapping in `setTimeout` if ms is 0 anyway
      if (ms === 0) {
        return fn;
      }

      var timeout;
      return function (arg) {
        clearTimeout(timeout);
        timeout = setTimeout(function () {
          fn(arg);
        }, ms);
      };
    }
    function removeProperties(obj, keys) {
      var clone = Object.assign({}, obj);
      keys.forEach(function (key) {
        delete clone[key];
      });
      return clone;
    }
    function splitBySpaces(value) {
      return value.split(/\s+/).filter(Boolean);
    }
    function normalizeToArray(value) {
      return [].concat(value);
    }
    function pushIfUnique(arr, value) {
      if (arr.indexOf(value) === -1) {
        arr.push(value);
      }
    }
    function unique(arr) {
      return arr.filter(function (item, index) {
        return arr.indexOf(item) === index;
      });
    }
    function getBasePlacement(placement) {
      return placement.split('-')[0];
    }
    function arrayFrom(value) {
      return [].slice.call(value);
    }
    function removeUndefinedProps(obj) {
      return Object.keys(obj).reduce(function (acc, key) {
        if (obj[key] !== undefined) {
          acc[key] = obj[key];
        }

        return acc;
      }, {});
    }

    function div() {
      return document.createElement('div');
    }
    function isElement(value) {
      return ['Element', 'Fragment'].some(function (type) {
        return isType(value, type);
      });
    }
    function isNodeList(value) {
      return isType(value, 'NodeList');
    }
    function isMouseEvent(value) {
      return isType(value, 'MouseEvent');
    }
    function isReferenceElement(value) {
      return !!(value && value._tippy && value._tippy.reference === value);
    }
    function getArrayOfElements(value) {
      if (isElement(value)) {
        return [value];
      }

      if (isNodeList(value)) {
        return arrayFrom(value);
      }

      if (Array.isArray(value)) {
        return value;
      }

      return arrayFrom(document.querySelectorAll(value));
    }
    function setTransitionDuration(els, value) {
      els.forEach(function (el) {
        if (el) {
          el.style.transitionDuration = value + "ms";
        }
      });
    }
    function setVisibilityState(els, state) {
      els.forEach(function (el) {
        if (el) {
          el.setAttribute('data-state', state);
        }
      });
    }
    function getOwnerDocument(elementOrElements) {
      var _element$ownerDocumen;

      var _normalizeToArray = normalizeToArray(elementOrElements),
          element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body


      return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;
    }
    function isCursorOutsideInteractiveBorder(popperTreeData, event) {
      var clientX = event.clientX,
          clientY = event.clientY;
      return popperTreeData.every(function (_ref) {
        var popperRect = _ref.popperRect,
            popperState = _ref.popperState,
            props = _ref.props;
        var interactiveBorder = props.interactiveBorder;
        var basePlacement = getBasePlacement(popperState.placement);
        var offsetData = popperState.modifiersData.offset;

        if (!offsetData) {
          return true;
        }

        var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;
        var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;
        var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;
        var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;
        var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
        var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
        var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
        var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
        return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
      });
    }
    function updateTransitionEndListener(box, action, listener) {
      var method = action + "EventListener"; // some browsers apparently support `transition` (unprefixed) but only fire
      // `webkitTransitionEnd`...

      ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
        box[method](event, listener);
      });
    }
    /**
     * Compared to xxx.contains, this function works for dom structures with shadow
     * dom
     */

    function actualContains(parent, child) {
      var target = child;

      while (target) {
        var _target$getRootNode;

        if (parent.contains(target)) {
          return true;
        }

        target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;
      }

      return false;
    }

    var currentInput = {
      isTouch: false
    };
    var lastMouseMoveTime = 0;
    /**
     * When a `touchstart` event is fired, it's assumed the user is using touch
     * input. We'll bind a `mousemove` event listener to listen for mouse input in
     * the future. This way, the `isTouch` property is fully dynamic and will handle
     * hybrid devices that use a mix of touch + mouse input.
     */

    function onDocumentTouchStart() {
      if (currentInput.isTouch) {
        return;
      }

      currentInput.isTouch = true;

      if (window.performance) {
        document.addEventListener('mousemove', onDocumentMouseMove);
      }
    }
    /**
     * When two `mousemove` event are fired consecutively within 20ms, it's assumed
     * the user is using mouse input again. `mousemove` can fire on touch devices as
     * well, but very rarely that quickly.
     */

    function onDocumentMouseMove() {
      var now = performance.now();

      if (now - lastMouseMoveTime < 20) {
        currentInput.isTouch = false;
        document.removeEventListener('mousemove', onDocumentMouseMove);
      }

      lastMouseMoveTime = now;
    }
    /**
     * When an element is in focus and has a tippy, leaving the tab/window and
     * returning causes it to show again. For mouse users this is unexpected, but
     * for keyboard use it makes sense.
     * TODO: find a better technique to solve this problem
     */

    function onWindowBlur() {
      var activeElement = document.activeElement;

      if (isReferenceElement(activeElement)) {
        var instance = activeElement._tippy;

        if (activeElement.blur && !instance.state.isVisible) {
          activeElement.blur();
        }
      }
    }
    function bindGlobalEventListeners() {
      document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);
      window.addEventListener('blur', onWindowBlur);
    }

    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
    var isIE11 = isBrowser ? // @ts-ignore
    !!window.msCrypto : false;

    function createMemoryLeakWarning(method) {
      var txt = method === 'destroy' ? 'n already-' : ' ';
      return [method + "() was called on a" + txt + "destroyed instance. This is a no-op but", 'indicates a potential memory leak.'].join(' ');
    }
    function clean(value) {
      var spacesAndTabs = /[ \t]{2,}/g;
      var lineStartWithSpaces = /^[ \t]*/gm;
      return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();
    }

    function getDevMessage(message) {
      return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\uD83D\uDC77\u200D This is a development-only message. It will be removed in production.\n  ");
    }

    function getFormattedMessage(message) {
      return [getDevMessage(message), // title
      'color: #00C584; font-size: 1.3em; font-weight: bold;', // message
      'line-height: 1.5', // footer
      'color: #a6a095;'];
    } // Assume warnings and errors never have the same message

    var visitedMessages;

    {
      resetVisitedMessages();
    }

    function resetVisitedMessages() {
      visitedMessages = new Set();
    }
    function warnWhen(condition, message) {
      if (condition && !visitedMessages.has(message)) {
        var _console;

        visitedMessages.add(message);

        (_console = console).warn.apply(_console, getFormattedMessage(message));
      }
    }
    function errorWhen(condition, message) {
      if (condition && !visitedMessages.has(message)) {
        var _console2;

        visitedMessages.add(message);

        (_console2 = console).error.apply(_console2, getFormattedMessage(message));
      }
    }
    function validateTargets(targets) {
      var didPassFalsyValue = !targets;
      var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;
      errorWhen(didPassFalsyValue, ['tippy() was passed', '`' + String(targets) + '`', 'as its targets (first) argument. Valid types are: String, Element,', 'Element[], or NodeList.'].join(' '));
      errorWhen(didPassPlainObject, ['tippy() was passed a plain object which is not supported as an argument', 'for virtual positioning. Use props.getReferenceClientRect instead.'].join(' '));
    }

    var pluginProps = {
      animateFill: false,
      followCursor: false,
      inlinePositioning: false,
      sticky: false
    };
    var renderProps = {
      allowHTML: false,
      animation: 'fade',
      arrow: true,
      content: '',
      inertia: false,
      maxWidth: 350,
      role: 'tooltip',
      theme: '',
      zIndex: 9999
    };
    var defaultProps = Object.assign({
      appendTo: TIPPY_DEFAULT_APPEND_TO,
      aria: {
        content: 'auto',
        expanded: 'auto'
      },
      delay: 0,
      duration: [300, 250],
      getReferenceClientRect: null,
      hideOnClick: true,
      ignoreAttributes: false,
      interactive: false,
      interactiveBorder: 2,
      interactiveDebounce: 0,
      moveTransition: '',
      offset: [0, 10],
      onAfterUpdate: function onAfterUpdate() {},
      onBeforeUpdate: function onBeforeUpdate() {},
      onCreate: function onCreate() {},
      onDestroy: function onDestroy() {},
      onHidden: function onHidden() {},
      onHide: function onHide() {},
      onMount: function onMount() {},
      onShow: function onShow() {},
      onShown: function onShown() {},
      onTrigger: function onTrigger() {},
      onUntrigger: function onUntrigger() {},
      onClickOutside: function onClickOutside() {},
      placement: 'top',
      plugins: [],
      popperOptions: {},
      render: null,
      showOnCreate: false,
      touch: true,
      trigger: 'mouseenter focus',
      triggerTarget: null
    }, pluginProps, renderProps);
    var defaultKeys = Object.keys(defaultProps);
    var setDefaultProps = function setDefaultProps(partialProps) {
      /* istanbul ignore else */
      {
        validateProps(partialProps, []);
      }

      var keys = Object.keys(partialProps);
      keys.forEach(function (key) {
        defaultProps[key] = partialProps[key];
      });
    };
    function getExtendedPassedProps(passedProps) {
      var plugins = passedProps.plugins || [];
      var pluginProps = plugins.reduce(function (acc, plugin) {
        var name = plugin.name,
            defaultValue = plugin.defaultValue;

        if (name) {
          var _name;

          acc[name] = passedProps[name] !== undefined ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;
        }

        return acc;
      }, {});
      return Object.assign({}, passedProps, pluginProps);
    }
    function getDataAttributeProps(reference, plugins) {
      var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
        plugins: plugins
      }))) : defaultKeys;
      var props = propKeys.reduce(function (acc, key) {
        var valueAsString = (reference.getAttribute("data-tippy-" + key) || '').trim();

        if (!valueAsString) {
          return acc;
        }

        if (key === 'content') {
          acc[key] = valueAsString;
        } else {
          try {
            acc[key] = JSON.parse(valueAsString);
          } catch (e) {
            acc[key] = valueAsString;
          }
        }

        return acc;
      }, {});
      return props;
    }
    function evaluateProps(reference, props) {
      var out = Object.assign({}, props, {
        content: invokeWithArgsOrReturn(props.content, [reference])
      }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));
      out.aria = Object.assign({}, defaultProps.aria, out.aria);
      out.aria = {
        expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,
        content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content
      };
      return out;
    }
    function validateProps(partialProps, plugins) {
      if (partialProps === void 0) {
        partialProps = {};
      }

      if (plugins === void 0) {
        plugins = [];
      }

      var keys = Object.keys(partialProps);
      keys.forEach(function (prop) {
        var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
        var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`

        if (didPassUnknownProp) {
          didPassUnknownProp = plugins.filter(function (plugin) {
            return plugin.name === prop;
          }).length === 0;
        }

        warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", 'a plugin, forgot to pass it in an array as props.plugins.', '\n\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' '));
      });
    }

    var innerHTML = function innerHTML() {
      return 'innerHTML';
    };

    function dangerouslySetInnerHTML(element, html) {
      element[innerHTML()] = html;
    }

    function createArrowElement(value) {
      var arrow = div();

      if (value === true) {
        arrow.className = ARROW_CLASS;
      } else {
        arrow.className = SVG_ARROW_CLASS;

        if (isElement(value)) {
          arrow.appendChild(value);
        } else {
          dangerouslySetInnerHTML(arrow, value);
        }
      }

      return arrow;
    }

    function setContent(content, props) {
      if (isElement(props.content)) {
        dangerouslySetInnerHTML(content, '');
        content.appendChild(props.content);
      } else if (typeof props.content !== 'function') {
        if (props.allowHTML) {
          dangerouslySetInnerHTML(content, props.content);
        } else {
          content.textContent = props.content;
        }
      }
    }
    function getChildren(popper) {
      var box = popper.firstElementChild;
      var boxChildren = arrayFrom(box.children);
      return {
        box: box,
        content: boxChildren.find(function (node) {
          return node.classList.contains(CONTENT_CLASS);
        }),
        arrow: boxChildren.find(function (node) {
          return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
        }),
        backdrop: boxChildren.find(function (node) {
          return node.classList.contains(BACKDROP_CLASS);
        })
      };
    }
    function render$2(instance) {
      var popper = div();
      var box = div();
      box.className = BOX_CLASS;
      box.setAttribute('data-state', 'hidden');
      box.setAttribute('tabindex', '-1');
      var content = div();
      content.className = CONTENT_CLASS;
      content.setAttribute('data-state', 'hidden');
      setContent(content, instance.props);
      popper.appendChild(box);
      box.appendChild(content);
      onUpdate(instance.props, instance.props);

      function onUpdate(prevProps, nextProps) {
        var _getChildren = getChildren(popper),
            box = _getChildren.box,
            content = _getChildren.content,
            arrow = _getChildren.arrow;

        if (nextProps.theme) {
          box.setAttribute('data-theme', nextProps.theme);
        } else {
          box.removeAttribute('data-theme');
        }

        if (typeof nextProps.animation === 'string') {
          box.setAttribute('data-animation', nextProps.animation);
        } else {
          box.removeAttribute('data-animation');
        }

        if (nextProps.inertia) {
          box.setAttribute('data-inertia', '');
        } else {
          box.removeAttribute('data-inertia');
        }

        box.style.maxWidth = typeof nextProps.maxWidth === 'number' ? nextProps.maxWidth + "px" : nextProps.maxWidth;

        if (nextProps.role) {
          box.setAttribute('role', nextProps.role);
        } else {
          box.removeAttribute('role');
        }

        if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
          setContent(content, instance.props);
        }

        if (nextProps.arrow) {
          if (!arrow) {
            box.appendChild(createArrowElement(nextProps.arrow));
          } else if (prevProps.arrow !== nextProps.arrow) {
            box.removeChild(arrow);
            box.appendChild(createArrowElement(nextProps.arrow));
          }
        } else if (arrow) {
          box.removeChild(arrow);
        }
      }

      return {
        popper: popper,
        onUpdate: onUpdate
      };
    } // Runtime check to identify if the render function is the default one; this
    // way we can apply default CSS transitions logic and it can be tree-shaken away

    render$2.$$tippy = true;

    var idCounter = 1;
    var mouseMoveListeners = []; // Used by `hideAll()`

    var mountedInstances = [];
    function createTippy(reference, passedProps) {
      var props = evaluateProps(reference, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================
      // 🔒 Private members
      // ===========================================================================

      var showTimeout;
      var hideTimeout;
      var scheduleHideAnimationFrame;
      var isVisibleFromClick = false;
      var didHideDueToDocumentMouseDown = false;
      var didTouchMove = false;
      var ignoreOnFirstUpdate = false;
      var lastTriggerEvent;
      var currentTransitionEndListener;
      var onFirstUpdate;
      var listeners = [];
      var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);
      var currentTarget; // ===========================================================================
      // 🔑 Public members
      // ===========================================================================

      var id = idCounter++;
      var popperInstance = null;
      var plugins = unique(props.plugins);
      var state = {
        // Is the instance currently enabled?
        isEnabled: true,
        // Is the tippy currently showing and not transitioning out?
        isVisible: false,
        // Has the instance been destroyed?
        isDestroyed: false,
        // Is the tippy currently mounted to the DOM?
        isMounted: false,
        // Has the tippy finished transitioning in?
        isShown: false
      };
      var instance = {
        // properties
        id: id,
        reference: reference,
        popper: div(),
        popperInstance: popperInstance,
        props: props,
        state: state,
        plugins: plugins,
        // methods
        clearDelayTimeouts: clearDelayTimeouts,
        setProps: setProps,
        setContent: setContent,
        show: show,
        hide: hide,
        hideWithInteractivity: hideWithInteractivity,
        enable: enable,
        disable: disable,
        unmount: unmount,
        destroy: destroy
      }; // TODO: Investigate why this early return causes a TDZ error in the tests —
      // it doesn't seem to happen in the browser

      /* istanbul ignore if */

      if (!props.render) {
        {
          errorWhen(true, 'render() function has not been supplied.');
        }

        return instance;
      } // ===========================================================================
      // Initial mutations
      // ===========================================================================


      var _props$render = props.render(instance),
          popper = _props$render.popper,
          onUpdate = _props$render.onUpdate;

      popper.setAttribute('data-tippy-root', '');
      popper.id = "tippy-" + instance.id;
      instance.popper = popper;
      reference._tippy = instance;
      popper._tippy = instance;
      var pluginsHooks = plugins.map(function (plugin) {
        return plugin.fn(instance);
      });
      var hasAriaExpanded = reference.hasAttribute('aria-expanded');
      addListeners();
      handleAriaExpandedAttribute();
      handleStyles();
      invokeHook('onCreate', [instance]);

      if (props.showOnCreate) {
        scheduleShow();
      } // Prevent a tippy with a delay from hiding if the cursor left then returned
      // before it started hiding


      popper.addEventListener('mouseenter', function () {
        if (instance.props.interactive && instance.state.isVisible) {
          instance.clearDelayTimeouts();
        }
      });
      popper.addEventListener('mouseleave', function () {
        if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {
          getDocument().addEventListener('mousemove', debouncedOnMouseMove);
        }
      });
      return instance; // ===========================================================================
      // 🔒 Private methods
      // ===========================================================================

      function getNormalizedTouchSettings() {
        var touch = instance.props.touch;
        return Array.isArray(touch) ? touch : [touch, 0];
      }

      function getIsCustomTouchBehavior() {
        return getNormalizedTouchSettings()[0] === 'hold';
      }

      function getIsDefaultRenderFn() {
        var _instance$props$rende;

        // @ts-ignore
        return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);
      }

      function getCurrentTarget() {
        return currentTarget || reference;
      }

      function getDocument() {
        var parent = getCurrentTarget().parentNode;
        return parent ? getOwnerDocument(parent) : document;
      }

      function getDefaultTemplateChildren() {
        return getChildren(popper);
      }

      function getDelay(isShow) {
        // For touch or keyboard input, force `0` delay for UX reasons
        // Also if the instance is mounted but not visible (transitioning out),
        // ignore delay
        if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {
          return 0;
        }

        return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
      }

      function handleStyles(fromHide) {
        if (fromHide === void 0) {
          fromHide = false;
        }

        popper.style.pointerEvents = instance.props.interactive && !fromHide ? '' : 'none';
        popper.style.zIndex = "" + instance.props.zIndex;
      }

      function invokeHook(hook, args, shouldInvokePropsHook) {
        if (shouldInvokePropsHook === void 0) {
          shouldInvokePropsHook = true;
        }

        pluginsHooks.forEach(function (pluginHooks) {
          if (pluginHooks[hook]) {
            pluginHooks[hook].apply(pluginHooks, args);
          }
        });

        if (shouldInvokePropsHook) {
          var _instance$props;

          (_instance$props = instance.props)[hook].apply(_instance$props, args);
        }
      }

      function handleAriaContentAttribute() {
        var aria = instance.props.aria;

        if (!aria.content) {
          return;
        }

        var attr = "aria-" + aria.content;
        var id = popper.id;
        var nodes = normalizeToArray(instance.props.triggerTarget || reference);
        nodes.forEach(function (node) {
          var currentValue = node.getAttribute(attr);

          if (instance.state.isVisible) {
            node.setAttribute(attr, currentValue ? currentValue + " " + id : id);
          } else {
            var nextValue = currentValue && currentValue.replace(id, '').trim();

            if (nextValue) {
              node.setAttribute(attr, nextValue);
            } else {
              node.removeAttribute(attr);
            }
          }
        });
      }

      function handleAriaExpandedAttribute() {
        if (hasAriaExpanded || !instance.props.aria.expanded) {
          return;
        }

        var nodes = normalizeToArray(instance.props.triggerTarget || reference);
        nodes.forEach(function (node) {
          if (instance.props.interactive) {
            node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');
          } else {
            node.removeAttribute('aria-expanded');
          }
        });
      }

      function cleanupInteractiveMouseListeners() {
        getDocument().removeEventListener('mousemove', debouncedOnMouseMove);
        mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
          return listener !== debouncedOnMouseMove;
        });
      }

      function onDocumentPress(event) {
        // Moved finger to scroll instead of an intentional tap outside
        if (currentInput.isTouch) {
          if (didTouchMove || event.type === 'mousedown') {
            return;
          }
        }

        var actualTarget = event.composedPath && event.composedPath()[0] || event.target; // Clicked on interactive popper

        if (instance.props.interactive && actualContains(popper, actualTarget)) {
          return;
        } // Clicked on the event listeners target


        if (normalizeToArray(instance.props.triggerTarget || reference).some(function (el) {
          return actualContains(el, actualTarget);
        })) {
          if (currentInput.isTouch) {
            return;
          }

          if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {
            return;
          }
        } else {
          invokeHook('onClickOutside', [instance, event]);
        }

        if (instance.props.hideOnClick === true) {
          instance.clearDelayTimeouts();
          instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
          // currentTarget. This lets a tippy with `focus` trigger know that it
          // should not show

          didHideDueToDocumentMouseDown = true;
          setTimeout(function () {
            didHideDueToDocumentMouseDown = false;
          }); // The listener gets added in `scheduleShow()`, but this may be hiding it
          // before it shows, and hide()'s early bail-out behavior can prevent it
          // from being cleaned up

          if (!instance.state.isMounted) {
            removeDocumentPress();
          }
        }
      }

      function onTouchMove() {
        didTouchMove = true;
      }

      function onTouchStart() {
        didTouchMove = false;
      }

      function addDocumentPress() {
        var doc = getDocument();
        doc.addEventListener('mousedown', onDocumentPress, true);
        doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
        doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
        doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
      }

      function removeDocumentPress() {
        var doc = getDocument();
        doc.removeEventListener('mousedown', onDocumentPress, true);
        doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
        doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
        doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
      }

      function onTransitionedOut(duration, callback) {
        onTransitionEnd(duration, function () {
          if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
            callback();
          }
        });
      }

      function onTransitionedIn(duration, callback) {
        onTransitionEnd(duration, callback);
      }

      function onTransitionEnd(duration, callback) {
        var box = getDefaultTemplateChildren().box;

        function listener(event) {
          if (event.target === box) {
            updateTransitionEndListener(box, 'remove', listener);
            callback();
          }
        } // Make callback synchronous if duration is 0
        // `transitionend` won't fire otherwise


        if (duration === 0) {
          return callback();
        }

        updateTransitionEndListener(box, 'remove', currentTransitionEndListener);
        updateTransitionEndListener(box, 'add', listener);
        currentTransitionEndListener = listener;
      }

      function on(eventType, handler, options) {
        if (options === void 0) {
          options = false;
        }

        var nodes = normalizeToArray(instance.props.triggerTarget || reference);
        nodes.forEach(function (node) {
          node.addEventListener(eventType, handler, options);
          listeners.push({
            node: node,
            eventType: eventType,
            handler: handler,
            options: options
          });
        });
      }

      function addListeners() {
        if (getIsCustomTouchBehavior()) {
          on('touchstart', onTrigger, {
            passive: true
          });
          on('touchend', onMouseLeave, {
            passive: true
          });
        }

        splitBySpaces(instance.props.trigger).forEach(function (eventType) {
          if (eventType === 'manual') {
            return;
          }

          on(eventType, onTrigger);

          switch (eventType) {
            case 'mouseenter':
              on('mouseleave', onMouseLeave);
              break;

            case 'focus':
              on(isIE11 ? 'focusout' : 'blur', onBlurOrFocusOut);
              break;

            case 'focusin':
              on('focusout', onBlurOrFocusOut);
              break;
          }
        });
      }

      function removeListeners() {
        listeners.forEach(function (_ref) {
          var node = _ref.node,
              eventType = _ref.eventType,
              handler = _ref.handler,
              options = _ref.options;
          node.removeEventListener(eventType, handler, options);
        });
        listeners = [];
      }

      function onTrigger(event) {
        var _lastTriggerEvent;

        var shouldScheduleClickHide = false;

        if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
          return;
        }

        var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';
        lastTriggerEvent = event;
        currentTarget = event.currentTarget;
        handleAriaExpandedAttribute();

        if (!instance.state.isVisible && isMouseEvent(event)) {
          // If scrolling, `mouseenter` events can be fired if the cursor lands
          // over a new target, but `mousemove` events don't get fired. This
          // causes interactive tooltips to get stuck open until the cursor is
          // moved
          mouseMoveListeners.forEach(function (listener) {
            return listener(event);
          });
        } // Toggle show/hide when clicking click-triggered tooltips


        if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
          shouldScheduleClickHide = true;
        } else {
          scheduleShow(event);
        }

        if (event.type === 'click') {
          isVisibleFromClick = !shouldScheduleClickHide;
        }

        if (shouldScheduleClickHide && !wasFocused) {
          scheduleHide(event);
        }
      }

      function onMouseMove(event) {
        var target = event.target;
        var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper.contains(target);

        if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {
          return;
        }

        var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {
          var _instance$popperInsta;

          var instance = popper._tippy;
          var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;

          if (state) {
            return {
              popperRect: popper.getBoundingClientRect(),
              popperState: state,
              props: props
            };
          }

          return null;
        }).filter(Boolean);

        if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
          cleanupInteractiveMouseListeners();
          scheduleHide(event);
        }
      }

      function onMouseLeave(event) {
        var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;

        if (shouldBail) {
          return;
        }

        if (instance.props.interactive) {
          instance.hideWithInteractivity(event);
          return;
        }

        scheduleHide(event);
      }

      function onBlurOrFocusOut(event) {
        if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {
          return;
        } // If focus was moved to within the popper


        if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
          return;
        }

        scheduleHide(event);
      }

      function isEventListenerStopped(event) {
        return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;
      }

      function createPopperInstance() {
        destroyPopperInstance();
        var _instance$props2 = instance.props,
            popperOptions = _instance$props2.popperOptions,
            placement = _instance$props2.placement,
            offset = _instance$props2.offset,
            getReferenceClientRect = _instance$props2.getReferenceClientRect,
            moveTransition = _instance$props2.moveTransition;
        var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;
        var computedReference = getReferenceClientRect ? {
          getBoundingClientRect: getReferenceClientRect,
          contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
        } : reference;
        var tippyModifier = {
          name: '$$tippy',
          enabled: true,
          phase: 'beforeWrite',
          requires: ['computeStyles'],
          fn: function fn(_ref2) {
            var state = _ref2.state;

            if (getIsDefaultRenderFn()) {
              var _getDefaultTemplateCh = getDefaultTemplateChildren(),
                  box = _getDefaultTemplateCh.box;

              ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {
                if (attr === 'placement') {
                  box.setAttribute('data-placement', state.placement);
                } else {
                  if (state.attributes.popper["data-popper-" + attr]) {
                    box.setAttribute("data-" + attr, '');
                  } else {
                    box.removeAttribute("data-" + attr);
                  }
                }
              });
              state.attributes.popper = {};
            }
          }
        };
        var modifiers = [{
          name: 'offset',
          options: {
            offset: offset
          }
        }, {
          name: 'preventOverflow',
          options: {
            padding: {
              top: 2,
              bottom: 2,
              left: 5,
              right: 5
            }
          }
        }, {
          name: 'flip',
          options: {
            padding: 5
          }
        }, {
          name: 'computeStyles',
          options: {
            adaptive: !moveTransition
          }
        }, tippyModifier];

        if (getIsDefaultRenderFn() && arrow) {
          modifiers.push({
            name: 'arrow',
            options: {
              element: arrow,
              padding: 3
            }
          });
        }

        modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
        instance.popperInstance = createPopper(computedReference, popper, Object.assign({}, popperOptions, {
          placement: placement,
          onFirstUpdate: onFirstUpdate,
          modifiers: modifiers
        }));
      }

      function destroyPopperInstance() {
        if (instance.popperInstance) {
          instance.popperInstance.destroy();
          instance.popperInstance = null;
        }
      }

      function mount() {
        var appendTo = instance.props.appendTo;
        var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
        // it's directly after the reference element so the elements inside the
        // tippy can be tabbed to
        // If there are clipping issues, the user can specify a different appendTo
        // and ensure focus management is handled correctly manually

        var node = getCurrentTarget();

        if (instance.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === 'parent') {
          parentNode = node.parentNode;
        } else {
          parentNode = invokeWithArgsOrReturn(appendTo, [node]);
        } // The popper element needs to exist on the DOM before its position can be
        // updated as Popper needs to read its dimensions


        if (!parentNode.contains(popper)) {
          parentNode.appendChild(popper);
        }

        instance.state.isMounted = true;
        createPopperInstance();
        /* istanbul ignore else */

        {
          // Accessibility check
          warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, ['Interactive tippy element may not be accessible via keyboard', 'navigation because it is not directly after the reference element', 'in the DOM source order.', '\n\n', 'Using a wrapper <div> or <span> tag around the reference element', 'solves this by creating a new parentNode context.', '\n\n', 'Specifying `appendTo: document.body` silences this warning, but it', 'assumes you are using a focus management solution to handle', 'keyboard navigation.', '\n\n', 'See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity'].join(' '));
        }
      }

      function getNestedPopperTree() {
        return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));
      }

      function scheduleShow(event) {
        instance.clearDelayTimeouts();

        if (event) {
          invokeHook('onTrigger', [instance, event]);
        }

        addDocumentPress();
        var delay = getDelay(true);

        var _getNormalizedTouchSe = getNormalizedTouchSettings(),
            touchValue = _getNormalizedTouchSe[0],
            touchDelay = _getNormalizedTouchSe[1];

        if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {
          delay = touchDelay;
        }

        if (delay) {
          showTimeout = setTimeout(function () {
            instance.show();
          }, delay);
        } else {
          instance.show();
        }
      }

      function scheduleHide(event) {
        instance.clearDelayTimeouts();
        invokeHook('onUntrigger', [instance, event]);

        if (!instance.state.isVisible) {
          removeDocumentPress();
          return;
        } // For interactive tippies, scheduleHide is added to a document.body handler
        // from onMouseLeave so must intercept scheduled hides from mousemove/leave
        // events when trigger contains mouseenter and click, and the tip is
        // currently shown as a result of a click.


        if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {
          return;
        }

        var delay = getDelay(false);

        if (delay) {
          hideTimeout = setTimeout(function () {
            if (instance.state.isVisible) {
              instance.hide();
            }
          }, delay);
        } else {
          // Fixes a `transitionend` problem when it fires 1 frame too
          // late sometimes, we don't want hide() to be called.
          scheduleHideAnimationFrame = requestAnimationFrame(function () {
            instance.hide();
          });
        }
      } // ===========================================================================
      // 🔑 Public methods
      // ===========================================================================


      function enable() {
        instance.state.isEnabled = true;
      }

      function disable() {
        // Disabling the instance should also hide it
        // https://github.com/atomiks/tippy.js-react/issues/106
        instance.hide();
        instance.state.isEnabled = false;
      }

      function clearDelayTimeouts() {
        clearTimeout(showTimeout);
        clearTimeout(hideTimeout);
        cancelAnimationFrame(scheduleHideAnimationFrame);
      }

      function setProps(partialProps) {
        /* istanbul ignore else */
        {
          warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('setProps'));
        }

        if (instance.state.isDestroyed) {
          return;
        }

        invokeHook('onBeforeUpdate', [instance, partialProps]);
        removeListeners();
        var prevProps = instance.props;
        var nextProps = evaluateProps(reference, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {
          ignoreAttributes: true
        }));
        instance.props = nextProps;
        addListeners();

        if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
          cleanupInteractiveMouseListeners();
          debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);
        } // Ensure stale aria-expanded attributes are removed


        if (prevProps.triggerTarget && !nextProps.triggerTarget) {
          normalizeToArray(prevProps.triggerTarget).forEach(function (node) {
            node.removeAttribute('aria-expanded');
          });
        } else if (nextProps.triggerTarget) {
          reference.removeAttribute('aria-expanded');
        }

        handleAriaExpandedAttribute();
        handleStyles();

        if (onUpdate) {
          onUpdate(prevProps, nextProps);
        }

        if (instance.popperInstance) {
          createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,
          // and the nested ones get re-rendered first.
          // https://github.com/atomiks/tippyjs-react/issues/177
          // TODO: find a cleaner / more efficient solution(!)

          getNestedPopperTree().forEach(function (nestedPopper) {
            // React (and other UI libs likely) requires a rAF wrapper as it flushes
            // its work in one
            requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
          });
        }

        invokeHook('onAfterUpdate', [instance, partialProps]);
      }

      function setContent(content) {
        instance.setProps({
          content: content
        });
      }

      function show() {
        /* istanbul ignore else */
        {
          warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('show'));
        } // Early bail-out


        var isAlreadyVisible = instance.state.isVisible;
        var isDestroyed = instance.state.isDestroyed;
        var isDisabled = !instance.state.isEnabled;
        var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
        var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);

        if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
          return;
        } // Normalize `disabled` behavior across browsers.
        // Firefox allows events on disabled elements, but Chrome doesn't.
        // Using a wrapper element (i.e. <span>) is recommended.


        if (getCurrentTarget().hasAttribute('disabled')) {
          return;
        }

        invokeHook('onShow', [instance], false);

        if (instance.props.onShow(instance) === false) {
          return;
        }

        instance.state.isVisible = true;

        if (getIsDefaultRenderFn()) {
          popper.style.visibility = 'visible';
        }

        handleStyles();
        addDocumentPress();

        if (!instance.state.isMounted) {
          popper.style.transition = 'none';
        } // If flipping to the opposite side after hiding at least once, the
        // animation will use the wrong placement without resetting the duration


        if (getIsDefaultRenderFn()) {
          var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),
              box = _getDefaultTemplateCh2.box,
              content = _getDefaultTemplateCh2.content;

          setTransitionDuration([box, content], 0);
        }

        onFirstUpdate = function onFirstUpdate() {
          var _instance$popperInsta2;

          if (!instance.state.isVisible || ignoreOnFirstUpdate) {
            return;
          }

          ignoreOnFirstUpdate = true; // reflow

          void popper.offsetHeight;
          popper.style.transition = instance.props.moveTransition;

          if (getIsDefaultRenderFn() && instance.props.animation) {
            var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),
                _box = _getDefaultTemplateCh3.box,
                _content = _getDefaultTemplateCh3.content;

            setTransitionDuration([_box, _content], duration);
            setVisibilityState([_box, _content], 'visible');
          }

          handleAriaContentAttribute();
          handleAriaExpandedAttribute();
          pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the
          // popper has been positioned for the first time

          (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
          invokeHook('onMount', [instance]);

          if (instance.props.animation && getIsDefaultRenderFn()) {
            onTransitionedIn(duration, function () {
              instance.state.isShown = true;
              invokeHook('onShown', [instance]);
            });
          }
        };

        mount();
      }

      function hide() {
        /* istanbul ignore else */
        {
          warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hide'));
        } // Early bail-out


        var isAlreadyHidden = !instance.state.isVisible;
        var isDestroyed = instance.state.isDestroyed;
        var isDisabled = !instance.state.isEnabled;
        var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);

        if (isAlreadyHidden || isDestroyed || isDisabled) {
          return;
        }

        invokeHook('onHide', [instance], false);

        if (instance.props.onHide(instance) === false) {
          return;
        }

        instance.state.isVisible = false;
        instance.state.isShown = false;
        ignoreOnFirstUpdate = false;
        isVisibleFromClick = false;

        if (getIsDefaultRenderFn()) {
          popper.style.visibility = 'hidden';
        }

        cleanupInteractiveMouseListeners();
        removeDocumentPress();
        handleStyles(true);

        if (getIsDefaultRenderFn()) {
          var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),
              box = _getDefaultTemplateCh4.box,
              content = _getDefaultTemplateCh4.content;

          if (instance.props.animation) {
            setTransitionDuration([box, content], duration);
            setVisibilityState([box, content], 'hidden');
          }
        }

        handleAriaContentAttribute();
        handleAriaExpandedAttribute();

        if (instance.props.animation) {
          if (getIsDefaultRenderFn()) {
            onTransitionedOut(duration, instance.unmount);
          }
        } else {
          instance.unmount();
        }
      }

      function hideWithInteractivity(event) {
        /* istanbul ignore else */
        {
          warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hideWithInteractivity'));
        }

        getDocument().addEventListener('mousemove', debouncedOnMouseMove);
        pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
        debouncedOnMouseMove(event);
      }

      function unmount() {
        /* istanbul ignore else */
        {
          warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('unmount'));
        }

        if (instance.state.isVisible) {
          instance.hide();
        }

        if (!instance.state.isMounted) {
          return;
        }

        destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper
        // tree by default. This seems mainly for interactive tippies, but we should
        // find a workaround if possible

        getNestedPopperTree().forEach(function (nestedPopper) {
          nestedPopper._tippy.unmount();
        });

        if (popper.parentNode) {
          popper.parentNode.removeChild(popper);
        }

        mountedInstances = mountedInstances.filter(function (i) {
          return i !== instance;
        });
        instance.state.isMounted = false;
        invokeHook('onHidden', [instance]);
      }

      function destroy() {
        /* istanbul ignore else */
        {
          warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('destroy'));
        }

        if (instance.state.isDestroyed) {
          return;
        }

        instance.clearDelayTimeouts();
        instance.unmount();
        removeListeners();
        delete reference._tippy;
        instance.state.isDestroyed = true;
        invokeHook('onDestroy', [instance]);
      }
    }

    function tippy(targets, optionalProps) {
      if (optionalProps === void 0) {
        optionalProps = {};
      }

      var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
      /* istanbul ignore else */

      {
        validateTargets(targets);
        validateProps(optionalProps, plugins);
      }

      bindGlobalEventListeners();
      var passedProps = Object.assign({}, optionalProps, {
        plugins: plugins
      });
      var elements = getArrayOfElements(targets);
      /* istanbul ignore else */

      {
        var isSingleContentElement = isElement(passedProps.content);
        var isMoreThanOneReferenceElement = elements.length > 1;
        warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ['tippy() was passed an Element as the `content` prop, but more than', 'one tippy instance was created by this invocation. This means the', 'content element will only be appended to the last tippy instance.', '\n\n', 'Instead, pass the .innerHTML of the element, or use a function that', 'returns a cloned version of the element instead.', '\n\n', '1) content: element.innerHTML\n', '2) content: () => element.cloneNode(true)'].join(' '));
      }

      var instances = elements.reduce(function (acc, reference) {
        var instance = reference && createTippy(reference, passedProps);

        if (instance) {
          acc.push(instance);
        }

        return acc;
      }, []);
      return isElement(targets) ? instances[0] : instances;
    }

    tippy.defaultProps = defaultProps;
    tippy.setDefaultProps = setDefaultProps;
    tippy.currentInput = currentInput;

    // every time the popper is destroyed (i.e. a new target), removing the styles
    // and causing transitions to break for singletons when the console is open, but
    // most notably for non-transform styles being used, `gpuAcceleration: false`.

    Object.assign({}, applyStyles$1, {
      effect: function effect(_ref) {
        var state = _ref.state;
        var initialStyles = {
          popper: {
            position: state.options.strategy,
            left: '0',
            top: '0',
            margin: '0'
          },
          arrow: {
            position: 'absolute'
          },
          reference: {}
        };
        Object.assign(state.elements.popper.style, initialStyles.popper);
        state.styles = initialStyles;

        if (state.elements.arrow) {
          Object.assign(state.elements.arrow.style, initialStyles.arrow);
        } // intentionally return no cleanup function
        // return () => { ... }

      }
    });

    var sticky = {
      name: 'sticky',
      defaultValue: false,
      fn: function fn(instance) {
        var reference = instance.reference,
            popper = instance.popper;

        function getReference() {
          return instance.popperInstance ? instance.popperInstance.state.elements.reference : reference;
        }

        function shouldCheck(value) {
          return instance.props.sticky === true || instance.props.sticky === value;
        }

        var prevRefRect = null;
        var prevPopRect = null;

        function updatePosition() {
          var currentRefRect = shouldCheck('reference') ? getReference().getBoundingClientRect() : null;
          var currentPopRect = shouldCheck('popper') ? popper.getBoundingClientRect() : null;

          if (currentRefRect && areRectsDifferent(prevRefRect, currentRefRect) || currentPopRect && areRectsDifferent(prevPopRect, currentPopRect)) {
            if (instance.popperInstance) {
              instance.popperInstance.update();
            }
          }

          prevRefRect = currentRefRect;
          prevPopRect = currentPopRect;

          if (instance.state.isMounted) {
            requestAnimationFrame(updatePosition);
          }
        }

        return {
          onMount: function onMount() {
            if (instance.props.sticky) {
              updatePosition();
            }
          }
        };
      }
    };

    function areRectsDifferent(rectA, rectB) {
      if (rectA && rectB) {
        return rectA.top !== rectB.top || rectA.right !== rectB.right || rectA.bottom !== rectB.bottom || rectA.left !== rectB.left;
      }

      return true;
    }

    tippy.setDefaultProps({
      render: render$2
    });

    function addHasFilterIcon(node) {
        const dummyDomElement = document.createElement('div');
        const icon = new grapholscape.UI.GscapeButton(filter$1, 'Has Filters Defined');
        icon.style.position = 'relative';
        node['tippy'] = tippy(dummyDomElement, {
            content: icon,
            trigger: 'manuaul',
            hideOnClick: false,
            allowHTML: true,
            getReferenceClientRect: node.popperRef().getBoundingClientRect,
            sticky: "reference",
            appendTo: cy.container(),
            placement: "right",
            plugins: [sticky]
        });
        node['tippy'].show();
    }
    function removeHasFilterIcon(node) {
        var _a;
        (_a = node['tippy']) === null || _a === void 0 ? void 0 : _a.destroy();
        node['tippy'] = null;
    }
    function shouldHaveFilterIcon(node) {
        return (node === null || node === void 0 ? void 0 : node.data().hasFilters) && !node['tippy'];
    }
    function addOrRemoveFilterIcon(node) {
        if (shouldHaveFilterIcon(node)) {
            addHasFilterIcon(node);
        }
        else if (!(node === null || node === void 0 ? void 0 : node.data().hasFilters)) {
            removeHasFilterIcon(node);
        }
    }

    const klayLayoutOpt = {
        nodeDimensionsIncludeLabels: true,
        name: 'klay',
        fit: false,
        klay: {
            direction: 'RIGHT',
            spacing: 60,
            layoutHierarchy: true,
            fixedAlignment: 'BALANCED'
        }
    };
    function radialLayoutOpt(node) {
        const p = node.position();
        return {
            name: 'concentric',
            avoidOverlap: true,
            fit: false,
            concentric: (node) => {
                if (node.data('type') === EntityTypeEnum.Class) {
                    return 2; // higher value means center
                }
                else {
                    return 1; // lower value means outside center
                }
            },
            boundingBox: {
                x1: p.x - 2,
                x2: p.x + 2,
                y1: p.y - 2,
                y2: p.y + 2
            },
            levelWidth: () => { return 1; },
        };
    }

    const DISPLAYED_NAME = 'displayed_name';
    let elementClickCallback;
    cy.on('tap', 'node, edge', e => {
        // if it's an entity (class, data property or obj property)
        if (Object.values(EntityTypeEnum).includes(e.target.data().type)) {
            // if it's a child, the ID of the selected elem is the id of the parent
            let elemID = e.target.isChild() ? e.target.data().parent : e.target.id();
            elementClickCallback(elemID, e.target.data().iri);
        }
    });
    /**
     * Add a node to the query graph
     */
    function addNode(node) {
        var _a, _b;
        if (!node)
            return;
        const newNodeData = getDataObj(node);
        const existingNode = getElementById(node.id);
        let newNode;
        if (((_a = node.entities) === null || _a === void 0 ? void 0 : _a.length) > 1 && (existingNode === null || existingNode === void 0 ? void 0 : existingNode.children().length) !== ((_b = node.entities) === null || _b === void 0 ? void 0 : _b.length)) {
            node.entities.forEach((child, i) => {
                if (!existingNode.children().some(c => c[0].data('iri') === child.iri)) {
                    newNode = cy.add({ data: getDataObj(node, i) });
                    arrange();
                }
            });
            return;
        }
        if (!existingNode) {
            newNode = cy.add({ data: newNodeData });
            arrange();
        }
        else {
            existingNode.removeData();
            existingNode.data(newNodeData);
        }
        newNode = newNode || existingNode;
        addOrRemoveFilterIcon(newNode);
    }
    function addEdge(sourceNode, targetNode, edgeData) {
        let newEdgeData;
        //const sourceCyNode = getElementById(sourceNode.id)
        const targetCyNode = getElementById(targetNode.id);
        if (!targetCyNode) {
            addNode(targetNode);
        }
        newEdgeData = edgeData
            // get data object since it's an entity and set source and target
            ? getDataObj(edgeData)
            // not an entity (e.g. dataProperty connectors)
            : { id: `${sourceNode.id}-${targetNode.id}`, type: targetNode.entities[0].type };
        const cyEdge = getElementById(newEdgeData.id);
        // if edge is already in graph, make sure it has the right source and target
        // a join operation might have changed one of the two
        if (cyEdge) {
            cyEdge.move({
                source: sourceNode.id,
                target: targetNode.id
            });
            return; // no need to add a new edge
        }
        newEdgeData.source = sourceNode.id;
        newEdgeData.target = targetNode.id;
        cy.add({ data: newEdgeData });
        arrange();
    }
    /**
     * Remove a node from query graph, it will remove also all subsequent nodes
     */
    function removeNode(nodeID) {
        const node = getElementById(nodeID);
        if (!node || node.empty())
            return;
        removeHasFilterIcon(node);
        node.remove();
    }
    /**
     * Select a node given its id and return the node in cytoscape representation
     */
    function selectNode(nodeId) {
        getElements().removeClass('sparqling-selected');
        let cyNode = cy.$id(nodeId);
        cyNode.addClass('sparqling-selected');
        return cyNode;
    }
    /**
     * Arrange nodes in nice positions
     */
    function arrange() {
        const dataPropertySelector = `node[type = "${EntityTypeEnum.DataProperty}"]`;
        const classSelector = `node[type = "${EntityTypeEnum.Class}"]`;
        cy.layout(klayLayoutOpt).run();
        cy.$(classSelector).forEach(node => {
            const dataProperties = node.neighborhood(dataPropertySelector);
            if (!dataProperties.empty()) {
                let layoutConcentric = node.union(node.children()).union(dataProperties).layout(radialLayoutOpt(node));
                layoutConcentric.run();
            }
        });
        cy.fit();
        //dataPropSources.lock()
        // apply floaty layout only to dataproperties
        //cy.$(dataPropertySelector).closedNeighborhood().layout(radialLayoutOpt).run()
        //dataPropSources.unlock()
    }
    function renderOptionals(optionals) {
        clearOptionals();
        optionals === null || optionals === void 0 ? void 0 : optionals.forEach(opt => {
            opt.graphIds.forEach((elemId) => getElementById(elemId).data('optional', true));
        });
    }
    function clearOptionals() {
        getElements().filter('[?optional]').data('optional', false);
    }
    function updateDisplayedNames() {
        cy.elements(`[${DISPLAYED_NAME}]`).forEach(elem => {
            elem.data(DISPLAYED_NAME, getDisplayedName(elem.data()));
        });
    }
    function onElementClick$1(callback) {
        elementClickCallback = callback;
    }
    /**
     * Given a graphElement, build a data object for its instance in cytoscape
     * @param graphElement the graphElement you want to get data from
     * @param i the index of the entity you want are interested to
     * @returns the data object for cytoscape's instanc of the graphElement
     */
    function getDataObj(graphElement, i = null) {
        var _a;
        let data = Object.assign({}, graphElement.entities[i || 0]);
        if (i !== null) {
            data.parent = graphElement.id;
            data.id = `${graphElement.id}-${data.iri}`;
        }
        else {
            data.id = graphElement.id;
        }
        data.hasFilters = ((_a = getFiltersOnVariable(`?${graphElement.id}`)) === null || _a === void 0 ? void 0 : _a.length) > 0 ? true : false;
        data.displayed_name = getDisplayedName(data);
        return data;
    }
    function getDisplayedName(data) {
        let labels = data[DisplayedNameType.label];
        const displayedNameType = getDisplayedNameType();
        if (displayedNameType === DisplayedNameType.label && labels)
            // use first language found if the actual one is not available
            return labels[getLanguage] || labels[Object.keys(labels)[0]];
        else
            return data[displayedNameType] || data[DisplayedNameType.prefixed] || data[DisplayedNameType.full];
    }

    const { DataProperty, Class, ObjectProperty, InverseObjectProperty } = EntityTypeEnum;
    var getStylesheet = (theme) => {
        return [
            {
                selector: '*',
                style: {
                    'color': theme.label_color,
                    'border-width': '1px',
                }
            },
            {
                selector: `node[type = "${Class}"]`,
                style: {
                    'shape': 'round-rectangle',
                    'background-color': theme.concept,
                    'border-color': theme.concept_dark,
                    'text-halign': 'center',
                    'text-valign': 'center',
                    'width': '60px',
                },
            },
            {
                selector: 'edge',
                style: {
                    'line-style': 'solid',
                    'target-arrow-shape': 'triangle',
                    'target-arrow-fill': 'filled',
                    'curve-style': 'bezier',
                    'text-rotation': 'autorotate',
                    'text-margin-y': -10,
                    'width': 2,
                },
            },
            {
                selector: '[displayed_name]',
                style: {
                    'text-wrap': 'wrap',
                    'text-max-width': '50px',
                    'text-overflow-wrap': 'anywhere',
                    'label': 'data(displayed_name)',
                    'font-size': '8px'
                },
            },
            {
                selector: `edge[type = "${DataProperty}"]`,
                style: {
                    'curve-style': 'straight',
                    'target-arrow-shape': 'none',
                    'line-color': theme.attribute_dark,
                },
            },
            {
                selector: `node[type = "${DataProperty}"]`,
                style: {
                    'shape': 'ellipse',
                    'height': 10,
                    'width': 10,
                    'background-color': theme.attribute,
                    'border-color': theme.attribute_dark,
                },
            },
            {
                selector: `edge[type = "${ObjectProperty}"], edge[type = "${InverseObjectProperty}"]`,
                style: {
                    'line-color': theme.role_dark,
                    'target-arrow-color': theme.role_dark,
                    'text-max-width': '60px'
                }
            },
            {
                selector: '.cdnd-drop-target',
                style: {
                    'background-color': theme.primary_dark,
                    'border-style': 'dashed',
                    'border-color': theme.secondary,
                    'shape': 'round-rectangle',
                    'label': 'Release to join these classes',
                    'font-size': '12px',
                }
            },
            {
                selector: '[?optional]',
                style: {
                    'ghost': 'yes',
                    'ghost-offset-x': '5px',
                    'ghost-offset-y': '-5px',
                    'ghost-opacity': 0.3
                }
            },
            {
                selector: 'node[?optional]',
                style: {
                    'border-style': 'dashed',
                }
            },
            {
                selector: 'edge[?optional]',
                style: {
                    "line-style": 'dashed',
                }
            },
            //-----------------------------------------------------------
            // selected selector always last
            {
                selector: '.sparqling-selected',
                style: {
                    'underlay-color': 'green',
                    'underlay-padding': '10px',
                    'underlay-opacity': 0.5,
                }
            },
        ];
    };

    function setDisplayedNameType(newDisplayedNameType, newlanguage) {
        setStateDisplayedNameType(newDisplayedNameType);
        setLanguage(newlanguage);
        updateDisplayedNames();
    }
    function setTheme(newTheme) {
        cy.style(getStylesheet(newTheme));
    }

    let joinStartCondition;
    let joinAllowedCondition;
    let joinCallback;
    cy.on('cdnddrop', (e, parent, dropSibling) => {
        if (!parent.empty() && !dropSibling.empty()) {
            // avoid creating a compound node, we want to merge the two nodes
            dropSibling.move({ parent: null });
            e.target.move({ parent: null });
            parent.remove();
            joinCallback(e.target.id(), dropSibling.id());
        }
    });
    const compoundDragAndDropOption = {
        grabbedNode: (node) => joinStartCondition(node.id()),
        dropTarget: (dropTarget) => joinAllowedCondition(dropTarget === null || dropTarget === void 0 ? void 0 : dropTarget.id(), cy.$(':grabbed').id()),
        dropSibling: (dropTarget, grabbedNode) => joinAllowedCondition(dropTarget === null || dropTarget === void 0 ? void 0 : dropTarget.id(), cy.$(':grabbed').id())
    };
    cy.compoundDragAndDrop(compoundDragAndDropOption);
    function setJoinStartCondition(callback) {
        joinStartCondition = callback;
    }
    function setJoinAllowedCondition(callback) {
        joinAllowedCondition = callback;
    }
    function onJoin$1(callback) {
        joinCallback = callback;
    }

    class ContextMenuWidget extends grapholscape.UI.GscapeWidget {
        constructor() {
            super();
            this.commands = [];
        }
        static get properties() {
            const props = super.properties;
            props.commands = { attribute: false };
            return props;
        }
        static get styles() {
            let super_styles = super.styles;
            super_styles[1];
            return [
                super_styles[0],
                r$2 `
        :host {
          position: initial;
          display: flex;
          flex-direction: column;
          padding: 5px 0;
        }

        .command-entry {
          white-space: nowrap;
          cursor: pointer;
          padding: 5px 10px;

          display: flex;
          gap: 10px;
          align-items: center;
        }

        .command-icon {
          width: 19px;
          height: 19px;
        }

        .command-text {
          position: relative;
          top: 2px;
        }
      `
            ];
        }
        render() {
            return $ `
      ${this.commands.map(command => {
            return $ `
          <div class="command-entry highlight" @click=${command.select}>
            <span class="command-icon">${command.icon}</span>
            <span class="command-text">${command.content}</span>
          <div>
        `;
        })}
    `;
        }
    }
    customElements.define('query-graph-cxt-menu', ContextMenuWidget);

    let lang = 'en';
    const emptyQueryMsg = (l = lang) => {
        const text = { en: 'Empty Query' };
        return text[l];
    };
    const emptyHeadMsg = (l = lang) => {
        const text = {
            en: 'Your query will output everything'
        };
        return text[l];
    };
    const emptyHeadTipMsg = (l = lang) => {
        const text = {
            en: 'The query head is the output of your query\n\
and it seems like you have nothing in it yet.\n\n\
We don\'t think an empty query is what you want\n\
so your result now will be everything. \n\n\
You can choose what to see in output from the\n\
query graph, data properties (e.g. attributes)\n\
will automatically go in the query head.'
        };
        return text[l];
    };
    const tipWhy = (l = lang) => {
        const text = {
            en: 'Why?',
            it: 'Perché?'
        };
        return text[l];
    };
    const defaultSelectDialogTitle = (l = lang) => {
        const text = {
            en: 'Select Item',
            it: 'Seleziona un elemento'
        };
        return text[l];
    };
    const commandAddHeadText = (l = lang) => {
        const text = {
            en: 'Add to Query Head',
            it: 'Aggiungi in Query Head'
        };
        return text[l];
    };
    const commandDeleteText = (l = lang) => {
        const text = {
            en: 'Delete',
            it: 'Elimina'
        };
        return text[l];
    };
    const commandAddFilterText = (l = lang) => {
        const text = {
            en: 'Add Filter',
            it: 'Aggiungi Filtro'
        };
        return text[l];
    };
    const commandMakeOptionalText = (l = lang) => {
        const text = {
            en: 'Make Optional',
            it: 'Rendi Opzionale'
        };
        return text[l];
    };
    const commandRemoveOptionalText = (l = lang) => {
        const text = {
            en: 'Remove Optional',
            it: 'Rendi non Opzionale'
        };
        return text[l];
    };

    let addHeadCallback;
    let deleteCallback;
    let addFilterCallback;
    let seeFiltersCallback;
    let makeOptionalCallback;
    let removeOptionalCallback;
    let _ele;
    function getCommandsForElement(ele) {
        _ele = ele;
        const commands = [];
        if (ele.data().type === EntityTypeEnum.Class || ele.data().type === EntityTypeEnum.DataProperty) {
            commands.push(addHead);
            if (ele.data().hasFilters) {
                commands.push(seeFilters);
            }
            commands.push(addFilter);
        }
        if (ele.data().optional) {
            commands.push(removeOptional);
        }
        else {
            commands.push(makeOptional);
        }
        commands.push(del);
        return commands;
    }
    const addHead = {
        content: commandAddHeadText(),
        icon: tableColumnPlus,
        select: () => addHeadCallback(_ele.id())
    };
    const del = {
        content: commandDeleteText(),
        icon: rubbishBin,
        select: () => {
            deleteCallback(_ele.id());
        }
    };
    const addFilter = {
        content: commandAddFilterText(),
        icon: addFilter$1,
        select: () => addFilterCallback(_ele.id())
    };
    const makeOptional = {
        content: commandMakeOptionalText(),
        icon: questionMarkDashed,
        select: () => makeOptionalCallback(_ele.id())
    };
    const removeOptional = {
        content: commandRemoveOptionalText(),
        select: () => removeOptionalCallback(_ele.id())
    };
    const seeFilters = {
        content: 'See Filters',
        icon: editList,
        select: () => seeFiltersCallback(_ele.id())
    };
    function onAddHead$1(callback) {
        addHeadCallback = callback;
    }
    function onDelete$2(callback) {
        deleteCallback = callback;
    }
    function onAddFilter$2(callback) {
        addFilterCallback = callback;
    }
    function onSeeFilters$1(callback) {
        seeFiltersCallback = callback;
    }
    function onMakeOptional$1(callback) {
        makeOptionalCallback = callback;
    }
    function onRemoveOptional$1(callback) {
        removeOptionalCallback = callback;
    }

    // A dummy element must be passed as tippy only accepts dom element(s) as the target
    // https://atomiks.github.io/tippyjs/v6/constructor/#target-types
    const dummyDomElement = document.createElement('div');
    const cxtMenuWidget = new ContextMenuWidget();
    const cxtMenu = tippy(dummyDomElement, {
        trigger: 'manual',
        allowHTML: true,
        interactive: true,
        arrow: true,
        appendTo: () => cy.container().parentElement,
        placement: "bottom",
        // content prop can be used when the target is a single element https://atomiks.github.io/tippyjs/v6/constructor/#prop
        content: () => cxtMenuWidget,
    });
    function attachCxtMenuToElement(ref) {
        cxtMenu.setProps({ getReferenceClientRect: ref.getBoundingClientRect });
    }
    cy.on('cxttap', 'node', e => {
        attachCxtMenuToElement(e.target.popperRef());
        cxtMenuWidget.commands = getCommandsForElement(e.target);
        cxtMenu.show();
    });

    function onMakeOptional(callback) {
        onMakeOptional$1((elemId) => callback(getGraphElementByID(elemId)));
    }
    function onRemoveOptional(callback) {
        onRemoveOptional$1((elemId) => callback(getGraphElementByID(elemId)));
    }

    const widget = new QueryGraphWidget(bgpContainer);
    // inject tests for allowing joins into renderer, keep renderer logic agnostic
    setJoinStartCondition((nodeID) => canStartJoin(getGraphElementByID(nodeID)));
    setJoinAllowedCondition((node1ID, node2ID) => {
        let ge1 = getGraphElementByID(node1ID);
        let ge2 = getGraphElementByID(node2ID);
        return isJoinAllowed(ge1, ge2);
    });
    function selectElement(nodeIDorIRI) {
        let graphElem = getGraphElementByID(nodeIDorIRI) || getGraphElementByIRI(nodeIDorIRI);
        //bgp.unselect()
        if (graphElem) {
            selectNode(graphElem.id);
            // selectedGraphElement = graphElem
        }
        return graphElem;
    }
    function render$1(graphElem, parent, objectProperty) {
        var _a, _b;
        if (!graphElem)
            return;
        if (!isObjectProperty(graphElem)) {
            addNode(graphElem);
            if (parent) {
                // if the object property is inverse, switch source and target
                if (isInverseObjectProperty(objectProperty)) {
                    addEdge(graphElem, parent, objectProperty);
                }
                else {
                    addEdge(parent, graphElem, objectProperty);
                }
            }
        }
        // if the actual elem was an object property, it will be added at next step as edge
        // between this elem and its children
        if (isObjectProperty(graphElem)) {
            (_a = graphElem.children) === null || _a === void 0 ? void 0 : _a.forEach((childGraphElem) => render$1(childGraphElem, parent, graphElem));
        }
        else {
            (_b = graphElem.children) === null || _b === void 0 ? void 0 : _b.forEach((childGraphElem) => render$1(childGraphElem, graphElem));
        }
    }
    // remove elements not in query anymore, asynchronously
    function removeNodesNotInQuery() {
        let deletedNodeIds = [];
        getElements().forEach(elem => {
            if (elem.data('displayed_name') && !getGraphElementByID(elem.id())) {
                /**
                 * remove it if elem is:
                 *  - not a child
                 *  - a child and its iri is not in the query anymore
                 */
                if (!elem.isChild() || !getGraphElementByIRI(elem.data('iri'))) {
                    deletedNodeIds.push(elem.id());
                    removeNode(elem.id());
                }
            }
        });
        return deletedNodeIds;
    }
    function centerOnElem(graphElem) {
        let cyElem = getElementById(graphElem.id);
        centerOnElement(cyElem, cyElem.cy().maxZoom());
    }
    function getSelectedGraphElement() {
        var _a;
        return getGraphElementByID((_a = getElements().filter('.sparqling-selected')[0]) === null || _a === void 0 ? void 0 : _a.id());
    }
    // ******************************* GRAPH INTERACTION CALLBACKS ******************************* //
    function onAddHead(callback) {
        onAddHead$1(id => callback(getGraphElementByID(id)));
    }
    function onDelete$1(callback) {
        onDelete$2(id => {
            callback(getGraphElementByID(id));
            cxtMenu.hide();
        });
    }
    function onAddFilter$1(callback) {
        onAddFilter$2(id => {
            callback(getGraphElementByID(id));
        });
    }
    function onSeeFilters(callback) {
        onSeeFilters$1(id => {
            callback(getGraphElementByID(id));
        });
    }
    function onJoin(callback) {
        onJoin$1((node1ID, node2ID) => {
            let graphElem1 = getGraphElementByID(node1ID);
            let graphElem2 = getGraphElementByID(node2ID);
            callback(graphElem1, graphElem2);
        });
    }
    function onElementClick(callback) {
        onElementClick$1((id, iri) => callback(getGraphElementByID(id), iri));
    }
    function isIriInQueryGraph(iri) {
        return getGraphElementByIRI(iri) ? true : false;
    }

    var queryGraph = /*#__PURE__*/Object.freeze({
        __proto__: null,
        widget: widget,
        selectElement: selectElement,
        render: render$1,
        removeNodesNotInQuery: removeNodesNotInQuery,
        centerOnElem: centerOnElem,
        getSelectedGraphElement: getSelectedGraphElement,
        onAddHead: onAddHead,
        onDelete: onDelete$1,
        onAddFilter: onAddFilter$1,
        onSeeFilters: onSeeFilters,
        onJoin: onJoin,
        onElementClick: onElementClick,
        isIriInQueryGraph: isIriInQueryGraph,
        setLanguage: setLanguage,
        renderOptionals: renderOptionals,
        setDisplayedNameType: setDisplayedNameType,
        setTheme: setTheme,
        onMakeOptional: onMakeOptional,
        onRemoveOptional: onRemoveOptional
    });

    function getFilterListTemplate(filterList, editFilterCallback, deleteFilterCallback) {
        return $ `
    ${filterList === null || filterList === void 0 ? void 0 : filterList.map(filter => {
        var _a, _b, _c;
        const editButton = new grapholscape.UI.GscapeButton(edit, 'Edit Filter');
        editButton.onClick = () => editFilterCallback(filter.id);
        const deleteButton = new grapholscape.UI.GscapeButton(rubbishBin, 'Delete Filter');
        deleteButton.onClick = () => deleteFilterCallback(filter.id);
        deleteButton.classList.add('danger');
        return $ `
        <div class="filter">
          <div
            class="operator"
            title="${Object.keys(FilterExpressionOperatorEnum).find(k => FilterExpressionOperatorEnum[k] === filter.value.expression.operator)}"
          >
            ${filter.value.expression.operator}</div>
          <div class="parameters">
            ${(_c = (_b = (_a = filter.value) === null || _a === void 0 ? void 0 : _a.expression) === null || _b === void 0 ? void 0 : _b.parameters) === null || _c === void 0 ? void 0 : _c.map((param, index) => {
            if (index === 0)
                return null;
            return $ `
                <div class="parameter">
                  ${param.value}
                </div>
              `;
        })}
          </div>
          ${editButton}
          ${deleteButton}
        </div>
      `;
    })}
  `;
    }
    function getFilterListStyle() {
        return r$2 `
    .filter {
      display: flex;
      gap: 10px;
      align-items:center;
    }

    .parameters {
      display: flex;
      flex-direction: column;
      gap: 2px;
      flex-grow:2;
      min-width: 0;
      text-overflow: ellipsis;
      overflow: hidden;
    }

    .operator {
      font-weight:bold;
      font-size:110%;
    }

    .operator, .parameter {
      padding: 4px 6px;
      padding-bottom: 2px;
      border-radius: 6px;
      background-color: var(--theme-gscape-primary);
      color: var(--theme-gscape-on-primary);
      line-height: 1;
    }
  `;
    }

    const ALIAS_INPUT_ID = 'alias';
    class HeadElementComponent extends grapholscape.UI.GscapeWidget {
        constructor(headElement) {
            super();
            this.collapsible = true;
            this.renameCallback = (headElemntID, alias) => { };
            this.localizeCallback = (headElementId) => { };
            this.addFilterCallback = (headElementId) => { };
            this.editFilterCallback = (filterId) => { };
            this.deleteFilterCallback = (filterId) => { };
            this.headElement = headElement;
            this.deleteButton = new grapholscape.UI.GscapeButton(rubbishBin, 'Delete Field');
            this.deleteButton.onClick = () => { };
            this.deleteButton.classList.add('danger');
            this.toggleBodyButton = new grapholscape.UI.GscapeButton(grapholscape.UI.icons.triangle_down, 'Show More', grapholscape.UI.icons.triangle_up);
            this.toggleBodyButton.onClick = () => this.toggleBody();
            this.toggleBodyButton.style.boxShadow = 'none';
            this.localizeButton = new grapholscape.UI.GscapeButton(crosshair, 'Find in Query Graph');
            this.localizeButton.onClick = () => this.localizeCallback(this._id);
            this.addFilterButton = new grapholscape.UI.GscapeButton(addFilter$1, 'Add Filter');
            this.addFilterButton.onClick = () => this.addFilterCallback(this._id);
        }
        static get properties() {
            let props = super.properties;
            let new_props = {
                alias: { attribute: false },
                graphElementId: { attribute: false },
                function: { attribute: false },
                _entityType: { type: String },
            };
            return Object.assign(new_props, props);
        }
        static get styles() {
            let super_styles = super.styles;
            let colors = super_styles[1];
            return [
                super_styles[0],
                r$2 `
        :host {
          display:block;
          height: fit-content;
          margin:5px 2.5px 5px 0;
          padding: 5px;
          position: relative;
        }

        input {
          font-size: inherit;
          text-align: center;
          padding:2px;
          border-radius: 4px;
          border: solid 1px var(--theme-gscape-shadows, ${colors.shadows});
          color: inherit;
          font-weight: bold;
          width:100%;
          box-sizing: border-box;
          background-color: var(--theme-gscape-primary, ${colors.primary});
        }

        .input-wrapper, select {
          margin:5px 0;
        }

        #field-head, #field-head-input-action-wrapper {
          display: flex;
          align-items: center;
          gap: 10px;
        }

        #field-head-input-action-wrapper {
          flex-direction: column;
          flex-grow:2;
        }

        #field-head-input-action-wrapper > input {
          margin: 0;
          background-color: inherit;
          border: none;
        }

        #field-head-input-action-wrapper > input:hover {
          border: solid 1px var(--theme-gscape-shadows, ${colors.shadows});
        }

        #field-head-input-action-wrapper:hover > #actions {
          display: flex;
        }

        #field-head-input-action-wrapper > input:focus {
          background-color: var(--theme-gscape-primary, ${colors.primary});
        }

        gscape-button {
          position:initial;
          width: fit-content;
          --gscape-icon-size: 20px;
          background: inherit;
        }

        #actions {
          display: none;
          align-items: center;
          gap: 10px;
        }

        .danger:hover {
          color: var(--theme-gscape-error, ${colors.error});
        }

        #filters-list {
          display:flex;
          flex-direction: column;
          gap: 20px;
          padding: 10px 5px;
          border: solid 1px var(--theme-gscape-borders);
          border-radius: 6px;
        }

        #filters-title {
          font-weight: bold;
        }
      `,
                getFilterListStyle(),
            ];
        }
        render() {
            var _a;
            return $ `
      <div>
        <div id="field-head">
          <div id="field-head-input-action-wrapper">
            <input
              id="${ALIAS_INPUT_ID}"
              @focusout="${this.handleInputChange}"
              placeholder="${this.alias || this.graphElementId}"
              value="${this.alias || this.graphElementId}"
              title="Rename Field"
            />
            <div id="actions">
              ${this.localizeButton}
              ${this.deleteButton}
              ${this.addFilterButton}
            </div>
          </div>
          ${((_a = this.filters) === null || _a === void 0 ? void 0 : _a.length) > 0 ? this.toggleBodyButton : null}
        </div>
        <div id="field-body" class="widget-body hide">
          <span id="filters-title">Filters</span>
          <div id="filters-list">
            ${getFilterListTemplate(this.filters, this.editFilterCallback, this.deleteFilterCallback)}
          </div>
          <!-- ******************  SORT  ****************** -->
          <div class="section" style="text-align: center; margin-bottom:0">
            ${this.getSelect('sort', 'sort-select', 'sort', { asc: 'Ascending', desc: 'Descending' })}
          </div>
        </div>
      </div>
    `;
        }
        set headElement(newElement) {
            if (this._id === newElement.id)
                return;
            this._id = newElement.id;
            this.alias = newElement.alias;
            this.graphElementId = newElement.graphElementId;
            this.entityType = newElement['entityType'];
            this.dataType = newElement['dataType'] || 'Type';
            let types = {
                'class': 'concept',
                'objectProperty': 'role',
                'dataProperty': 'attribute'
            };
            let self = this;
            self.style.backgroundColor = `var(--theme-gscape-${types[this.entityType]})`;
            this.filters = getFiltersOnVariable(newElement.var);
        }
        getSelect(sectionName, name, defaultOpt, options) {
            const isDefaultAlreadySet = Object.values(options).includes(defaultOpt);
            return $ `
      <select name="${name}" sectionName="${sectionName}">
        ${isDefaultAlreadySet ? null : $ `<option selected>${defaultOpt}</option>`}
        ${Object.keys(options).map(key => {
            if (options[key] === defaultOpt)
                return $ `<option value="${key}" selected>${options[key]}</option>`;
            else
                return $ `<option value="${key}">${options[key]}</option>`;
        })}
          </select>
    `;
        }
        handleInputChange(evt) {
            let target = evt.currentTarget;
            if (this.alias !== target.value && target.value.length > 0 && target.value !== this.graphElementId) {
                this.renameCallback(this._id, target.value);
            }
            else {
                target.value = this.alias || this.graphElementId;
            }
        }
        onRename(callback) { this.renameCallback = callback; }
        onLocalize(callback) { this.localizeCallback = callback; }
        onFunctionSet(callback) { }
        onAddFilter(callback) {
            this.addFilterCallback = callback;
        }
        onEditFilter(callback) {
            this.editFilterCallback = callback;
        }
        onDeleteFilter(callback) {
            this.deleteFilterCallback = callback;
        }
    }
    customElements.define('head-element', HeadElementComponent);

    const { GscapeWidget } = grapholscape.UI;
    /**
     * Widget extending base grapholscape widget which uses Lit-element inside
     */
    class QueryHeadWidget extends GscapeWidget {
        constructor(headSlottedWidget) {
            super();
            this.headElements = [];
            this.collapsible = true;
            this.headSlottedWidget = headSlottedWidget;
        }
        static get properties() {
            let result = super.properties;
            result.headElements = { attribute: false };
            return result;
        }
        static get styles() {
            let super_styles = super.styles;
            let colors = super_styles[1];
            return [
                super_styles[0],
                r$2 `
        :host {
          position:initial;
          width: 300px;
          background: transparent;
          box-shadow: none;
          pointer-events:initial;
        }

        :host(:hover){
          box-shadow: none;
        }

        gscape-head {
          --title-text-align: 'left';
          border-radius: 8px;
        }

        gscape-head, #empty-head {
          background-color: var(--theme-gscape-primary, ${colors.primary});
          box-shadow: 0 2px 4px 0 var(--theme-gscape-shadows, ${colors.shadows});
        }

        .widget-body {
          margin:0;
          border-top: none;
          border-radius: inherit;
          border-bottom-left-radius:0;
          border-bottom-right-radius:0;
          max-height:350px;
        }

        #elems-wrapper {
          display: flex;
          flex-direction: column;
        }

        #buttons-tray > * {
          position: initial;
        }

        #buttons-tray {
          display: flex;
          align-items: center;
          justify-content: end;
          gap:10px;
          flex-grow: 3;
          padding: 0 10px;
        }

        #buttons-tray > gscape-button {
          --gscape-icon-size: 20px;
        }

        #empty-head {
          padding: 20px;
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: 20px;
          text-align: center;
        }

        #empty-head > .icon {
          --gscape-icon-size: 60px;
        }

        #empty-head-msg {
          font-weight: bold;
        }

        .tip {
          font-size: 90%;
          color: var(--theme-gscape-shadows, ${colors.shadows});
          border-bottom: dotted 2px;
          cursor: help;
        }

        .tip: hover {
          color:inherit;
        }
      `
            ];
        }
        render() {
            return $ `
      <div class="widget-body">
      ${this.headElements.length === 0
            ? $ `
          <div id="empty-head">
            <div class="icon">${asterisk}</div>
            <div id="empty-head-msg">${emptyHeadMsg()}</div>
            <div class="tip" title="${emptyHeadTipMsg()}">${tipWhy()}</div>
          </div>
          `
            : $ `
          <div style="overflow-y:scroll; max-height:inherit; scrollbar-width: inherit;">
          <div id="elems-wrapper">
            ${this.headElements.map(headElement => new HeadElementComponent(headElement))}
          </div>
          </div>
          `}
      </div>
      <gscape-head title="Query Head">
        <div id="buttons-tray">
          ${this.headSlottedWidget}
        </div>
      </gscape-head>
    `;
        }
        updated() {
            // register callbacks for all head elements
            this.shadowRoot.querySelectorAll('head-element').forEach((element) => {
                element.deleteButton.onClick = () => this.deleteElementCallback(element._id);
                element.onRename(this.renameElementCallback);
                element.onLocalize(this.localizeElementCallback);
                element.onAddFilter(this.addFilterCallback);
                element.onEditFilter(this.editFilterCallback);
                element.onDeleteFilter(this.deleteFilterCallback);
            });
        }
        firstUpdated() {
            super.firstUpdated();
            let self = this;
            self.header.left_icon = tableEye;
            this.hide();
        }
        /**
         * Register callback to execute on delete of a HeadElement
         * @param callback callback receiving the ID of the HeadElement to delete
         */
        onDelete(callback) {
            this.deleteElementCallback = callback;
        }
        /**
         * Register callback to execute on rename of a HeadElement (Set alias)
         * @param callback callback receiving the ID of the headElement to rename
         */
        onRename(callback) {
            this.renameElementCallback = callback;
        }
        /**
         * Register callback to execute on localization of a HeadElement
         * @param callback callback receiving the ID of the HeadElement to localize
         */
        onLocalize(callback) {
            this.localizeElementCallback = callback;
        }
        onAddFilter(callback) {
            this.addFilterCallback = callback;
        }
        onEditFilter(callback) {
            this.editFilterCallback = callback;
        }
        onDeleteFilter(callback) {
            this.deleteFilterCallback = callback;
        }
        blur() {
            // do not call super.blur() cause it will collapse query-head body.
            // This because each click on cytoscape background calls document.activeElement.blur(), 
            // so if any input field has focus, query-head will be the activeElement and will be
            // blurred at each tap. this way we only blur the input elements.
            this.shadowRoot.querySelectorAll('head-element').forEach(headElementComponent => {
                headElementComponent.shadowRoot.querySelectorAll('input').forEach(inputElement => inputElement.blur());
            });
        }
        hide() {
            super.hide();
        }
        show() {
            super.show();
        }
    }
    customElements.define('query-head', QueryHeadWidget);

    const sparqlButton = new grapholscape.UI.GscapeButton(code, 'SPARQL');
    const qhWidget = new QueryHeadWidget(sparqlButton);
    let head;
    function onDelete(callback) {
        qhWidget.onDelete(headElementId => callback(getHeadElementByID(headElementId)));
    }
    function onRename(callback) {
        qhWidget.onRename((headElementId, alias) => {
            callback(getHeadElementByID(headElementId), alias);
        });
    }
    function onLocalize(callback) {
        qhWidget.onLocalize(headElementId => callback(getHeadElementByID(headElementId)));
    }
    function getHeadElementByID(headElementId) {
        return head.find(headElement => headElement.id === headElementId);
    }
    function render(newHead = head) {
        qhWidget.headElements = newHead;
    }
    function setHead(newHhead) {
        head = newHhead;
    }
    function onAddFilter(callback) {
        qhWidget.onAddFilter((headElementId) => {
            let headElement = getHeadElementByID(headElementId);
            callback(headElement);
        });
    }
    function onEditFilter(callback) {
        qhWidget.onEditFilter(filterId => callback(filterId));
    }
    function onDeleteFilter(callback) {
        qhWidget.onDeleteFilter(filterId => callback(filterId));
    }

    var queryHead = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sparqlButton: sparqlButton,
        widget: qhWidget,
        onDelete: onDelete,
        onRename: onRename,
        onLocalize: onLocalize,
        getHeadElementByID: getHeadElementByID,
        render: render,
        setHead: setHead,
        onAddFilter: onAddFilter,
        onEditFilter: onEditFilter,
        onDeleteFilter: onDeleteFilter
    });

    // export function getfilterFormTemplate(
    //   operator: FilterExpressionOperatorEnum,
    //   parameters: VarOrConstant[],
    //   datatype: VarOrConstantConstantTypeEnum) {
    //   return getFormTemplate(operator, parameters, FilterExpressionOperatorEnum, datatype)
    // }
    // export function getFunctionFormTemplate(
    //   operator: FilterExpressionOperatorEnum,
    //   parameters: VarOrConstant[],
    //   datatype: VarOrConstantConstantTypeEnum) {
    //   return getFormTemplate(operator, parameters, FunctionNameEnum, datatype)
    // }
    function getFormTemplate(operator, parameters, operators, datatype) {
        const op = operator || "Operator";
        const dt = datatype || "Datatype";
        const addInputButton = new grapholscape.UI.GscapeButton(grapholscape.UI.icons.plus, "Add input value");
        addInputButton.id = "add-input-btn";
        return $ `
    <div class="form">
      <div class="selects-wrapper">
        <div id="select-operator">
          <label>Operator</label>
          ${getSelect(op, operators)}
        </div>
        <div id="select-datatype">
          <label>Datatype</label>
          ${getSelect(dt, VarOrConstantConstantTypeEnum)}
        </div>
      </div>
      <div class="inputs-wrapper">
        ${parameters === null || parameters === void 0 ? void 0 : parameters.map((parameter, index) => getInput(index, parameter.value, "Set input value"))}
        ${operator === FilterExpressionOperatorEnum.In ||
        operator === FilterExpressionOperatorEnum.NotIn
        ? $ `${addInputButton}`
        : null}
      </div>
    </div>
    <div id="message-tray"></div>
  `;
    }
    function getInput(index, value, titleText = '') {
        let placeholder = value || 'value';
        return $ `
    <input
      placeholder="${placeholder}" 
      value="${value}"
      title="${titleText}"
      index="${index + 1}"
    />`;
    }
    function getSelect(defaultOpt, options = {}) {
        const isDefaultAlreadySet = Object.values(options).includes(defaultOpt);
        return $ `
    <select>
      ${isDefaultAlreadySet ? null : $ `<option selected>${defaultOpt}</option>`}
      ${Object.keys(options).map(key => {
        if (options[key] === defaultOpt)
            return $ `<option value="${key}" selected>${options[key]}</option>`;
        else
            return $ `<option value="${key}">${options[key]}</option>`;
    })}
    </select>
  `;
    }

    const CLASS_FIELD_ERROR = r$2 `field-error`;
    var Modality;
    (function (Modality) {
        Modality["DEFINE"] = "Define";
        Modality["EDIT"] = "Edit";
    })(Modality || (Modality = {}));
    class FilterFunctionDialog extends grapholscape.UI.GscapeWidget {
        constructor() {
            super();
            this.saveButton = new grapholscape.UI.GscapeButton(checkmark, "Save");
            this.deleteButton = new grapholscape.UI.GscapeButton(rubbishBin, "Delete");
            this.modality = Modality.DEFINE;
            this.submitCallback = (id, op, parameters) => { };
            this.deleteCallback = (filterId) => { };
            this.saveButton.onClick = () => this.handleSubmit();
            this.deleteButton.onClick = () => this.deleteCallback(this._id);
            this.deleteButton.classList.add('danger');
        }
        static get properties() {
            let props = super.properties;
            // props.class = { attribute: false }
            // props.highlights = { attribute: false }
            props.operator = { attribute: false };
            props.parameters = { attribute: false };
            props.modality = { attribute: false };
            return props;
        }
        static get styles() {
            let super_styles = super.styles;
            let colors = super_styles[1];
            return [
                super_styles[0],
                r$2 `
        :host {
          position: absolute;
          top: 30%;
          left: 50%;
        }

        gscape-dialog {
          width: fit-content;
        }

        .dialog-body {
          display: flex;
          flex-direction: column;
          gap: 30px;
          align-items: center;
        }

        .form, .inputs-wrapper {
          display: flex;
          align-items: center;
          gap: 10px;
        }

        .selects-wrapper {
          align-self: start;
        }

        .inputs-wrapper {
          flex-direction: column;
        }

        .inputs-wrapper gscape-button {
          --gscape-icon-size: 18px;
        }

        gscape-button {
          position: initial;
          display: inline-block;
        }

        .${CLASS_FIELD_ERROR} {
          border-color: var(--theme-gscape-error);
        }

        #message-tray {
          font-size: 80%;
        }

        #message-tray > .correct-message {
          color: var(--theme-gscape-secondary);
        }

        #message-tray > .error-message {
          color: var(--theme-gscape-error);
        }

        .danger:hover {
          color: var(--theme-gscape-error, ${colors.error});
        }

        .bottom-buttons {
          display:flex;
          flex-direction:row-reverse;
          width: 100%;
          justify-content: space-between;
        }
      `
            ];
        }
        onSubmit(callback) {
            this.submitCallback = callback;
        }
        onDelete(callback) {
            this.deleteCallback = callback;
        }
        handleSubmit() {
            this.resetMessages();
            let errorsFound = false;
            if (!this.isOperatorValid) {
                errorsFound = true;
                this.selectOperatorElem.classList.add('field-error');
                this.addMessage('Select operator', 'error-message');
            }
            if (!this.isDatatypeValid) {
                errorsFound = true;
                this.selectDatatypeElem.classList.add('field-error');
                this.addMessage('Select datatype', 'error-message');
            }
            if (!this.isAnyValueDefined) {
                errorsFound = true;
                this.innerDialog.querySelector('input').classList.add('field-error');
                this.addMessage('Input value not set', 'error-message');
            }
            if (!errorsFound) {
                this.resetErrors();
                this.submitCallback(this._id, this.operator, this.parameters);
            }
        }
        firstUpdated() {
            super.firstUpdated();
            //let self = this as any
            // self.header.left_icon = 'lightbulbQuestion'
            //self.header.invertIcons()
            this.selectOperatorElem.onchange = (e) => this.onOperatorChange(e.currentTarget.value);
            this.selectDatatypeElem.onchange = (e) => this.onDatatypeChange(e.currentTarget.value);
        }
        onOperatorChange(value) {
            if (value !== FilterExpressionOperatorEnum.In && value !== FilterExpressionOperatorEnum.NotIn) {
                this.parameters.splice(2); // Only 2 parameters needed, discard others (remove from index=2 till end)
            }
            this.operator = FilterExpressionOperatorEnum[value];
            this.selectOperatorElem.classList.remove(CLASS_FIELD_ERROR.cssText);
        }
        onDatatypeChange(value) {
            this.variable.constantType = VarOrConstantConstantTypeEnum[value];
            this.selectDatatypeElem.classList.remove(CLASS_FIELD_ERROR.cssText);
        }
        onInputChange(index, value) {
            this.parameters[index].value = value;
            if (value.length > 0) {
                this.innerDialog.querySelector(`[index = "${index}"]`).classList.remove(CLASS_FIELD_ERROR);
            }
        }
        show() {
            super.show();
            this.resetErrors();
            this.innerDialog.show();
        }
        hide() {
            super.hide();
            this.innerDialog.hide();
        }
        addInputValue() {
            this.parameters.push({
                type: this.parametersType,
                value: "",
                constantType: this.datatype
            });
            this.requestUpdate();
        }
        updated() {
            var _a, _b;
            super.updated();
            (_a = this.inputElems) === null || _a === void 0 ? void 0 : _a.forEach((input) => input.onchange = (e) => this.onInputChange(input.getAttribute('index'), e.currentTarget.value));
            const addInputButton = this.innerDialog.querySelector('#add-input-btn');
            if (addInputButton)
                addInputButton.onClick = () => this.addInputValue();
            if (((_b = this.parametersIriOrConstants) === null || _b === void 0 ? void 0 : _b.length) <= 0)
                this.addInputValue();
        }
        addMessage(msg, msgType) {
            let msgDiv = document.createElement('div');
            msgDiv.classList.add(msgType);
            msgDiv.innerHTML = msg;
            this.messagesElem.appendChild(msgDiv);
        }
        resetMessages() {
            this.messagesElem.textContent = '';
        }
        resetErrors() {
            this.resetMessages();
            this.innerDialog.querySelectorAll(`.${CLASS_FIELD_ERROR}`).forEach((field) => {
                field.classList.remove(CLASS_FIELD_ERROR);
            });
        }
        setAsCorrect(customText) {
            const text = customText || 'Correctly Saved';
            this.addMessage(text, 'correct-message');
            setTimeout(() => this.resetMessages(), 2000);
        }
        get innerDialog() { return this.shadowRoot.querySelector('gscape-dialog'); }
        get selectOperatorElem() {
            return this.innerDialog.querySelector('#select-operator > select');
        }
        get selectDatatypeElem() {
            return this.innerDialog.querySelector('#select-datatype > select');
        }
        get inputElems() {
            return this.innerDialog.querySelectorAll('input');
        }
        get messagesElem() {
            return this.innerDialog.querySelector('#message-tray');
        }
        get variable() {
            var _a;
            return (_a = this.parameters) === null || _a === void 0 ? void 0 : _a.find(p => p.type === VarOrConstantTypeEnum.Var);
        }
        get datatype() { var _a; return (_a = this.variable) === null || _a === void 0 ? void 0 : _a.constantType; }
        get parametersIriOrConstants() {
            var _a;
            return (_a = this.parameters) === null || _a === void 0 ? void 0 : _a.filter(p => p.type !== VarOrConstantTypeEnum.Var);
        }
        get isOperatorValid() {
            let isFilterOperator = false;
            let isFunctionOperator = false;
            try {
                isFilterOperator = Object.values(FilterExpressionOperatorEnum).includes(this.operator);
            }
            catch (e) { }
            try {
                isFunctionOperator = Object.values(FunctionNameEnum).includes(this.operator);
            }
            catch (e) { }
            return isFilterOperator || isFunctionOperator;
        }
        get isDatatypeValid() {
            return Object.values(VarOrConstantConstantTypeEnum).includes(this.datatype);
        }
        get isAnyValueDefined() {
            return this.parameters.some(p => {
                return p.value && p.type !== VarOrConstantTypeEnum.Var;
            });
        }
    }

    class FilterDialog extends FilterFunctionDialog {
        constructor() {
            super();
            this.saveButton.label = "Save Filter";
        }
        render() {
            var _a;
            return $ `
      <gscape-dialog title="${this.modality} Filter for ${(_a = this.variable) === null || _a === void 0 ? void 0 : _a.value}">
        <div class="dialog-body">
        ${getFormTemplate(this.operator, this.parametersIriOrConstants, FilterExpressionOperatorEnum, this.datatype)}
        
        <div class="bottom-buttons">
          ${this.saveButton}
          ${this.modality === Modality.EDIT ? this.deleteButton : null}
        </div>
        </div>
      </gscape-dialog>
    `;
        }
    }
    customElements.define('sparqling-filter-dialog', FilterDialog);

    class FilterListDialog extends grapholscape.UI.GscapeWidget {
        constructor() {
            super();
            this.filterList = [];
            this.editFilterCallback = () => { };
            this.deleteFilterCallback = () => { };
        }
        static get properties() {
            let props = super.properties;
            props.filterList = { attribute: false };
            props.variable = { attribute: false };
            return props;
        }
        static get styles() {
            let super_styles = super.styles;
            let colors = super_styles[1];
            return [
                super_styles[0],
                r$2 `
        :host {
          position: absolute;
          top: 30%;
          left: 50%;
        }

        gscape-dialog {
          width: fit-content;
        }

        .dialog-body {
          display:flex;
          flex-direction: column;
          gap: 20px;
          padding: 10px 5px;
          border: solid 1px var(--theme-gscape-borders);
          border-radius: 6px;
        }

        gscape-button {
          position: initial;
        }

        .danger:hover {
          color: var(--theme-gscape-error, ${colors.error});
        }
      `,
                getFilterListStyle()
            ];
        }
        render() {
            return $ `
      <gscape-dialog title="Defined Filters for ${this.variable}">
        <div class="dialog-body">
          ${getFilterListTemplate(this.filterList, this.editFilterCallback, this.deleteFilterCallback)}
        </div>
      </gscape-dialog>
    `;
        }
        show() {
            super.show();
            this.innerDialog.show();
        }
        hide() {
            super.hide();
            this.innerDialog.hide();
        }
        onEdit(callback) {
            this.editFilterCallback = callback;
        }
        onDelete(callback) {
            this.deleteFilterCallback = callback;
        }
        get innerDialog() { return this.shadowRoot.querySelector('gscape-dialog'); }
    }
    customElements.define('sparqling-filter-list', FilterListDialog);

    class HighlightsList extends grapholscape.UI.GscapeWidget {
        constructor() {
            super();
            this.collapsible = true;
            this._onSuggestionSelection = (element) => { };
            this.class = '';
        }
        static get properties() {
            let props = super.properties;
            props.class = { attribute: false };
            props.highlights = { attribute: false };
            return props;
        }
        static get styles() {
            let super_styles = super.styles;
            let colors = super_styles[1];
            return [
                super_styles[0],
                r$2 `
        :host {
          position:initial;
          pointer-events:initial;
        }

        .widget-body {
          max-height: 400px;
        }

        .gscape-panel-title {
          padding-top:10px;
        }

        .list {
          display:flex;
          flex-direction:column;
        }

        .list-item {
          padding:5px 10px;
          cursor: pointer;
        }

        details {
          margin: 5px;
          padding: 5px;
          border-radius: 6px;
        }

        summary {
          font-weight: bold;
          margin: 5px;
          cursor:pointer;
        }

        #classes-panel {
          background-color: var(--theme-gscape-concept, ${colors.concept});
        }

        #object-properties-panel {
          background-color: var(--theme-gscape-role, ${colors.role});
        }

        #data-properties-panel {
          background-color: var(--theme-gscape-attribute, ${colors.attribute});
        }
      `
            ];
        }
        render() {
            return $ `
    <gscape-head title="Suggestions"></gscape-head>
    <div class="widget-body">
      <details id="object-properties-panel" open>
        <summary>Object Properties</summary>
        <div class="list">
          ${this.objectProperties.map((objectProperty, i) => {
            return $ `
              <span index="${i}" @click=${this.handleObjectPropertySelection} class="list-item highlight">
                ${objectProperty.objectPropertyIRI}
              </span>`;
        })}
        </div>
      </details>
      
      <details id="data-properties-panel" open>
        <summary>Data Properties</summary>
        <div id="data-properties-panel" class="list">
          ${this.dataProperties.map((dataProperty, i) => {
            return $ `
              <span index="${i}" @click=${this.handleDataPropertySelection} class="list-item highlight">
                ${dataProperty}
              </span>`;
        })}
        </div>
      </details>

      <details id="classes-panel">
        <summary>Classes</summary>
        <div class="list">
          ${this.classes.map((classItem, i) => {
            return $ `
              <span index="${i}" @click=${this.handleClassSelection} class="list-item highlight">
                ${classItem}
              </span>`;
        })}
        </div>
      </details>
    </div>
    `;
        }
        firstUpdated() {
            super.firstUpdated();
            let self = this;
            self.header.left_icon = lightbulbQuestion;
            self.header.invertIcons();
            this.hide();
        }
        handleClassSelection(e) {
            e.preventDefault();
            this._onSuggestionSelection(this.classes[e.target.getAttribute('index')]);
        }
        handleObjectPropertySelection(e) {
            e.preventDefault();
            this._onSuggestionSelection(this.objectProperties[e.target.getAttribute('index')].objectPropertyIRI);
        }
        handleDataPropertySelection(e) {
            e.preventDefault();
            this._onSuggestionSelection(this.dataProperties[e.target.getAttribute('index')]);
        }
        onSuggestionSelection(callback) {
            this._onSuggestionSelection = callback;
        }
        get objectProperties() {
            var _a;
            return ((_a = this.highlights) === null || _a === void 0 ? void 0 : _a.objectProperties) || [];
        }
        get classes() {
            var _a;
            return ((_a = this.highlights) === null || _a === void 0 ? void 0 : _a.classes) || [];
        }
        get dataProperties() {
            var _a;
            return ((_a = this.highlights) === null || _a === void 0 ? void 0 : _a.dataProperties) || [];
        }
        show() { super.show(); }
        hide() { super.hide(); }
        toggleBody() { super.toggleBody(); }
        showBody() { super.showBody(); }
        collapseBody() { super.collapseBody(); }
        blur() { }
    }
    customElements.define('sparqling-highlights-list', HighlightsList);

    class ListSelectionDialog extends grapholscape.UI.GscapeWidget {
        constructor(buildItemString) {
            super();
            this.list = [];
            this.title = defaultSelectDialogTitle();
            this.buildItemString = buildItemString || function (item) { return item; };
            this.hide();
        }
        static get properties() {
            let props = super.properties;
            props.list = { attribute: false };
            props.title = { attribute: false };
            return props;
        }
        static get styles() {
            let super_styles = super.styles;
            let colors = super_styles[1];
            return [
                super_styles[0],
                colors,
                r$2 `
        :host {
          position:absolute;
        }

        .list-item {
          cursor:pointer;
          padding:5px 10px;
        }

        .list-item:last-of-type {
          border-radius: inherit;
        }

        gscape-dialog > .widget-body {
          padding: 0;
        }
      `
            ];
        }
        render() {
            return $ `
    <gscape-dialog title="${this.title}">
      <div>
      ${this.list.map((item, i) => {
            return $ `
          <div class="list-item highlight" index="${i}" @click=${this.handleSelection}>
            <span>${this.buildItemString(item)}</span>
          </div>
        `;
        })}
      </div>
    </gscape-dialog>
  `;
        }
        onSelection(callback) {
            this.selectionCallback = callback;
        }
        onClose(callback) {
            this.closeCallback = callback;
        }
        handleSelection(e) {
            e.preventDefault();
            this.selectionCallback(this.list[e.currentTarget.getAttribute('index')]);
        }
        hide() { super.hide(); }
        show(position) {
            var _a;
            const self = this;
            if (position) {
                self.style.top = position.y + "px";
                self.style.left = position.x + "px";
            }
            super.show();
            (_a = self.shadowRoot.querySelector('gscape-dialog')) === null || _a === void 0 ? void 0 : _a.show();
        }
    }
    customElements.define('list-selection-dialog', ListSelectionDialog);

    class RelatedClassSelection extends ListSelectionDialog {
        constructor(buildItemString) {
            super(buildItemString);
            this.reverseArrow = false;
            this.class = '';
            this.objProperty = '';
        }
        static get properties() {
            let props = super.properties;
            props.class = { attribute: false };
            props.objProperty = { attribute: false };
            return props;
        }
        static get styles() {
            let super_styles = super.styles;
            let colors = super_styles[1];
            return [
                super_styles[0],
                r$2 `
        :host {
          min-width:100px;
          transform: translate(-100%, -50%);
        }

        .widget-body {
          padding:0;
          display:flex;
        }

        #left-panel {
          display:flex;
          align-items:center;
          padding:10px;
        }

        .class {
          padding: 10px 20px;
          border-radius: 6px;
          background-color: var(--theme-gscape-concept, ${colors.concept});
          border: solid 2px var(--theme-gscape-concept-dark, ${colors.concept_dark});
        }

        .arrow {
          margin: 10px;
          display: flex;
          align-items: center;
        }

        .arrow-reverse {
          margin: 10px;
          display: flex;
          align-items: center;
          flex-direction: row-reverse;
        }

        .arrow-tail, .arrow-body {
          height:8px;
          background-color: var(--theme-gscape-role-dark, ${colors.role_dark});
        }

        .arrow-tail {
          width: 20px;
          border-top-left-radius: 3px;
          border-bottom-left-radius: 3px;
          border-top-right-radius: 0px;
          border-bottom-right-radius:0px;
        }

        .arrow-reverse > .arrow-tail {
          border-top-right-radius: 3px;
          border-bottom-right-radius: 3px;
          border-top-left-radius: 0px;
          border-bottom-left-radius:0px;
        }

        .arrow-body {
          width: 15px;
        }

        .arrow-head {
          width: 0; 
          height: 0; 
          border-top: 15px solid transparent;
          border-bottom: 15px solid transparent;
          background-color: initial;
        }

        .arrow > .arrow-head {
          border-left: 15px solid var(--theme-gscape-role-dark, ${colors.role_dark});
          border-right: 0;
        }

        .arrow-reverse > .arrow-head {
          border-right: 15px solid var(--theme-gscape-role-dark, ${colors.role_dark});
          border-left: 0;
        }

        .obj-property {
          padding: 5px;
        }

        .list {
          display:flex;
          flex-direction: column;
          justify-content: center;
          max-height: 100px;
          overflow: auto;
          overflow-x: hidden;
        }

        .list-item {
          cursor:pointer;
          padding:5px 20px;
        }

        .list-item:last-of-type {
          border-radius: inherit;
        }

        .gscape-panel-title {
          padding-top:10px;
        }
        .
      `
            ];
        }
        render() {
            return $ `
    <div class="gscape-panel-title">Add Object Property</div>
    <div class="widget-body">
      <div id="left-panel">
        <span class="text class">${this.class}</span>
        <span class="arrow${this.reverse}">
          <span class="arrow-tail"></span>
          <span class="text obj-property">${this.objProperty}</span>
          <span class="arrow-body"></span>
          <span class="arrow-head"></span>
        </span>
      </div>
      <div id="right-panel" class="list">
        ${this.list.map((classItem, i) => {
            return $ `<span index="${i}" @click=${this.handleSelection} class="list-item highlight">${this.buildItemString(classItem)}</span>`;
        })}
      </div>
    </div>
    `;
        }
        get reverse() {
            return this.reverseArrow ? '-reverse' : null;
        }
    }
    customElements.define('sparqling-related-classes', RelatedClassSelection);

    class SparqlDialog extends grapholscape.UI.GscapeDialog {
        constructor() {
            super();
            this._text = emptyQueryMsg();
            this.copyButton = new grapholscape.UI.GscapeButton(copyContent, "Copy Query");
            this.copyButton.onClick = () => this.copyQuery();
        }
        static get styles() {
            let super_styles = super.styles;
            super_styles[1];
            return [
                super_styles[0],
                r$2 `
        :host {
          top:50%;
          left:50%;
          transform: translate(-50%, -50%);
        }

        .sparql-code {
          white-space: pre;
          padding: 10px 20px;
          cursor: copy;
          font-family: mono;
        }

        #buttons-tray > * {
          position: initial;
        }

        #buttons-tray {
          display: flex;
          align-items: center;
          justify-content: end;
          gap:10px;
          flex-grow: 3;
          padding: 0 20px;
        }

        #buttons-tray > gscape-button {
          --gscape-icon-size: 20px;
        }
      `,
            ];
        }
        render() {
            return $ `
      <gscape-head title="SPARQL" class="drag-handler">
        <div id="buttons-tray">
          ${this.copyButton}
        </div>
      </gscape-head>
      <div class="widget-body">
        <div class="sparql-code" title="Click to copy query" @click=${this.copyQuery}>${this.text.trim()}</div>
      </div>
    `;
        }
        copyQuery() {
            navigator.clipboard.writeText(this.text).then(_ => {
                console.log('query copied successfully');
            });
        }
        show() {
            super.show();
        }
        hide() {
            super.hide();
        }
        set text(text) {
            this._text = text;
        }
        get text() { return this._text; }
    }
    customElements.define('sparqling-sparql-dialog', SparqlDialog);

    class SparqlingStartRunButtons extends grapholscape.UI.GscapeWidget {
        constructor() {
            super();
            this.isEnabled = true;
            this.isSparqlingRunning = false;
            this.isLoading = false;
            this._onSparqlingStartCallback = () => { };
            this._onSparqlingStopCallback = () => { };
            this._onQueryRunCallback = () => { };
            this.startSparqlingButton = new grapholscape.UI.GscapeButton(sparqlingIcon, 'Start/Stop Sparqling');
            this.startSparqlingButton.onClick = () => this.handleStartButtonCLick();
            this.startSparqlingButton.style.position = 'inherit';
            this.startSparqlingButton.classList.add('flat');
            this.startSparqlingButton.asSwitch = true;
            this.startSparqlingButton.enabled = false;
            this.runQueryButton = new grapholscape.UI.GscapeButton(playOutlined, 'Run Query');
            this.runQueryButton.disbaled = true;
            this.runQueryButton.style.position = 'inherit';
            this.runQueryButton.classList.add('flat');
            this.runQueryButton.onClick = () => this._onQueryRunCallback();
            this.runQueryButton.enabled = false;
        }
        static get properties() {
            const superProps = super.properties;
            const newProps = {
                isSparqlingRunning: { type: Boolean, attribute: false },
                isLoading: { type: Boolean }
            };
            Object.assign(superProps, newProps);
            return superProps;
        }
        static get styles() {
            let super_styles = super.styles;
            let colors = super_styles[1];
            return [
                super_styles[0],
                r$2 `
        :host {
          order: 7;
          display:inline-block;
          position: initial;
          margin-top:10px;
        }

        #hr {
          height:1px;
          width:90%;
          margin: 0 auto;
          background-color: var(--theme-gscape-borders, ${colors.borders})
        }

        .lds-ripple {
          position: relative;
          width: var(--gscape-icon-size);
          height: var(--gscape-icon-size);
          padding: calc(var(--gscape-icon-size) * 0.2);
        }
        .lds-ripple div {
          position: absolute;
          border: 4px solid var(--theme-gscape-secondary);
          opacity: 1;
          border-radius: 50%;
          animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;
        }
        .lds-ripple div:nth-child(2) {
          animation-delay: -0.5s;
        }
        @keyframes lds-ripple {
          0% {
            top: calc(var(--gscape-icon-size) / 2);
            left: calc(var(--gscape-icon-size) / 2);
            width: 0;
            height: 0;
            opacity: 1;
          }
          100% {
            top: 0px;
            left: 0px;
            width: var(--gscape-icon-size);
            height: var(--gscape-icon-size);
            opacity: 0;
          }
        }
      `,
            ];
        }
        render() {
            return $ `
      ${this.runQueryButton}
      <div id="hr"></div>
      ${this.isLoading
            ? $ `<div class="lds-ripple"><div></div><div></div></div>`
            : this.startSparqlingButton}
    `;
        }
        show() {
            if (this.isEnabled)
                this.style.display = 'inline-block';
        }
        onSparqlingStart(callback) {
            this._onSparqlingStartCallback = callback;
        }
        onSparqlingStop(callback) {
            this._onSparqlingStopCallback = callback;
        }
        onQueryRun(callback) {
            this._onQueryRunCallback = callback;
        }
        handleStartButtonCLick() {
            this.isSparqlingRunning ? this._onSparqlingStopCallback() : this._onSparqlingStartCallback();
        }
        startLoadingAnimation() {
            this.isLoading = true;
        }
        stopLoadingAnimation() {
            this.isLoading = false;
        }
    }
    customElements.define('sparqling-start-run-buttons', SparqlingStartRunButtons);

    const sparqlDialog = new SparqlDialog();
    new ListSelectionDialog();
    const relatedClassDialog = new RelatedClassSelection();
    const highlightsList = new HighlightsList();
    const filterDialog = new FilterDialog();
    const filterListDialog = new FilterListDialog();
    const startRunButtons = new SparqlingStartRunButtons();

    let gscape;
    var getGscape = () => gscape;
    function setGrapholscapeInstance(grapholscape) {
        gscape = grapholscape;
    }
    function clearSelected() {
        gscape.ontology.diagrams.forEach((diagram) => {
            diagram.unselectAll();
        });
    }
    function isIriSelected(iri) {
        let sparqlingSelectedNode = gscape.renderer.cy.$('.sparqling-selected');
        if (sparqlingSelectedNode.empty())
            return false;
        else {
            const sparqlingSelectedIri = sparqlingSelectedNode.data().iri;
            return sparqlingSelectedIri.full === iri || sparqlingSelectedIri.prefixed === iri;
        }
    }

    /**
     * Select a node without firing cytoscape's selection event
     */
    function focusNodeByIRI(iri) {
        return __awaiter(this, void 0, void 0, function* () {
            const gscape = getGscape();
            let occurrences = gscape.ontology.getEntityOccurrences(iri);
            // find the first one in the actual diagram
            let node = occurrences.find((occ) => occ.data('diagram_id') === gscape.actualDiagramID);
            if (!node)
                node = occurrences[0];
            focusNode(node);
        });
    }
    function focusNodeByIdAndDiagram(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const gscape = getGscape();
            const cyNode = gscape.ontology.getElem(nodeId);
            if (cyNode) {
                focusNode(cyNode);
            }
        });
    }
    function focusNode(node) {
        return __awaiter(this, void 0, void 0, function* () {
            const gscape = getGscape();
            if ((node === null || node === void 0 ? void 0 : node.data('diagram_id')) !== gscape.actualDiagramID) {
                yield gscape.showDiagram(node.data('diagram_id'));
            }
            if (node) {
                centerOnElement(node, 1.5);
            }
        });
    }

    let actualHighlights = null;
    highlightsList.onSuggestionSelection(iri => focusNodeByIRI(iri));
    const getActualHighlights = () => actualHighlights;
    function highlightIRI(iri) {
        const gscape = getGscape();
        let nodes = gscape.ontology.getEntityOccurrences(iri);
        if (nodes) {
            nodes.forEach((n) => {
                n.addClass('highlighted');
            });
        }
    }
    function highlightSuggestions(clickedIRI) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!clickedIRI)
                return;
            resetHighlights();
            yield retrieveHighlights(clickedIRI);
            performHighlights(clickedIRI);
            highlightsList.highlights = transformHighlightsToPrefixedIRIs();
        });
    }
    function resetHighlights() {
        const gscape = getGscape();
        Object.values(gscape.ontologies).forEach((ontology) => {
            var _a;
            (_a = ontology === null || ontology === void 0 ? void 0 : ontology.diagrams) === null || _a === void 0 ? void 0 : _a.forEach((diagram) => {
                let cy = diagram === null || diagram === void 0 ? void 0 : diagram.cy;
                cy.$('.sparqling-selected').removeClass('sparqling-selected');
                cy.$('.highlighted').removeClass('highlighted');
                cy.$('.faded')
                    .removeClass('faded')
                    .selectify();
            });
        });
        actualHighlights = null;
        highlightsList.highlights = null;
    }
    function isHighlighted(iri) {
        var _a, _b, _c;
        // if ((actualHighlights as AxiosError).isAxiosError) return true
        return ((_a = actualHighlights === null || actualHighlights === void 0 ? void 0 : actualHighlights.classes) === null || _a === void 0 ? void 0 : _a.includes(iri)) ||
            ((_b = actualHighlights === null || actualHighlights === void 0 ? void 0 : actualHighlights.dataProperties) === null || _b === void 0 ? void 0 : _b.includes(iri)) ||
            ((_c = actualHighlights === null || actualHighlights === void 0 ? void 0 : actualHighlights.objectProperties) === null || _c === void 0 ? void 0 : _c.map(obj => obj.objectPropertyIRI).includes(iri));
    }
    function refreshHighlights() {
        let selectedGraphElem = getSelectedGraphElement$1();
        if (selectedGraphElem) {
            performHighlights(getIri(selectedGraphElem));
        }
    }
    function retrieveHighlights(iri) {
        return __awaiter(this, void 0, void 0, function* () {
            const ogApi = new OntologyGraphApi();
            actualHighlights = (yield ogApi.highligths(iri)).data;
        });
    }
    function performHighlights(clickedIRI) {
        var _a, _b, _c;
        const gscape = getGscape();
        (_a = actualHighlights.classes) === null || _a === void 0 ? void 0 : _a.forEach((iri) => highlightIRI(iri));
        (_b = actualHighlights.dataProperties) === null || _b === void 0 ? void 0 : _b.forEach((iri) => highlightIRI(iri));
        (_c = actualHighlights.objectProperties) === null || _c === void 0 ? void 0 : _c.forEach((o) => highlightIRI(o.objectPropertyIRI));
        // select all nodes having iri = clickedIRI
        gscape.ontology
            .getEntityOccurrences(clickedIRI)
            .forEach((node) => {
            if (node.data('diagram_id') === gscape.actualDiagramID)
                node.addClass('sparqling-selected');
        });
        const highlightedElems = gscape.renderer.cy.$('.highlighted, .sparqling-selected');
        const fadedElems = gscape.renderer.cy.elements().difference(highlightedElems);
        fadedElems.addClass('faded');
        fadedElems.unselectify();
    }
    function transformHighlightsToPrefixedIRIs() {
        var _a, _b, _c;
        let transformedHighlights = JSON.parse(JSON.stringify(actualHighlights));
        const ontology = getGscape().ontology;
        transformedHighlights.classes = (_a = transformedHighlights.classes) === null || _a === void 0 ? void 0 : _a.map(iri => getPrefixedIri(iri));
        transformedHighlights.dataProperties = (_b = transformedHighlights.dataProperties) === null || _b === void 0 ? void 0 : _b.map(iri => getPrefixedIri(iri));
        transformedHighlights.objectProperties = (_c = transformedHighlights.objectProperties) === null || _c === void 0 ? void 0 : _c.map(branch => {
            branch.objectPropertyIRI = getPrefixedIri(branch.objectPropertyIRI);
            return branch;
        });
        return transformedHighlights;
        function getPrefixedIri(iri) {
            const destructuredIRI = ontology.destructureIri(iri);
            if (destructuredIRI) {
                return destructuredIRI.prefixed;
            }
            else {
                return iri;
            }
        }
    }

    let _onRelatedClassSelection = (objectProperty, relatedClass) => { };
    function showRelatedClassesWidget(objProperty, position) {
        const actualHighlights = getActualHighlights();
        if (!actualHighlights || !isHighlighted(objProperty.data('iri').fullIri))
            return;
        const gscape = getGscape();
        // let result: { objPropertyFromApi: Branch; connectedClass: CollectionReturnValue } = {
        //   objPropertyFromApi: undefined,
        //   connectedClass: undefined
        // }
        let objPropertyFromApi = actualHighlights.objectProperties.find((o) => gscape.ontology.checkEntityIri(objProperty, o.objectPropertyIRI));
        if (!objPropertyFromApi.relatedClasses || objPropertyFromApi.relatedClasses.length <= 0) {
            return;
        }
        //listSelectionDialog.title = classSelectDialogTitle()
        // Use prefixed iri if possible, full iri as fallback
        relatedClassDialog.list = objPropertyFromApi.relatedClasses.map((iri) => {
            return gscape.ontology.destructureIri(iri)
                ? gscape.ontology.destructureIri(iri).prefixed
                : iri;
        });
        relatedClassDialog.class = getPrefixedIri(getSelectedGraphElement$1()) || getIri(getSelectedGraphElement$1());
        relatedClassDialog.objProperty = objProperty.data('iri').prefixed;
        relatedClassDialog.reverseArrow = !objPropertyFromApi.direct;
        relatedClassDialog.show(position);
        relatedClassDialog.onSelection((iri) => {
            try {
                // Prefer instance in actual diagram, first one as fallback
                let connectedClass = gscape.ontology
                    .getEntityOccurrences(iri).find(entity => entity.data().diagram_id === gscape.actualDiagramID)
                    || gscape.ontology.getEntityOccurrences(iri)[0];
                connectedClass.selectify();
                relatedClassDialog.hide();
                _onRelatedClassSelection(objPropertyFromApi, connectedClass);
            }
            catch (e) {
                console.error(e);
            }
        });
    }
    function hideRelatedClassesWidget() {
        relatedClassDialog.list = [];
        relatedClassDialog.hide();
    }
    function onRelatedClassSelection(callback) {
        _onRelatedClassSelection = callback;
    }

    /**
     * Search a value-domain node in the neighborhood of an Entity
     * @param iri the Entity IRI
     */
    function guessDataType(iri) {
        let gscape = getGscape();
        // search entities in the standard graphol ontologies because in simplified versions
        // datatype are not present
        let nodes = gscape.ontologies.default.getEntityOccurrences(iri);
        // for each node we have, find a range node leading to a datatype
        for (let node of nodes) {
            let valueDomainNodes = node
                .openNeighborhood(`[type = "${grapholscape.Type.RANGE_RESTRICTION}"]`)
                .openNeighborhood(`[type = "${grapholscape.Type.VALUE_DOMAIN}"]`);
            if (valueDomainNodes[0] && valueDomainNodes.length > 0) {
                let valueDomainType = valueDomainNodes[0].data().iri.prefixed; // xsd:(??)
                let key = Object.keys(VarOrConstantConstantTypeEnum).find(k => {
                    return VarOrConstantConstantTypeEnum[k] === valueDomainType;
                });
                if (key)
                    return VarOrConstantConstantTypeEnum[key];
            }
        }
    }
    function addStylesheet(cy, stylesheet) {
        stylesheet.forEach(styleObj => {
            cy.style().selector(styleObj.selector).style(styleObj.style);
        });
    }

    var sparqlingStyle = [
        {
            selector: 'node[shape = "ellipse"], .bubble',
            style: { 'underlay-shape': 'ellipse' }
        },
        {
            selector: '.sparqling-selected',
            style: {
                'underlay-color': 'green',
                'underlay-padding': '10px',
                'underlay-opacity': 0.5,
            }
        },
        {
            selector: '.highlighted',
            style: {
                'underlay-color': 'red',
                'underlay-padding': '10px',
                'underlay-opacity': 0.2,
            }
        },
        {
            selector: '.faded',
            style: {
                'opacity': 0.25,
            }
        }
    ];

    function showUI() {
        widget.show();
        qhWidget.show();
        highlightsList.show();
    }
    function hideUI() {
        widget.hide();
        qhWidget.hide();
        highlightsList.hide();
        sparqlDialog.hide();
        relatedClassDialog.hide();
        cxtMenu.hide();
        filterDialog.hide();
        filterListDialog.hide();
    }

    function getHeadElementWithDatatype(headElem) {
        let relatedGraphElem = getGraphElementByID(headElem.graphElementId);
        headElem['entityType'] = getEntityType(relatedGraphElem);
        headElem['dataType'] = headElem['entityType'] === EntityTypeEnum.DataProperty
            ? guessDataType(getIri(relatedGraphElem))
            : null;
        return headElem;
    }

    function onNewBody(newBody) {
        var _a;
        let body = setQueryBody(newBody);
        render$1(body.graph);
        const deletedNodeIds = removeNodesNotInQuery();
        deletedNodeIds.forEach(id => getOriginGrapholNodes().delete(id));
        renderOptionals(body.optionals);
        setHead(body.head);
        render((_a = body.head) === null || _a === void 0 ? void 0 : _a.map((headElem) => getHeadElementWithDatatype(headElem)));
        filterListDialog.filterList = getFiltersOnVariable('?' + filterListDialog.variable);
        sparqlDialog.text = (body === null || body === void 0 ? void 0 : body.sparql) ? body.sparql : emptyQueryMsg();
    }

    const { CONCEPT, OBJECT_PROPERTY, DATA_PROPERTY } = grapholscape.Type;
    let lastObjProperty;
    //let selectedGraphElement: GraphElement
    let isIriHighlighted;
    let iriInQueryGraph;
    let clickedIRI;
    const qgApi = QueryGraphBGPApiFactory();
    // const iriInQueryGraph = actualBody ? queryManager.getGraphElementByIRI(clickedIRI) : null
    function handleEntitySelection(cyEntity) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            let clickedIRI = cyEntity.data('iri').fullIri;
            const selectedGraphElement = getSelectedGraphElement$1();
            if (graphElementHasIri(selectedGraphElement, clickedIRI) && !lastObjProperty) {
                if (!isIriSelected(clickedIRI)) {
                    resetHighlights();
                    highlightSuggestions(clickedIRI);
                }
                return;
            }
            const gscape = getGscape();
            let newBody = null;
            switch (cyEntity.data('type')) {
                case OBJECT_PROPERTY: {
                    // let result = await handleObjectPropertySelection(cyEntity)
                    // if (result && result.connectedClass) {
                    //   gscape.centerOnNode(result.connectedClass.id(), 1.8)
                    // }
                    break;
                }
                case CONCEPT: {
                    newBody = yield handleConceptSelection(cyEntity);
                    if (newBody) {
                        // Get nodes not present in the old graph
                        const newGraphElements = getdiffNew((_a = getQueryBody()) === null || _a === void 0 ? void 0 : _a.graph, newBody.graph);
                        const newSelectedGraphElement = setOriginNode(cyEntity, newGraphElements);
                        resetHighlights();
                        highlightSuggestions(clickedIRI);
                        onNewBody(newBody);
                        // after onNewBody because we need to select the element after rendering phase
                        if (newSelectedGraphElement) {
                            // The node to select is the one having the clickedIri among the new nodes
                            setSelectedGraphElement(selectElement(newSelectedGraphElement.id));
                        }
                    }
                    break;
                }
                case DATA_PROPERTY: {
                    newBody = yield handleDataPropertySelection(cyEntity);
                    if (newBody) {
                        const newGraphElements = getdiffNew((_b = getQueryBody()) === null || _b === void 0 ? void 0 : _b.graph, newBody.graph);
                        setOriginNode(cyEntity, newGraphElements);
                        onNewBody(newBody);
                    }
                    break;
                }
            }
            gscape.unselectEntity();
        });
    }
    onRelatedClassSelection((branch, relatedClass) => {
        const gscape = getGscape();
        lastObjProperty = branch;
        gscape.centerOnNode(relatedClass.id());
    });
    function handleConceptSelection(cyEntity) {
        return __awaiter(this, void 0, void 0, function* () {
            getInitialInfo(cyEntity);
            let newQueryGraph;
            let actualBody = getQueryBody();
            /**
             * if it's not the first click,
             * the class is not highlighted,
             * it's not connected to a objectProperty
             * and it's not already in the queryGraph, then skip this click
             */
            if ((actualBody === null || actualBody === void 0 ? void 0 : actualBody.graph) && !isIriHighlighted && !lastObjProperty && !iriInQueryGraph) {
                //cyEntity.unselect()
                console.log('selection ignored for class ' + clickedIRI);
                return;
            }
            let selectedGraphElement = getSelectedGraphElement$1();
            try {
                if (lastObjProperty) {
                    // this comes after a selection of a object property
                    newQueryGraph = (yield qgApi.putQueryGraphObjectProperty(selectedGraphElement.id, "", lastObjProperty.objectPropertyIRI, clickedIRI, lastObjProperty.direct, actualBody)).data;
                }
                else if ((actualBody === null || actualBody === void 0 ? void 0 : actualBody.graph) && isIriHighlighted) {
                    newQueryGraph = (yield qgApi.putQueryGraphClass(selectedGraphElement.id, '', clickedIRI, actualBody)).data;
                }
                else if (!(actualBody === null || actualBody === void 0 ? void 0 : actualBody.graph)) {
                    // initial selection
                    newQueryGraph = (yield qgApi.getQueryGraph(clickedIRI)).data;
                }
            }
            catch (error) {
                console.error(error);
            }
            lastObjProperty = null;
            return newQueryGraph;
        });
    }
    function handleDataPropertySelection(cyEntity) {
        return __awaiter(this, void 0, void 0, function* () {
            getInitialInfo(cyEntity);
            if (!isIriHighlighted) {
                cyEntity.unselect();
                return null;
            }
            let newQueryGraph;
            const actualBody = getQueryBody();
            const selectedGraphElement = getSelectedGraphElement$1();
            if (isClass(selectedGraphElement)) {
                newQueryGraph = (yield qgApi.putQueryGraphDataProperty(selectedGraphElement.id, '', clickedIRI, actualBody)).data;
            }
            lastObjProperty = null;
            return newQueryGraph;
        });
    }
    function getInitialInfo(cyEntity) {
        clickedIRI = cyEntity.data('iri').fullIri;
        //selectedGraphElement = queryGraph.getSelectedGraphElement()
        isIriHighlighted = isHighlighted(clickedIRI);
        iriInQueryGraph = isIriInQueryGraph(clickedIRI);
    }
    /**
     * Find the GraphElement corresponding to the clicked entity and set entity as its origin Graphol node
     * @param cyEntity The clicked entity
     * @param graphElements Array of newly added graphElements
     * @returns The GraphElement corresponding to the clicked entity
     */
    function setOriginNode(cyEntity, graphElements) {
        let graphElement = graphElements === null || graphElements === void 0 ? void 0 : graphElements.find(ge => graphElementHasIri(ge, clickedIRI));
        if (graphElement) {
            getOriginGrapholNodes().set(graphElement.id + clickedIRI, cyEntity.id());
        }
        return graphElement;
    }

    function start () {
        if (isStandalone()) {
            startRunButtons.startLoadingAnimation();
            new StandaloneApi().standaloneOntologyUploadPost(getOntologyFile()).then(_ => {
                startSparqling();
                startRunButtons.stopLoadingAnimation();
            });
        }
        else {
            startSparqling();
        }
        function startSparqling() {
            init();
            showUI();
            startRunButtons.isSparqlingRunning = true;
            highlightSuggestions(getIri(getSelectedGraphElement$1()));
            core.onStart();
        }
    }
    function init() {
        const gscape = getGscape();
        addStylesheet(gscape.renderer.cy, sparqlingStyle);
        setHandlers(gscape.renderer.cy);
        gscape.onLanguageChange((newLanguage) => setLanguage(newLanguage));
        gscape.onEntityNameTypeChange((newNameType) => {
            setDisplayedNameType(newNameType, gscape.languages.selected);
        });
        gscape.onThemeChange((newTheme) => {
            setTheme(newTheme);
            addStylesheet(gscape.renderer.cy, sparqlingStyle);
        });
        gscape.onEntitySelection((cyEntity) => __awaiter(this, void 0, void 0, function* () {
            if (startRunButtons.isSparqlingRunning)
                handleEntitySelection(cyEntity);
        }));
        gscape.onDiagramChange(() => {
            setHandlers(gscape.renderer.cy);
            addStylesheet(gscape.renderer.cy, sparqlingStyle);
        });
        gscape.onRendererChange(() => __awaiter(this, void 0, void 0, function* () {
            addStylesheet(gscape.renderer.cy, sparqlingStyle);
            yield gscape.SimplifiedOntologyPromise;
            refreshHighlights();
        }));
    }
    function setHandlers(cy) {
        // [diplayed_name] select only nodes with a defined displayed name, 
        // avoid fake nodes (for inverse/nonInverse functional obj properties)
        const objPropertiesSelector = `[displayed_name][type = "${grapholscape.Type.OBJECT_PROPERTY}"]`;
        cy.on('mouseover', objPropertiesSelector, e => {
            if (startRunButtons.isSparqlingRunning)
                showRelatedClassesWidget(e.target, e.renderedPosition);
        });
        cy.on('mouseout', objPropertiesSelector, e => {
            if (startRunButtons.isSparqlingRunning)
                hideRelatedClassesWidget();
        });
    }

    function stop () {
        hideUI();
        clearSelected();
        resetHighlights();
        getGscape().widgets.ENTITY_DETAILS.hide();
        startRunButtons.isSparqlingRunning = false;
        core.onStop();
    }

    var core = {
        queryGraph: queryGraph,
        queryHead: queryHead,
        queryBody: getQueryBody(),
        startStopButton: startRunButtons.startSparqlingButton,
        runQueryButton: startRunButtons.runQueryButton,
        onQueryRun: (sparqlQuery) => { },
        onStop: () => { },
        onStart: () => { },
        start: start,
        stop: stop,
    };

    function newOptionalGraphElementId(graphElementId, queryGraph, classIri = '') {
      if (graphElementId !== 'PizzaBase0' || !queryGraph) {
        throw Error('Out of the stub!!!')
      }
      queryGraph.optionals = [
        {
          id: 0,
          graphIds: [
            'PizzaBase0', 'depth0', 'Food0'
          ]
        }
      ];

      return queryGraph
    }

    function removeOptionalGraphElementId(graphElementId, optionalId, queryGraph, classIri = '') {
      if (graphElementId === 'PizzaBase0' || graphElementId === 'depth0' || graphElementId === 'Food0') {
        let optToDelete = queryGraph.optionals.filter(opt => opt.graphIds.includes(graphElementId));

        optToDelete.forEach(opt => {
          queryGraph.optionals.splice(queryGraph.optionals.indexOf(opt), 1);
        });
        

        return queryGraph
      } 

      throw Error('Out of the stub!!!')
    }

    filterListDialog.onEdit((filterId) => showFilterDialogEditingMode(filterId));
    filterListDialog.onDelete((filterId) => { deleteFilter(filterId); });
    filterDialog.onSubmit((id, op, params) => __awaiter(void 0, void 0, void 0, function* () {
        const filterApi = QueryGraphFilterApiFactory();
        let newBody;
        const newFilter = {
            expression: {
                operator: op,
                parameters: params
            }
        };
        if (id === undefined || id === null) {
            // add filter
            id = addFilter$2(newFilter);
            newBody = (yield filterApi.newFilter(id, getQueryBody())).data;
            filterDialog._id = id;
            filterDialog.modality = Modality.EDIT;
        }
        else {
            updateFilter(id, newFilter);
            newBody = (yield filterApi.editFilter(id, getQueryBody())).data;
        }
        if (newBody) {
            onNewBody(newBody);
            filterDialog.setAsCorrect();
        }
    }));
    filterDialog.onDelete((filterId) => deleteFilter(filterId));
    function deleteFilter(filterId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filterId === null || filterId === undefined)
                return;
            removeFilter(filterId);
            const filterApi = QueryGraphFilterApiFactory();
            const newBody = (yield filterApi.removeFilter(filterId, getQueryBody())).data;
            if (newBody) {
                onNewBody(newBody);
                filterDialog._id = null;
                filterDialog.operator = null;
                filterDialog.parameters.splice(1);
                filterDialog.modality = Modality.DEFINE;
                filterDialog.setAsCorrect('Deleted correctly');
            }
        });
    }
    function showFilterDialogForVariable(graphElement) {
        const type = getEntityType(graphElement);
        if (type === EntityTypeEnum.Class) {
            filterDialog.parametersType = VarOrConstantTypeEnum.Iri;
        }
        else {
            filterDialog.parametersType = VarOrConstantTypeEnum.Constant;
        }
        filterDialog.modality = Modality.DEFINE;
        filterDialog._id = null;
        filterDialog.operator = null;
        filterDialog.parameters = [{
                type: VarOrConstantTypeEnum.Var,
                constantType: guessDataType(getIri(graphElement)),
                value: '?' + graphElement.id
            }];
        filterDialog.show();
        filterListDialog.hide();
    }
    function showFilterDialogEditingMode(filterId) {
        var _a, _b, _c, _d;
        const filter = getFilterById(filterId);
        filterDialog.modality = Modality.EDIT;
        filterDialog._id = filterId;
        filterDialog.operator = (_a = filter.expression) === null || _a === void 0 ? void 0 : _a.operator;
        filterDialog.parameters = (_b = filter.expression) === null || _b === void 0 ? void 0 : _b.parameters;
        filterDialog.parametersType = (_d = (_c = filter.expression) === null || _c === void 0 ? void 0 : _c.parameters[1]) === null || _d === void 0 ? void 0 : _d.type;
        filterDialog.show();
        filterListDialog.hide();
    }

    onAddHead((graphElement) => __awaiter(void 0, void 0, void 0, function* () {
        const qgApi = QueryGraphHeadApiFactory();
        const body = getQueryBody();
        let newBody = (yield qgApi.addHeadTerm(graphElement.id, body)).data;
        if (newBody)
            onNewBody(newBody);
    }));
    onDelete$1((graphElement) => __awaiter(void 0, void 0, void 0, function* () {
        const qgApi = QueryGraphBGPApiFactory();
        const body = getQueryBody();
        const selectedGraphElement = getSelectedGraphElement$1();
        const gscape = getGscape();
        let newBody = (yield qgApi.deleteGraphElementId(graphElement.id, body)).data;
        if (newBody) {
            if (newBody.graph && graphElement === selectedGraphElement) {
                // if we deleted selectedGraphElem, then select its parent
                let newSelectedGE = findGraphElement(body.graph, ge => {
                    var _a;
                    return (_a = ge.children) === null || _a === void 0 ? void 0 : _a.some(c => {
                        var _a;
                        if ((_a = c.children) === null || _a === void 0 ? void 0 : _a.find(c2 => c2.id === graphElement.id))
                            return true;
                    });
                });
                setSelectedGraphElement(newSelectedGE);
                resetHighlights();
                gscape.unselectEntity();
                focusNodeByIRI(getIri(newSelectedGE));
                highlightSuggestions(getIri(newSelectedGE));
                selectElement(newSelectedGE.id); // force selecting a new class
            }
            // empty query
            if (!newBody.graph) {
                setSelectedGraphElement(null);
                resetHighlights();
                gscape.unselectEntity();
            }
            getOriginGrapholNodes().delete(graphElement.id);
            onNewBody(newBody);
        }
    }));
    onJoin((ge1, ge2) => __awaiter(void 0, void 0, void 0, function* () {
        const qgApi = QueryGraphBGPApiFactory();
        const body = getQueryBody();
        let newBody = (yield qgApi.putQueryGraphJoin(ge1.id, ge2.id, body)).data;
        if (newBody) {
            setSelectedGraphElement(ge1);
            onNewBody(newBody);
        }
    }));
    onElementClick((graphElement, iri) => {
        const gscape = getGscape();
        if (isClass(graphElement)) {
            // if the new graphElement is different from the current selected one the select it
            if (getSelectedGraphElement$1() !== graphElement) {
                setSelectedGraphElement(graphElement);
            }
            // Highlight suggestions for the actual clicked iri (might be a child node)
            highlightSuggestions(iri);
        }
        // move ontology graph to show origin graphol node or any other iri occurrence
        const originGrapholNodeId = getOriginGrapholNodes().get(graphElement.id + iri);
        if (originGrapholNodeId) {
            focusNodeByIdAndDiagram(originGrapholNodeId);
        }
        else {
            focusNodeByIRI(iri);
        }
        gscape.widgets.ENTITY_DETAILS.setEntity(gscape.ontology.getEntityOccurrences(iri)[0]);
        // keep focus on selected class
        selectElement(getSelectedGraphElement$1().id);
    });
    onMakeOptional(graphElement => {
        const body = getQueryBody();
        let newBody = newOptionalGraphElementId(graphElement.id, body);
        if (newBody)
            onNewBody(newBody);
    });
    onRemoveOptional(graphElement => {
        const body = getQueryBody();
        let newBody = removeOptionalGraphElementId(graphElement.id, null, body);
        if (newBody)
            onNewBody(newBody);
    });
    onAddFilter$1(graphElement => {
        showFilterDialogForVariable(graphElement);
    });
    onSeeFilters(graphElement => {
        for (const headElementComponent of qhWidget.shadowRoot.querySelectorAll('head-element')) {
            if (headElementComponent.graphElementId === graphElement.id) {
                headElementComponent.focus();
                headElementComponent.showBody();
                headElementComponent.scrollIntoView({ behavior: 'smooth' });
                return;
            }
        }
        // if not in query head, show dialog
        filterListDialog.filterList = getFiltersOnVariable('?' + graphElement.id);
        filterListDialog.variable = graphElement.id;
        filterListDialog.show();
    });

    onDelete((headElement) => __awaiter(void 0, void 0, void 0, function* () {
        const qgApi = QueryGraphHeadApiFactory();
        const body = getQueryBody();
        let newBody = (yield qgApi.deleteHeadTerm(headElement.id, body)).data;
        onNewBody(newBody);
    }));
    onRename((headElement, alias) => __awaiter(void 0, void 0, void 0, function* () {
        const qgApi = QueryGraphHeadApiFactory();
        const body = getQueryBody();
        headElement.alias = alias;
        let newBody = (yield qgApi.renameHeadTerm(headElement.id, body)).data;
        onNewBody(newBody);
    }));
    onLocalize(headElement => {
        let graphElement = getGraphElementByID(headElement.graphElementId);
        centerOnElem(graphElement);
        focusNodeByIRI(getIri(graphElement));
    });
    sparqlButton.onClick = () => {
        sparqlDialog.isVisible ? sparqlDialog.hide() : sparqlDialog.show();
    };
    onAddFilter(headElement => {
        const graphElement = getGraphElementByID(headElement.graphElementId);
        showFilterDialogForVariable(graphElement);
    });
    onEditFilter((filterId) => {
        showFilterDialogEditingMode(filterId);
    });
    onDeleteFilter((filterId) => {
        deleteFilter(filterId);
    });

    startRunButtons.onSparqlingStart(() => {
        start();
        core.onStart();
    });
    startRunButtons.onSparqlingStop(() => {
        stop();
        core.onStop();
    });
    startRunButtons.onQueryRun(() => {
        var _a;
        core.onQueryRun((_a = getQueryBody()) === null || _a === void 0 ? void 0 : _a.sparql);
    });

    function sparqling(gscape, file, isStandalone$1) {
        if (file && gscape) {
            if (typeof file === 'string')
                file = new File([file], `${gscape.ontology.name}-from-string.graphol`);
            setStandalone(isStandalone$1);
            setOntologyFile(file);
            //sparqlingContainer.appendChild(gscapeContainer)
            //const gscape = await fullGrapholscape(file, gscapeContainer, { owl_translator: false })
            gscape.widgets.OWL_VISUALIZER.disable();
            setGrapholscapeInstance(gscape);
            leftColumnContainer.appendChild(highlightsList);
            leftColumnContainer.appendChild(qhWidget);
            // Add query graph and query head widgets to grapholscape instance
            const uiContainer = gscape.container.querySelector('#gscape-ui');
            uiContainer.insertBefore(widget, uiContainer.firstChild);
            uiContainer.insertBefore(leftColumnContainer, uiContainer.firstChild);
            uiContainer.appendChild(relatedClassDialog);
            uiContainer.appendChild(sparqlDialog);
            uiContainer.appendChild(filterDialog);
            uiContainer.appendChild(filterListDialog);
            gscape.container.querySelector('#gscape-ui-bottom-container').appendChild(startRunButtons);
            setDisplayedNameType(gscape.actualEntityNameType, gscape.languages.selected);
            setTheme(gscape.themesController.actualTheme);
            if (isStandalone()) {
                startRunButtons.startSparqlingButton.enabled = true;
            }
            return core;
        }
        else {
            return null;
        }
    }

    return sparqling;

})(Grapholscape);
