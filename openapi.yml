openapi: 3.0.1
info:
  title: Swagger Sparqling WS
  description: "This server will expose an API to Sparqling front end to create new\
    \ SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape)\
    \ graph. \nSparqling will be released as a standalone appication but also the\
    \ server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling\
    \ will be integrated in [Monolith](https://www.monolith.obdasystems.com/)."
  termsOfService: http://swagger.io/terms/
  contact:
    email: info@obdasystems.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:7979/sparqling/1.0.0
tags:
- name: OntologyGraph
  description: Depending on the selected node and the clicked node the ontology graph
    will change the highlightments. These results will be used essentially by GRAPHOLscape.
- name: QueryGraph
  description: Depending on the selected node and the clicked node the server will
    compute the query graph which will be rendered by Sparqling front end. These result
    will be used to render the query graph and the query head and the SPARQL code.
- name: Standalone
  description: These routes will be used only for the standalone application.
paths:
  /ontology/{ontologyName}/highlights:
    get:
      tags:
      - OntologyGraph
      summary: Get the IRIs of the ontology entities "related" to the clicked and
        selected.
      operationId: highligths
      parameters:
      - name: ontologyName
        in: path
        description: The ontology name (useful for monolith multi ontology). For standalone
          we should use a dummy name.
        required: true
        schema:
          type: string
      - name: ontologyVersion
        in: query
        description: The IRI which describe ontology version (useful for monolith
          multi ontology). For standalone we should use a dummy version.
        required: true
        schema:
          type: string
      - name: clickedClassIRI
        in: query
        description: The IRI of the class just clicked on the GRAPHOLscape ontology
          graph
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Highlights'
        400:
          description: Invalid IRI supplied
          content: {}
        404:
          description: Entity not found
          content: {}
  /ontology/{ontologyName}/highlights/paths:
    get:
      tags:
      - OntologyGraph
      summary: Find path between selected class and clicked class. Should be based
        on Dijkstra algorithm for shortest paths. ISA wieght is 0 while role weight
        is 1.
      operationId: highligthsPaths
      parameters:
      - name: ontologyName
        in: path
        description: The ontology name (useful for monolith multi ontology). For standalone
          we should use a dummy name.
        required: true
        schema:
          type: string
      - name: ontologyVersion
        in: query
        description: The IRI which describe ontology version (useful for monolith
          multi ontology). For standalone we should use a dummy version.
        required: true
        schema:
          type: string
      - name: lastSelectedIRI
        in: query
        description: The IRI of the entity clicked on the GRAPHOLscape ontology graph
        required: true
        schema:
          type: string
      - name: clickedIRI
        in: query
        description: The IRI of the entity clicked on the GRAPHOLscape ontology graph
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paths'
        400:
          description: Invalid IRI supplied
          content: {}
        404:
          description: Entity not found
          content: {}
  /ontology/{ontologyName}/queryGraph/node:
    get:
      tags:
      - QueryGraph
      summary: Starting from only the clicked class get the query graph that will
        be rendered by Sparqling, the query head, the sparql code.
      operationId: getQueryGraph
      parameters:
      - name: ontologyName
        in: path
        description: The ontology name (useful for monolith multi ontology). For standalone
          we should use a dummy name.
        required: true
        schema:
          type: string
      - name: ontologyVersion
        in: query
        description: The IRI which describe ontology version (useful for monolith
          multi ontology). For standalone we should use a dummy version.
        required: true
        schema:
          type: string
      - name: clickedClassIRI
        in: query
        description: The IRI of the entity clicked on the GRAPHOLscape ontology graph
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        400:
          description: Invalid IRI supplied
          content: {}
        404:
          description: Entity not found
          content: {}
    put:
      tags:
      - QueryGraph
      summary: Starting from the actual query graph get the query graph that will
        be rendered by Sparqling, the query head, the sparql code.
      operationId: putQueryGraph
      parameters:
      - name: ontologyName
        in: path
        description: The ontology name (useful for monolith multi ontology). For standalone
          we should use a dummy name.
        required: true
        schema:
          type: string
      - name: ontologyVersion
        in: query
        description: The IRI which describe ontology version (useful for monolith
          multi ontology). For standalone we should use a dummy version.
        required: true
        schema:
          type: string
      - name: clickedClassIRI
        in: query
        description: The IRI of the entity clicked on the GRAPHOLscape ontology graph
        required: true
        schema:
          type: string
      - name: lastSelectedClassIRI
        in: query
        description: The IRI of the last selected entity. It could be selected from
          the ontology graph or from the query graph
        required: true
        schema:
          type: string
      - name: isCyclicObjectPropertyDirect
        in: query
        description: In the case of cyclic object property specify the direction.
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        400:
          description: Invalid IRI supplied
          content: {}
        404:
          description: Entity not found
          content: {}
      x-codegen-request-body-name: actualQueryGraph
  /ontology/{ontologyName}/queryGraph/node/{graphNodeId}:
    delete:
      tags:
      - QueryGraph
      summary: Delete the GraphNode (and all its children) from the query graph and
        head.
      operationId: deleteGraphNodeId
      parameters:
      - name: ontologyName
        in: path
        description: The ontology name (useful for monolith multi ontology). For standalone
          we should use a dummy name.
        required: true
        schema:
          type: string
      - name: graphNodeId
        in: path
        description: The GraphNode that should be delete
        required: true
        schema:
          type: string
      - name: ontologyVersion
        in: query
        description: The IRI which describe ontology version (useful for monolith
          multi ontology). For standalone we should use a dummy version.
        required: true
        schema:
          type: string
      - name: actualGraph
        in: query
        schema:
          $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        404:
          description: GraphNode not found
          content: {}
      x-codegen-request-body-name: actualQueryGraph
  /ontology/{ontologyName}/queryGraph/head/add/{graphNodeId}:
    put:
      tags:
      - QueryGraph
      summary: Add the head term to the query graph.
      operationId: addHeadTerm
      parameters:
      - name: ontologyName
        in: path
        description: The ontology name (useful for monolith multi ontology). For standalone
          we should use a dummy name.
        required: true
        schema:
          type: string
      - name: ontologyVersion
        in: query
        description: The IRI which describe ontology version (useful for monolith
          multi ontology). For standalone we should use a dummy version.
        required: true
        schema:
          type: string
      - name: graphNodeId
        in: path
        description: The id of the graph node that should be added to the head
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        404:
          description: Graph Node not found
          content: {}
      x-codegen-request-body-name: actualQueryGraph
  /ontology/{ontologyName}/queryGraph/head/{headTerm}:
    delete:
      tags:
      - QueryGraph
      summary: Delete the head term from the query graph.
      operationId: deleteHeadTerm
      parameters:
      - name: ontologyName
        in: path
        description: The ontology name (useful for monolith multi ontology). For standalone
          we should use a dummy name.
        required: true
        schema:
          type: string
      - name: headTerm
        in: path
        description: The head term that should be delete
        required: true
        schema:
          type: string
      - name: ontologyVersion
        in: query
        description: The IRI which describe ontology version (useful for monolith
          multi ontology). For standalone we should use a dummy version.
        required: true
        schema:
          type: string
      - name: clickedIRI
        in: query
        description: The IRI of the entity clicked on the GRAPHOLscape ontology graph
        required: true
        schema:
          type: string
      - name: lastSelectedIRI
        in: query
        description: The IRI of the last selected entity. It could be selected from
          the ontology graph or from the query graph
        required: true
        schema:
          type: string
      - name: actualQuery
        in: query
        schema:
          $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        404:
          description: Head term not found
          content: {}
      x-codegen-request-body-name: actualQueryGraph
  /ontology/{ontologyName}/queryGraph/filter:
    put:
      tags:
      - QueryGraph
      summary: Modify filter(s) conditions in the query graph. The only thing which
        is modified in the returned object is the sparql query.
      operationId: modifyFilters
      parameters:
      - name: ontologyName
        in: path
        description: The ontology name (useful for monolith multi ontology). For standalone
          we should use a dummy name.
        required: true
        schema:
          type: string
      - name: ontologyVersion
        in: query
        description: The IRI which describe ontology version (useful for monolith
          multi ontology). For standalone we should use a dummy version.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
      x-codegen-request-body-name: actualQueryGraph
  /ontology/{ontologyName}/queryGraph/path:
    put:
      tags:
      - QueryGraph
      summary: Get the query graph that will be rendered by Sparqling, the query head,
        the sparql code based on the chosen path.
      operationId: addPathToQueryGraph
      parameters:
      - name: ontologyName
        in: path
        description: The ontology name (useful for monolith multi ontology). For standalone
          we should use a dummy name.
        required: true
        schema:
          type: string
      - name: ontologyVersion
        in: query
        description: The IRI which describe ontology version (useful for monolith
          multi ontology). For standalone we should use a dummy version.
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: Serialization of Path object.
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        400:
          description: Invalid IRI supplied
          content: {}
        404:
          description: Entity not found
          content: {}
      x-codegen-request-body-name: actualQueryGraph
  /standalone/ontology/upload:
    post:
      tags:
      - Standalone
      summary: Uploads a .graphol or .owl file. This will be used only by standalone
        Sparqling.
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                upfile:
                  type: string
                  description: The file to upload.
                  format: binary
      responses:
        200:
          description: successful operation
          content: {}
  /standalone/ontology/graphol:
    get:
      tags:
      - Standalone
      summary: Return the graphol file as a string to be parsed by GRAPHOLscape.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        404:
          description: Ontology not uploaded
          content: {}
components:
  schemas:
    Highlights:
      type: object
      properties:
        classes:
          type: array
          description: Subclasses or brother classes
          items:
            type: string
        objectProperties:
          type: array
          items:
            $ref: '#/components/schemas/Branch'
        dataProperties:
          type: array
          items:
            type: string
    Branch:
      type: object
      properties:
        objectPropertyIRI:
          type: string
        cyclic:
          type: boolean
          description: It is true when domain and range are the same class.
        relatedClasses:
          type: array
          items:
            type: string
    Paths:
      type: array
      items:
        $ref: '#/components/schemas/Path'
    Path:
      type: object
      properties:
        entities:
          type: array
          description: Starts with lastSelectedIRI and ends with clickedIRI. In between
            the nodes and edges traversed in the path (ISA edge are marked as ISA)
          items:
            type: string
    QueryGraph:
      required:
      - graph
      - head
      - sparql
      type: object
      properties:
        head:
          type: array
          items:
            type: string
        graph:
          $ref: '#/components/schemas/GraphNode'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        sparql:
          type: string
    GraphNode:
      type: object
      properties:
        id:
          type: integer
        entity:
          $ref: '#/components/schemas/Entity'
        children:
          type: array
          items:
            $ref: '#/components/schemas/GraphNode'
    Entity:
      type: object
      properties:
        type:
          type: string
          enum:
          - class
          - objectProperty
          - dataProperty
        iri:
          type: string
        prefixedIri:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
    Filter:
      type: object
      properties:
        expression:
          $ref: '#/components/schemas/BinaryExpression'
    BinaryExpression:
      type: object
      properties:
        operator:
          type: string
        leftOperand:
          type: string
          description: Could be a value or a GraphNode id
        rightOperand:
          type: string
          description: Could be a value or a GraphNode id
